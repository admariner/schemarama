var schemarama;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 84007:
/***/ ((module) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var InvalidDataError = /*#__PURE__*/function (_Error) {
  _inherits(InvalidDataError, _Error);

  var _super = _createSuper(InvalidDataError);

  function InvalidDataError(message) {
    var _this;

    _classCallCheck(this, InvalidDataError);

    _this = _super.call(this, message);
    _this.name = "InvalidDataError";
    return _this;
  }

  return InvalidDataError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var ShexValidationError = /*#__PURE__*/function (_Error2) {
  _inherits(ShexValidationError, _Error2);

  var _super2 = _createSuper(ShexValidationError);

  function ShexValidationError(message) {
    var _this2;

    _classCallCheck(this, ShexValidationError);

    _this2 = _super2.call(this, message);
    _this2.name = "ShexValidationError";
    return _this2;
  }

  return ShexValidationError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

module.exports = {
  InvalidDataError: InvalidDataError,
  ShexValidationError: ShexValidationError
};

/***/ }),

/***/ 93497:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module.exports = {
  ShexValidator: (__webpack_require__(53081).Validator),
  ShaclValidator: (__webpack_require__(80396).Validator),
  stringToQuads: (__webpack_require__(25258).stringToQuads),
  parseJsonLd: (__webpack_require__(25258).parseJsonLd),
  parseMicrodata: (__webpack_require__(25258).parseMicrodata),
  parseRdfa: (__webpack_require__(25258).parseRdfa),
  parseNQuads: (__webpack_require__(25258).parseNQuads),
  randomUrl: (__webpack_require__(87709).randomUrl),
  quadsToShapes: (__webpack_require__(87709).quadsToShapes)
};

/***/ }),

/***/ 73728:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataFactory = __webpack_require__(99548);

module.exports = DataFactory;

/***/ }),

/***/ 69928:
/***/ ((module) => {

function BlankNode(id) {
  this.value = id || 'b' + ++BlankNode.nextId;
}

BlankNode.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value;
};

BlankNode.prototype.termType = 'BlankNode';
BlankNode.nextId = 0;
module.exports = BlankNode;

/***/ }),

/***/ 99548:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var BlankNode = __webpack_require__(69928);

var DefaultGraph = __webpack_require__(62049);

var Literal = __webpack_require__(1562);

var NamedNode = __webpack_require__(79719);

var Quad = __webpack_require__(30778);

var Variable = __webpack_require__(95284);

function DataFactory() {}

DataFactory.namedNode = function (value) {
  return new NamedNode(value);
};

DataFactory.blankNode = function (value) {
  return new BlankNode(value);
};

DataFactory.literal = function (value, languageOrDatatype) {
  if (typeof languageOrDatatype === 'string') {
    if (languageOrDatatype.indexOf(':') === -1) {
      return new Literal(value, languageOrDatatype);
    }

    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype));
  }

  return new Literal(value, null, languageOrDatatype);
};

DataFactory.defaultGraph = function () {
  return DataFactory.defaultGraphInstance;
};

DataFactory.variable = function (value) {
  return new Variable(value);
};

DataFactory.triple = function (subject, predicate, object) {
  return DataFactory.quad(subject, predicate, object);
};

DataFactory.quad = function (subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance);
};

DataFactory.defaultGraphInstance = new DefaultGraph();
module.exports = DataFactory;

/***/ }),

/***/ 62049:
/***/ ((module) => {

function DefaultGraph() {
  this.value = '';
}

DefaultGraph.prototype.equals = function (other) {
  return !!other && other.termType === this.termType;
};

DefaultGraph.prototype.termType = 'DefaultGraph';
module.exports = DefaultGraph;

/***/ }),

/***/ 1562:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NamedNode = __webpack_require__(79719);

function Literal(value, language, datatype) {
  this.value = value;
  this.datatype = Literal.stringDatatype;
  this.language = '';

  if (language) {
    this.language = language;
    this.datatype = Literal.langStringDatatype;
  } else if (datatype) {
    this.datatype = datatype;
  }
}

Literal.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value && other.language === this.language && other.datatype.equals(this.datatype);
};

Literal.prototype.termType = 'Literal';
Literal.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');
Literal.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string');
module.exports = Literal;

/***/ }),

/***/ 79719:
/***/ ((module) => {

function NamedNode(iri) {
  this.value = iri;
}

NamedNode.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value;
};

NamedNode.prototype.termType = 'NamedNode';
module.exports = NamedNode;

/***/ }),

/***/ 30778:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DefaultGraph = __webpack_require__(62049);

function Quad(subject, predicate, object, graph) {
  this.subject = subject;
  this.predicate = predicate;
  this.object = object;

  if (graph) {
    this.graph = graph;
  } else {
    this.graph = new DefaultGraph();
  }
}

Quad.prototype.equals = function (other) {
  // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.
  return !!other && (other.termType === 'Quad' || !other.termType) && other.subject.equals(this.subject) && other.predicate.equals(this.predicate) && other.object.equals(this.object) && other.graph.equals(this.graph);
};

Quad.prototype.termType = 'Quad';
Quad.prototype.value = '';
module.exports = Quad;

/***/ }),

/***/ 95284:
/***/ ((module) => {

function Variable(name) {
  this.value = name;
}

Variable.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value;
};

Variable.prototype.termType = 'Variable';
module.exports = Variable;

/***/ }),

/***/ 80625:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var isMatch = __webpack_require__(40110);

var DatasetCore = /*#__PURE__*/function () {
  function DatasetCore(quads) {
    _classCallCheck(this, DatasetCore);

    this.quads = new Set();

    if (quads) {
      var _iterator = _createForOfIteratorHelper(quads),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var quad = _step.value;
          this.quads.add(quad);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }

  _createClass(DatasetCore, [{
    key: "add",
    value: function add(quad) {
      if (!this.has(quad)) {
        this.quads.add(quad);
      }

      return this;
    }
  }, {
    key: "delete",
    value: function _delete(quad) {
      var _iterator2 = _createForOfIteratorHelper(this),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var localQuad = _step2.value;

          if (isMatch(quad, localQuad.subject, localQuad.predicate, localQuad.object, localQuad.graph)) {
            this.quads["delete"](localQuad);
            return this;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return this;
    }
  }, {
    key: "has",
    value: function has(quad) {
      var _iterator3 = _createForOfIteratorHelper(this),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var other = _step3.value;

          if (isMatch(other, quad.subject, quad.predicate, quad.object, quad.graph)) {
            return true;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return false;
    }
  }, {
    key: "match",
    value: function match(subject, predicate, object, graph) {
      var matches = new Set();

      var _iterator4 = _createForOfIteratorHelper(this),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var quad = _step4.value;

          if (isMatch(quad, subject, predicate, object, graph)) {
            matches.add(quad);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return new this.constructor(matches);
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return this.quads[Symbol.iterator]();
    }
  }, {
    key: "size",
    get: function get() {
      return this.quads.size;
    }
  }]);

  return DatasetCore;
}();

module.exports = DatasetCore;

/***/ }),

/***/ 69608:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rdf = __webpack_require__(73728);

var DatasetCore = __webpack_require__(80625);

function dataset(quads) {
  return new DatasetCore(quads);
}

module.exports = Object.assign({
  dataset: dataset
}, rdf);

/***/ }),

/***/ 40110:
/***/ ((module) => {

function isMatch(quad, subject, predicate, object, graph) {
  if (subject && !quad.subject.equals(subject)) {
    return false;
  }

  if (predicate && !quad.predicate.equals(predicate)) {
    return false;
  }

  if (object && !quad.object.equals(object)) {
    return false;
  }

  if (graph && !quad.graph.equals(graph)) {
    return false;
  }

  return true;
}

module.exports = isMatch;

/***/ }),

/***/ 2325:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rdf = __webpack_require__(73728);

var handler = {
  apply: function apply(target, thisArg, args) {
    return target(args[0]);
  },
  get: function get(target, property) {
    return target(property);
  }
};

function namespace(baseIRI) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$factory = _ref.factory,
      factory = _ref$factory === void 0 ? rdf : _ref$factory;

  var builder = function builder() {
    var term = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return factory.namedNode("".concat(baseIRI).concat(term.raw || term));
  };

  return typeof Proxy === 'undefined' ? builder : new Proxy(builder, handler);
}

module.exports = namespace;

/***/ }),

/***/ 80456:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(84776),
    termToNTriples = _require.termToNTriples;

var TermSet = /*#__PURE__*/function () {
  function TermSet(terms) {
    _classCallCheck(this, TermSet);

    this.index = new Map();

    if (terms) {
      var _iterator = _createForOfIteratorHelper(terms),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var term = _step.value;
          this.add(term);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }

  _createClass(TermSet, [{
    key: "add",
    value: function add(term) {
      var key = termToNTriples(term);

      if (this.index.has(key)) {
        return this;
      }

      this.index.set(key, term);
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.index.clear();
    }
  }, {
    key: "delete",
    value: function _delete(term) {
      return this.index["delete"](termToNTriples(term));
    }
  }, {
    key: "entries",
    value: function entries() {
      return this.values().entries();
    }
  }, {
    key: "forEach",
    value: function forEach(callbackfn, thisArg) {
      return this.values().forEach(callbackfn, thisArg);
    }
  }, {
    key: "has",
    value: function has(term) {
      return this.index.has(termToNTriples(term));
    }
  }, {
    key: "values",
    value: function values() {
      return new Set(this.index.values());
    }
  }, {
    key: "keys",
    value: function keys() {
      return this.values();
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return this.values()[Symbol.iterator]();
    }
  }, {
    key: "size",
    get: function get() {
      return this.index.size;
    }
  }]);

  return TermSet;
}();

module.exports = TermSet;

/***/ }),

/***/ 84776:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var quad = __webpack_require__(85446);

var term = __webpack_require__(85857);

module.exports = {
  quadToNTriples: quad,
  termToNTriples: term
};

/***/ }),

/***/ 52014:
/***/ ((module) => {

function blankNode(blankNode) {
  return '_:' + blankNode.value; // TODO: escape special chars
}

module.exports = blankNode;

/***/ }),

/***/ 91056:
/***/ ((module) => {

function defaultGraph(defaultGraph) {
  return '';
}

module.exports = defaultGraph;

/***/ }),

/***/ 86699:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var namedNode = __webpack_require__(72310);

var echarRegEx = new RegExp('["\\\\\n\r]'); // eslint-disable-line no-control-regex

var echarRegExAll = new RegExp('["\\\\\n\r]', 'g'); // eslint-disable-line no-control-regex

var echarReplacement = {
  '"': '\\"',
  '\\': '\\\\',
  '\n': '\\n',
  '\r': '\\r'
};

function echarReplacer(_char) {
  return echarReplacement[_char];
}

function escapeValue(value) {
  if (echarRegEx.test(value)) {
    return value.replace(echarRegExAll, echarReplacer);
  }

  return value;
}

function literal(literal) {
  var escapedValue = escapeValue(literal.value);

  if (literal.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {
    return '"' + escapedValue + '"';
  }

  if (literal.datatype.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString') {
    return '"' + escapedValue + '"@' + literal.language;
  }

  return '"' + escapedValue + '"^^' + namedNode(literal.datatype);
}

module.exports = literal;

/***/ }),

/***/ 72310:
/***/ ((module) => {

function namedNode(namedNode) {
  return '<' + namedNode.value + '>'; // TODO: escape special chars
}

module.exports = namedNode;

/***/ }),

/***/ 85446:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var term = __webpack_require__(85857);

function quad(quad) {
  var subjectString = term(quad.subject);
  var predicateString = term(quad.predicate);
  var objectString = term(quad.object);
  var graphString = term(quad.graph);
  return "".concat(subjectString, " ").concat(predicateString, " ").concat(objectString, " ").concat(graphString ? graphString + ' ' : '', ".");
}

module.exports = quad;

/***/ }),

/***/ 85857:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var blankNode = __webpack_require__(52014);

var defaultGraph = __webpack_require__(91056);

var literal = __webpack_require__(86699);

var namedNode = __webpack_require__(72310);

var variable = __webpack_require__(44919);

function term(term) {
  switch (term.termType) {
    case 'BlankNode':
      return blankNode(term);

    case 'DefaultGraph':
      return defaultGraph(term);

    case 'Literal':
      return literal(term);

    case 'NamedNode':
      return namedNode(term);

    case 'Variable':
      return variable(term);

    default:
      return undefined;
  }
}

module.exports = term;

/***/ }),

/***/ 44919:
/***/ ((module) => {

function variable(variable) {
  return '?' + variable.value; // TODO: escape special chars
}

module.exports = variable;

/***/ }),

/***/ 72461:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var EvalThreadedNErrCjsModule = function () {
  var ShExTerm = __webpack_require__(24102);

  var UNBOUNDED = -1;

  function vpEngine(schema, shape, index) {
    var outerExpression = shape.expression;
    return {
      match: match
    };

    function match(graph, node, constraintList, constraintToTripleMapping, tripleToConstraintMapping, neighborhood, semActHandler, trace) {
      /*
       * returns: list of passing or failing threads (no heterogeneous lists)
       */
      function validateExpr(expr, thread) {
        if (typeof expr === "string") {
          // Inclusion
          var included = index.tripleExprs[expr];
          return validateExpr(included, thread);
        }

        var constraintNo = constraintList.indexOf(expr);
        var min = "min" in expr ? expr.min : 1;
        var max = "max" in expr ? expr.max === UNBOUNDED ? Infinity : expr.max : 1;

        function validateRept(type, val) {
          var repeated = 0,
              errOut = false;
          var newThreads = [thread];
          var minmax = {};

          if ("min" in expr && expr.min !== 1 || "max" in expr && expr.max !== 1) {
            minmax.min = expr.min;
            minmax.max = expr.max;
          }

          if ("semActs" in expr) minmax.semActs = expr.semActs;
          if ("annotations" in expr) minmax.annotations = expr.annotations;

          for (; repeated < max && !errOut; ++repeated) {
            var inner = [];

            var _loop = function _loop(t) {
              var newt = newThreads[t];
              var sub = val(newt);

              if (sub.length > 0 && sub[0].errors.length === 0) {
                // all subs pass or all fail
                sub.forEach(function (newThread) {
                  var solutions = "expression" in newt ? newt.expression.solutions.slice() : [];
                  if ("solution" in newThread) solutions.push(newThread.solution);
                  delete newThread.solution;
                  newThread.expression = extend({
                    type: type,
                    solutions: solutions
                  }, minmax);
                });
              }

              if (sub.length === 0
              /* min:0 */
              || sub[0].errors.length > 0) return {
                v: repeated < min ? sub : newThreads
              };else inner = inner.concat(sub); // newThreads.expressions.push(sub);
            };

            for (var t = 0; t < newThreads.length; ++t) {
              var _ret = _loop(t);

              if (_typeof(_ret) === "object") return _ret.v;
            }

            newThreads = inner;
          }

          if (newThreads.length > 0 && newThreads[0].errors.length === 0 && "semActs" in expr) {
            var passes = [];
            var failures = [];
            newThreads.forEach(function (newThread) {
              var semActErrors = semActHandler.dispatchAll(expr.semActs, "???", newThread);

              if (semActErrors.length === 0) {
                passes.push(newThread);
              } else {
                [].push.apply(newThread.errors, semActErrors);
                failures.push(newThread);
              }
            });
            newThreads = passes.length > 0 ? passes : failures;
          }

          return newThreads;
        }

        if (expr.type === "TripleConstraint") {
          var _ret2 = function () {
            var negated = "negated" in expr && expr.negated || max === 0;
            if (negated) min = max = Infinity;
            if (thread.avail[constraintNo] === undefined) thread.avail[constraintNo] = constraintToTripleMapping[constraintNo].map(function (pair) {
              return pair.tNo;
            });
            var minmax = {};

            if ("min" in expr && expr.min !== 1 || "max" in expr && expr.max !== 1) {
              minmax.min = expr.min;
              minmax.max = expr.max;
            }

            if ("semActs" in expr) minmax.semActs = expr.semActs;
            if ("annotations" in expr) minmax.annotations = expr.annotations;
            var taken = thread.avail[constraintNo].splice(0, min);
            var passed = negated ? taken.length === 0 : taken.length >= min;
            var ret = [];
            var matched = thread.matched;

            if (passed) {
              var _loop2 = function _loop2() {
                var passFail = taken.reduce(function (acc, tripleNo) {
                  var t = neighborhood[tripleNo];
                  var tested = {
                    type: "TestedTriple",
                    subject: t.subject,
                    predicate: t.predicate,
                    object: ldify(t.object)
                  };
                  var hit = constraintToTripleMapping[constraintNo].find(function (x) {
                    return x.tNo === tripleNo;
                  });
                  if (hit.res && Object.keys(hit.res).length > 0) tested.referenced = hit.res;
                  var semActErrors = thread.errors.concat("semActs" in expr ? semActHandler.dispatchAll(expr.semActs, tested, tested) : []);
                  if (semActErrors.length > 0) acc.fail.push({
                    tripleNo: tripleNo,
                    tested: tested,
                    semActErrors: semActErrors
                  });else acc.pass.push({
                    tripleNo: tripleNo,
                    tested: tested,
                    semActErrors: semActErrors
                  });
                  return acc;
                }, {
                  pass: [],
                  fail: []
                }); // return an empty solution if min card was 0

                if (passFail.fail.length === 0) {
                  // If we didn't take anything, fall back to old errors.
                  // Could do something fancy here with a semAct registration for negative matches.
                  var totalErrors = taken.length === 0 ? thread.errors.slice() : [];
                  var myThread = makeThread(passFail.pass, totalErrors);
                  ret.push(myThread);
                } else {
                  passFail.fail.forEach(function (f) {
                    return ret.push(makeThread([f], f.semActErrors));
                  });
                }

                function makeThread(tests, errors) {
                  return {
                    avail: thread.avail.map(function (a) {
                      // copy parent thread's avail vector
                      return a.slice();
                    }),
                    errors: errors,
                    matched: matched.concat({
                      tNos: tests.map(function (p) {
                        return p.tripleNo;
                      })
                    }),
                    expression: extend({
                      type: "TripleConstraintSolutions",
                      predicate: expr.predicate
                    }, "valueExpr" in expr ? {
                      valueExpr: expr.valueExpr
                    } : {}, "id" in expr ? {
                      productionLabel: expr.id
                    } : {}, minmax, {
                      solutions: tests.map(function (p) {
                        return p.tested;
                      })
                    })
                  };
                }
              };

              do {
                _loop2();
              } while (function () {
                if (thread.avail[constraintNo].length > 0 && taken.length < max) {
                  // build another thread.
                  taken.push(thread.avail[constraintNo].shift());
                  return true;
                } else {
                  // no more threads
                  return false;
                }
              }());
            } else {
              var valueExpr = null;

              if (typeof expr.valueExpr === "string") {
                // ShapeRef
                valueExpr = expr.valueExpr;
                if (ShExTerm.isBlank(valueExpr)) valueExpr = index.shapeExprs[valueExpr];
              } else if (expr.valueExpr) {
                valueExpr = extend({}, expr.valueExpr);
              }

              ret.push({
                avail: thread.avail,
                errors: thread.errors.concat([extend({
                  type: negated ? "NegatedProperty" : "MissingProperty",
                  property: expr.predicate
                }, valueExpr ? {
                  valueExpr: valueExpr
                } : {})]),
                matched: matched
              });
            }

            return {
              v: ret
            };
          }();

          if (_typeof(_ret2) === "object") return _ret2.v;
        } else if (expr.type === "OneOf") {
          return validateRept("OneOfSolutions", function (th) {
            // const accept = null;
            var matched = [];
            var failed = [];
            expr.expressions.forEach(function (nested) {
              var thcopy = {
                avail: th.avail.map(function (a) {
                  return a.slice();
                }),
                errors: th.errors,
                matched: th.matched //.slice() ever needed??

              };
              var sub = validateExpr(nested, thcopy);

              if (sub[0].errors.length === 0) {
                // all subs pass or all fail
                [].push.apply(matched, sub);
                sub.forEach(function (newThread) {
                  var expressions = "solution" in thcopy ? thcopy.solution.expressions : [];
                  if ("expression" in newThread) // undefined for no matches on min card:0
                    expressions.push(newThread.expression);
                  delete newThread.expression;
                  newThread.solution = {
                    type: "OneOfSolution",
                    expressions: expressions
                  };
                });
              } else [].push.apply(failed, sub);
            });
            return matched.length > 0 ? matched : failed;
          });
        } else if (expr.type === "EachOf") {
          return homogenize(validateRept("EachOfSolutions", function (th) {
            // Iterate through nested expressions, exprThreads starts as [th].
            return expr.expressions.reduce(function (exprThreads, nested) {
              // Iterate through current thread list composing nextThreads.
              // Consider e.g.
              // <S1> { <p1> . | <p2> .; <p3> . } / { <x> <p2> 2; <p3> 3 } (should pass)
              // <S1> { <p1> .; <p2> . }          / { <s1> <p1> 1 }        (should fail)
              return homogenize(exprThreads.reduce(function (nextThreads, exprThread) {
                var sub = validateExpr(nested, exprThread); // Move newThread.expression into a hierarchical solution structure.

                sub.forEach(function (newThread) {
                  if (newThread.errors.length === 0) {
                    var expressions = "solution" in exprThread ? exprThread.solution.expressions.slice() : [];
                    if ("expression" in newThread) // undefined for no matches on min card:0
                      expressions.push(newThread.expression);
                    delete newThread.expression;
                    newThread.solution = {
                      type: "EachOfSolution",
                      expressions: expressions // exprThread.expression + newThread.expression

                    };
                  }
                });
                return nextThreads.concat(sub);
              }, []));
            }, [th]);
          }));
        }

        runtimeError("unexpected expr type: " + expr.type);

        function homogenize(list) {
          return list.reduce(function (acc, elt) {
            if (elt.errors.length === 0) {
              if (acc.errors) {
                return {
                  errors: false,
                  l: [elt]
                };
              } else {
                return {
                  errors: false,
                  l: acc.l.concat(elt)
                };
              }
            } else {
              if (acc.errors) {
                return {
                  errors: true,
                  l: acc.l.concat(elt)
                };
              } else {
                return acc;
              }
            }
          }, {
            errors: true,
            l: []
          }).l;
        }
      }

      var startingThread = {
        avail: [],
        // triples remaining by constraint number
        matched: [],
        // triples matched in this thread
        errors: [] // errors encounted

      };
      if (!outerExpression) return {}; // vapid match if no expression

      var ret = validateExpr(outerExpression, startingThread); // console.log(JSON.stringify(ret));
      // note: don't return if ret.length === 1 because it might fail the unmatchedTriples test.

      var longerChosen = ret.reduce(function (ret, elt) {
        if (elt.errors.length > 0) return ret; // early return

        var unmatchedTriples = {}; // Collect triples assigned to some constraint.

        Object.keys(tripleToConstraintMapping).forEach(function (k) {
          if (tripleToConstraintMapping[k] !== "NO_TRIPLE_CONSTRAINT") unmatchedTriples[k] = tripleToConstraintMapping[k];
        }); // Removed triples matched in this thread.

        elt.matched.forEach(function (m) {
          m.tNos.forEach(function (t) {
            delete unmatchedTriples[t];
          });
        }); // Remaining triples are unaccounted for.

        Object.keys(unmatchedTriples).forEach(function (t) {
          elt.errors.push({
            type: "ExcessTripleViolation",
            triple: neighborhood[t],
            constraint: constraintList[unmatchedTriples[t]]
          });
        });
        return ret !== null ? ret : // keep first solution
        // Accept thread with no unmatched triples.
        Object.keys(unmatchedTriples).length > 0 ? null : elt;
      }, null);
      return longerChosen !== null ? finish(longerChosen.expression, constraintList, neighborhood, semActHandler) : ret.length > 1 ? {
        type: "PossibleErrors",
        errors: ret.reduce(function (all, e) {
          return all.concat([e.errors]);
        }, [])
      } : ret[0];
    }

    function ldify(term) {
      if (term[0] !== "\"") return term;
      var ret = {
        value: ShExTerm.getLiteralValue(term)
      };
      var dt = ShExTerm.getLiteralType(term);
      if (dt && dt !== "http://www.w3.org/2001/XMLSchema#string" && dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") ret.type = dt;
      var lang = ShExTerm.getLiteralLanguage(term);
      if (lang) ret.language = lang;
      return ret;
    }

    function finish(fromValidatePoint, constraintList, neighborhood, semActHandler) {
      function _dive(solns) {
        if (solns.type === "OneOfSolutions" || solns.type === "EachOfSolutions") {
          solns.solutions.forEach(function (s) {
            s.expressions.forEach(function (e) {
              _dive(e);
            });
          });
        } else if (solns.type === "TripleConstraintSolutions") {
          solns.solutions = solns.solutions.map(function (x) {
            if (x.type === "TestedTriple") // already done
              return x; // c.f. validation/3circularRef1_pass-open

            var t = neighborhood[x.tripleNo];
            var expr = constraintList[x.constraintNo];
            var ret = {
              type: "TestedTriple",
              subject: t.subject,
              predicate: t.predicate,
              object: ldify(t.object)
            };

            function diver(focus, shapeLabel, dive) {
              var sub = dive(focus, shapeLabel);

              if ("errors" in sub) {
                // console.dir(sub);
                var err = {
                  type: "ReferenceError",
                  focus: focus,
                  shape: shapeLabel
                };
                if (typeof shapeLabel === "string" && ShExTerm.isBlank(shapeLabel)) err.referencedShape = shape;
                err.errors = sub;
                return [err];
              }

              if (("solution" in sub || "solutions" in sub) && Object.keys(sub.solution || sub.solutions).length !== 0 || sub.type === "Recursion") ret.referenced = sub; // !!! needs to aggregate errors and solutions

              return [];
            }

            function diveRecurse(focus, shapeLabel) {
              return diver(focus, shapeLabel, recurse);
            }

            function diveDirect(focus, shapeLabel) {
              return diver(focus, shapeLabel, direct);
            }

            var subErrors = "valueExpr" in expr ? checkValueExpr(expr.inverse ? t.subject : t.object, expr.valueExpr, diveRecurse, diveDirect) : [];
            if (subErrors.length === 0 && "semActs" in expr) [].push.apply(subErrors, semActHandler.dispatchAll(expr.semActs, ret, ret));

            if (subErrors.length > 0) {
              fromValidatePoint.errors = fromValidatePoint.errors || [];
              fromValidatePoint.errors = fromValidatePoint.errors.concat(subErrors);
            }

            return ret;
          });
        } else {
          throw Error("unexpected expr type in " + JSON.stringify(solns));
        }
      }

      if (Object.keys(fromValidatePoint).length > 0) // guard against {}
        _dive(fromValidatePoint);
      if ("semActs" in shape) fromValidatePoint.semActs = shape.semActs;
      return fromValidatePoint;
    }
  }

  function ldify(term) {
    if (term[0] !== "\"") return term;
    var ret = {
      value: N3Util.getLiteralValue(term)
    };
    var dt = N3Util.getLiteralType(term);
    if (dt && dt !== "http://www.w3.org/2001/XMLSchema#string" && dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") ret.type = dt;
    var lang = N3Util.getLiteralLanguage(term);
    if (lang) ret.language = lang;
    return ret;
  }

  function extend(base) {
    if (!base) base = {};

    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {
      for (var name in arg) {
        base[name] = arg[name];
      }
    }

    return base;
  }

  return {
    name: "eval-threaded-nerr",
    description: "emulation of regular expression engine with error permutations",
    compile: vpEngine
  };
}();

if (true) module.exports = EvalThreadedNErrCjsModule;

/***/ }),

/***/ 66569:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* parser generated by jison 0.0.9 */

/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

/*
  ShEx parser in the Jison parser generator format.
*/
var UNBOUNDED = -1;

var ShExUtil = __webpack_require__(68779); // Common namespaces and entities


var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_TYPE = RDF + 'type',
    RDF_FIRST = RDF + 'first',
    RDF_REST = RDF + 'rest',
    RDF_NIL = RDF + 'nil',
    XSD = 'http://www.w3.org/2001/XMLSchema#',
    XSD_INTEGER = XSD + 'integer',
    XSD_DECIMAL = XSD + 'decimal',
    XSD_FLOAT = XSD + 'float',
    XSD_DOUBLE = XSD + 'double',
    XSD_BOOLEAN = XSD + 'boolean',
    XSD_TRUE = '"true"^^' + XSD_BOOLEAN,
    XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
    XSD_PATTERN = XSD + 'pattern',
    XSD_MININCLUSIVE = XSD + 'minInclusive',
    XSD_MINEXCLUSIVE = XSD + 'minExclusive',
    XSD_MAXINCLUSIVE = XSD + 'maxInclusive',
    XSD_MAXEXCLUSIVE = XSD + 'maxExclusive',
    XSD_LENGTH = XSD + 'length',
    XSD_MINLENGTH = XSD + 'minLength',
    XSD_MAXLENGTH = XSD + 'maxLength',
    XSD_TOTALDIGITS = XSD + 'totalDigits',
    XSD_FRACTIONDIGITS = XSD + 'fractionDigits';
var numericDatatypes = [XSD + "integer", XSD + "decimal", XSD + "float", XSD + "double", XSD + "string", XSD + "boolean", XSD + "dateTime", XSD + "nonPositiveInteger", XSD + "negativeInteger", XSD + "long", XSD + "int", XSD + "short", XSD + "byte", XSD + "nonNegativeInteger", XSD + "unsignedLong", XSD + "unsignedInt", XSD + "unsignedShort", XSD + "unsignedByte", XSD + "positiveInteger"];
var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;
var numericFacets = ["mininclusive", "minexclusive", "maxinclusive", "maxexclusive"]; // Returns a lowercase version of the given string

function lowercase(string) {
  return string.toLowerCase();
} // Appends the item to the array and returns the array


function appendTo(array, item) {
  return array.push(item), array;
} // Appends the items to the array and returns the array


function appendAllTo(array, items) {
  return array.push.apply(array, items), array;
} // Extends a base object with properties of other objects


function extend(base) {
  if (!base) base = {};

  for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {
    for (var name in arg) {
      base[name] = arg[name];
    }
  }

  return base;
} // Creates an array that contains all items of the given arrays


function unionAll() {
  var union = [];

  for (var i = 0, l = arguments.length; i < l; i++) {
    union = union.concat.apply(union, arguments[i]);
  }

  return union;
} // N3.js:lib/N3Parser.js<0.4.5>:58 with
//   s/this\./ShExJisonParser./g
// ### `_setBase` sets the base IRI to resolve relative IRIs.


ShExJisonParser._setBase = function (baseIRI) {
  if (!baseIRI) baseIRI = null; // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
  // else if (baseIRI.indexOf('#') >= 0)
  //   throw new Error('Invalid base IRI ' + baseIRI);
  // Set base IRI and its components

  if (ShExJisonParser._base = baseIRI) {
    ShExJisonParser._basePath = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
    baseIRI = baseIRI.match(schemeAuthority);
    ShExJisonParser._baseRoot = baseIRI[0];
    ShExJisonParser._baseScheme = baseIRI[1];
  }
}; // N3.js:lib/N3Parser.js<0.4.5>:576 with
//   s/this\./ShExJisonParser./g
//   s/token/iri/
// ### `_resolveIRI` resolves a relative IRI token against the base path,
// assuming that a base path has been set and that the IRI is indeed relative.


function _resolveIRI(iri) {
  switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return ShExJisonParser._base;
    // Resolve relative fragment IRIs against the base IRI

    case '#':
      return ShExJisonParser._base + iri;
    // Resolve relative query string IRIs by replacing the query string

    case '?':
      return ShExJisonParser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI

    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? ShExJisonParser._baseScheme : ShExJisonParser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path

    default:
      {
        return _removeDotSegments(ShExJisonParser._basePath + iri);
      }
  }
} // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.


function _removeDotSegments(iri) {
  // Don't modify the IRI if it does not contain any dot segments
  if (!dotSegments.test(iri)) return iri; // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'

  var length = iri.length;
  var result = '',
      i = -1,
      pathStart = -1,
      next = '/',
      segmentStart = 0;

  while (i < length) {
    switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/') // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/') {
              i = pathStart;
            }
        }

        break;
      // Don't modify a query string or fragment

      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments

      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];

          switch (next) {
            // Remove a '/.' segment
            case '/':
              result += iri.substring(segmentStart, i - 1);
              segmentStart = i + 1;
              break;
            // Remove a trailing '/.' segment

            case undefined:
            case '?':
            case '#':
              return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
            // Remove a '/..' segment

            case '.':
              next = iri[++i + 1];

              if (next === undefined || next === '/' || next === '?' || next === '#') {
                result += iri.substring(segmentStart, i - 2); // Try to remove the parent path from result

                if ((segmentStart = result.lastIndexOf('/')) >= pathStart) result = result.substr(0, segmentStart); // Remove a trailing '/..' segment

                if (next !== '/') return result + '/' + iri.substr(i + 1);
                segmentStart = i + 1;
              }

          }
        }

    }

    next = iri[++i];
  }

  return result + iri.substring(segmentStart);
} // Creates an expression with the given type and attributes


function expression(expr, attr) {
  var expression = {
    expression: expr
  };
  if (attr) for (var a in attr) {
    expression[a] = attr[a];
  }
  return expression;
} // Creates a path with the given type and items


function path(type, items) {
  return {
    type: 'path',
    pathType: type,
    items: items
  };
} // Creates a literal with the given value and type


function createLiteral(value, type) {
  return {
    value: value,
    type: type
  };
} // Creates a new blank node identifier


function blank() {
  return '_:b' + blankId++;
}

;
var blankId = 0;

ShExJisonParser._resetBlanks = function () {
  blankId = 0;
};

ShExJisonParser.reset = function () {
  ShExJisonParser._prefixes = ShExJisonParser._imports = ShExJisonParser._sourceMap = ShExJisonParser.shapes = ShExJisonParser.productions = ShExJisonParser.start = ShExJisonParser.startActs = null; // Reset state.

  ShExJisonParser._base = ShExJisonParser._baseIRI = ShExJisonParser._baseIRIPath = ShExJisonParser._baseIRIRoot = null;
};

var _fileName; // for debugging


ShExJisonParser._setFileName = function (fn) {
  _fileName = fn;
}; // Regular expression and replacement strings to escape strings


var stringEscapeReplacements = {
  '\\': '\\',
  "'": "'",
  '"': '"',
  't': '\t',
  'b': '\b',
  'n': '\n',
  'r': '\r',
  'f': '\f'
},
    semactEscapeReplacements = {
  '\\': '\\',
  '%': '%'
},
    pnameEscapeReplacements = {
  '\\': '\\',
  "'": "'",
  '"': '"',
  'n': '\n',
  'r': '\r',
  't': '\t',
  'f': '\f',
  'b': '\b',
  '_': '_',
  '~': '~',
  '.': '.',
  '-': '-',
  '!': '!',
  '$': '$',
  '&': '&',
  '(': '(',
  ')': ')',
  '*': '*',
  '+': '+',
  ',': ',',
  ';': ';',
  '=': '=',
  '/': '/',
  '?': '?',
  '#': '#',
  '@': '@',
  '%': '%'
}; // Translates string escape codes in the string into their textual equivalent

function unescapeString(string, trimLength) {
  string = string.substring(trimLength, string.length - trimLength);
  return {
    value: ShExUtil.unescapeText(string, stringEscapeReplacements)
  };
}

function unescapeLangString(string, trimLength) {
  var at = string.lastIndexOf("@");
  var lang = string.substr(at);
  string = string.substr(0, at);
  var u = unescapeString(string, trimLength);
  return extend(u, {
    language: lowercase(lang.substr(1))
  });
} // Translates regular expression escape codes in the string into their textual equivalent


function unescapeRegexp(regexp) {
  var end = regexp.lastIndexOf("/");
  var s = regexp.substr(1, end - 1);

  var regexpEscapeReplacements = _defineProperty({
    '.': "\\.",
    '\\': "\\\\",
    '?': "\\?",
    '*': "\\*",
    '+': "\\+",
    '{': "\\{",
    '}': "\\}",
    '(': "\\(",
    ')': "\\)",
    '|': "\\|",
    '^': "\\^",
    '$': "\\$",
    '[': "\\[",
    ']': "\\]",
    '/': "\\/",
    't': '\\t',
    'n': '\\n',
    'r': '\\r',
    '-': "\\-"
  }, "/", '/');

  s = ShExUtil.unescapeText(s, regexpEscapeReplacements);
  var ret = {
    pattern: s
  };
  if (regexp.length > end + 1) ret.flags = regexp.substr(end + 1);
  return ret;
} // Convenience function to return object with p1 key, value p2


function keyValObject(key, val) {
  var ret = {};
  ret[key] = val;
  return ret;
} // Return object with p1 key, p2 string value


function unescapeSemanticAction(key, string) {
  string = string.substring(1, string.length - 2);
  return {
    type: "SemAct",
    name: key,
    code: ShExUtil.unescapeText(string, semactEscapeReplacements)
  };
}

function error(e, yy) {
  var hash = {
    text: yy.lexer.match,
    // token: this.terminals_[symbol] || symbol,
    line: yy.lexer.yylineno,
    loc: yy.lexer.yylloc,
    // expected: expected
    pos: yy.lexer.showPosition()
  };
  e.hash = hash;

  if (ShExJisonParser.recoverable) {
    ShExJisonParser.recoverable(e);
  } else {
    throw e;
    ShExJisonParser.reset();
  }
} // Expand declared prefix or throw Error


function expandPrefix(prefix, yy) {
  if (!(prefix in ShExJisonParser._prefixes)) error(new Error('Parse error; unknown prefix "' + prefix + ':"'), yy);
  return ShExJisonParser._prefixes[prefix];
} // Add a shape to the map


function addShape(label, shape, yy) {
  if (shape === EmptyShape) shape = {
    type: "Shape"
  };
  if (ShExJisonParser.productions && label in ShExJisonParser.productions) error(new Error("Structural error: " + label + " is a triple expression"), yy);
  if (!ShExJisonParser.shapes) ShExJisonParser.shapes = {};

  if (label in ShExJisonParser.shapes) {
    if (ShExJisonParser.options.duplicateShape === "replace") ShExJisonParser.shapes[label] = shape;else if (ShExJisonParser.options.duplicateShape !== "ignore") error(new Error("Parse error: " + label + " already defined"), yy);
  } else {
    ShExJisonParser.shapes[label] = Object.assign({
      id: label
    }, shape);
  }
} // Add a production to the map


function addProduction(label, production, yy) {
  if (ShExJisonParser.shapes && label in ShExJisonParser.shapes) error(new Error("Structural error: " + label + " is a shape expression"), yy);
  if (!ShExJisonParser.productions) ShExJisonParser.productions = {};

  if (label in ShExJisonParser.productions) {
    if (ShExJisonParser.options.duplicateShape === "replace") ShExJisonParser.productions[label] = production;else if (ShExJisonParser.options.duplicateShape !== "ignore") error(new Error("Parse error: " + label + " already defined"), yy);
  } else ShExJisonParser.productions[label] = production;
}

function addSourceMap(obj, yy) {
  if (!ShExJisonParser._sourceMap) ShExJisonParser._sourceMap = new Map();

  var list = ShExJisonParser._sourceMap.get(obj);

  if (!list) ShExJisonParser._sourceMap.set(obj, list = []);
  list.push(yy.lexer.yylloc);
  return obj;
} // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
// No created Shape{And,Or,Not} will have a `nested` shapeExpr.
// Don't nonest arguments to shapeJunction.
// shapeAtom emits `nested` so nonest every argument that can be a shapeAtom, i.e.
//   shapeAtom, inlineShapeAtom, shapeAtomNoRef
//   {,inline}shape{And,Or,Not}
//   this does NOT include shapeOrRef or nodeConstraint.


function shapeJunction(type, shapeAtom, juncts) {
  if (juncts.length === 0) {
    return nonest(shapeAtom);
  } else if (shapeAtom.type === type && !shapeAtom.nested) {
    nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
    return shapeAtom;
  } else {
    return {
      type: type,
      shapeExprs: [nonest(shapeAtom)].concat(juncts.map(nonest))
    };
  }
} // strip out .nested attribute


function nonest(shapeAtom) {
  delete shapeAtom.nested;
  return shapeAtom;
}

var EmptyObject = {};
var EmptyShape = {
  type: "Shape"
};
__webpack_unused_export__ = ({
  value: true
});

var _require = __webpack_require__(64605),
    JisonParser = _require.JisonParser,
    o = _require.o;

var _require2 = __webpack_require__(70803),
    JisonLexer = _require2.JisonLexer;

function ShExJisonParser() {
  var yy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var lexer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ShExJisonLexer(yy);
  var $V0 = [7, 18, 19, 20, 21, 23, 26, 36, 193, 215, 216],
      $V1 = [19, 21, 215, 216],
      $V2 = [2, 27],
      $V3 = [1, 22],
      $V4 = [1, 23],
      $V5 = [2, 12],
      $V6 = [2, 13],
      $V7 = [2, 14],
      $V8 = [7, 18, 19, 20, 21, 23, 26, 36, 215, 216],
      $V9 = [1, 29],
      $Va = [1, 32],
      $Vb = [1, 31],
      $Vc = [2, 18],
      $Vd = [2, 19],
      $Ve = [1, 38],
      $Vf = [1, 42],
      $Vg = [1, 41],
      $Vh = [1, 40],
      $Vi = [1, 44],
      $Vj = [1, 47],
      $Vk = [1, 46],
      $Vl = [2, 15],
      $Vm = [2, 17],
      $Vn = [2, 260],
      $Vo = [2, 261],
      $Vp = [2, 262],
      $Vq = [2, 263],
      $Vr = [19, 21, 69, 71, 79, 80, 81, 85, 96, 97, 98, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 119, 125, 127, 161, 189, 215, 218],
      $Vs = [2, 61],
      $Vt = [1, 65],
      $Vu = [19, 21, 39, 43, 69, 71, 79, 80, 81, 85, 96, 97, 98, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 119, 125, 127, 161, 179, 189, 215, 218, 220],
      $Vv = [2, 29],
      $Vw = [2, 238],
      $Vx = [2, 239],
      $Vy = [2, 264],
      $Vz = [193, 195],
      $VA = [1, 73],
      $VB = [1, 76],
      $VC = [1, 75],
      $VD = [2, 16],
      $VE = [7, 18, 19, 20, 21, 23, 26, 36, 51, 215, 216],
      $VF = [2, 47],
      $VG = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 215, 216],
      $VH = [2, 54],
      $VI = [119, 125, 127, 189, 218],
      $VJ = [2, 139],
      $VK = [1, 111],
      $VL = [1, 119],
      $VM = [1, 93],
      $VN = [1, 101],
      $VO = [1, 102],
      $VP = [1, 103],
      $VQ = [1, 110],
      $VR = [1, 115],
      $VS = [1, 116],
      $VT = [1, 117],
      $VU = [1, 120],
      $VV = [1, 121],
      $VW = [1, 122],
      $VX = [1, 123],
      $VY = [1, 124],
      $VZ = [1, 125],
      $V_ = [1, 106],
      $V$ = [1, 118],
      $V01 = [2, 62],
      $V11 = [19, 21, 69, 71, 85, 96, 97, 98, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 119, 125, 127, 161, 189, 215, 218],
      $V21 = [1, 136],
      $V31 = [1, 137],
      $V41 = [1, 138],
      $V51 = [1, 135],
      $V61 = [1, 134],
      $V71 = [2, 229],
      $V81 = [2, 230],
      $V91 = [2, 231],
      $Va1 = [2, 20],
      $Vb1 = [1, 145],
      $Vc1 = [2, 53],
      $Vd1 = [1, 147],
      $Ve1 = [2, 60],
      $Vf1 = [2, 69],
      $Vg1 = [1, 153],
      $Vh1 = [1, 154],
      $Vi1 = [1, 155],
      $Vj1 = [2, 65],
      $Vk1 = [2, 71],
      $Vl1 = [1, 162],
      $Vm1 = [1, 163],
      $Vn1 = [1, 164],
      $Vo1 = [1, 167],
      $Vp1 = [1, 170],
      $Vq1 = [2, 68],
      $Vr1 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 79, 80, 81, 119, 125, 127, 189, 190, 193, 215, 216, 218],
      $Vs1 = [2, 95],
      $Vt1 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 190, 193, 215, 216],
      $Vu1 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 96, 97, 98, 101, 102, 103, 104, 215, 216],
      $Vv1 = [2, 87],
      $Vw1 = [2, 88],
      $Vx1 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 79, 80, 81, 101, 102, 103, 104, 119, 125, 127, 189, 190, 193, 215, 216, 218],
      $Vy1 = [2, 108],
      $Vz1 = [2, 107],
      $VA1 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 190, 193, 215, 216],
      $VB1 = [2, 102],
      $VC1 = [2, 101],
      $VD1 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 96, 97, 98, 101, 102, 103, 104, 190, 193, 215, 216],
      $VE1 = [2, 91],
      $VF1 = [2, 92],
      $VG1 = [2, 112],
      $VH1 = [2, 113],
      $VI1 = [2, 114],
      $VJ1 = [2, 110],
      $VK1 = [2, 237],
      $VL1 = [19, 21, 71, 81, 100, 108, 109, 163, 185, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215],
      $VM1 = [2, 183],
      $VN1 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 112, 113, 114, 115, 116, 117, 190, 193, 215, 216],
      $VO1 = [2, 104],
      $VP1 = [1, 194],
      $VQ1 = [1, 196],
      $VR1 = [1, 198],
      $VS1 = [1, 197],
      $VT1 = [2, 118],
      $VU1 = [1, 205],
      $VV1 = [1, 206],
      $VW1 = [1, 207],
      $VX1 = [1, 208],
      $VY1 = [100, 108, 109, 206, 207, 208, 209],
      $VZ1 = [2, 26],
      $V_1 = [2, 31],
      $V$1 = [2, 32],
      $V02 = [79, 80, 81, 119, 125, 127, 189, 218],
      $V12 = [51, 53],
      $V22 = [1, 270],
      $V32 = [1, 275],
      $V42 = [1, 252],
      $V52 = [1, 260],
      $V62 = [1, 261],
      $V72 = [1, 262],
      $V82 = [1, 269],
      $V92 = [1, 265],
      $Va2 = [1, 274],
      $Vb2 = [2, 48],
      $Vc2 = [2, 55],
      $Vd2 = [2, 64],
      $Ve2 = [2, 70],
      $Vf2 = [2, 66],
      $Vg2 = [2, 72],
      $Vh2 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 101, 102, 103, 104, 190, 193, 215, 216],
      $Vi2 = [1, 326],
      $Vj2 = [1, 334],
      $Vk2 = [1, 335],
      $Vl2 = [1, 336],
      $Vm2 = [1, 342],
      $Vn2 = [1, 343],
      $Vo2 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 79, 80, 81, 119, 125, 127, 189, 193, 215, 216, 218],
      $Vp2 = [2, 227],
      $Vq2 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 193, 215, 216],
      $Vr2 = [1, 351],
      $Vs2 = [2, 106],
      $Vt2 = [2, 111],
      $Vu2 = [2, 98],
      $Vv2 = [1, 357],
      $Vw2 = [2, 99],
      $Vx2 = [2, 100],
      $Vy2 = [2, 105],
      $Vz2 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 96, 97, 98, 101, 102, 103, 104, 193, 215, 216],
      $VA2 = [2, 93],
      $VB2 = [1, 374],
      $VC2 = [1, 380],
      $VD2 = [1, 369],
      $VE2 = [1, 373],
      $VF2 = [1, 383],
      $VG2 = [1, 384],
      $VH2 = [1, 385],
      $VI2 = [1, 372],
      $VJ2 = [1, 386],
      $VK2 = [1, 387],
      $VL2 = [1, 392],
      $VM2 = [1, 393],
      $VN2 = [1, 394],
      $VO2 = [1, 395],
      $VP2 = [1, 388],
      $VQ2 = [1, 389],
      $VR2 = [1, 390],
      $VS2 = [1, 391],
      $VT2 = [1, 379],
      $VU2 = [19, 21, 69, 160, 199, 215],
      $VV2 = [2, 167],
      $VW2 = [2, 141],
      $VX2 = [1, 408],
      $VY2 = [1, 407],
      $VZ2 = [1, 421],
      $V_2 = [1, 424],
      $V$2 = [1, 420],
      $V03 = [1, 423],
      $V13 = [2, 117],
      $V23 = [2, 122],
      $V33 = [2, 124],
      $V43 = [2, 125],
      $V53 = [2, 126],
      $V63 = [2, 252],
      $V73 = [2, 253],
      $V83 = [2, 254],
      $V93 = [2, 255],
      $Va3 = [2, 123],
      $Vb3 = [19, 21, 39, 43, 69, 71, 79, 80, 81, 85, 96, 97, 98, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 119, 125, 127, 161, 179, 189, 190, 193, 215, 218, 220],
      $Vc3 = [2, 36],
      $Vd3 = [2, 74],
      $Ve3 = [2, 77],
      $Vf3 = [2, 35],
      $Vg3 = [2, 39],
      $Vh3 = [2, 42],
      $Vi3 = [2, 45],
      $Vj3 = [1, 446],
      $Vk3 = [1, 448],
      $Vl3 = [1, 454],
      $Vm3 = [1, 455],
      $Vn3 = [1, 456],
      $Vo3 = [1, 463],
      $Vp3 = [1, 464],
      $Vq3 = [1, 465],
      $Vr3 = [1, 468],
      $Vs3 = [2, 41],
      $Vt3 = [1, 538],
      $Vu3 = [2, 44],
      $Vv3 = [1, 574],
      $Vw3 = [2, 67],
      $Vx3 = [51, 53, 70],
      $Vy3 = [1, 603],
      $Vz3 = [51, 53, 70, 79, 80, 81, 119, 125, 127, 189, 190, 193, 218],
      $VA3 = [51, 53, 70, 190, 193],
      $VB3 = [51, 53, 70, 96, 97, 98, 101, 102, 103, 104, 190, 193],
      $VC3 = [51, 53, 70, 79, 80, 81, 101, 102, 103, 104, 119, 125, 127, 189, 190, 193, 218],
      $VD3 = [51, 53, 70, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 190, 193],
      $VE3 = [51, 53, 70, 112, 113, 114, 115, 116, 117, 190, 193],
      $VF3 = [51, 70],
      $VG3 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 79, 80, 81, 119, 125, 127, 189, 215, 216, 218],
      $VH3 = [2, 97],
      $VI3 = [2, 96],
      $VJ3 = [2, 226],
      $VK3 = [1, 645],
      $VL3 = [1, 648],
      $VM3 = [1, 644],
      $VN3 = [1, 647],
      $VO3 = [2, 94],
      $VP3 = [2, 109],
      $VQ3 = [2, 103],
      $VR3 = [2, 115],
      $VS3 = [2, 116],
      $VT3 = [2, 134],
      $VU3 = [2, 182],
      $VV3 = [1, 678],
      $VW3 = [19, 21, 71, 81, 100, 108, 109, 163, 178, 185, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215],
      $VX3 = [2, 232],
      $VY3 = [2, 233],
      $VZ3 = [2, 234],
      $V_3 = [2, 245],
      $V$3 = [2, 248],
      $V04 = [2, 242],
      $V14 = [2, 243],
      $V24 = [2, 244],
      $V34 = [2, 250],
      $V44 = [2, 251],
      $V54 = [2, 256],
      $V64 = [2, 257],
      $V74 = [2, 258],
      $V84 = [2, 259],
      $V94 = [19, 21, 71, 81, 100, 108, 109, 111, 163, 178, 185, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215],
      $Va4 = [2, 146],
      $Vb4 = [2, 147],
      $Vc4 = [1, 686],
      $Vd4 = [2, 148],
      $Ve4 = [121, 135],
      $Vf4 = [2, 153],
      $Vg4 = [2, 154],
      $Vh4 = [2, 156],
      $Vi4 = [1, 689],
      $Vj4 = [1, 690],
      $Vk4 = [19, 21, 199, 215],
      $Vl4 = [2, 175],
      $Vm4 = [1, 698],
      $Vn4 = [121, 135, 140, 141],
      $Vo4 = [2, 165],
      $Vp4 = [119, 125, 127, 189, 190, 193, 218],
      $Vq4 = [19, 21, 119, 125, 127, 189, 199, 215, 218],
      $Vr4 = [2, 235],
      $Vs4 = [2, 236],
      $Vt4 = [19, 21, 39, 43, 69, 71, 79, 80, 81, 85, 96, 97, 98, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 119, 125, 127, 161, 179, 189, 193, 215, 218, 220],
      $Vu4 = [2, 33],
      $Vv4 = [2, 37],
      $Vw4 = [2, 73],
      $Vx4 = [2, 75],
      $Vy4 = [2, 34],
      $Vz4 = [2, 43],
      $VA4 = [2, 40],
      $VB4 = [2, 46],
      $VC4 = [1, 765],
      $VD4 = [1, 771],
      $VE4 = [1, 811],
      $VF4 = [1, 858],
      $VG4 = [51, 53, 70, 101, 102, 103, 104, 190, 193],
      $VH4 = [51, 53, 70, 79, 80, 81, 119, 125, 127, 189, 193, 218],
      $VI4 = [51, 53, 70, 193],
      $VJ4 = [1, 901],
      $VK4 = [51, 53, 70, 96, 97, 98, 101, 102, 103, 104, 193],
      $VL4 = [1, 911],
      $VM4 = [1, 948],
      $VN4 = [1, 984],
      $VO4 = [2, 228],
      $VP4 = [1, 995],
      $VQ4 = [1, 1001],
      $VR4 = [1, 1000],
      $VS4 = [19, 21, 100, 108, 109, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215],
      $VT4 = [1, 1021],
      $VU4 = [1, 1027],
      $VV4 = [1, 1026],
      $VW4 = [1, 1048],
      $VX4 = [1, 1054],
      $VY4 = [1, 1053],
      $VZ4 = [1, 1071],
      $V_4 = [1, 1073],
      $V$4 = [1, 1075],
      $V05 = [19, 21, 71, 81, 100, 108, 109, 163, 179, 185, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215],
      $V15 = [1, 1079],
      $V25 = [1, 1085],
      $V35 = [1, 1088],
      $V45 = [1, 1089],
      $V55 = [1, 1090],
      $V65 = [1, 1078],
      $V75 = [1, 1091],
      $V85 = [1, 1092],
      $V95 = [1, 1097],
      $Va5 = [1, 1098],
      $Vb5 = [1, 1099],
      $Vc5 = [1, 1100],
      $Vd5 = [1, 1093],
      $Ve5 = [1, 1094],
      $Vf5 = [1, 1095],
      $Vg5 = [1, 1096],
      $Vh5 = [1, 1084],
      $Vi5 = [2, 246],
      $Vj5 = [2, 249],
      $Vk5 = [2, 135],
      $Vl5 = [2, 149],
      $Vm5 = [2, 151],
      $Vn5 = [2, 155],
      $Vo5 = [2, 157],
      $Vp5 = [2, 158],
      $Vq5 = [2, 162],
      $Vr5 = [2, 164],
      $Vs5 = [2, 169],
      $Vt5 = [2, 170],
      $Vu5 = [1, 1115],
      $Vv5 = [1, 1118],
      $Vw5 = [1, 1114],
      $Vx5 = [1, 1117],
      $Vy5 = [1, 1128],
      $Vz5 = [2, 222],
      $VA5 = [2, 240],
      $VB5 = [2, 241],
      $VC5 = [119, 125, 127, 189, 193, 218],
      $VD5 = [2, 127],
      $VE5 = [2, 76],
      $VF5 = [1, 1168],
      $VG5 = [1, 1204],
      $VH5 = [1, 1263],
      $VI5 = [1, 1269],
      $VJ5 = [1, 1301],
      $VK5 = [1, 1307],
      $VL5 = [51, 53, 70, 79, 80, 81, 119, 125, 127, 189, 218],
      $VM5 = [51, 53, 70, 96, 97, 98, 101, 102, 103, 104],
      $VN5 = [1, 1365],
      $VO5 = [1, 1412],
      $VP5 = [2, 223],
      $VQ5 = [2, 224],
      $VR5 = [2, 225],
      $VS5 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 79, 80, 81, 111, 119, 125, 127, 189, 190, 193, 215, 216, 218],
      $VT5 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 111, 190, 193, 215, 216],
      $VU5 = [7, 18, 19, 20, 21, 23, 26, 36, 51, 53, 96, 97, 98, 101, 102, 103, 104, 111, 190, 193, 215, 216],
      $VV5 = [2, 205],
      $VW5 = [1, 1465],
      $VX5 = [19, 21, 71, 81, 100, 108, 109, 163, 178, 179, 185, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215],
      $VY5 = [19, 21, 71, 81, 100, 108, 109, 111, 163, 178, 179, 185, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215],
      $VZ5 = [2, 247],
      $V_5 = [2, 152],
      $V$5 = [2, 150],
      $V06 = [2, 159],
      $V16 = [2, 163],
      $V26 = [2, 160],
      $V36 = [2, 161],
      $V46 = [19, 21, 43, 69, 71, 79, 80, 81, 85, 96, 97, 98, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 119, 125, 127, 161, 189, 215, 218],
      $V56 = [1, 1482],
      $V66 = [70, 135],
      $V76 = [1, 1485],
      $V86 = [1, 1486],
      $V96 = [70, 135, 140, 141],
      $Va6 = [1, 1509],
      $Vb6 = [1, 1515],
      $Vc6 = [1, 1514],
      $Vd6 = [1, 1552],
      $Ve6 = [1, 1599],
      $Vf6 = [1, 1632],
      $Vg6 = [1, 1638],
      $Vh6 = [1, 1637],
      $Vi6 = [1, 1658],
      $Vj6 = [1, 1664],
      $Vk6 = [1, 1663],
      $Vl6 = [1, 1685],
      $Vm6 = [1, 1691],
      $Vn6 = [1, 1690],
      $Vo6 = [1, 1736],
      $Vp6 = [1, 1802],
      $Vq6 = [1, 1808],
      $Vr6 = [1, 1807],
      $Vs6 = [1, 1828],
      $Vt6 = [1, 1834],
      $Vu6 = [1, 1833],
      $Vv6 = [1, 1854],
      $Vw6 = [1, 1860],
      $Vx6 = [1, 1859],
      $Vy6 = [1, 1901],
      $Vz6 = [1, 1907],
      $VA6 = [1, 1939],
      $VB6 = [1, 1945],
      $VC6 = [121, 135, 140, 141, 190, 193],
      $VD6 = [2, 172],
      $VE6 = [1, 1965],
      $VF6 = [1, 1966],
      $VG6 = [1, 1967],
      $VH6 = [1, 1968],
      $VI6 = [121, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $VJ6 = [2, 38],
      $VK6 = [51, 121, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $VL6 = [2, 51],
      $VM6 = [51, 53, 121, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $VN6 = [2, 58],
      $VO6 = [1, 1997],
      $VP6 = [1, 2017],
      $VQ6 = [1, 2023],
      $VR6 = [1, 2022],
      $VS6 = [19, 21, 39, 43, 69, 71, 79, 80, 81, 85, 96, 97, 98, 101, 102, 103, 104, 111, 112, 113, 114, 115, 116, 117, 119, 125, 127, 161, 179, 189, 190, 193, 215, 218, 220],
      $VT6 = [1, 2069],
      $VU6 = [1, 2075],
      $VV6 = [1, 2107],
      $VW6 = [1, 2113],
      $VX6 = [1, 2166],
      $VY6 = [1, 2199],
      $VZ6 = [1, 2205],
      $V_6 = [1, 2204],
      $V$6 = [1, 2225],
      $V07 = [1, 2231],
      $V17 = [1, 2230],
      $V27 = [1, 2252],
      $V37 = [1, 2258],
      $V47 = [1, 2257],
      $V57 = [1, 2279],
      $V67 = [1, 2285],
      $V77 = [1, 2284],
      $V87 = [1, 2305],
      $V97 = [1, 2311],
      $Va7 = [1, 2310],
      $Vb7 = [1, 2332],
      $Vc7 = [1, 2338],
      $Vd7 = [1, 2337],
      $Ve7 = [51, 53, 70, 79, 80, 81, 111, 119, 125, 127, 189, 190, 193, 218],
      $Vf7 = [51, 53, 70, 111, 190, 193],
      $Vg7 = [51, 53, 70, 96, 97, 98, 101, 102, 103, 104, 111, 190, 193],
      $Vh7 = [1, 2407],
      $Vi7 = [2, 173],
      $Vj7 = [2, 177],
      $Vk7 = [2, 178],
      $Vl7 = [2, 179],
      $Vm7 = [2, 180],
      $Vn7 = [2, 49],
      $Vo7 = [2, 56],
      $Vp7 = [2, 63],
      $Vq7 = [2, 83],
      $Vr7 = [2, 79],
      $Vs7 = [2, 85],
      $Vt7 = [1, 2490],
      $Vu7 = [2, 82],
      $Vv7 = [51, 53, 79, 80, 81, 101, 102, 103, 104, 119, 121, 125, 127, 135, 140, 141, 156, 157, 158, 159, 189, 190, 193, 218],
      $Vw7 = [51, 53, 79, 80, 81, 119, 121, 125, 127, 135, 140, 141, 156, 157, 158, 159, 189, 190, 193, 218],
      $Vx7 = [51, 53, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 121, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $Vy7 = [51, 53, 96, 97, 98, 101, 102, 103, 104, 121, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $Vz7 = [2, 89],
      $VA7 = [2, 90],
      $VB7 = [51, 53, 112, 113, 114, 115, 116, 117, 121, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $VC7 = [111, 119, 125, 127, 189, 190, 193, 218],
      $VD7 = [1, 2559],
      $VE7 = [1, 2648],
      $VF7 = [1, 2654],
      $VG7 = [1, 2737],
      $VH7 = [1, 2770],
      $VI7 = [1, 2776],
      $VJ7 = [1, 2775],
      $VK7 = [1, 2796],
      $VL7 = [1, 2802],
      $VM7 = [1, 2801],
      $VN7 = [1, 2823],
      $VO7 = [1, 2829],
      $VP7 = [1, 2828],
      $VQ7 = [1, 2850],
      $VR7 = [1, 2856],
      $VS7 = [1, 2855],
      $VT7 = [1, 2876],
      $VU7 = [1, 2882],
      $VV7 = [1, 2881],
      $VW7 = [1, 2903],
      $VX7 = [1, 2909],
      $VY7 = [1, 2908],
      $VZ7 = [121, 135, 140, 141, 193],
      $V_7 = [1, 2928],
      $V$7 = [2, 52],
      $V08 = [2, 59],
      $V18 = [2, 78],
      $V28 = [2, 84],
      $V38 = [2, 80],
      $V48 = [2, 86],
      $V58 = [51, 53, 101, 102, 103, 104, 121, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $V68 = [1, 2952],
      $V78 = [70, 135, 140, 141, 190, 193],
      $V88 = [1, 2961],
      $V98 = [1, 2962],
      $Va8 = [1, 2963],
      $Vb8 = [1, 2964],
      $Vc8 = [70, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $Vd8 = [51, 70, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $Ve8 = [51, 53, 70, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $Vf8 = [1, 2993],
      $Vg8 = [1, 3022],
      $Vh8 = [1, 3055],
      $Vi8 = [1, 3061],
      $Vj8 = [1, 3060],
      $Vk8 = [1, 3081],
      $Vl8 = [1, 3087],
      $Vm8 = [1, 3086],
      $Vn8 = [1, 3108],
      $Vo8 = [1, 3114],
      $Vp8 = [1, 3113],
      $Vq8 = [1, 3135],
      $Vr8 = [1, 3141],
      $Vs8 = [1, 3140],
      $Vt8 = [1, 3161],
      $Vu8 = [1, 3167],
      $Vv8 = [1, 3166],
      $Vw8 = [1, 3188],
      $Vx8 = [1, 3194],
      $Vy8 = [1, 3193],
      $Vz8 = [1, 3271],
      $VA8 = [1, 3277],
      $VB8 = [2, 174],
      $VC8 = [2, 50],
      $VD8 = [1, 3365],
      $VE8 = [2, 57],
      $VF8 = [1, 3398],
      $VG8 = [2, 81],
      $VH8 = [2, 171],
      $VI8 = [1, 3443],
      $VJ8 = [51, 53, 70, 79, 80, 81, 101, 102, 103, 104, 119, 125, 127, 135, 140, 141, 156, 157, 158, 159, 189, 190, 193, 218],
      $VK8 = [51, 53, 70, 79, 80, 81, 119, 125, 127, 135, 140, 141, 156, 157, 158, 159, 189, 190, 193, 218],
      $VL8 = [51, 53, 70, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $VM8 = [51, 53, 70, 96, 97, 98, 101, 102, 103, 104, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $VN8 = [51, 53, 70, 112, 113, 114, 115, 116, 117, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $VO8 = [1, 3491],
      $VP8 = [1, 3497],
      $VQ8 = [1, 3560],
      $VR8 = [1, 3566],
      $VS8 = [1, 3565],
      $VT8 = [1, 3586],
      $VU8 = [1, 3592],
      $VV8 = [1, 3591],
      $VW8 = [1, 3613],
      $VX8 = [1, 3619],
      $VY8 = [1, 3618],
      $VZ8 = [1, 3678],
      $V_8 = [1, 3684],
      $V$8 = [1, 3683],
      $V09 = [1, 3719],
      $V19 = [1, 3761],
      $V29 = [70, 135, 140, 141, 193],
      $V39 = [1, 3791],
      $V49 = [51, 53, 70, 101, 102, 103, 104, 135, 140, 141, 156, 157, 158, 159, 190, 193],
      $V59 = [1, 3815],
      $V69 = [1, 3890],
      $V79 = [1, 3896],
      $V89 = [1, 3895],
      $V99 = [1, 3916],
      $Va9 = [1, 3922],
      $Vb9 = [1, 3921],
      $Vc9 = [1, 3943],
      $Vd9 = [1, 3949],
      $Ve9 = [1, 3948],
      $Vf9 = [111, 121, 135, 140, 141, 190, 193],
      $Vg9 = [1, 3991],
      $Vh9 = [1, 4015],
      $Vi9 = [1, 4057],
      $Vj9 = [1, 4090],
      $Vk9 = [1, 4118],
      $Vl9 = [1, 4124],
      $Vm9 = [1, 4123],
      $Vn9 = [1, 4144],
      $Vo9 = [1, 4150],
      $Vp9 = [1, 4149],
      $Vq9 = [1, 4171],
      $Vr9 = [1, 4177],
      $Vs9 = [1, 4176],
      $Vt9 = [1, 4251],
      $Vu9 = [1, 4294],
      $Vv9 = [1, 4300],
      $Vw9 = [1, 4299],
      $Vx9 = [1, 4335],
      $Vy9 = [1, 4377],
      $Vz9 = [1, 4451],
      $VA9 = [70, 111, 135, 140, 141, 190, 193],
      $VB9 = [1, 4506],
      $VC9 = [1, 4530],
      $VD9 = [1, 4566],
      $VE9 = [1, 4612],
      $VF9 = [1, 4684],
      $VG9 = [1, 4733];
  JisonParser.call(this, yy, lexer);
  this.symbols_ = {
    "error": 2,
    "shexDoc": 3,
    "initParser": 4,
    "Qdirective_E_Star": 5,
    "Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt": 6,
    "EOF": 7,
    "directive": 8,
    "O_QnotStartAction_E_Or_QstartActions_E_C": 9,
    "notStartAction": 10,
    "startActions": 11,
    "Qstatement_E_Star": 12,
    "statement": 13,
    "O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C": 14,
    "baseDecl": 15,
    "prefixDecl": 16,
    "importDecl": 17,
    "IT_BASE": 18,
    "IRIREF": 19,
    "IT_PREFIX": 20,
    "PNAME_NS": 21,
    "iri": 22,
    "IT_IMPORT": 23,
    "start": 24,
    "shapeExprDecl": 25,
    "IT_start": 26,
    "=": 27,
    "shapeAnd": 28,
    "Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star": 29,
    "QcodeDecl_E_Plus": 30,
    "codeDecl": 31,
    "QIT_ABSTRACT_E_Opt": 32,
    "shapeExprLabel": 33,
    "Qrestriction_E_Star": 34,
    "O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C": 35,
    "IT_ABSTRACT": 36,
    "restriction": 37,
    "shapeExpression": 38,
    "IT_EXTERNAL": 39,
    "QIT_NOT_E_Opt": 40,
    "shapeAtomNoRef": 41,
    "QshapeOr_E_Opt": 42,
    "IT_NOT": 43,
    "shapeRef": 44,
    "shapeOr": 45,
    "inlineShapeExpression": 46,
    "inlineShapeOr": 47,
    "Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus": 48,
    "Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus": 49,
    "O_QIT_OR_E_S_QshapeAnd_E_C": 50,
    "IT_OR": 51,
    "O_QIT_AND_E_S_QshapeNot_E_C": 52,
    "IT_AND": 53,
    "shapeNot": 54,
    "inlineShapeAnd": 55,
    "Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star": 56,
    "O_QIT_OR_E_S_QinlineShapeAnd_E_C": 57,
    "Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star": 58,
    "inlineShapeNot": 59,
    "Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star": 60,
    "O_QIT_AND_E_S_QinlineShapeNot_E_C": 61,
    "shapeAtom": 62,
    "inlineShapeAtom": 63,
    "nonLitNodeConstraint": 64,
    "QshapeOrRef_E_Opt": 65,
    "litNodeConstraint": 66,
    "shapeOrRef": 67,
    "QnonLitNodeConstraint_E_Opt": 68,
    "(": 69,
    ")": 70,
    ".": 71,
    "shapeDefinition": 72,
    "nonLitInlineNodeConstraint": 73,
    "QinlineShapeOrRef_E_Opt": 74,
    "litInlineNodeConstraint": 75,
    "inlineShapeOrRef": 76,
    "QnonLitInlineNodeConstraint_E_Opt": 77,
    "inlineShapeDefinition": 78,
    "ATPNAME_LN": 79,
    "ATPNAME_NS": 80,
    "@": 81,
    "Qannotation_E_Star": 82,
    "semanticActions": 83,
    "annotation": 84,
    "IT_LITERAL": 85,
    "QxsFacet_E_Star": 86,
    "datatype": 87,
    "valueSet": 88,
    "QnumericFacet_E_Plus": 89,
    "xsFacet": 90,
    "numericFacet": 91,
    "nonLiteralKind": 92,
    "QstringFacet_E_Star": 93,
    "QstringFacet_E_Plus": 94,
    "stringFacet": 95,
    "IT_IRI": 96,
    "IT_BNODE": 97,
    "IT_NONLITERAL": 98,
    "stringLength": 99,
    "INTEGER": 100,
    "REGEXP": 101,
    "IT_LENGTH": 102,
    "IT_MINLENGTH": 103,
    "IT_MAXLENGTH": 104,
    "numericRange": 105,
    "rawNumeric": 106,
    "numericLength": 107,
    "DECIMAL": 108,
    "DOUBLE": 109,
    "string": 110,
    "^^": 111,
    "IT_MININCLUSIVE": 112,
    "IT_MINEXCLUSIVE": 113,
    "IT_MAXINCLUSIVE": 114,
    "IT_MAXEXCLUSIVE": 115,
    "IT_TOTALDIGITS": 116,
    "IT_FRACTIONDIGITS": 117,
    "Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star": 118,
    "{": 119,
    "QtripleExpression_E_Opt": 120,
    "}": 121,
    "O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C": 122,
    "extension": 123,
    "extraPropertySet": 124,
    "IT_CLOSED": 125,
    "tripleExpression": 126,
    "IT_EXTRA": 127,
    "Qpredicate_E_Plus": 128,
    "predicate": 129,
    "oneOfTripleExpr": 130,
    "groupTripleExpr": 131,
    "multiElementOneOf": 132,
    "Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus": 133,
    "O_QGT_PIPE_E_S_QgroupTripleExpr_E_C": 134,
    "|": 135,
    "singleElementGroup": 136,
    "multiElementGroup": 137,
    "unaryTripleExpr": 138,
    "QGT_SEMI_E_Opt": 139,
    ",": 140,
    ";": 141,
    "Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus": 142,
    "O_QGT_SEMI_E_S_QunaryTripleExpr_E_C": 143,
    "Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt": 144,
    "O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C": 145,
    "include": 146,
    "O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C": 147,
    "$": 148,
    "tripleExprLabel": 149,
    "tripleConstraint": 150,
    "bracketedTripleExpr": 151,
    "Qcardinality_E_Opt": 152,
    "cardinality": 153,
    "QsenseFlags_E_Opt": 154,
    "senseFlags": 155,
    "*": 156,
    "+": 157,
    "?": 158,
    "REPEAT_RANGE": 159,
    "^": 160,
    "[": 161,
    "QvalueSetValue_E_Star": 162,
    "]": 163,
    "valueSetValue": 164,
    "iriRange": 165,
    "literalRange": 166,
    "languageRange": 167,
    "O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C": 168,
    "QiriExclusion_E_Plus": 169,
    "iriExclusion": 170,
    "QliteralExclusion_E_Plus": 171,
    "literalExclusion": 172,
    "QlanguageExclusion_E_Plus": 173,
    "languageExclusion": 174,
    "Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt": 175,
    "QiriExclusion_E_Star": 176,
    "O_QGT_TILDE_E_S_QiriExclusion_E_Star_C": 177,
    "~": 178,
    "-": 179,
    "QGT_TILDE_E_Opt": 180,
    "literal": 181,
    "Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt": 182,
    "QliteralExclusion_E_Star": 183,
    "O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C": 184,
    "LANGTAG": 185,
    "Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt": 186,
    "O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C": 187,
    "QlanguageExclusion_E_Star": 188,
    "&": 189,
    "//": 190,
    "O_Qiri_E_Or_Qliteral_E_C": 191,
    "QcodeDecl_E_Star": 192,
    "%": 193,
    "O_QCODE_E_Or_QGT_MODULO_E_C": 194,
    "CODE": 195,
    "rdfLiteral": 196,
    "numericLiteral": 197,
    "booleanLiteral": 198,
    "a": 199,
    "blankNode": 200,
    "langString": 201,
    "Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt": 202,
    "O_QGT_DTYPE_E_S_Qdatatype_E_C": 203,
    "IT_true": 204,
    "IT_false": 205,
    "STRING_LITERAL1": 206,
    "STRING_LITERAL_LONG1": 207,
    "STRING_LITERAL2": 208,
    "STRING_LITERAL_LONG2": 209,
    "LANG_STRING_LITERAL1": 210,
    "LANG_STRING_LITERAL_LONG1": 211,
    "LANG_STRING_LITERAL2": 212,
    "LANG_STRING_LITERAL_LONG2": 213,
    "prefixedName": 214,
    "PNAME_LN": 215,
    "BLANK_NODE_LABEL": 216,
    "O_QIT_EXTENDS_E_Or_QGT_AMP_E_C": 217,
    "IT_EXTENDS": 218,
    "O_QIT_RESTRICTS_E_Or_QGT_MINUS_E_C": 219,
    "IT_RESTRICTS": 220,
    "$accept": 0,
    "$end": 1
  };
  this.terminals_ = {
    2: "error",
    7: "EOF",
    18: "IT_BASE",
    19: "IRIREF",
    20: "IT_PREFIX",
    21: "PNAME_NS",
    23: "IT_IMPORT",
    26: "IT_start",
    27: "=",
    36: "IT_ABSTRACT",
    39: "IT_EXTERNAL",
    43: "IT_NOT",
    51: "IT_OR",
    53: "IT_AND",
    69: "(",
    70: ")",
    71: ".",
    79: "ATPNAME_LN",
    80: "ATPNAME_NS",
    81: "@",
    85: "IT_LITERAL",
    96: "IT_IRI",
    97: "IT_BNODE",
    98: "IT_NONLITERAL",
    100: "INTEGER",
    101: "REGEXP",
    102: "IT_LENGTH",
    103: "IT_MINLENGTH",
    104: "IT_MAXLENGTH",
    108: "DECIMAL",
    109: "DOUBLE",
    111: "^^",
    112: "IT_MININCLUSIVE",
    113: "IT_MINEXCLUSIVE",
    114: "IT_MAXINCLUSIVE",
    115: "IT_MAXEXCLUSIVE",
    116: "IT_TOTALDIGITS",
    117: "IT_FRACTIONDIGITS",
    119: "{",
    121: "}",
    125: "IT_CLOSED",
    127: "IT_EXTRA",
    135: "|",
    140: ",",
    141: ";",
    148: "$",
    156: "*",
    157: "+",
    158: "?",
    159: "REPEAT_RANGE",
    160: "^",
    161: "[",
    163: "]",
    178: "~",
    179: "-",
    185: "LANGTAG",
    189: "&",
    190: "//",
    193: "%",
    195: "CODE",
    199: "a",
    204: "IT_true",
    205: "IT_false",
    206: "STRING_LITERAL1",
    207: "STRING_LITERAL_LONG1",
    208: "STRING_LITERAL2",
    209: "STRING_LITERAL_LONG2",
    210: "LANG_STRING_LITERAL1",
    211: "LANG_STRING_LITERAL_LONG1",
    212: "LANG_STRING_LITERAL2",
    213: "LANG_STRING_LITERAL_LONG2",
    215: "PNAME_LN",
    216: "BLANK_NODE_LABEL",
    218: "IT_EXTENDS",
    220: "IT_RESTRICTS"
  };
  this.productions_ = [0, [3, 4], [4, 0], [5, 0], [5, 2], [9, 1], [9, 1], [12, 0], [12, 2], [14, 2], [6, 0], [6, 1], [8, 1], [8, 1], [8, 1], [15, 2], [16, 3], [17, 2], [10, 1], [10, 1], [24, 4], [11, 1], [30, 1], [30, 2], [13, 1], [13, 1], [25, 4], [32, 0], [32, 1], [34, 0], [34, 2], [35, 1], [35, 1], [38, 3], [38, 3], [38, 2], [42, 0], [42, 1], [46, 1], [45, 1], [45, 2], [50, 2], [48, 1], [48, 2], [52, 2], [49, 1], [49, 2], [29, 0], [29, 2], [47, 2], [57, 2], [56, 0], [56, 2], [28, 2], [58, 0], [58, 2], [55, 2], [61, 2], [60, 0], [60, 2], [54, 2], [40, 0], [40, 1], [59, 2], [62, 2], [62, 1], [62, 2], [62, 3], [62, 1], [65, 0], [65, 1], [68, 0], [68, 1], [41, 2], [41, 1], [41, 2], [41, 3], [41, 1], [63, 2], [63, 1], [63, 2], [63, 3], [63, 1], [74, 0], [74, 1], [77, 0], [77, 1], [67, 1], [67, 1], [76, 1], [76, 1], [44, 1], [44, 1], [44, 2], [66, 3], [82, 0], [82, 2], [64, 3], [75, 2], [75, 2], [75, 2], [75, 1], [86, 0], [86, 2], [89, 1], [89, 2], [73, 2], [73, 1], [93, 0], [93, 2], [94, 1], [94, 2], [92, 1], [92, 1], [92, 1], [90, 1], [90, 1], [95, 2], [95, 1], [99, 1], [99, 1], [99, 1], [91, 2], [91, 2], [106, 1], [106, 1], [106, 1], [106, 3], [105, 1], [105, 1], [105, 1], [105, 1], [107, 1], [107, 1], [72, 3], [78, 4], [122, 1], [122, 1], [122, 1], [118, 0], [118, 2], [120, 0], [120, 1], [124, 2], [128, 1], [128, 2], [126, 1], [130, 1], [130, 1], [132, 2], [134, 2], [133, 1], [133, 2], [131, 1], [131, 1], [136, 2], [139, 0], [139, 1], [139, 1], [137, 3], [143, 2], [143, 2], [142, 1], [142, 2], [138, 2], [138, 1], [147, 2], [144, 0], [144, 1], [145, 1], [145, 1], [151, 6], [152, 0], [152, 1], [150, 6], [154, 0], [154, 1], [153, 1], [153, 1], [153, 1], [153, 1], [155, 1], [88, 3], [162, 0], [162, 2], [164, 1], [164, 1], [164, 1], [164, 2], [169, 1], [169, 2], [171, 1], [171, 2], [173, 1], [173, 2], [168, 1], [168, 1], [168, 1], [165, 2], [176, 0], [176, 2], [177, 2], [175, 0], [175, 1], [170, 3], [180, 0], [180, 1], [166, 2], [183, 0], [183, 2], [184, 2], [182, 0], [182, 1], [172, 3], [167, 2], [167, 2], [188, 0], [188, 2], [187, 2], [186, 0], [186, 1], [174, 3], [146, 2], [84, 3], [191, 1], [191, 1], [83, 1], [192, 0], [192, 2], [31, 3], [194, 1], [194, 1], [181, 1], [181, 1], [181, 1], [129, 1], [129, 1], [87, 1], [33, 1], [33, 1], [149, 1], [149, 1], [197, 1], [197, 1], [197, 1], [196, 1], [196, 2], [203, 2], [202, 0], [202, 1], [198, 1], [198, 1], [110, 1], [110, 1], [110, 1], [110, 1], [201, 1], [201, 1], [201, 1], [201, 1], [22, 1], [22, 1], [214, 1], [214, 1], [200, 1], [123, 2], [217, 1], [217, 1], [37, 2], [219, 1], [219, 1]];
  this.table = [o($V0, [2, 2], {
    3: 1,
    4: 2
  }), {
    1: [3]
  }, o($V0, [2, 3], {
    5: 3
  }), o($V1, $V2, {
    6: 4,
    8: 5,
    14: 6,
    15: 7,
    16: 8,
    17: 9,
    9: 10,
    10: 14,
    11: 15,
    24: 16,
    25: 17,
    30: 18,
    32: 20,
    31: 21,
    7: [2, 10],
    18: [1, 11],
    20: [1, 12],
    23: [1, 13],
    26: [1, 19],
    36: $V3,
    193: $V4
  }), {
    7: [1, 24]
  }, o($V0, [2, 4]), {
    7: [2, 11]
  }, o($V0, $V5), o($V0, $V6), o($V0, $V7), o($V8, [2, 7], {
    12: 25
  }), {
    19: [1, 26]
  }, {
    21: [1, 27]
  }, {
    19: $V9,
    21: $Va,
    22: 28,
    214: 30,
    215: $Vb
  }, o($V8, [2, 5]), o($V8, [2, 6]), o($V8, $Vc), o($V8, $Vd), o($V8, [2, 21], {
    31: 33,
    193: $V4
  }), {
    27: [1, 34]
  }, {
    19: $Ve,
    21: $Vf,
    22: 36,
    33: 35,
    200: 37,
    214: 39,
    215: $Vg,
    216: $Vh
  }, o($V0, [2, 22]), o($V1, [2, 28]), {
    19: $Vi,
    21: $Vj,
    22: 43,
    214: 45,
    215: $Vk
  }, {
    1: [2, 1]
  }, o($V1, $V2, {
    13: 48,
    8: 49,
    10: 50,
    15: 51,
    16: 52,
    17: 53,
    24: 54,
    25: 55,
    32: 60,
    7: [2, 9],
    18: [1, 56],
    20: [1, 57],
    23: [1, 58],
    26: [1, 59],
    36: $V3
  }), o($V0, $Vl), {
    19: $V9,
    21: $Va,
    22: 61,
    214: 30,
    215: $Vb
  }, o($V0, $Vm), o($V0, $Vn), o($V0, $Vo), o($V0, $Vp), o($V0, $Vq), o($V0, [2, 23]), o($Vr, $Vs, {
    28: 62,
    54: 63,
    40: 64,
    43: $Vt
  }), o($Vu, $Vv, {
    34: 66
  }), o($Vu, $Vw), o($Vu, $Vx), o($Vu, $Vn), o($Vu, $Vo), o($Vu, $Vy), o($Vu, $Vp), o($Vu, $Vq), {
    193: [1, 69],
    194: 67,
    195: [1, 68]
  }, o($Vz, $Vn), o($Vz, $Vo), o($Vz, $Vp), o($Vz, $Vq), o($V8, [2, 8]), o($V8, [2, 24]), o($V8, [2, 25]), o($V8, $V5), o($V8, $V6), o($V8, $V7), o($V8, $Vc), o($V8, $Vd), {
    19: [1, 70]
  }, {
    21: [1, 71]
  }, {
    19: $VA,
    21: $VB,
    22: 72,
    214: 74,
    215: $VC
  }, {
    27: [1, 77]
  }, {
    19: $Ve,
    21: $Vf,
    22: 36,
    33: 78,
    200: 37,
    214: 39,
    215: $Vg,
    216: $Vh
  }, o($V0, $VD), o($VE, $VF, {
    29: 79
  }), o($VG, $VH, {
    58: 80
  }), o($VI, $VJ, {
    62: 81,
    64: 82,
    66: 83,
    67: 84,
    73: 87,
    75: 88,
    72: 89,
    44: 90,
    92: 91,
    94: 92,
    87: 94,
    88: 95,
    89: 96,
    78: 97,
    95: 104,
    22: 105,
    91: 107,
    118: 108,
    99: 109,
    214: 112,
    105: 113,
    107: 114,
    19: $VK,
    21: $VL,
    69: [1, 85],
    71: [1, 86],
    79: [1, 98],
    80: [1, 99],
    81: [1, 100],
    85: $VM,
    96: $VN,
    97: $VO,
    98: $VP,
    101: $VQ,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: $V_,
    215: $V$
  }), o($Vr, $V01), o($V11, $Vs, {
    35: 126,
    37: 127,
    38: 128,
    219: 130,
    40: 131,
    44: 133,
    39: [1, 129],
    43: [1, 132],
    79: $V21,
    80: $V31,
    81: $V41,
    179: $V51,
    220: $V61
  }), o($V0, $V71), o($V0, $V81), o($V0, $V91), o($V8, $Vl), {
    19: $VA,
    21: $VB,
    22: 139,
    214: 74,
    215: $VC
  }, o($V8, $Vm), o($V8, $Vn), o($V8, $Vo), o($V8, $Vp), o($V8, $Vq), o($Vr, $Vs, {
    28: 140,
    54: 141,
    40: 142,
    43: $Vt
  }), o($Vu, $Vv, {
    34: 143
  }), o($V8, $Va1, {
    50: 144,
    51: $Vb1
  }), o($VE, $Vc1, {
    52: 146,
    53: $Vd1
  }), o($VG, $Ve1), o($VG, $Vf1, {
    65: 148,
    67: 149,
    72: 150,
    44: 151,
    78: 152,
    118: 156,
    79: $Vg1,
    80: $Vh1,
    81: $Vi1,
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 157,
    64: 158,
    73: 159,
    92: 160,
    94: 161,
    95: 165,
    99: 166,
    96: $Vl1,
    97: $Vm1,
    98: $Vn1,
    101: $Vo1,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    38: 168,
    40: 169,
    44: 171,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 172
  }), o($Vt1, $Vs1, {
    82: 173
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 174
  }), o($Vr1, $Vz1, {
    99: 109,
    95: 175,
    101: $VQ,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 176
  }), o($VA1, $VB1, {
    86: 177
  }), o($VA1, $VB1, {
    86: 178
  }), o($Vt1, $VC1, {
    105: 113,
    107: 114,
    91: 179,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 180
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 184],
    21: [1, 188],
    22: 182,
    33: 181,
    200: 183,
    214: 185,
    215: [1, 187],
    216: [1, 186]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 189
  }), o($VN1, $VO1), {
    119: [1, 190],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 199]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 201],
    106: 200,
    108: [1, 202],
    109: [1, 203],
    110: 204,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 209]
  }, {
    100: [2, 119]
  }, {
    100: [2, 120]
  }, {
    100: [2, 121]
  }, o($VA1, $Vp), o($VA1, $Vq), o($VY1, [2, 128]), o($VY1, [2, 129]), o($VY1, [2, 130]), o($VY1, [2, 131]), {
    100: [2, 132]
  }, {
    100: [2, 133]
  }, o($V8, $VZ1), o($Vu, [2, 30]), o($V8, $V_1), o($V8, $V$1), o($VI, $VJ, {
    67: 210,
    72: 211,
    44: 212,
    78: 213,
    118: 217,
    79: [1, 214],
    80: [1, 215],
    81: [1, 216]
  }), o($VI, $VJ, {
    73: 87,
    75: 88,
    92: 91,
    94: 92,
    87: 94,
    88: 95,
    89: 96,
    78: 97,
    95: 104,
    22: 105,
    91: 107,
    118: 108,
    99: 109,
    214: 112,
    105: 113,
    107: 114,
    41: 218,
    64: 219,
    66: 220,
    72: 221,
    19: $VK,
    21: $VL,
    69: [1, 222],
    71: [1, 223],
    85: $VM,
    96: $VN,
    97: $VO,
    98: $VP,
    101: $VQ,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: $V_,
    215: $V$
  }), o($V11, $V01, {
    44: 224,
    79: $Vg1,
    80: $Vh1,
    81: $Vi1
  }), {
    45: 225,
    48: 226,
    49: 227,
    50: 228,
    51: $Vb1,
    52: 229,
    53: $Vd1
  }, o($V02, [2, 269]), o($V02, [2, 270]), o($V12, $VE1), o($V12, $VF1), {
    19: [1, 233],
    21: [1, 237],
    22: 231,
    33: 230,
    200: 232,
    214: 234,
    215: [1, 236],
    216: [1, 235]
  }, o($V8, $VD), o($VE, $VF, {
    29: 238
  }), o($VG, $VH, {
    58: 239
  }), o($VI, $VJ, {
    62: 240,
    64: 241,
    66: 242,
    67: 243,
    73: 246,
    75: 247,
    72: 248,
    44: 249,
    92: 250,
    94: 251,
    87: 253,
    88: 254,
    89: 255,
    78: 256,
    95: 263,
    22: 264,
    91: 266,
    118: 267,
    99: 268,
    214: 271,
    105: 272,
    107: 273,
    19: $V22,
    21: $V32,
    69: [1, 244],
    71: [1, 245],
    79: [1, 257],
    80: [1, 258],
    81: [1, 259],
    85: $V42,
    96: $V52,
    97: $V62,
    98: $V72,
    101: $V82,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: $V92,
    215: $Va2
  }), o($V11, $Vs, {
    37: 127,
    219: 130,
    35: 276,
    38: 277,
    40: 279,
    44: 281,
    39: [1, 278],
    43: [1, 280],
    79: $V21,
    80: $V31,
    81: $V41,
    179: $V51,
    220: $V61
  }), o($VE, $Vb2), o($Vr, $Vs, {
    28: 282,
    54: 283,
    40: 284,
    43: $Vt
  }), o($VG, $Vc2), o($Vr, $Vs, {
    54: 285,
    40: 286,
    43: $Vt
  }), o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 287
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 291],
    21: [1, 295],
    22: 289,
    33: 288,
    200: 290,
    214: 292,
    215: [1, 294],
    216: [1, 293]
  }, {
    119: [1, 296],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 297
  }), o($Vh2, $Vy1, {
    93: 298
  }), o($Vt1, $Vz1, {
    99: 166,
    95: 299,
    101: $Vo1,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 300]
  }, o($Vh2, $VT1), {
    70: [1, 301]
  }, o($VI, $VJ, {
    41: 302,
    64: 303,
    66: 304,
    72: 305,
    73: 308,
    75: 309,
    78: 310,
    92: 311,
    94: 312,
    87: 314,
    88: 315,
    89: 316,
    118: 317,
    95: 321,
    22: 322,
    91: 324,
    99: 325,
    214: 328,
    105: 329,
    107: 330,
    19: [1, 327],
    21: [1, 332],
    69: [1, 306],
    71: [1, 307],
    85: [1, 313],
    96: [1, 318],
    97: [1, 319],
    98: [1, 320],
    101: $Vi2,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 323],
    215: [1, 331]
  }), o($V11, $V01, {
    44: 333,
    79: $Vj2,
    80: $Vk2,
    81: $Vl2
  }), {
    45: 337,
    48: 338,
    49: 339,
    50: 340,
    51: $Vm2,
    52: 341,
    53: $Vn2
  }, o($Vo2, $Vp2, {
    83: 344,
    84: 345,
    192: 346,
    190: [1, 347]
  }), o($Vq2, $Vp2, {
    83: 348,
    84: 349,
    192: 350,
    190: $Vr2
  }), o($Vr1, $Vs2, {
    99: 109,
    95: 352,
    101: $VQ,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 353,
    95: 354,
    91: 355,
    99: 356,
    105: 358,
    107: 359,
    101: $Vv2,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 353,
    95: 354,
    91: 355,
    99: 356,
    105: 358,
    107: 359,
    101: $Vv2,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 353,
    95: 354,
    91: 355,
    99: 356,
    105: 358,
    107: 359,
    101: $Vv2,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 360,
    84: 361,
    192: 362,
    190: [1, 363]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 364],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    120: 396,
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VI, [2, 140]), o($VI, [2, 136]), o($VI, [2, 137]), o($VI, [2, 138]), o($VI, $VJ, {
    67: 409,
    72: 410,
    44: 411,
    78: 412,
    118: 416,
    79: [1, 413],
    80: [1, 414],
    81: [1, 415]
  }), {
    19: $VZ2,
    21: $V_2,
    22: 419,
    128: 417,
    129: 418,
    199: $V$2,
    214: 422,
    215: $V03
  }, o($V02, [2, 266]), o($V02, [2, 267]), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 425]
  }, {
    111: $V63
  }, {
    111: $V73
  }, {
    111: $V83
  }, {
    111: $V93
  }, o($VN1, $Va3), o($Vu, [2, 268]), o($Vu, $Vv1), o($Vu, $Vw1), o($Vb3, $Vs1, {
    82: 426
  }), o($Vu, $VE1), o($Vu, $VF1), {
    19: [1, 430],
    21: [1, 434],
    22: 428,
    33: 427,
    200: 429,
    214: 431,
    215: [1, 433],
    216: [1, 432]
  }, {
    119: [1, 435],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($V8, $Vc3, {
    48: 226,
    49: 227,
    50: 228,
    52: 229,
    42: 436,
    45: 437,
    51: $Vb1,
    53: $Vd1
  }), o($VG, $Vf1, {
    67: 149,
    72: 150,
    44: 151,
    78: 152,
    118: 156,
    65: 438,
    79: $Vg1,
    80: $Vh1,
    81: $Vi1,
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vd3), o($VG, $Vk1, {
    64: 158,
    73: 159,
    92: 160,
    94: 161,
    95: 165,
    99: 166,
    68: 439,
    96: $Vl1,
    97: $Vm1,
    98: $Vn1,
    101: $Vo1,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 440,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Ve3), o($V8, $Vc3, {
    48: 226,
    49: 227,
    50: 228,
    52: 229,
    45: 437,
    42: 441,
    51: $Vb1,
    53: $Vd1
  }), o($V8, $Vf3), o($V8, $Vg3, {
    50: 442,
    51: $Vb1
  }), o($VE, $VF, {
    29: 443,
    52: 444,
    53: $Vd1
  }), o($VE, $Vh3), o($VG, $Vi3), o($V12, $VA2), o($V12, $Vw), o($V12, $Vx), o($V12, $Vn), o($V12, $Vo), o($V12, $Vy), o($V12, $Vp), o($V12, $Vq), o($V8, $Va1, {
    50: 445,
    51: $Vj3
  }), o($VE, $Vc1, {
    52: 447,
    53: $Vk3
  }), o($VG, $Ve1), o($VG, $Vf1, {
    65: 449,
    67: 450,
    72: 451,
    44: 452,
    78: 453,
    118: 457,
    79: $Vl3,
    80: $Vm3,
    81: $Vn3,
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 458,
    64: 459,
    73: 460,
    92: 461,
    94: 462,
    95: 466,
    99: 467,
    96: $Vo3,
    97: $Vp3,
    98: $Vq3,
    101: $Vr3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 469,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 470
  }), o($Vt1, $Vs1, {
    82: 471
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 472
  }), o($Vr1, $Vz1, {
    99: 268,
    95: 473,
    101: $V82,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 474
  }), o($VA1, $VB1, {
    86: 475
  }), o($VA1, $VB1, {
    86: 476
  }), o($Vt1, $VC1, {
    105: 272,
    107: 273,
    91: 477,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 478
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 482],
    21: [1, 486],
    22: 480,
    33: 479,
    200: 481,
    214: 483,
    215: [1, 485],
    216: [1, 484]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 487
  }), o($VN1, $VO1), {
    119: [1, 488],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 489]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 491],
    106: 490,
    108: [1, 492],
    109: [1, 493],
    110: 494,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 495]
  }, o($VA1, $Vp), o($VA1, $Vq), o($V8, $VZ1), o($V8, $V_1), o($V8, $V$1), o($VI, $VJ, {
    73: 246,
    75: 247,
    92: 250,
    94: 251,
    87: 253,
    88: 254,
    89: 255,
    78: 256,
    95: 263,
    22: 264,
    91: 266,
    118: 267,
    99: 268,
    214: 271,
    105: 272,
    107: 273,
    41: 496,
    64: 497,
    66: 498,
    72: 499,
    19: $V22,
    21: $V32,
    69: [1, 500],
    71: [1, 501],
    85: $V42,
    96: $V52,
    97: $V62,
    98: $V72,
    101: $V82,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: $V92,
    215: $Va2
  }), o($V11, $V01, {
    44: 502,
    79: $Vl3,
    80: $Vm3,
    81: $Vn3
  }), {
    45: 503,
    48: 504,
    49: 505,
    50: 506,
    51: $Vj3,
    52: 507,
    53: $Vk3
  }, o($VE, $Vs3), o($VG, $VH, {
    58: 508
  }), o($VI, $VJ, {
    62: 509,
    64: 510,
    66: 511,
    67: 512,
    73: 515,
    75: 516,
    72: 517,
    44: 518,
    92: 519,
    94: 520,
    87: 522,
    88: 523,
    89: 524,
    78: 525,
    95: 532,
    22: 533,
    91: 535,
    118: 536,
    99: 537,
    214: 540,
    105: 541,
    107: 542,
    19: [1, 539],
    21: [1, 544],
    69: [1, 513],
    71: [1, 514],
    79: [1, 526],
    80: [1, 527],
    81: [1, 528],
    85: [1, 521],
    96: [1, 529],
    97: [1, 530],
    98: [1, 531],
    101: $Vt3,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 534],
    215: [1, 543]
  }), o($VG, $Vu3), o($VI, $VJ, {
    62: 545,
    64: 546,
    66: 547,
    67: 548,
    73: 551,
    75: 552,
    72: 553,
    44: 554,
    92: 555,
    94: 556,
    87: 558,
    88: 559,
    89: 560,
    78: 561,
    95: 568,
    22: 569,
    91: 571,
    118: 572,
    99: 573,
    214: 576,
    105: 577,
    107: 578,
    19: [1, 575],
    21: [1, 580],
    69: [1, 549],
    71: [1, 550],
    79: [1, 562],
    80: [1, 563],
    81: [1, 564],
    85: [1, 557],
    96: [1, 565],
    97: [1, 566],
    98: [1, 567],
    101: $Vv3,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 570],
    215: [1, 579]
  }), o($Vq2, $Vp2, {
    84: 349,
    192: 350,
    83: 581,
    190: $Vr2
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 582,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 349,
    192: 350,
    83: 583,
    190: $Vr2
  }), o($Vt1, $Vs2, {
    99: 166,
    95: 584,
    101: $Vo1,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), {
    42: 585,
    45: 586,
    48: 338,
    49: 339,
    50: 340,
    51: $Vm2,
    52: 341,
    53: $Vn2,
    70: $Vc3
  }, o($VI, $VJ, {
    65: 587,
    67: 588,
    72: 589,
    44: 590,
    78: 591,
    118: 592,
    51: $Vf1,
    53: $Vf1,
    70: $Vf1,
    79: $Vj2,
    80: $Vk2,
    81: $Vl2
  }), o($Vx3, $Vd3), o($Vx3, $Vk1, {
    68: 593,
    64: 594,
    73: 595,
    92: 596,
    94: 597,
    95: 601,
    99: 602,
    96: [1, 598],
    97: [1, 599],
    98: [1, 600],
    101: $Vy3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 604,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Vx3, $Ve3), o($Vz3, $Vs1, {
    82: 605
  }), o($VA3, $Vs1, {
    82: 606
  }), o($VB3, $Vs1, {
    82: 607
  }), o($VC3, $Vy1, {
    93: 608
  }), o($Vz3, $Vz1, {
    99: 325,
    95: 609,
    101: $Vi2,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VD3, $VB1, {
    86: 610
  }), o($VD3, $VB1, {
    86: 611
  }), o($VD3, $VB1, {
    86: 612
  }), o($VA3, $VC1, {
    105: 329,
    107: 330,
    91: 613,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), {
    119: [1, 614],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VC3, $VG1), o($VC3, $VH1), o($VC3, $VI1), o($VC3, $VJ1), o($VD3, $VK1), o($VL1, $VM1, {
    162: 615
  }), o($VE3, $VO1), {
    100: [1, 616]
  }, o($VC3, $VT1), o($VD3, $Vn), o($VD3, $Vo), {
    100: [1, 618],
    106: 617,
    108: [1, 619],
    109: [1, 620],
    110: 621,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 622]
  }, o($VD3, $Vp), o($VD3, $Vq), {
    42: 623,
    45: 586,
    48: 338,
    49: 339,
    50: 340,
    51: $Vm2,
    52: 341,
    53: $Vn2,
    70: $Vc3
  }, o($Vx3, $VE1), o($Vx3, $VF1), {
    19: [1, 627],
    21: [1, 631],
    22: 625,
    33: 624,
    200: 626,
    214: 628,
    215: [1, 630],
    216: [1, 629]
  }, {
    70: $Vf3
  }, {
    50: 632,
    51: $Vm2,
    70: $Vg3
  }, o($VF3, $VF, {
    29: 633,
    52: 634,
    53: $Vn2
  }), o($VF3, $Vh3), o($Vx3, $Vi3), o($Vr, $Vs, {
    28: 635,
    54: 636,
    40: 637,
    43: $Vt
  }), o($Vr, $Vs, {
    54: 638,
    40: 639,
    43: $Vt
  }), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 640,
    193: [1, 641]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 642,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 649,
    193: [1, 650]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 651,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 652]
  }, o($VA1, $VT1), {
    100: [1, 654],
    106: 653,
    108: [1, 655],
    109: [1, 656],
    110: 657,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 658]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 659,
    193: [1, 660]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 661,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), o($VL1, [2, 184]), o($VL1, [2, 185]), o($VL1, [2, 186]), o($VL1, [2, 187]), {
    168: 662,
    169: 663,
    170: 666,
    171: 664,
    172: 667,
    173: 665,
    174: 668,
    179: [1, 669]
  }, o($VL1, [2, 202], {
    175: 670,
    177: 671,
    178: [1, 672]
  }), o($VL1, [2, 211], {
    182: 673,
    184: 674,
    178: [1, 675]
  }), o($VL1, [2, 219], {
    186: 676,
    187: 677,
    178: $VV3
  }), {
    178: $VV3,
    187: 679
  }, o($VW3, $Vn), o($VW3, $Vo), o($VW3, $VX3), o($VW3, $VY3), o($VW3, $VZ3), o($VW3, $Vp), o($VW3, $Vq), o($VW3, $V_3), o($VW3, $V$3, {
    202: 680,
    203: 681,
    111: [1, 682]
  }), o($VW3, $V04), o($VW3, $V14), o($VW3, $V24), o($VW3, $V34), o($VW3, $V44), o($VW3, $V54), o($VW3, $V64), o($VW3, $V74), o($VW3, $V84), o($V94, $V63), o($V94, $V73), o($V94, $V83), o($V94, $V93), {
    121: [1, 683]
  }, {
    121: [2, 142]
  }, {
    121: $Va4
  }, {
    121: $Vb4,
    133: 684,
    134: 685,
    135: $Vc4
  }, {
    121: $Vd4
  }, o($Ve4, $Vf4), o($Ve4, $Vg4), o($Ve4, $Vh4, {
    139: 687,
    142: 688,
    143: 691,
    140: $Vi4,
    141: $Vj4
  }), o($Vk4, $Vl4, {
    145: 692,
    150: 693,
    151: 694,
    154: 695,
    155: 697,
    69: [1, 696],
    160: $Vm4
  }), o($Vn4, $Vo4), o($VU2, [2, 168]), {
    19: [1, 702],
    21: [1, 706],
    22: 700,
    149: 699,
    200: 701,
    214: 703,
    215: [1, 705],
    216: [1, 704]
  }, {
    19: [1, 710],
    21: [1, 714],
    22: 708,
    149: 707,
    200: 709,
    214: 711,
    215: [1, 713],
    216: [1, 712]
  }, o($VI, [2, 265]), o($VI, $Vv1), o($VI, $Vw1), o($Vp4, $Vs1, {
    82: 715
  }), o($VI, $VE1), o($VI, $VF1), {
    19: [1, 719],
    21: [1, 723],
    22: 717,
    33: 716,
    200: 718,
    214: 720,
    215: [1, 722],
    216: [1, 721]
  }, {
    119: [1, 724],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VI, [2, 143], {
    22: 419,
    214: 422,
    129: 725,
    19: $VZ2,
    21: $V_2,
    199: $V$2,
    215: $V03
  }), o($Vq4, [2, 144]), o($Vq4, $Vr4), o($Vq4, $Vs4), o($Vq4, $Vn), o($Vq4, $Vo), o($Vq4, $Vp), o($Vq4, $Vq), {
    19: [1, 728],
    21: [1, 731],
    22: 727,
    87: 726,
    214: 729,
    215: [1, 730]
  }, o($Vt4, $Vp2, {
    83: 732,
    84: 733,
    192: 734,
    190: [1, 735]
  }), o($Vu, $VA2), o($Vu, $Vw), o($Vu, $Vx), o($Vu, $Vn), o($Vu, $Vo), o($Vu, $Vy), o($Vu, $Vp), o($Vu, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 736,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($V8, $Vu4), o($V8, $Vv4), o($VG, $Vw4), o($VG, $Vx4), {
    70: [1, 737]
  }, o($V8, $Vy4), o($VE, $Vz4), o($V8, $VA4, {
    50: 144,
    51: $Vb1
  }), o($VG, $VB4), o($VE, $Vb2), o($Vr, $Vs, {
    28: 738,
    54: 739,
    40: 740,
    43: $Vt
  }), o($VG, $Vc2), o($Vr, $Vs, {
    54: 741,
    40: 742,
    43: $Vt
  }), o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 743
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 747],
    21: [1, 751],
    22: 745,
    33: 744,
    200: 746,
    214: 748,
    215: [1, 750],
    216: [1, 749]
  }, {
    119: [1, 752],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 753
  }), o($Vh2, $Vy1, {
    93: 754
  }), o($Vt1, $Vz1, {
    99: 467,
    95: 755,
    101: $Vr3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 756]
  }, o($Vh2, $VT1), {
    70: [1, 757]
  }, o($Vo2, $Vp2, {
    83: 758,
    84: 759,
    192: 760,
    190: [1, 761]
  }), o($Vq2, $Vp2, {
    83: 762,
    84: 763,
    192: 764,
    190: $VC4
  }), o($Vr1, $Vs2, {
    99: 268,
    95: 766,
    101: $V82,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 767,
    95: 768,
    91: 769,
    99: 770,
    105: 772,
    107: 773,
    101: $VD4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 767,
    95: 768,
    91: 769,
    99: 770,
    105: 772,
    107: 773,
    101: $VD4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 767,
    95: 768,
    91: 769,
    99: 770,
    105: 772,
    107: 773,
    101: $VD4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 774,
    84: 775,
    192: 776,
    190: [1, 777]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 778],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 779,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 780]
  }, o($VN1, $Va3), o($V8, $Vc3, {
    48: 504,
    49: 505,
    50: 506,
    52: 507,
    42: 781,
    45: 782,
    51: $Vj3,
    53: $Vk3
  }), o($VG, $Vf1, {
    67: 450,
    72: 451,
    44: 452,
    78: 453,
    118: 457,
    65: 783,
    79: $Vl3,
    80: $Vm3,
    81: $Vn3,
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vd3), o($VG, $Vk1, {
    64: 459,
    73: 460,
    92: 461,
    94: 462,
    95: 466,
    99: 467,
    68: 784,
    96: $Vo3,
    97: $Vp3,
    98: $Vq3,
    101: $Vr3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 785,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Ve3), o($V8, $Vc3, {
    48: 504,
    49: 505,
    50: 506,
    52: 507,
    45: 782,
    42: 786,
    51: $Vj3,
    53: $Vk3
  }), o($V8, $Vf3), o($V8, $Vg3, {
    50: 787,
    51: $Vj3
  }), o($VE, $VF, {
    29: 788,
    52: 789,
    53: $Vk3
  }), o($VE, $Vh3), o($VG, $Vi3), o($VE, $Vc1, {
    52: 790,
    53: [1, 791]
  }), o($VG, $Ve1), o($VG, $Vf1, {
    65: 792,
    67: 793,
    72: 794,
    44: 795,
    78: 796,
    118: 800,
    79: [1, 797],
    80: [1, 798],
    81: [1, 799],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 801,
    64: 802,
    73: 803,
    92: 804,
    94: 805,
    95: 809,
    99: 810,
    96: [1, 806],
    97: [1, 807],
    98: [1, 808],
    101: $VE4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 812,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 813
  }), o($Vt1, $Vs1, {
    82: 814
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 815
  }), o($Vr1, $Vz1, {
    99: 537,
    95: 816,
    101: $Vt3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 817
  }), o($VA1, $VB1, {
    86: 818
  }), o($VA1, $VB1, {
    86: 819
  }), o($Vt1, $VC1, {
    105: 541,
    107: 542,
    91: 820,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 821
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 825],
    21: [1, 829],
    22: 823,
    33: 822,
    200: 824,
    214: 826,
    215: [1, 828],
    216: [1, 827]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 830
  }), o($VN1, $VO1), {
    119: [1, 831],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 832]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 834],
    106: 833,
    108: [1, 835],
    109: [1, 836],
    110: 837,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 838]
  }, o($VA1, $Vp), o($VA1, $Vq), o($VG, $Ve1), o($VG, $Vf1, {
    65: 839,
    67: 840,
    72: 841,
    44: 842,
    78: 843,
    118: 847,
    79: [1, 844],
    80: [1, 845],
    81: [1, 846],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 848,
    64: 849,
    73: 850,
    92: 851,
    94: 852,
    95: 856,
    99: 857,
    96: [1, 853],
    97: [1, 854],
    98: [1, 855],
    101: $VF4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 859,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 860
  }), o($Vt1, $Vs1, {
    82: 861
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 862
  }), o($Vr1, $Vz1, {
    99: 573,
    95: 863,
    101: $Vv3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 864
  }), o($VA1, $VB1, {
    86: 865
  }), o($VA1, $VB1, {
    86: 866
  }), o($Vt1, $VC1, {
    105: 577,
    107: 578,
    91: 867,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 868
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 872],
    21: [1, 876],
    22: 870,
    33: 869,
    200: 871,
    214: 873,
    215: [1, 875],
    216: [1, 874]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 877
  }), o($VN1, $VO1), {
    119: [1, 878],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 879]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 881],
    106: 880,
    108: [1, 882],
    109: [1, 883],
    110: 884,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 885]
  }, o($VA1, $Vp), o($VA1, $Vq), o($VG, $VT3), {
    121: [1, 886]
  }, o($VG, $VH3), o($Vh2, $VP3), {
    70: $Vu4
  }, {
    70: $Vv4
  }, o($Vx3, $Vw4), o($Vx3, $Ve2), o($Vx3, $Vv1), o($Vx3, $Vw1), o($VA3, $Vs1, {
    82: 887
  }), {
    119: [1, 888],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vx3, $Vx4), o($Vx3, $Vg2), o($VA3, $Vs1, {
    82: 889
  }), o($VG4, $Vy1, {
    93: 890
  }), o($VA3, $Vz1, {
    99: 602,
    95: 891,
    101: $Vy3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $VG1), o($VG4, $VH1), o($VG4, $VI1), o($VG4, $VJ1), {
    100: [1, 892]
  }, o($VG4, $VT1), {
    70: [1, 893]
  }, o($VH4, $Vp2, {
    83: 894,
    84: 895,
    192: 896,
    190: [1, 897]
  }), o($VI4, $Vp2, {
    83: 898,
    84: 899,
    192: 900,
    190: $VJ4
  }), o($VK4, $Vp2, {
    83: 902,
    84: 903,
    192: 904,
    190: [1, 905]
  }), o($Vz3, $Vs2, {
    99: 325,
    95: 906,
    101: $Vi2,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VC3, $Vt2), o($VA3, $Vu2, {
    90: 907,
    95: 908,
    91: 909,
    99: 910,
    105: 912,
    107: 913,
    101: $VL4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vw2, {
    90: 907,
    95: 908,
    91: 909,
    99: 910,
    105: 912,
    107: 913,
    101: $VL4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vx2, {
    90: 907,
    95: 908,
    91: 909,
    99: 910,
    105: 912,
    107: 913,
    101: $VL4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VE3, $Vy2), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 914,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 915],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VC3, $V13), o($VE3, $V23), o($VE3, $V33), o($VE3, $V43), o($VE3, $V53), {
    111: [1, 916]
  }, o($VE3, $Va3), {
    70: $Vy4
  }, o($Vx3, $VA2), o($Vx3, $Vw), o($Vx3, $Vx), o($Vx3, $Vn), o($Vx3, $Vo), o($Vx3, $Vy), o($Vx3, $Vp), o($Vx3, $Vq), o($VF3, $Vz4), {
    50: 917,
    51: $Vm2,
    70: $VA4
  }, o($Vx3, $VB4), o($VF3, $Vs3), o($Vx3, $VH, {
    58: 918
  }), o($VI, $VJ, {
    62: 919,
    64: 920,
    66: 921,
    67: 922,
    73: 925,
    75: 926,
    72: 927,
    44: 928,
    92: 929,
    94: 930,
    87: 932,
    88: 933,
    89: 934,
    78: 935,
    95: 942,
    22: 943,
    91: 945,
    118: 946,
    99: 947,
    214: 950,
    105: 951,
    107: 952,
    19: [1, 949],
    21: [1, 954],
    69: [1, 923],
    71: [1, 924],
    79: [1, 936],
    80: [1, 937],
    81: [1, 938],
    85: [1, 931],
    96: [1, 939],
    97: [1, 940],
    98: [1, 941],
    101: $VM4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 944],
    215: [1, 953]
  }), o($Vx3, $Vu3), o($VI, $VJ, {
    62: 955,
    64: 956,
    66: 957,
    67: 958,
    73: 961,
    75: 962,
    72: 963,
    44: 964,
    92: 965,
    94: 966,
    87: 968,
    88: 969,
    89: 970,
    78: 971,
    95: 978,
    22: 979,
    91: 981,
    118: 982,
    99: 983,
    214: 986,
    105: 987,
    107: 988,
    19: [1, 985],
    21: [1, 990],
    69: [1, 959],
    71: [1, 960],
    79: [1, 972],
    80: [1, 973],
    81: [1, 974],
    85: [1, 967],
    96: [1, 975],
    97: [1, 976],
    98: [1, 977],
    101: $VN4,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 980],
    215: [1, 989]
  }), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 991,
    214: 45,
    215: $Vk
  }, {
    19: $VP4,
    21: $VQ4,
    22: 993,
    100: [1, 1004],
    108: [1, 1005],
    109: [1, 1006],
    110: 1003,
    181: 994,
    191: 992,
    196: 997,
    197: 998,
    198: 999,
    201: 1002,
    204: [1, 1007],
    205: [1, 1008],
    206: [1, 1013],
    207: [1, 1014],
    208: [1, 1015],
    209: [1, 1016],
    210: [1, 1009],
    211: [1, 1010],
    212: [1, 1011],
    213: [1, 1012],
    214: 996,
    215: $VR4
  }, o($VS4, $Vr4), o($VS4, $Vs4), o($VS4, $Vn), o($VS4, $Vo), o($VS4, $Vp), o($VS4, $Vq), o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1017,
    214: 45,
    215: $Vk
  }, {
    19: $VT4,
    21: $VU4,
    22: 1019,
    100: [1, 1030],
    108: [1, 1031],
    109: [1, 1032],
    110: 1029,
    181: 1020,
    191: 1018,
    196: 1023,
    197: 1024,
    198: 1025,
    201: 1028,
    204: [1, 1033],
    205: [1, 1034],
    206: [1, 1039],
    207: [1, 1040],
    208: [1, 1041],
    209: [1, 1042],
    210: [1, 1035],
    211: [1, 1036],
    212: [1, 1037],
    213: [1, 1038],
    214: 1022,
    215: $VV4
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 1043]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1044,
    214: 45,
    215: $Vk
  }, {
    19: $VW4,
    21: $VX4,
    22: 1046,
    100: [1, 1057],
    108: [1, 1058],
    109: [1, 1059],
    110: 1056,
    181: 1047,
    191: 1045,
    196: 1050,
    197: 1051,
    198: 1052,
    201: 1055,
    204: [1, 1060],
    205: [1, 1061],
    206: [1, 1066],
    207: [1, 1067],
    208: [1, 1068],
    209: [1, 1069],
    210: [1, 1062],
    211: [1, 1063],
    212: [1, 1064],
    213: [1, 1065],
    214: 1049,
    215: $VY4
  }, o($VL1, [2, 188]), o($VL1, [2, 195], {
    170: 1070,
    179: $VZ4
  }), o($VL1, [2, 196], {
    172: 1072,
    179: $V_4
  }), o($VL1, [2, 197], {
    174: 1074,
    179: $V$4
  }), o($V05, [2, 189]), o($V05, [2, 191]), o($V05, [2, 193]), {
    19: $V15,
    21: $V25,
    22: 1076,
    100: $V35,
    108: $V45,
    109: $V55,
    110: 1087,
    181: 1077,
    185: $V65,
    196: 1081,
    197: 1082,
    198: 1083,
    201: 1086,
    204: $V75,
    205: $V85,
    206: $V95,
    207: $Va5,
    208: $Vb5,
    209: $Vc5,
    210: $Vd5,
    211: $Ve5,
    212: $Vf5,
    213: $Vg5,
    214: 1080,
    215: $Vh5
  }, o($VL1, [2, 198]), o($VL1, [2, 203]), o($V05, [2, 199], {
    176: 1101
  }), o($VL1, [2, 207]), o($VL1, [2, 212]), o($V05, [2, 208], {
    183: 1102
  }), o($VL1, [2, 214]), o($VL1, [2, 220]), o($V05, [2, 216], {
    188: 1103
  }), o($VL1, [2, 215]), o($VW3, $Vi5), o($VW3, $Vj5), {
    19: $VB2,
    21: $VC2,
    22: 1105,
    87: 1104,
    214: 375,
    215: $VT2
  }, o($VD1, $Vk5), {
    121: $Vl5,
    134: 1106,
    135: $Vc4
  }, o($Ve4, $Vm5), o($VU2, $VV2, {
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    131: 1107,
    148: $VX2,
    189: $VY2
  }), o($Ve4, $Vn5), o($Ve4, $Vh4, {
    139: 1108,
    143: 1109,
    140: $Vi4,
    141: $Vj4
  }), o($VU2, $VV2, {
    144: 404,
    146: 405,
    147: 406,
    138: 1110,
    121: $Vo5,
    135: $Vo5,
    148: $VX2,
    189: $VY2
  }), o($VU2, $VV2, {
    144: 404,
    146: 405,
    147: 406,
    138: 1111,
    121: $Vp5,
    135: $Vp5,
    148: $VX2,
    189: $VY2
  }), o($Vn4, $Vq5), o($Vn4, $Vr5), o($Vn4, $Vs5), o($Vn4, $Vt5), {
    19: $Vu5,
    21: $Vv5,
    22: 1113,
    129: 1112,
    199: $Vw5,
    214: 1116,
    215: $Vx5
  }, o($VU2, $VV2, {
    147: 406,
    126: 1119,
    130: 1120,
    131: 1121,
    132: 1122,
    136: 1123,
    137: 1124,
    138: 1125,
    144: 1126,
    146: 1127,
    148: $VX2,
    189: $Vy5
  }), o($Vk4, [2, 176]), o($Vk4, [2, 181]), o($Vn4, $Vz5), o($Vn4, $VA5), o($Vn4, $VB5), o($Vn4, $Vn), o($Vn4, $Vo), o($Vn4, $Vy), o($Vn4, $Vp), o($Vn4, $Vq), o($VU2, [2, 166]), o($VU2, $VA5), o($VU2, $VB5), o($VU2, $Vn), o($VU2, $Vo), o($VU2, $Vy), o($VU2, $Vp), o($VU2, $Vq), o($VC5, $Vp2, {
    83: 1129,
    84: 1130,
    192: 1131,
    190: [1, 1132]
  }), o($VI, $VA2), o($VI, $Vw), o($VI, $Vx), o($VI, $Vn), o($VI, $Vo), o($VI, $Vy), o($VI, $Vp), o($VI, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1133,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq4, [2, 145]), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($Vu, $VT3), o($Vb3, $VI3), o($Vu, $VJ3, {
    31: 1134,
    193: [1, 1135]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1136,
    199: $VM3,
    214: 646,
    215: $VN3
  }, {
    121: [1, 1137]
  }, o($VG, $VE5), o($VE, $Vs3), o($VG, $VH, {
    58: 1138
  }), o($VI, $VJ, {
    62: 1139,
    64: 1140,
    66: 1141,
    67: 1142,
    73: 1145,
    75: 1146,
    72: 1147,
    44: 1148,
    92: 1149,
    94: 1150,
    87: 1152,
    88: 1153,
    89: 1154,
    78: 1155,
    95: 1162,
    22: 1163,
    91: 1165,
    118: 1166,
    99: 1167,
    214: 1170,
    105: 1171,
    107: 1172,
    19: [1, 1169],
    21: [1, 1174],
    69: [1, 1143],
    71: [1, 1144],
    79: [1, 1156],
    80: [1, 1157],
    81: [1, 1158],
    85: [1, 1151],
    96: [1, 1159],
    97: [1, 1160],
    98: [1, 1161],
    101: $VF5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 1164],
    215: [1, 1173]
  }), o($VG, $Vu3), o($VI, $VJ, {
    62: 1175,
    64: 1176,
    66: 1177,
    67: 1178,
    73: 1181,
    75: 1182,
    72: 1183,
    44: 1184,
    92: 1185,
    94: 1186,
    87: 1188,
    88: 1189,
    89: 1190,
    78: 1191,
    95: 1198,
    22: 1199,
    91: 1201,
    118: 1202,
    99: 1203,
    214: 1206,
    105: 1207,
    107: 1208,
    19: [1, 1205],
    21: [1, 1210],
    69: [1, 1179],
    71: [1, 1180],
    79: [1, 1192],
    80: [1, 1193],
    81: [1, 1194],
    85: [1, 1187],
    96: [1, 1195],
    97: [1, 1196],
    98: [1, 1197],
    101: $VG5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 1200],
    215: [1, 1209]
  }), o($Vq2, $Vp2, {
    84: 763,
    192: 764,
    83: 1211,
    190: $VC4
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1212,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 763,
    192: 764,
    83: 1213,
    190: $VC4
  }), o($Vt1, $Vs2, {
    99: 467,
    95: 1214,
    101: $Vr3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 1215,
    193: [1, 1216]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1217,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 1218,
    193: [1, 1219]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1220,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 1221]
  }, o($VA1, $VT1), {
    100: [1, 1223],
    106: 1222,
    108: [1, 1224],
    109: [1, 1225],
    110: 1226,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1227]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 1228,
    193: [1, 1229]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1230,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), {
    121: [1, 1231]
  }, {
    19: [1, 1234],
    21: [1, 1237],
    22: 1233,
    87: 1232,
    214: 1235,
    215: [1, 1236]
  }, o($V8, $Vu4), o($V8, $Vv4), o($VG, $Vw4), o($VG, $Vx4), {
    70: [1, 1238]
  }, o($V8, $Vy4), o($VE, $Vz4), o($V8, $VA4, {
    50: 445,
    51: $Vj3
  }), o($VG, $VB4), o($VG, $Vc2), o($Vr, $Vs, {
    54: 1239,
    40: 1240,
    43: $Vt
  }), o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 1241
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 1245],
    21: [1, 1249],
    22: 1243,
    33: 1242,
    200: 1244,
    214: 1246,
    215: [1, 1248],
    216: [1, 1247]
  }, {
    119: [1, 1250],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 1251
  }), o($Vh2, $Vy1, {
    93: 1252
  }), o($Vt1, $Vz1, {
    99: 810,
    95: 1253,
    101: $VE4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 1254]
  }, o($Vh2, $VT1), {
    70: [1, 1255]
  }, o($Vo2, $Vp2, {
    83: 1256,
    84: 1257,
    192: 1258,
    190: [1, 1259]
  }), o($Vq2, $Vp2, {
    83: 1260,
    84: 1261,
    192: 1262,
    190: $VH5
  }), o($Vr1, $Vs2, {
    99: 537,
    95: 1264,
    101: $Vt3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 1265,
    95: 1266,
    91: 1267,
    99: 1268,
    105: 1270,
    107: 1271,
    101: $VI5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 1265,
    95: 1266,
    91: 1267,
    99: 1268,
    105: 1270,
    107: 1271,
    101: $VI5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 1265,
    95: 1266,
    91: 1267,
    99: 1268,
    105: 1270,
    107: 1271,
    101: $VI5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 1272,
    84: 1273,
    192: 1274,
    190: [1, 1275]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 1276],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1277,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 1278]
  }, o($VN1, $Va3), o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 1279
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 1283],
    21: [1, 1287],
    22: 1281,
    33: 1280,
    200: 1282,
    214: 1284,
    215: [1, 1286],
    216: [1, 1285]
  }, {
    119: [1, 1288],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 1289
  }), o($Vh2, $Vy1, {
    93: 1290
  }), o($Vt1, $Vz1, {
    99: 857,
    95: 1291,
    101: $VF4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 1292]
  }, o($Vh2, $VT1), {
    70: [1, 1293]
  }, o($Vo2, $Vp2, {
    83: 1294,
    84: 1295,
    192: 1296,
    190: [1, 1297]
  }), o($Vq2, $Vp2, {
    83: 1298,
    84: 1299,
    192: 1300,
    190: $VJ5
  }), o($Vr1, $Vs2, {
    99: 573,
    95: 1302,
    101: $Vv3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 1303,
    95: 1304,
    91: 1305,
    99: 1306,
    105: 1308,
    107: 1309,
    101: $VK5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 1303,
    95: 1304,
    91: 1305,
    99: 1306,
    105: 1308,
    107: 1309,
    101: $VK5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 1303,
    95: 1304,
    91: 1305,
    99: 1306,
    105: 1308,
    107: 1309,
    101: $VK5,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 1310,
    84: 1311,
    192: 1312,
    190: [1, 1313]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 1314],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1315,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 1316]
  }, o($VN1, $Va3), o($Vt1, $Vk5), o($VI4, $Vp2, {
    84: 899,
    192: 900,
    83: 1317,
    190: $VJ4
  }), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1318,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VI4, $Vp2, {
    84: 899,
    192: 900,
    83: 1319,
    190: $VJ4
  }), o($VA3, $Vs2, {
    99: 602,
    95: 1320,
    101: $Vy3,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $Vt2), o($VG4, $V13), o($Vx3, $VE5), o($VL5, $VH3), o($Vz3, $VI3), o($VL5, $VJ3, {
    31: 1321,
    193: [1, 1322]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1323,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx3, $VO3), o($VA3, $VI3), o($Vx3, $VJ3, {
    31: 1324,
    193: [1, 1325]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1326,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VM5, $VT3), o($VB3, $VI3), o($VM5, $VJ3, {
    31: 1327,
    193: [1, 1328]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1329,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VC3, $VP3), o($VD3, $VQ3), o($VD3, $VR3), o($VD3, $VS3), {
    100: [1, 1330]
  }, o($VD3, $VT1), {
    100: [1, 1332],
    106: 1331,
    108: [1, 1333],
    109: [1, 1334],
    110: 1335,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1336]
  }, {
    121: [1, 1337]
  }, o($VD3, $VU3), {
    19: [1, 1340],
    21: [1, 1343],
    22: 1339,
    87: 1338,
    214: 1341,
    215: [1, 1342]
  }, o($VF3, $Vb2), o($VF3, $Vc1, {
    52: 1344,
    53: [1, 1345]
  }), o($Vx3, $Ve1), o($VI, $VJ, {
    65: 1346,
    67: 1347,
    72: 1348,
    44: 1349,
    78: 1350,
    118: 1354,
    51: $Vf1,
    53: $Vf1,
    70: $Vf1,
    79: [1, 1351],
    80: [1, 1352],
    81: [1, 1353]
  }), o($Vx3, $Vj1), o($Vx3, $Vk1, {
    68: 1355,
    64: 1356,
    73: 1357,
    92: 1358,
    94: 1359,
    95: 1363,
    99: 1364,
    96: [1, 1360],
    97: [1, 1361],
    98: [1, 1362],
    101: $VN5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 1366,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Vx3, $Vq1), o($Vz3, $Vs1, {
    82: 1367
  }), o($VA3, $Vs1, {
    82: 1368
  }), o($VM5, $Vv1), o($VM5, $Vw1), o($VC3, $Vy1, {
    93: 1369
  }), o($Vz3, $Vz1, {
    99: 947,
    95: 1370,
    101: $VM4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VD3, $VB1, {
    86: 1371
  }), o($VD3, $VB1, {
    86: 1372
  }), o($VD3, $VB1, {
    86: 1373
  }), o($VA3, $VC1, {
    105: 951,
    107: 952,
    91: 1374,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VB3, $Vs1, {
    82: 1375
  }), o($VM5, $VE1), o($VM5, $VF1), {
    19: [1, 1379],
    21: [1, 1383],
    22: 1377,
    33: 1376,
    200: 1378,
    214: 1380,
    215: [1, 1382],
    216: [1, 1381]
  }, o($VC3, $VG1), o($VC3, $VH1), o($VC3, $VI1), o($VC3, $VJ1), o($VD3, $VK1), o($VL1, $VM1, {
    162: 1384
  }), o($VE3, $VO1), {
    119: [1, 1385],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 1386]
  }, o($VC3, $VT1), o($VD3, $Vn), o($VD3, $Vo), {
    100: [1, 1388],
    106: 1387,
    108: [1, 1389],
    109: [1, 1390],
    110: 1391,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1392]
  }, o($VD3, $Vp), o($VD3, $Vq), o($Vx3, $Ve1), o($VI, $VJ, {
    65: 1393,
    67: 1394,
    72: 1395,
    44: 1396,
    78: 1397,
    118: 1401,
    51: $Vf1,
    53: $Vf1,
    70: $Vf1,
    79: [1, 1398],
    80: [1, 1399],
    81: [1, 1400]
  }), o($Vx3, $Vj1), o($Vx3, $Vk1, {
    68: 1402,
    64: 1403,
    73: 1404,
    92: 1405,
    94: 1406,
    95: 1410,
    99: 1411,
    96: [1, 1407],
    97: [1, 1408],
    98: [1, 1409],
    101: $VO5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 1413,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Vx3, $Vq1), o($Vz3, $Vs1, {
    82: 1414
  }), o($VA3, $Vs1, {
    82: 1415
  }), o($VM5, $Vv1), o($VM5, $Vw1), o($VC3, $Vy1, {
    93: 1416
  }), o($Vz3, $Vz1, {
    99: 983,
    95: 1417,
    101: $VN4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VD3, $VB1, {
    86: 1418
  }), o($VD3, $VB1, {
    86: 1419
  }), o($VD3, $VB1, {
    86: 1420
  }), o($VA3, $VC1, {
    105: 987,
    107: 988,
    91: 1421,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VB3, $Vs1, {
    82: 1422
  }), o($VM5, $VE1), o($VM5, $VF1), {
    19: [1, 1426],
    21: [1, 1430],
    22: 1424,
    33: 1423,
    200: 1425,
    214: 1427,
    215: [1, 1429],
    216: [1, 1428]
  }, o($VC3, $VG1), o($VC3, $VH1), o($VC3, $VI1), o($VC3, $VJ1), o($VD3, $VK1), o($VL1, $VM1, {
    162: 1431
  }), o($VE3, $VO1), {
    119: [1, 1432],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 1433]
  }, o($VC3, $VT1), o($VD3, $Vn), o($VD3, $Vo), {
    100: [1, 1435],
    106: 1434,
    108: [1, 1436],
    109: [1, 1437],
    110: 1438,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1439]
  }, o($VD3, $Vp), o($VD3, $Vq), {
    193: [1, 1442],
    194: 1440,
    195: [1, 1441]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 1443,
    203: 1444,
    111: [1, 1445]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 1448],
    194: 1446,
    195: [1, 1447]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 1449,
    203: 1450,
    111: [1, 1451]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 1454],
    21: [1, 1457],
    22: 1453,
    87: 1452,
    214: 1455,
    215: [1, 1456]
  }, {
    193: [1, 1460],
    194: 1458,
    195: [1, 1459]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 1461,
    203: 1462,
    111: [1, 1463]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($V05, [2, 190]), {
    19: $V15,
    21: $V25,
    22: 1076,
    214: 1080,
    215: $Vh5
  }, o($V05, [2, 192]), {
    100: $V35,
    108: $V45,
    109: $V55,
    110: 1087,
    181: 1077,
    196: 1081,
    197: 1082,
    198: 1083,
    201: 1086,
    204: $V75,
    205: $V85,
    206: $V95,
    207: $Va5,
    208: $Vb5,
    209: $Vc5,
    210: $Vd5,
    211: $Ve5,
    212: $Vf5,
    213: $Vg5
  }, o($V05, [2, 194]), {
    185: $V65
  }, o($V05, $VV5, {
    180: 1464,
    178: $VW5
  }), o($V05, $VV5, {
    180: 1466,
    178: $VW5
  }), o($V05, $VV5, {
    180: 1467,
    178: $VW5
  }), o($VX5, $Vn), o($VX5, $Vo), o($VX5, $VX3), o($VX5, $VY3), o($VX5, $VZ3), o($VX5, $Vp), o($VX5, $Vq), o($VX5, $V_3), o($VX5, $V$3, {
    202: 1468,
    203: 1469,
    111: [1, 1470]
  }), o($VX5, $V04), o($VX5, $V14), o($VX5, $V24), o($VX5, $V34), o($VX5, $V44), o($VX5, $V54), o($VX5, $V64), o($VX5, $V74), o($VX5, $V84), o($VY5, $V63), o($VY5, $V73), o($VY5, $V83), o($VY5, $V93), o($VL1, [2, 201], {
    170: 1471,
    179: $VZ4
  }), o($VL1, [2, 210], {
    172: 1472,
    179: $V_4
  }), o($VL1, [2, 218], {
    174: 1473,
    179: $V$4
  }), o($VW3, $VZ5), o($VW3, $VK1), o($Ve4, $V_5), o($Ve4, $V$5), o($Ve4, $V06), o($Vn4, $V16), o($Vn4, $V26), o($Vn4, $V36), o($Vr, $Vs, {
    46: 1474,
    47: 1475,
    55: 1476,
    59: 1477,
    40: 1478,
    43: $Vt
  }), o($V46, $Vr4), o($V46, $Vs4), o($V46, $Vn), o($V46, $Vo), o($V46, $Vp), o($V46, $Vq), {
    70: [1, 1479]
  }, {
    70: $Va4
  }, {
    70: $Vb4,
    133: 1480,
    134: 1481,
    135: $V56
  }, {
    70: $Vd4
  }, o($V66, $Vf4), o($V66, $Vg4), o($V66, $Vh4, {
    139: 1483,
    142: 1484,
    143: 1487,
    140: $V76,
    141: $V86
  }), o($Vk4, $Vl4, {
    155: 697,
    145: 1488,
    150: 1489,
    151: 1490,
    154: 1491,
    69: [1, 1492],
    160: $Vm4
  }), o($V96, $Vo4), {
    19: [1, 1496],
    21: [1, 1500],
    22: 1494,
    149: 1493,
    200: 1495,
    214: 1497,
    215: [1, 1499],
    216: [1, 1498]
  }, o($VI, $VT3), o($Vp4, $VI3), o($VI, $VJ3, {
    31: 1501,
    193: [1, 1502]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1503,
    199: $VM3,
    214: 646,
    215: $VN3
  }, {
    121: [1, 1504]
  }, o($Vt4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1505,
    214: 45,
    215: $Vk
  }, {
    19: $Va6,
    21: $Vb6,
    22: 1507,
    100: [1, 1518],
    108: [1, 1519],
    109: [1, 1520],
    110: 1517,
    181: 1508,
    191: 1506,
    196: 1511,
    197: 1512,
    198: 1513,
    201: 1516,
    204: [1, 1521],
    205: [1, 1522],
    206: [1, 1527],
    207: [1, 1528],
    208: [1, 1529],
    209: [1, 1530],
    210: [1, 1523],
    211: [1, 1524],
    212: [1, 1525],
    213: [1, 1526],
    214: 1510,
    215: $Vc6
  }, o($Vb3, $Vk5), o($VE, $Vc1, {
    52: 1531,
    53: [1, 1532]
  }), o($VG, $Ve1), o($VG, $Vf1, {
    65: 1533,
    67: 1534,
    72: 1535,
    44: 1536,
    78: 1537,
    118: 1541,
    79: [1, 1538],
    80: [1, 1539],
    81: [1, 1540],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 1542,
    64: 1543,
    73: 1544,
    92: 1545,
    94: 1546,
    95: 1550,
    99: 1551,
    96: [1, 1547],
    97: [1, 1548],
    98: [1, 1549],
    101: $Vd6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 1553,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 1554
  }), o($Vt1, $Vs1, {
    82: 1555
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 1556
  }), o($Vr1, $Vz1, {
    99: 1167,
    95: 1557,
    101: $VF5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 1558
  }), o($VA1, $VB1, {
    86: 1559
  }), o($VA1, $VB1, {
    86: 1560
  }), o($Vt1, $VC1, {
    105: 1171,
    107: 1172,
    91: 1561,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 1562
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 1566],
    21: [1, 1570],
    22: 1564,
    33: 1563,
    200: 1565,
    214: 1567,
    215: [1, 1569],
    216: [1, 1568]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 1571
  }), o($VN1, $VO1), {
    119: [1, 1572],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 1573]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 1575],
    106: 1574,
    108: [1, 1576],
    109: [1, 1577],
    110: 1578,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1579]
  }, o($VA1, $Vp), o($VA1, $Vq), o($VG, $Ve1), o($VG, $Vf1, {
    65: 1580,
    67: 1581,
    72: 1582,
    44: 1583,
    78: 1584,
    118: 1588,
    79: [1, 1585],
    80: [1, 1586],
    81: [1, 1587],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 1589,
    64: 1590,
    73: 1591,
    92: 1592,
    94: 1593,
    95: 1597,
    99: 1598,
    96: [1, 1594],
    97: [1, 1595],
    98: [1, 1596],
    101: $Ve6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 1600,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 1601
  }), o($Vt1, $Vs1, {
    82: 1602
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 1603
  }), o($Vr1, $Vz1, {
    99: 1203,
    95: 1604,
    101: $VG5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 1605
  }), o($VA1, $VB1, {
    86: 1606
  }), o($VA1, $VB1, {
    86: 1607
  }), o($Vt1, $VC1, {
    105: 1207,
    107: 1208,
    91: 1608,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 1609
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 1613],
    21: [1, 1617],
    22: 1611,
    33: 1610,
    200: 1612,
    214: 1614,
    215: [1, 1616],
    216: [1, 1615]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 1618
  }), o($VN1, $VO1), {
    119: [1, 1619],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 1620]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 1622],
    106: 1621,
    108: [1, 1623],
    109: [1, 1624],
    110: 1625,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1626]
  }, o($VA1, $Vp), o($VA1, $Vq), o($VG, $VT3), {
    121: [1, 1627]
  }, o($VG, $VH3), o($Vh2, $VP3), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1628,
    214: 45,
    215: $Vk
  }, {
    19: $Vf6,
    21: $Vg6,
    22: 1630,
    100: [1, 1641],
    108: [1, 1642],
    109: [1, 1643],
    110: 1640,
    181: 1631,
    191: 1629,
    196: 1634,
    197: 1635,
    198: 1636,
    201: 1639,
    204: [1, 1644],
    205: [1, 1645],
    206: [1, 1650],
    207: [1, 1651],
    208: [1, 1652],
    209: [1, 1653],
    210: [1, 1646],
    211: [1, 1647],
    212: [1, 1648],
    213: [1, 1649],
    214: 1633,
    215: $Vh6
  }, o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1654,
    214: 45,
    215: $Vk
  }, {
    19: $Vi6,
    21: $Vj6,
    22: 1656,
    100: [1, 1667],
    108: [1, 1668],
    109: [1, 1669],
    110: 1666,
    181: 1657,
    191: 1655,
    196: 1660,
    197: 1661,
    198: 1662,
    201: 1665,
    204: [1, 1670],
    205: [1, 1671],
    206: [1, 1676],
    207: [1, 1677],
    208: [1, 1678],
    209: [1, 1679],
    210: [1, 1672],
    211: [1, 1673],
    212: [1, 1674],
    213: [1, 1675],
    214: 1659,
    215: $Vk6
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 1680]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1681,
    214: 45,
    215: $Vk
  }, {
    19: $Vl6,
    21: $Vm6,
    22: 1683,
    100: [1, 1694],
    108: [1, 1695],
    109: [1, 1696],
    110: 1693,
    181: 1684,
    191: 1682,
    196: 1687,
    197: 1688,
    198: 1689,
    201: 1692,
    204: [1, 1697],
    205: [1, 1698],
    206: [1, 1703],
    207: [1, 1704],
    208: [1, 1705],
    209: [1, 1706],
    210: [1, 1699],
    211: [1, 1700],
    212: [1, 1701],
    213: [1, 1702],
    214: 1686,
    215: $Vn6
  }, o($VD1, $Vk5), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($VG, $VE5), o($VG, $Vu3), o($VI, $VJ, {
    62: 1707,
    64: 1708,
    66: 1709,
    67: 1710,
    73: 1713,
    75: 1714,
    72: 1715,
    44: 1716,
    92: 1717,
    94: 1718,
    87: 1720,
    88: 1721,
    89: 1722,
    78: 1723,
    95: 1730,
    22: 1731,
    91: 1733,
    118: 1734,
    99: 1735,
    214: 1738,
    105: 1739,
    107: 1740,
    19: [1, 1737],
    21: [1, 1742],
    69: [1, 1711],
    71: [1, 1712],
    79: [1, 1724],
    80: [1, 1725],
    81: [1, 1726],
    85: [1, 1719],
    96: [1, 1727],
    97: [1, 1728],
    98: [1, 1729],
    101: $Vo6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 1732],
    215: [1, 1741]
  }), o($Vq2, $Vp2, {
    84: 1261,
    192: 1262,
    83: 1743,
    190: $VH5
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1744,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 1261,
    192: 1262,
    83: 1745,
    190: $VH5
  }), o($Vt1, $Vs2, {
    99: 810,
    95: 1746,
    101: $VE4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 1747,
    193: [1, 1748]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1749,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 1750,
    193: [1, 1751]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1752,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 1753]
  }, o($VA1, $VT1), {
    100: [1, 1755],
    106: 1754,
    108: [1, 1756],
    109: [1, 1757],
    110: 1758,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1759]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 1760,
    193: [1, 1761]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1762,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), {
    121: [1, 1763]
  }, {
    19: [1, 1766],
    21: [1, 1769],
    22: 1765,
    87: 1764,
    214: 1767,
    215: [1, 1768]
  }, o($Vq2, $Vp2, {
    84: 1299,
    192: 1300,
    83: 1770,
    190: $VJ5
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1771,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 1299,
    192: 1300,
    83: 1772,
    190: $VJ5
  }), o($Vt1, $Vs2, {
    99: 857,
    95: 1773,
    101: $VF4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 1774,
    193: [1, 1775]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1776,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 1777,
    193: [1, 1778]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1779,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 1780]
  }, o($VA1, $VT1), {
    100: [1, 1782],
    106: 1781,
    108: [1, 1783],
    109: [1, 1784],
    110: 1785,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 1786]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 1787,
    193: [1, 1788]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 1789,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), {
    121: [1, 1790]
  }, {
    19: [1, 1793],
    21: [1, 1796],
    22: 1792,
    87: 1791,
    214: 1794,
    215: [1, 1795]
  }, o($Vx3, $VT3), {
    121: [1, 1797]
  }, o($Vx3, $VH3), o($VG4, $VP3), o($VH4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1798,
    214: 45,
    215: $Vk
  }, {
    19: $Vp6,
    21: $Vq6,
    22: 1800,
    100: [1, 1811],
    108: [1, 1812],
    109: [1, 1813],
    110: 1810,
    181: 1801,
    191: 1799,
    196: 1804,
    197: 1805,
    198: 1806,
    201: 1809,
    204: [1, 1814],
    205: [1, 1815],
    206: [1, 1820],
    207: [1, 1821],
    208: [1, 1822],
    209: [1, 1823],
    210: [1, 1816],
    211: [1, 1817],
    212: [1, 1818],
    213: [1, 1819],
    214: 1803,
    215: $Vr6
  }, o($VI4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1824,
    214: 45,
    215: $Vk
  }, {
    19: $Vs6,
    21: $Vt6,
    22: 1826,
    100: [1, 1837],
    108: [1, 1838],
    109: [1, 1839],
    110: 1836,
    181: 1827,
    191: 1825,
    196: 1830,
    197: 1831,
    198: 1832,
    201: 1835,
    204: [1, 1840],
    205: [1, 1841],
    206: [1, 1846],
    207: [1, 1847],
    208: [1, 1848],
    209: [1, 1849],
    210: [1, 1842],
    211: [1, 1843],
    212: [1, 1844],
    213: [1, 1845],
    214: 1829,
    215: $Vu6
  }, o($VK4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 1850,
    214: 45,
    215: $Vk
  }, {
    19: $Vv6,
    21: $Vw6,
    22: 1852,
    100: [1, 1863],
    108: [1, 1864],
    109: [1, 1865],
    110: 1862,
    181: 1853,
    191: 1851,
    196: 1856,
    197: 1857,
    198: 1858,
    201: 1861,
    204: [1, 1866],
    205: [1, 1867],
    206: [1, 1872],
    207: [1, 1873],
    208: [1, 1874],
    209: [1, 1875],
    210: [1, 1868],
    211: [1, 1869],
    212: [1, 1870],
    213: [1, 1871],
    214: 1855,
    215: $Vx6
  }, o($VD3, $V13), o($VD3, $V23), o($VD3, $V33), o($VD3, $V43), o($VD3, $V53), {
    111: [1, 1876]
  }, o($VD3, $Va3), o($VB3, $Vk5), o($VE3, $VD5), o($VE3, $VK1), o($VE3, $Vn), o($VE3, $Vo), o($VE3, $Vp), o($VE3, $Vq), o($Vx3, $Vc2), o($Vr, $Vs, {
    54: 1877,
    40: 1878,
    43: $Vt
  }), o($Vx3, $Vd2), o($Vx3, $Ve2), o($Vx3, $Vv1), o($Vx3, $Vw1), o($VA3, $Vs1, {
    82: 1879
  }), o($Vx3, $VE1), o($Vx3, $VF1), {
    19: [1, 1883],
    21: [1, 1887],
    22: 1881,
    33: 1880,
    200: 1882,
    214: 1884,
    215: [1, 1886],
    216: [1, 1885]
  }, {
    119: [1, 1888],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vx3, $Vf2), o($Vx3, $Vg2), o($VA3, $Vs1, {
    82: 1889
  }), o($VG4, $Vy1, {
    93: 1890
  }), o($VA3, $Vz1, {
    99: 1364,
    95: 1891,
    101: $VN5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $VG1), o($VG4, $VH1), o($VG4, $VI1), o($VG4, $VJ1), {
    100: [1, 1892]
  }, o($VG4, $VT1), {
    70: [1, 1893]
  }, o($VH4, $Vp2, {
    83: 1894,
    84: 1895,
    192: 1896,
    190: [1, 1897]
  }), o($VI4, $Vp2, {
    83: 1898,
    84: 1899,
    192: 1900,
    190: $Vy6
  }), o($Vz3, $Vs2, {
    99: 947,
    95: 1902,
    101: $VM4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VC3, $Vt2), o($VA3, $Vu2, {
    90: 1903,
    95: 1904,
    91: 1905,
    99: 1906,
    105: 1908,
    107: 1909,
    101: $Vz6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vw2, {
    90: 1903,
    95: 1904,
    91: 1905,
    99: 1906,
    105: 1908,
    107: 1909,
    101: $Vz6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vx2, {
    90: 1903,
    95: 1904,
    91: 1905,
    99: 1906,
    105: 1908,
    107: 1909,
    101: $Vz6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VE3, $Vy2), o($VK4, $Vp2, {
    83: 1910,
    84: 1911,
    192: 1912,
    190: [1, 1913]
  }), o($VM5, $VA2), o($VM5, $Vw), o($VM5, $Vx), o($VM5, $Vn), o($VM5, $Vo), o($VM5, $Vy), o($VM5, $Vp), o($VM5, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 1914],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1915,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VC3, $V13), o($VE3, $V23), o($VE3, $V33), o($VE3, $V43), o($VE3, $V53), {
    111: [1, 1916]
  }, o($VE3, $Va3), o($Vx3, $Vd2), o($Vx3, $Ve2), o($Vx3, $Vv1), o($Vx3, $Vw1), o($VA3, $Vs1, {
    82: 1917
  }), o($Vx3, $VE1), o($Vx3, $VF1), {
    19: [1, 1921],
    21: [1, 1925],
    22: 1919,
    33: 1918,
    200: 1920,
    214: 1922,
    215: [1, 1924],
    216: [1, 1923]
  }, {
    119: [1, 1926],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vx3, $Vf2), o($Vx3, $Vg2), o($VA3, $Vs1, {
    82: 1927
  }), o($VG4, $Vy1, {
    93: 1928
  }), o($VA3, $Vz1, {
    99: 1411,
    95: 1929,
    101: $VO5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $VG1), o($VG4, $VH1), o($VG4, $VI1), o($VG4, $VJ1), {
    100: [1, 1930]
  }, o($VG4, $VT1), {
    70: [1, 1931]
  }, o($VH4, $Vp2, {
    83: 1932,
    84: 1933,
    192: 1934,
    190: [1, 1935]
  }), o($VI4, $Vp2, {
    83: 1936,
    84: 1937,
    192: 1938,
    190: $VA6
  }), o($Vz3, $Vs2, {
    99: 983,
    95: 1940,
    101: $VN4,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VC3, $Vt2), o($VA3, $Vu2, {
    90: 1941,
    95: 1942,
    91: 1943,
    99: 1944,
    105: 1946,
    107: 1947,
    101: $VB6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vw2, {
    90: 1941,
    95: 1942,
    91: 1943,
    99: 1944,
    105: 1946,
    107: 1947,
    101: $VB6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vx2, {
    90: 1941,
    95: 1942,
    91: 1943,
    99: 1944,
    105: 1946,
    107: 1947,
    101: $VB6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VE3, $Vy2), o($VK4, $Vp2, {
    83: 1948,
    84: 1949,
    192: 1950,
    190: [1, 1951]
  }), o($VM5, $VA2), o($VM5, $Vw), o($VM5, $Vx), o($VM5, $Vn), o($VM5, $Vo), o($VM5, $Vy), o($VM5, $Vp), o($VM5, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 1952],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 1953,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VC3, $V13), o($VE3, $V23), o($VE3, $V33), o($VE3, $V43), o($VE3, $V53), {
    111: [1, 1954]
  }, o($VE3, $Va3), o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $VP4,
    21: $VQ4,
    22: 1956,
    87: 1955,
    214: 996,
    215: $VR4
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $VT4,
    21: $VU4,
    22: 1958,
    87: 1957,
    214: 1022,
    215: $VV4
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $VW4,
    21: $VX4,
    22: 1960,
    87: 1959,
    214: 1049,
    215: $VY4
  }, o($V05, [2, 204]), o($V05, [2, 206]), o($V05, [2, 213]), o($V05, [2, 221]), o($VX5, $Vi5), o($VX5, $Vj5), {
    19: $V15,
    21: $V25,
    22: 1962,
    87: 1961,
    214: 1080,
    215: $Vh5
  }, o($V05, [2, 200]), o($V05, [2, 209]), o($V05, [2, 217]), o($VC6, $VD6, {
    152: 1963,
    153: 1964,
    156: $VE6,
    157: $VF6,
    158: $VG6,
    159: $VH6
  }), o($VI6, $VJ6), o($VK6, $VL6, {
    56: 1969
  }), o($VM6, $VN6, {
    60: 1970
  }), o($VI, $VJ, {
    63: 1971,
    73: 1972,
    75: 1973,
    76: 1974,
    92: 1977,
    94: 1978,
    87: 1980,
    88: 1981,
    89: 1982,
    78: 1983,
    44: 1984,
    95: 1988,
    22: 1989,
    91: 1991,
    118: 1992,
    99: 1996,
    214: 1999,
    105: 2000,
    107: 2001,
    19: [1, 1998],
    21: [1, 2003],
    69: [1, 1975],
    71: [1, 1976],
    79: [1, 1993],
    80: [1, 1994],
    81: [1, 1995],
    85: [1, 1979],
    96: [1, 1985],
    97: [1, 1986],
    98: [1, 1987],
    101: $VO6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 1990],
    215: [1, 2002]
  }), o($VC6, $VD6, {
    153: 1964,
    152: 2004,
    156: $VE6,
    157: $VF6,
    158: $VG6,
    159: $VH6
  }), {
    70: $Vl5,
    134: 2005,
    135: $V56
  }, o($V66, $Vm5), o($VU2, $VV2, {
    147: 406,
    136: 1123,
    137: 1124,
    138: 1125,
    144: 1126,
    146: 1127,
    131: 2006,
    148: $VX2,
    189: $Vy5
  }), o($V66, $Vn5), o($V66, $Vh4, {
    139: 2007,
    143: 2008,
    140: $V76,
    141: $V86
  }), o($VU2, $VV2, {
    147: 406,
    144: 1126,
    146: 1127,
    138: 2009,
    70: $Vo5,
    135: $Vo5,
    148: $VX2,
    189: $Vy5
  }), o($VU2, $VV2, {
    147: 406,
    144: 1126,
    146: 1127,
    138: 2010,
    70: $Vp5,
    135: $Vp5,
    148: $VX2,
    189: $Vy5
  }), o($V96, $Vq5), o($V96, $Vr5), o($V96, $Vs5), o($V96, $Vt5), {
    19: $Vu5,
    21: $Vv5,
    22: 1113,
    129: 2011,
    199: $Vw5,
    214: 1116,
    215: $Vx5
  }, o($VU2, $VV2, {
    147: 406,
    130: 1120,
    131: 1121,
    132: 1122,
    136: 1123,
    137: 1124,
    138: 1125,
    144: 1126,
    146: 1127,
    126: 2012,
    148: $VX2,
    189: $Vy5
  }), o($V96, $Vz5), o($V96, $VA5), o($V96, $VB5), o($V96, $Vn), o($V96, $Vo), o($V96, $Vy), o($V96, $Vp), o($V96, $Vq), o($VC5, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2013,
    214: 45,
    215: $Vk
  }, {
    19: $VP6,
    21: $VQ6,
    22: 2015,
    100: [1, 2026],
    108: [1, 2027],
    109: [1, 2028],
    110: 2025,
    181: 2016,
    191: 2014,
    196: 2019,
    197: 2020,
    198: 2021,
    201: 2024,
    204: [1, 2029],
    205: [1, 2030],
    206: [1, 2035],
    207: [1, 2036],
    208: [1, 2037],
    209: [1, 2038],
    210: [1, 2031],
    211: [1, 2032],
    212: [1, 2033],
    213: [1, 2034],
    214: 2018,
    215: $VR6
  }, o($Vp4, $Vk5), {
    193: [1, 2041],
    194: 2039,
    195: [1, 2040]
  }, o($Vb3, $VP5), o($Vb3, $VQ5), o($Vb3, $VR5), o($Vb3, $Vn), o($Vb3, $Vo), o($Vb3, $VX3), o($Vb3, $VY3), o($Vb3, $VZ3), o($Vb3, $Vp), o($Vb3, $Vq), o($Vb3, $V_3), o($Vb3, $V$3, {
    202: 2042,
    203: 2043,
    111: [1, 2044]
  }), o($Vb3, $V04), o($Vb3, $V14), o($Vb3, $V24), o($Vb3, $V34), o($Vb3, $V44), o($Vb3, $V54), o($Vb3, $V64), o($Vb3, $V74), o($Vb3, $V84), o($VS6, $V63), o($VS6, $V73), o($VS6, $V83), o($VS6, $V93), o($VG, $Vc2), o($Vr, $Vs, {
    54: 2045,
    40: 2046,
    43: $Vt
  }), o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 2047
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 2051],
    21: [1, 2055],
    22: 2049,
    33: 2048,
    200: 2050,
    214: 2052,
    215: [1, 2054],
    216: [1, 2053]
  }, {
    119: [1, 2056],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 2057
  }), o($Vh2, $Vy1, {
    93: 2058
  }), o($Vt1, $Vz1, {
    99: 1551,
    95: 2059,
    101: $Vd6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 2060]
  }, o($Vh2, $VT1), {
    70: [1, 2061]
  }, o($Vo2, $Vp2, {
    83: 2062,
    84: 2063,
    192: 2064,
    190: [1, 2065]
  }), o($Vq2, $Vp2, {
    83: 2066,
    84: 2067,
    192: 2068,
    190: $VT6
  }), o($Vr1, $Vs2, {
    99: 1167,
    95: 2070,
    101: $VF5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 2071,
    95: 2072,
    91: 2073,
    99: 2074,
    105: 2076,
    107: 2077,
    101: $VU6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 2071,
    95: 2072,
    91: 2073,
    99: 2074,
    105: 2076,
    107: 2077,
    101: $VU6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 2071,
    95: 2072,
    91: 2073,
    99: 2074,
    105: 2076,
    107: 2077,
    101: $VU6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 2078,
    84: 2079,
    192: 2080,
    190: [1, 2081]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 2082],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2083,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 2084]
  }, o($VN1, $Va3), o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 2085
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 2089],
    21: [1, 2093],
    22: 2087,
    33: 2086,
    200: 2088,
    214: 2090,
    215: [1, 2092],
    216: [1, 2091]
  }, {
    119: [1, 2094],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 2095
  }), o($Vh2, $Vy1, {
    93: 2096
  }), o($Vt1, $Vz1, {
    99: 1598,
    95: 2097,
    101: $Ve6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 2098]
  }, o($Vh2, $VT1), {
    70: [1, 2099]
  }, o($Vo2, $Vp2, {
    83: 2100,
    84: 2101,
    192: 2102,
    190: [1, 2103]
  }), o($Vq2, $Vp2, {
    83: 2104,
    84: 2105,
    192: 2106,
    190: $VV6
  }), o($Vr1, $Vs2, {
    99: 1203,
    95: 2108,
    101: $VG5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 2109,
    95: 2110,
    91: 2111,
    99: 2112,
    105: 2114,
    107: 2115,
    101: $VW6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 2109,
    95: 2110,
    91: 2111,
    99: 2112,
    105: 2114,
    107: 2115,
    101: $VW6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 2109,
    95: 2110,
    91: 2111,
    99: 2112,
    105: 2114,
    107: 2115,
    101: $VW6,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 2116,
    84: 2117,
    192: 2118,
    190: [1, 2119]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 2120],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2121,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 2122]
  }, o($VN1, $Va3), o($Vt1, $Vk5), {
    193: [1, 2125],
    194: 2123,
    195: [1, 2124]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 2126,
    203: 2127,
    111: [1, 2128]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 2131],
    194: 2129,
    195: [1, 2130]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 2132,
    203: 2133,
    111: [1, 2134]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 2137],
    21: [1, 2140],
    22: 2136,
    87: 2135,
    214: 2138,
    215: [1, 2139]
  }, {
    193: [1, 2143],
    194: 2141,
    195: [1, 2142]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 2144,
    203: 2145,
    111: [1, 2146]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($VG, $Ve1), o($VG, $Vf1, {
    65: 2147,
    67: 2148,
    72: 2149,
    44: 2150,
    78: 2151,
    118: 2155,
    79: [1, 2152],
    80: [1, 2153],
    81: [1, 2154],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 2156,
    64: 2157,
    73: 2158,
    92: 2159,
    94: 2160,
    95: 2164,
    99: 2165,
    96: [1, 2161],
    97: [1, 2162],
    98: [1, 2163],
    101: $VX6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 2167,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 2168
  }), o($Vt1, $Vs1, {
    82: 2169
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 2170
  }), o($Vr1, $Vz1, {
    99: 1735,
    95: 2171,
    101: $Vo6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 2172
  }), o($VA1, $VB1, {
    86: 2173
  }), o($VA1, $VB1, {
    86: 2174
  }), o($Vt1, $VC1, {
    105: 1739,
    107: 1740,
    91: 2175,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 2176
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 2180],
    21: [1, 2184],
    22: 2178,
    33: 2177,
    200: 2179,
    214: 2181,
    215: [1, 2183],
    216: [1, 2182]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 2185
  }), o($VN1, $VO1), {
    119: [1, 2186],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 2187]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 2189],
    106: 2188,
    108: [1, 2190],
    109: [1, 2191],
    110: 2192,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 2193]
  }, o($VA1, $Vp), o($VA1, $Vq), o($VG, $VT3), {
    121: [1, 2194]
  }, o($VG, $VH3), o($Vh2, $VP3), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2195,
    214: 45,
    215: $Vk
  }, {
    19: $VY6,
    21: $VZ6,
    22: 2197,
    100: [1, 2208],
    108: [1, 2209],
    109: [1, 2210],
    110: 2207,
    181: 2198,
    191: 2196,
    196: 2201,
    197: 2202,
    198: 2203,
    201: 2206,
    204: [1, 2211],
    205: [1, 2212],
    206: [1, 2217],
    207: [1, 2218],
    208: [1, 2219],
    209: [1, 2220],
    210: [1, 2213],
    211: [1, 2214],
    212: [1, 2215],
    213: [1, 2216],
    214: 2200,
    215: $V_6
  }, o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2221,
    214: 45,
    215: $Vk
  }, {
    19: $V$6,
    21: $V07,
    22: 2223,
    100: [1, 2234],
    108: [1, 2235],
    109: [1, 2236],
    110: 2233,
    181: 2224,
    191: 2222,
    196: 2227,
    197: 2228,
    198: 2229,
    201: 2232,
    204: [1, 2237],
    205: [1, 2238],
    206: [1, 2243],
    207: [1, 2244],
    208: [1, 2245],
    209: [1, 2246],
    210: [1, 2239],
    211: [1, 2240],
    212: [1, 2241],
    213: [1, 2242],
    214: 2226,
    215: $V17
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 2247]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2248,
    214: 45,
    215: $Vk
  }, {
    19: $V27,
    21: $V37,
    22: 2250,
    100: [1, 2261],
    108: [1, 2262],
    109: [1, 2263],
    110: 2260,
    181: 2251,
    191: 2249,
    196: 2254,
    197: 2255,
    198: 2256,
    201: 2259,
    204: [1, 2264],
    205: [1, 2265],
    206: [1, 2270],
    207: [1, 2271],
    208: [1, 2272],
    209: [1, 2273],
    210: [1, 2266],
    211: [1, 2267],
    212: [1, 2268],
    213: [1, 2269],
    214: 2253,
    215: $V47
  }, o($VD1, $Vk5), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($VG, $VT3), {
    121: [1, 2274]
  }, o($VG, $VH3), o($Vh2, $VP3), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2275,
    214: 45,
    215: $Vk
  }, {
    19: $V57,
    21: $V67,
    22: 2277,
    100: [1, 2288],
    108: [1, 2289],
    109: [1, 2290],
    110: 2287,
    181: 2278,
    191: 2276,
    196: 2281,
    197: 2282,
    198: 2283,
    201: 2286,
    204: [1, 2291],
    205: [1, 2292],
    206: [1, 2297],
    207: [1, 2298],
    208: [1, 2299],
    209: [1, 2300],
    210: [1, 2293],
    211: [1, 2294],
    212: [1, 2295],
    213: [1, 2296],
    214: 2280,
    215: $V77
  }, o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2301,
    214: 45,
    215: $Vk
  }, {
    19: $V87,
    21: $V97,
    22: 2303,
    100: [1, 2314],
    108: [1, 2315],
    109: [1, 2316],
    110: 2313,
    181: 2304,
    191: 2302,
    196: 2307,
    197: 2308,
    198: 2309,
    201: 2312,
    204: [1, 2317],
    205: [1, 2318],
    206: [1, 2323],
    207: [1, 2324],
    208: [1, 2325],
    209: [1, 2326],
    210: [1, 2319],
    211: [1, 2320],
    212: [1, 2321],
    213: [1, 2322],
    214: 2306,
    215: $Va7
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 2327]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2328,
    214: 45,
    215: $Vk
  }, {
    19: $Vb7,
    21: $Vc7,
    22: 2330,
    100: [1, 2341],
    108: [1, 2342],
    109: [1, 2343],
    110: 2340,
    181: 2331,
    191: 2329,
    196: 2334,
    197: 2335,
    198: 2336,
    201: 2339,
    204: [1, 2344],
    205: [1, 2345],
    206: [1, 2350],
    207: [1, 2351],
    208: [1, 2352],
    209: [1, 2353],
    210: [1, 2346],
    211: [1, 2347],
    212: [1, 2348],
    213: [1, 2349],
    214: 2333,
    215: $Vd7
  }, o($VD1, $Vk5), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($VA3, $Vk5), {
    193: [1, 2356],
    194: 2354,
    195: [1, 2355]
  }, o($Vz3, $VP5), o($Vz3, $VQ5), o($Vz3, $VR5), o($Vz3, $Vn), o($Vz3, $Vo), o($Vz3, $VX3), o($Vz3, $VY3), o($Vz3, $VZ3), o($Vz3, $Vp), o($Vz3, $Vq), o($Vz3, $V_3), o($Vz3, $V$3, {
    202: 2357,
    203: 2358,
    111: [1, 2359]
  }), o($Vz3, $V04), o($Vz3, $V14), o($Vz3, $V24), o($Vz3, $V34), o($Vz3, $V44), o($Vz3, $V54), o($Vz3, $V64), o($Vz3, $V74), o($Vz3, $V84), o($Ve7, $V63), o($Ve7, $V73), o($Ve7, $V83), o($Ve7, $V93), {
    193: [1, 2362],
    194: 2360,
    195: [1, 2361]
  }, o($VA3, $VP5), o($VA3, $VQ5), o($VA3, $VR5), o($VA3, $Vn), o($VA3, $Vo), o($VA3, $VX3), o($VA3, $VY3), o($VA3, $VZ3), o($VA3, $Vp), o($VA3, $Vq), o($VA3, $V_3), o($VA3, $V$3, {
    202: 2363,
    203: 2364,
    111: [1, 2365]
  }), o($VA3, $V04), o($VA3, $V14), o($VA3, $V24), o($VA3, $V34), o($VA3, $V44), o($VA3, $V54), o($VA3, $V64), o($VA3, $V74), o($VA3, $V84), o($Vf7, $V63), o($Vf7, $V73), o($Vf7, $V83), o($Vf7, $V93), {
    193: [1, 2368],
    194: 2366,
    195: [1, 2367]
  }, o($VB3, $VP5), o($VB3, $VQ5), o($VB3, $VR5), o($VB3, $Vn), o($VB3, $Vo), o($VB3, $VX3), o($VB3, $VY3), o($VB3, $VZ3), o($VB3, $Vp), o($VB3, $Vq), o($VB3, $V_3), o($VB3, $V$3, {
    202: 2369,
    203: 2370,
    111: [1, 2371]
  }), o($VB3, $V04), o($VB3, $V14), o($VB3, $V24), o($VB3, $V34), o($VB3, $V44), o($VB3, $V54), o($VB3, $V64), o($VB3, $V74), o($VB3, $V84), o($Vg7, $V63), o($Vg7, $V73), o($Vg7, $V83), o($Vg7, $V93), {
    19: [1, 2374],
    21: [1, 2377],
    22: 2373,
    87: 2372,
    214: 2375,
    215: [1, 2376]
  }, o($Vx3, $Vu3), o($VI, $VJ, {
    62: 2378,
    64: 2379,
    66: 2380,
    67: 2381,
    73: 2384,
    75: 2385,
    72: 2386,
    44: 2387,
    92: 2388,
    94: 2389,
    87: 2391,
    88: 2392,
    89: 2393,
    78: 2394,
    95: 2401,
    22: 2402,
    91: 2404,
    118: 2405,
    99: 2406,
    214: 2409,
    105: 2410,
    107: 2411,
    19: [1, 2408],
    21: [1, 2413],
    69: [1, 2382],
    71: [1, 2383],
    79: [1, 2395],
    80: [1, 2396],
    81: [1, 2397],
    85: [1, 2390],
    96: [1, 2398],
    97: [1, 2399],
    98: [1, 2400],
    101: $Vh7,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 2403],
    215: [1, 2412]
  }), o($VI4, $Vp2, {
    84: 1899,
    192: 1900,
    83: 2414,
    190: $Vy6
  }), o($Vx3, $VA2), o($Vx3, $Vw), o($Vx3, $Vx), o($Vx3, $Vn), o($Vx3, $Vo), o($Vx3, $Vy), o($Vx3, $Vp), o($Vx3, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2415,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VI4, $Vp2, {
    84: 1899,
    192: 1900,
    83: 2416,
    190: $Vy6
  }), o($VA3, $Vs2, {
    99: 1364,
    95: 2417,
    101: $VN5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $Vt2), o($VG4, $V13), o($Vx3, $Vw3), o($VL5, $VH3), o($Vz3, $VI3), o($VL5, $VJ3, {
    31: 2418,
    193: [1, 2419]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2420,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx3, $VO3), o($VA3, $VI3), o($Vx3, $VJ3, {
    31: 2421,
    193: [1, 2422]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2423,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VC3, $VP3), o($VD3, $VQ3), o($VD3, $VR3), o($VD3, $VS3), {
    100: [1, 2424]
  }, o($VD3, $VT1), {
    100: [1, 2426],
    106: 2425,
    108: [1, 2427],
    109: [1, 2428],
    110: 2429,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 2430]
  }, o($VM5, $VT3), o($VB3, $VI3), o($VM5, $VJ3, {
    31: 2431,
    193: [1, 2432]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2433,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VD3, $VU3), {
    121: [1, 2434]
  }, {
    19: [1, 2437],
    21: [1, 2440],
    22: 2436,
    87: 2435,
    214: 2438,
    215: [1, 2439]
  }, o($VI4, $Vp2, {
    84: 1937,
    192: 1938,
    83: 2441,
    190: $VA6
  }), o($Vx3, $VA2), o($Vx3, $Vw), o($Vx3, $Vx), o($Vx3, $Vn), o($Vx3, $Vo), o($Vx3, $Vy), o($Vx3, $Vp), o($Vx3, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2442,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VI4, $Vp2, {
    84: 1937,
    192: 1938,
    83: 2443,
    190: $VA6
  }), o($VA3, $Vs2, {
    99: 1411,
    95: 2444,
    101: $VO5,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $Vt2), o($VG4, $V13), o($Vx3, $Vw3), o($VL5, $VH3), o($Vz3, $VI3), o($VL5, $VJ3, {
    31: 2445,
    193: [1, 2446]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2447,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx3, $VO3), o($VA3, $VI3), o($Vx3, $VJ3, {
    31: 2448,
    193: [1, 2449]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2450,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VC3, $VP3), o($VD3, $VQ3), o($VD3, $VR3), o($VD3, $VS3), {
    100: [1, 2451]
  }, o($VD3, $VT1), {
    100: [1, 2453],
    106: 2452,
    108: [1, 2454],
    109: [1, 2455],
    110: 2456,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 2457]
  }, o($VM5, $VT3), o($VB3, $VI3), o($VM5, $VJ3, {
    31: 2458,
    193: [1, 2459]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2460,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VD3, $VU3), {
    121: [1, 2461]
  }, {
    19: [1, 2464],
    21: [1, 2467],
    22: 2463,
    87: 2462,
    214: 2465,
    215: [1, 2466]
  }, o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($VX5, $VZ5), o($VX5, $VK1), o($VC6, $Vs1, {
    82: 2468
  }), o($VC6, $Vi7), o($VC6, $Vj7), o($VC6, $Vk7), o($VC6, $Vl7), o($VC6, $Vm7), o($VI6, $Vn7, {
    57: 2469,
    51: [1, 2470]
  }), o($VK6, $Vo7, {
    61: 2471,
    53: [1, 2472]
  }), o($VM6, $Vp7), o($VM6, $Vq7, {
    74: 2473,
    76: 2474,
    78: 2475,
    44: 2476,
    118: 2477,
    79: [1, 2478],
    80: [1, 2479],
    81: [1, 2480],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VM6, $Vr7), o($VM6, $Vs7, {
    77: 2481,
    73: 2482,
    92: 2483,
    94: 2484,
    95: 2488,
    99: 2489,
    96: [1, 2485],
    97: [1, 2486],
    98: [1, 2487],
    101: $Vt7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 2491,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VM6, $Vu7), o($Vv7, $Vy1, {
    93: 2492
  }), o($Vw7, $Vz1, {
    99: 1996,
    95: 2493,
    101: $VO6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx7, $VB1, {
    86: 2494
  }), o($Vx7, $VB1, {
    86: 2495
  }), o($Vx7, $VB1, {
    86: 2496
  }), o($VM6, $VC1, {
    105: 2000,
    107: 2001,
    91: 2497,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vy7, $Vz7), o($Vy7, $VA7), o($Vv7, $VG1), o($Vv7, $VH1), o($Vv7, $VI1), o($Vv7, $VJ1), o($Vx7, $VK1), o($VL1, $VM1, {
    162: 2498
  }), o($VB7, $VO1), {
    119: [1, 2499],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vy7, $VE1), o($Vy7, $VF1), {
    19: [1, 2503],
    21: [1, 2507],
    22: 2501,
    33: 2500,
    200: 2502,
    214: 2504,
    215: [1, 2506],
    216: [1, 2505]
  }, {
    100: [1, 2508]
  }, o($Vv7, $VT1), o($Vx7, $Vn), o($Vx7, $Vo), {
    100: [1, 2510],
    106: 2509,
    108: [1, 2511],
    109: [1, 2512],
    110: 2513,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 2514]
  }, o($Vx7, $Vp), o($Vx7, $Vq), o($VC6, $Vs1, {
    82: 2515
  }), o($V66, $V_5), o($V66, $V$5), o($V66, $V06), o($V96, $V16), o($V96, $V26), o($V96, $V36), o($Vr, $Vs, {
    46: 2516,
    47: 2517,
    55: 2518,
    59: 2519,
    40: 2520,
    43: $Vt
  }), {
    70: [1, 2521]
  }, {
    193: [1, 2524],
    194: 2522,
    195: [1, 2523]
  }, o($Vp4, $VP5), o($Vp4, $VQ5), o($Vp4, $VR5), o($Vp4, $Vn), o($Vp4, $Vo), o($Vp4, $VX3), o($Vp4, $VY3), o($Vp4, $VZ3), o($Vp4, $Vp), o($Vp4, $Vq), o($Vp4, $V_3), o($Vp4, $V$3, {
    202: 2525,
    203: 2526,
    111: [1, 2527]
  }), o($Vp4, $V04), o($Vp4, $V14), o($Vp4, $V24), o($Vp4, $V34), o($Vp4, $V44), o($Vp4, $V54), o($Vp4, $V64), o($Vp4, $V74), o($Vp4, $V84), o($VC7, $V63), o($VC7, $V73), o($VC7, $V83), o($VC7, $V93), o($Vt4, $V71), o($Vt4, $V81), o($Vt4, $V91), o($Vb3, $Vi5), o($Vb3, $Vj5), {
    19: $Va6,
    21: $Vb6,
    22: 2529,
    87: 2528,
    214: 1510,
    215: $Vc6
  }, o($VG, $Vu3), o($VI, $VJ, {
    62: 2530,
    64: 2531,
    66: 2532,
    67: 2533,
    73: 2536,
    75: 2537,
    72: 2538,
    44: 2539,
    92: 2540,
    94: 2541,
    87: 2543,
    88: 2544,
    89: 2545,
    78: 2546,
    95: 2553,
    22: 2554,
    91: 2556,
    118: 2557,
    99: 2558,
    214: 2561,
    105: 2562,
    107: 2563,
    19: [1, 2560],
    21: [1, 2565],
    69: [1, 2534],
    71: [1, 2535],
    79: [1, 2547],
    80: [1, 2548],
    81: [1, 2549],
    85: [1, 2542],
    96: [1, 2550],
    97: [1, 2551],
    98: [1, 2552],
    101: $VD7,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 2555],
    215: [1, 2564]
  }), o($Vq2, $Vp2, {
    84: 2067,
    192: 2068,
    83: 2566,
    190: $VT6
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2567,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 2067,
    192: 2068,
    83: 2568,
    190: $VT6
  }), o($Vt1, $Vs2, {
    99: 1551,
    95: 2569,
    101: $Vd6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 2570,
    193: [1, 2571]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2572,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 2573,
    193: [1, 2574]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2575,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 2576]
  }, o($VA1, $VT1), {
    100: [1, 2578],
    106: 2577,
    108: [1, 2579],
    109: [1, 2580],
    110: 2581,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 2582]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 2583,
    193: [1, 2584]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2585,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), {
    121: [1, 2586]
  }, {
    19: [1, 2589],
    21: [1, 2592],
    22: 2588,
    87: 2587,
    214: 2590,
    215: [1, 2591]
  }, o($Vq2, $Vp2, {
    84: 2105,
    192: 2106,
    83: 2593,
    190: $VV6
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2594,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 2105,
    192: 2106,
    83: 2595,
    190: $VV6
  }), o($Vt1, $Vs2, {
    99: 1598,
    95: 2596,
    101: $Ve6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 2597,
    193: [1, 2598]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2599,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 2600,
    193: [1, 2601]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2602,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 2603]
  }, o($VA1, $VT1), {
    100: [1, 2605],
    106: 2604,
    108: [1, 2606],
    109: [1, 2607],
    110: 2608,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 2609]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 2610,
    193: [1, 2611]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 2612,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), {
    121: [1, 2613]
  }, {
    19: [1, 2616],
    21: [1, 2619],
    22: 2615,
    87: 2614,
    214: 2617,
    215: [1, 2618]
  }, o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $Vf6,
    21: $Vg6,
    22: 2621,
    87: 2620,
    214: 1633,
    215: $Vh6
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $Vi6,
    21: $Vj6,
    22: 2623,
    87: 2622,
    214: 1659,
    215: $Vk6
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $Vl6,
    21: $Vm6,
    22: 2625,
    87: 2624,
    214: 1686,
    215: $Vn6
  }, o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 2626
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 2630],
    21: [1, 2634],
    22: 2628,
    33: 2627,
    200: 2629,
    214: 2631,
    215: [1, 2633],
    216: [1, 2632]
  }, {
    119: [1, 2635],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 2636
  }), o($Vh2, $Vy1, {
    93: 2637
  }), o($Vt1, $Vz1, {
    99: 2165,
    95: 2638,
    101: $VX6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 2639]
  }, o($Vh2, $VT1), {
    70: [1, 2640]
  }, o($Vo2, $Vp2, {
    83: 2641,
    84: 2642,
    192: 2643,
    190: [1, 2644]
  }), o($Vq2, $Vp2, {
    83: 2645,
    84: 2646,
    192: 2647,
    190: $VE7
  }), o($Vr1, $Vs2, {
    99: 1735,
    95: 2649,
    101: $Vo6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 2650,
    95: 2651,
    91: 2652,
    99: 2653,
    105: 2655,
    107: 2656,
    101: $VF7,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 2650,
    95: 2651,
    91: 2652,
    99: 2653,
    105: 2655,
    107: 2656,
    101: $VF7,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 2650,
    95: 2651,
    91: 2652,
    99: 2653,
    105: 2655,
    107: 2656,
    101: $VF7,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 2657,
    84: 2658,
    192: 2659,
    190: [1, 2660]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 2661],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2662,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 2663]
  }, o($VN1, $Va3), o($Vt1, $Vk5), {
    193: [1, 2666],
    194: 2664,
    195: [1, 2665]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 2667,
    203: 2668,
    111: [1, 2669]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 2672],
    194: 2670,
    195: [1, 2671]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 2673,
    203: 2674,
    111: [1, 2675]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 2678],
    21: [1, 2681],
    22: 2677,
    87: 2676,
    214: 2679,
    215: [1, 2680]
  }, {
    193: [1, 2684],
    194: 2682,
    195: [1, 2683]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 2685,
    203: 2686,
    111: [1, 2687]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($Vt1, $Vk5), {
    193: [1, 2690],
    194: 2688,
    195: [1, 2689]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 2691,
    203: 2692,
    111: [1, 2693]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 2696],
    194: 2694,
    195: [1, 2695]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 2697,
    203: 2698,
    111: [1, 2699]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 2702],
    21: [1, 2705],
    22: 2701,
    87: 2700,
    214: 2703,
    215: [1, 2704]
  }, {
    193: [1, 2708],
    194: 2706,
    195: [1, 2707]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 2709,
    203: 2710,
    111: [1, 2711]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($VH4, $V71), o($VH4, $V81), o($VH4, $V91), o($Vz3, $Vi5), o($Vz3, $Vj5), {
    19: $Vp6,
    21: $Vq6,
    22: 2713,
    87: 2712,
    214: 1803,
    215: $Vr6
  }, o($VI4, $V71), o($VI4, $V81), o($VI4, $V91), o($VA3, $Vi5), o($VA3, $Vj5), {
    19: $Vs6,
    21: $Vt6,
    22: 2715,
    87: 2714,
    214: 1829,
    215: $Vu6
  }, o($VK4, $V71), o($VK4, $V81), o($VK4, $V91), o($VB3, $Vi5), o($VB3, $Vj5), {
    19: $Vv6,
    21: $Vw6,
    22: 2717,
    87: 2716,
    214: 1855,
    215: $Vx6
  }, o($VD3, $VD5), o($VD3, $VK1), o($VD3, $Vn), o($VD3, $Vo), o($VD3, $Vp), o($VD3, $Vq), o($Vx3, $Ve1), o($VI, $VJ, {
    65: 2718,
    67: 2719,
    72: 2720,
    44: 2721,
    78: 2722,
    118: 2726,
    51: $Vf1,
    53: $Vf1,
    70: $Vf1,
    79: [1, 2723],
    80: [1, 2724],
    81: [1, 2725]
  }), o($Vx3, $Vj1), o($Vx3, $Vk1, {
    68: 2727,
    64: 2728,
    73: 2729,
    92: 2730,
    94: 2731,
    95: 2735,
    99: 2736,
    96: [1, 2732],
    97: [1, 2733],
    98: [1, 2734],
    101: $VG7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 2738,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Vx3, $Vq1), o($Vz3, $Vs1, {
    82: 2739
  }), o($VA3, $Vs1, {
    82: 2740
  }), o($VM5, $Vv1), o($VM5, $Vw1), o($VC3, $Vy1, {
    93: 2741
  }), o($Vz3, $Vz1, {
    99: 2406,
    95: 2742,
    101: $Vh7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VD3, $VB1, {
    86: 2743
  }), o($VD3, $VB1, {
    86: 2744
  }), o($VD3, $VB1, {
    86: 2745
  }), o($VA3, $VC1, {
    105: 2410,
    107: 2411,
    91: 2746,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VB3, $Vs1, {
    82: 2747
  }), o($VM5, $VE1), o($VM5, $VF1), {
    19: [1, 2751],
    21: [1, 2755],
    22: 2749,
    33: 2748,
    200: 2750,
    214: 2752,
    215: [1, 2754],
    216: [1, 2753]
  }, o($VC3, $VG1), o($VC3, $VH1), o($VC3, $VI1), o($VC3, $VJ1), o($VD3, $VK1), o($VL1, $VM1, {
    162: 2756
  }), o($VE3, $VO1), {
    119: [1, 2757],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 2758]
  }, o($VC3, $VT1), o($VD3, $Vn), o($VD3, $Vo), {
    100: [1, 2760],
    106: 2759,
    108: [1, 2761],
    109: [1, 2762],
    110: 2763,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 2764]
  }, o($VD3, $Vp), o($VD3, $Vq), o($Vx3, $VT3), {
    121: [1, 2765]
  }, o($Vx3, $VH3), o($VG4, $VP3), o($VH4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2766,
    214: 45,
    215: $Vk
  }, {
    19: $VH7,
    21: $VI7,
    22: 2768,
    100: [1, 2779],
    108: [1, 2780],
    109: [1, 2781],
    110: 2778,
    181: 2769,
    191: 2767,
    196: 2772,
    197: 2773,
    198: 2774,
    201: 2777,
    204: [1, 2782],
    205: [1, 2783],
    206: [1, 2788],
    207: [1, 2789],
    208: [1, 2790],
    209: [1, 2791],
    210: [1, 2784],
    211: [1, 2785],
    212: [1, 2786],
    213: [1, 2787],
    214: 2771,
    215: $VJ7
  }, o($VI4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2792,
    214: 45,
    215: $Vk
  }, {
    19: $VK7,
    21: $VL7,
    22: 2794,
    100: [1, 2805],
    108: [1, 2806],
    109: [1, 2807],
    110: 2804,
    181: 2795,
    191: 2793,
    196: 2798,
    197: 2799,
    198: 2800,
    201: 2803,
    204: [1, 2808],
    205: [1, 2809],
    206: [1, 2814],
    207: [1, 2815],
    208: [1, 2816],
    209: [1, 2817],
    210: [1, 2810],
    211: [1, 2811],
    212: [1, 2812],
    213: [1, 2813],
    214: 2797,
    215: $VM7
  }, o($VD3, $V13), o($VD3, $V23), o($VD3, $V33), o($VD3, $V43), o($VD3, $V53), {
    111: [1, 2818]
  }, o($VD3, $Va3), o($VK4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2819,
    214: 45,
    215: $Vk
  }, {
    19: $VN7,
    21: $VO7,
    22: 2821,
    100: [1, 2832],
    108: [1, 2833],
    109: [1, 2834],
    110: 2831,
    181: 2822,
    191: 2820,
    196: 2825,
    197: 2826,
    198: 2827,
    201: 2830,
    204: [1, 2835],
    205: [1, 2836],
    206: [1, 2841],
    207: [1, 2842],
    208: [1, 2843],
    209: [1, 2844],
    210: [1, 2837],
    211: [1, 2838],
    212: [1, 2839],
    213: [1, 2840],
    214: 2824,
    215: $VP7
  }, o($VB3, $Vk5), o($VE3, $VD5), o($VE3, $VK1), o($VE3, $Vn), o($VE3, $Vo), o($VE3, $Vp), o($VE3, $Vq), o($Vx3, $VT3), {
    121: [1, 2845]
  }, o($Vx3, $VH3), o($VG4, $VP3), o($VH4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2846,
    214: 45,
    215: $Vk
  }, {
    19: $VQ7,
    21: $VR7,
    22: 2848,
    100: [1, 2859],
    108: [1, 2860],
    109: [1, 2861],
    110: 2858,
    181: 2849,
    191: 2847,
    196: 2852,
    197: 2853,
    198: 2854,
    201: 2857,
    204: [1, 2862],
    205: [1, 2863],
    206: [1, 2868],
    207: [1, 2869],
    208: [1, 2870],
    209: [1, 2871],
    210: [1, 2864],
    211: [1, 2865],
    212: [1, 2866],
    213: [1, 2867],
    214: 2851,
    215: $VS7
  }, o($VI4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2872,
    214: 45,
    215: $Vk
  }, {
    19: $VT7,
    21: $VU7,
    22: 2874,
    100: [1, 2885],
    108: [1, 2886],
    109: [1, 2887],
    110: 2884,
    181: 2875,
    191: 2873,
    196: 2878,
    197: 2879,
    198: 2880,
    201: 2883,
    204: [1, 2888],
    205: [1, 2889],
    206: [1, 2894],
    207: [1, 2895],
    208: [1, 2896],
    209: [1, 2897],
    210: [1, 2890],
    211: [1, 2891],
    212: [1, 2892],
    213: [1, 2893],
    214: 2877,
    215: $VV7
  }, o($VD3, $V13), o($VD3, $V23), o($VD3, $V33), o($VD3, $V43), o($VD3, $V53), {
    111: [1, 2898]
  }, o($VD3, $Va3), o($VK4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 2899,
    214: 45,
    215: $Vk
  }, {
    19: $VW7,
    21: $VX7,
    22: 2901,
    100: [1, 2912],
    108: [1, 2913],
    109: [1, 2914],
    110: 2911,
    181: 2902,
    191: 2900,
    196: 2905,
    197: 2906,
    198: 2907,
    201: 2910,
    204: [1, 2915],
    205: [1, 2916],
    206: [1, 2921],
    207: [1, 2922],
    208: [1, 2923],
    209: [1, 2924],
    210: [1, 2917],
    211: [1, 2918],
    212: [1, 2919],
    213: [1, 2920],
    214: 2904,
    215: $VY7
  }, o($VB3, $Vk5), o($VE3, $VD5), o($VE3, $VK1), o($VE3, $Vn), o($VE3, $Vo), o($VE3, $Vp), o($VE3, $Vq), o($VZ7, $Vp2, {
    83: 2925,
    84: 2926,
    192: 2927,
    190: $V_7
  }), o($VK6, $V$7), o($Vr, $Vs, {
    55: 2929,
    59: 2930,
    40: 2931,
    43: $Vt
  }), o($VM6, $V08), o($Vr, $Vs, {
    59: 2932,
    40: 2933,
    43: $Vt
  }), o($VM6, $V18), o($VM6, $V28), o($VM6, $Vz7), o($VM6, $VA7), {
    119: [1, 2934],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM6, $VE1), o($VM6, $VF1), {
    19: [1, 2938],
    21: [1, 2942],
    22: 2936,
    33: 2935,
    200: 2937,
    214: 2939,
    215: [1, 2941],
    216: [1, 2940]
  }, o($VM6, $V38), o($VM6, $V48), o($V58, $Vy1, {
    93: 2943
  }), o($VM6, $Vz1, {
    99: 2489,
    95: 2944,
    101: $Vt7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $VG1), o($V58, $VH1), o($V58, $VI1), o($V58, $VJ1), {
    100: [1, 2945]
  }, o($V58, $VT1), {
    70: [1, 2946]
  }, o($Vw7, $Vs2, {
    99: 1996,
    95: 2947,
    101: $VO6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vv7, $Vt2), o($VM6, $Vu2, {
    90: 2948,
    95: 2949,
    91: 2950,
    99: 2951,
    105: 2953,
    107: 2954,
    101: $V68,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vw2, {
    90: 2948,
    95: 2949,
    91: 2950,
    99: 2951,
    105: 2953,
    107: 2954,
    101: $V68,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vx2, {
    90: 2948,
    95: 2949,
    91: 2950,
    99: 2951,
    105: 2953,
    107: 2954,
    101: $V68,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VB7, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 2955],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 2956,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vy7, $VA2), o($Vy7, $Vw), o($Vy7, $Vx), o($Vy7, $Vn), o($Vy7, $Vo), o($Vy7, $Vy), o($Vy7, $Vp), o($Vy7, $Vq), o($Vv7, $V13), o($VB7, $V23), o($VB7, $V33), o($VB7, $V43), o($VB7, $V53), {
    111: [1, 2957]
  }, o($VB7, $Va3), o($VZ7, $Vp2, {
    84: 2926,
    192: 2927,
    83: 2958,
    190: $V_7
  }), o($V78, $VD6, {
    152: 2959,
    153: 2960,
    156: $V88,
    157: $V98,
    158: $Va8,
    159: $Vb8
  }), o($Vc8, $VJ6), o($Vd8, $VL6, {
    56: 2965
  }), o($Ve8, $VN6, {
    60: 2966
  }), o($VI, $VJ, {
    63: 2967,
    73: 2968,
    75: 2969,
    76: 2970,
    92: 2973,
    94: 2974,
    87: 2976,
    88: 2977,
    89: 2978,
    78: 2979,
    44: 2980,
    95: 2984,
    22: 2985,
    91: 2987,
    118: 2988,
    99: 2992,
    214: 2995,
    105: 2996,
    107: 2997,
    19: [1, 2994],
    21: [1, 2999],
    69: [1, 2971],
    71: [1, 2972],
    79: [1, 2989],
    80: [1, 2990],
    81: [1, 2991],
    85: [1, 2975],
    96: [1, 2981],
    97: [1, 2982],
    98: [1, 2983],
    101: $Vf8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 2986],
    215: [1, 2998]
  }), o($V78, $VD6, {
    153: 2960,
    152: 3000,
    156: $V88,
    157: $V98,
    158: $Va8,
    159: $Vb8
  }), o($VC5, $V71), o($VC5, $V81), o($VC5, $V91), o($Vp4, $Vi5), o($Vp4, $Vj5), {
    19: $VP6,
    21: $VQ6,
    22: 3002,
    87: 3001,
    214: 2018,
    215: $VR6
  }, o($Vb3, $VZ5), o($Vb3, $VK1), o($VG, $Ve1), o($VG, $Vf1, {
    65: 3003,
    67: 3004,
    72: 3005,
    44: 3006,
    78: 3007,
    118: 3011,
    79: [1, 3008],
    80: [1, 3009],
    81: [1, 3010],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VG, $Vj1), o($VG, $Vk1, {
    68: 3012,
    64: 3013,
    73: 3014,
    92: 3015,
    94: 3016,
    95: 3020,
    99: 3021,
    96: [1, 3017],
    97: [1, 3018],
    98: [1, 3019],
    101: $Vg8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 3023,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VG, $Vq1), o($Vr1, $Vs1, {
    82: 3024
  }), o($Vt1, $Vs1, {
    82: 3025
  }), o($Vu1, $Vv1), o($Vu1, $Vw1), o($Vx1, $Vy1, {
    93: 3026
  }), o($Vr1, $Vz1, {
    99: 2558,
    95: 3027,
    101: $VD7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VA1, $VB1, {
    86: 3028
  }), o($VA1, $VB1, {
    86: 3029
  }), o($VA1, $VB1, {
    86: 3030
  }), o($Vt1, $VC1, {
    105: 2562,
    107: 2563,
    91: 3031,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VD1, $Vs1, {
    82: 3032
  }), o($Vu1, $VE1), o($Vu1, $VF1), {
    19: [1, 3036],
    21: [1, 3040],
    22: 3034,
    33: 3033,
    200: 3035,
    214: 3037,
    215: [1, 3039],
    216: [1, 3038]
  }, o($Vx1, $VG1), o($Vx1, $VH1), o($Vx1, $VI1), o($Vx1, $VJ1), o($VA1, $VK1), o($VL1, $VM1, {
    162: 3041
  }), o($VN1, $VO1), {
    119: [1, 3042],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, {
    100: [1, 3043]
  }, o($Vx1, $VT1), o($VA1, $Vn), o($VA1, $Vo), {
    100: [1, 3045],
    106: 3044,
    108: [1, 3046],
    109: [1, 3047],
    110: 3048,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3049]
  }, o($VA1, $Vp), o($VA1, $Vq), o($VG, $VT3), {
    121: [1, 3050]
  }, o($VG, $VH3), o($Vh2, $VP3), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3051,
    214: 45,
    215: $Vk
  }, {
    19: $Vh8,
    21: $Vi8,
    22: 3053,
    100: [1, 3064],
    108: [1, 3065],
    109: [1, 3066],
    110: 3063,
    181: 3054,
    191: 3052,
    196: 3057,
    197: 3058,
    198: 3059,
    201: 3062,
    204: [1, 3067],
    205: [1, 3068],
    206: [1, 3073],
    207: [1, 3074],
    208: [1, 3075],
    209: [1, 3076],
    210: [1, 3069],
    211: [1, 3070],
    212: [1, 3071],
    213: [1, 3072],
    214: 3056,
    215: $Vj8
  }, o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3077,
    214: 45,
    215: $Vk
  }, {
    19: $Vk8,
    21: $Vl8,
    22: 3079,
    100: [1, 3090],
    108: [1, 3091],
    109: [1, 3092],
    110: 3089,
    181: 3080,
    191: 3078,
    196: 3083,
    197: 3084,
    198: 3085,
    201: 3088,
    204: [1, 3093],
    205: [1, 3094],
    206: [1, 3099],
    207: [1, 3100],
    208: [1, 3101],
    209: [1, 3102],
    210: [1, 3095],
    211: [1, 3096],
    212: [1, 3097],
    213: [1, 3098],
    214: 3082,
    215: $Vm8
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 3103]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3104,
    214: 45,
    215: $Vk
  }, {
    19: $Vn8,
    21: $Vo8,
    22: 3106,
    100: [1, 3117],
    108: [1, 3118],
    109: [1, 3119],
    110: 3116,
    181: 3107,
    191: 3105,
    196: 3110,
    197: 3111,
    198: 3112,
    201: 3115,
    204: [1, 3120],
    205: [1, 3121],
    206: [1, 3126],
    207: [1, 3127],
    208: [1, 3128],
    209: [1, 3129],
    210: [1, 3122],
    211: [1, 3123],
    212: [1, 3124],
    213: [1, 3125],
    214: 3109,
    215: $Vp8
  }, o($VD1, $Vk5), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($VG, $VT3), {
    121: [1, 3130]
  }, o($VG, $VH3), o($Vh2, $VP3), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3131,
    214: 45,
    215: $Vk
  }, {
    19: $Vq8,
    21: $Vr8,
    22: 3133,
    100: [1, 3144],
    108: [1, 3145],
    109: [1, 3146],
    110: 3143,
    181: 3134,
    191: 3132,
    196: 3137,
    197: 3138,
    198: 3139,
    201: 3142,
    204: [1, 3147],
    205: [1, 3148],
    206: [1, 3153],
    207: [1, 3154],
    208: [1, 3155],
    209: [1, 3156],
    210: [1, 3149],
    211: [1, 3150],
    212: [1, 3151],
    213: [1, 3152],
    214: 3136,
    215: $Vs8
  }, o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3157,
    214: 45,
    215: $Vk
  }, {
    19: $Vt8,
    21: $Vu8,
    22: 3159,
    100: [1, 3170],
    108: [1, 3171],
    109: [1, 3172],
    110: 3169,
    181: 3160,
    191: 3158,
    196: 3163,
    197: 3164,
    198: 3165,
    201: 3168,
    204: [1, 3173],
    205: [1, 3174],
    206: [1, 3179],
    207: [1, 3180],
    208: [1, 3181],
    209: [1, 3182],
    210: [1, 3175],
    211: [1, 3176],
    212: [1, 3177],
    213: [1, 3178],
    214: 3162,
    215: $Vv8
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 3183]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3184,
    214: 45,
    215: $Vk
  }, {
    19: $Vw8,
    21: $Vx8,
    22: 3186,
    100: [1, 3197],
    108: [1, 3198],
    109: [1, 3199],
    110: 3196,
    181: 3187,
    191: 3185,
    196: 3190,
    197: 3191,
    198: 3192,
    201: 3195,
    204: [1, 3200],
    205: [1, 3201],
    206: [1, 3206],
    207: [1, 3207],
    208: [1, 3208],
    209: [1, 3209],
    210: [1, 3202],
    211: [1, 3203],
    212: [1, 3204],
    213: [1, 3205],
    214: 3189,
    215: $Vy8
  }, o($VD1, $Vk5), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($Vq2, $Vp2, {
    84: 2646,
    192: 2647,
    83: 3210,
    190: $VE7
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3211,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 2646,
    192: 2647,
    83: 3212,
    190: $VE7
  }), o($Vt1, $Vs2, {
    99: 2165,
    95: 3213,
    101: $VX6,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 3214,
    193: [1, 3215]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3216,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 3217,
    193: [1, 3218]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3219,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 3220]
  }, o($VA1, $VT1), {
    100: [1, 3222],
    106: 3221,
    108: [1, 3223],
    109: [1, 3224],
    110: 3225,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3226]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 3227,
    193: [1, 3228]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3229,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), {
    121: [1, 3230]
  }, {
    19: [1, 3233],
    21: [1, 3236],
    22: 3232,
    87: 3231,
    214: 3234,
    215: [1, 3235]
  }, o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $VY6,
    21: $VZ6,
    22: 3238,
    87: 3237,
    214: 2200,
    215: $V_6
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $V$6,
    21: $V07,
    22: 3240,
    87: 3239,
    214: 2226,
    215: $V17
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $V27,
    21: $V37,
    22: 3242,
    87: 3241,
    214: 2253,
    215: $V47
  }, o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $V57,
    21: $V67,
    22: 3244,
    87: 3243,
    214: 2280,
    215: $V77
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $V87,
    21: $V97,
    22: 3246,
    87: 3245,
    214: 2306,
    215: $Va7
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $Vb7,
    21: $Vc7,
    22: 3248,
    87: 3247,
    214: 2333,
    215: $Vd7
  }, o($Vz3, $VZ5), o($Vz3, $VK1), o($VA3, $VZ5), o($VA3, $VK1), o($VB3, $VZ5), o($VB3, $VK1), o($Vx3, $Vd2), o($Vx3, $Ve2), o($Vx3, $Vv1), o($Vx3, $Vw1), o($VA3, $Vs1, {
    82: 3249
  }), o($Vx3, $VE1), o($Vx3, $VF1), {
    19: [1, 3253],
    21: [1, 3257],
    22: 3251,
    33: 3250,
    200: 3252,
    214: 3254,
    215: [1, 3256],
    216: [1, 3255]
  }, {
    119: [1, 3258],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vx3, $Vf2), o($Vx3, $Vg2), o($VA3, $Vs1, {
    82: 3259
  }), o($VG4, $Vy1, {
    93: 3260
  }), o($VA3, $Vz1, {
    99: 2736,
    95: 3261,
    101: $VG7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $VG1), o($VG4, $VH1), o($VG4, $VI1), o($VG4, $VJ1), {
    100: [1, 3262]
  }, o($VG4, $VT1), {
    70: [1, 3263]
  }, o($VH4, $Vp2, {
    83: 3264,
    84: 3265,
    192: 3266,
    190: [1, 3267]
  }), o($VI4, $Vp2, {
    83: 3268,
    84: 3269,
    192: 3270,
    190: $Vz8
  }), o($Vz3, $Vs2, {
    99: 2406,
    95: 3272,
    101: $Vh7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VC3, $Vt2), o($VA3, $Vu2, {
    90: 3273,
    95: 3274,
    91: 3275,
    99: 3276,
    105: 3278,
    107: 3279,
    101: $VA8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vw2, {
    90: 3273,
    95: 3274,
    91: 3275,
    99: 3276,
    105: 3278,
    107: 3279,
    101: $VA8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VA3, $Vx2, {
    90: 3273,
    95: 3274,
    91: 3275,
    99: 3276,
    105: 3278,
    107: 3279,
    101: $VA8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VE3, $Vy2), o($VK4, $Vp2, {
    83: 3280,
    84: 3281,
    192: 3282,
    190: [1, 3283]
  }), o($VM5, $VA2), o($VM5, $Vw), o($VM5, $Vx), o($VM5, $Vn), o($VM5, $Vo), o($VM5, $Vy), o($VM5, $Vp), o($VM5, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 3284],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3285,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VC3, $V13), o($VE3, $V23), o($VE3, $V33), o($VE3, $V43), o($VE3, $V53), {
    111: [1, 3286]
  }, o($VE3, $Va3), o($VA3, $Vk5), {
    193: [1, 3289],
    194: 3287,
    195: [1, 3288]
  }, o($Vz3, $VP5), o($Vz3, $VQ5), o($Vz3, $VR5), o($Vz3, $Vn), o($Vz3, $Vo), o($Vz3, $VX3), o($Vz3, $VY3), o($Vz3, $VZ3), o($Vz3, $Vp), o($Vz3, $Vq), o($Vz3, $V_3), o($Vz3, $V$3, {
    202: 3290,
    203: 3291,
    111: [1, 3292]
  }), o($Vz3, $V04), o($Vz3, $V14), o($Vz3, $V24), o($Vz3, $V34), o($Vz3, $V44), o($Vz3, $V54), o($Vz3, $V64), o($Vz3, $V74), o($Vz3, $V84), o($Ve7, $V63), o($Ve7, $V73), o($Ve7, $V83), o($Ve7, $V93), {
    193: [1, 3295],
    194: 3293,
    195: [1, 3294]
  }, o($VA3, $VP5), o($VA3, $VQ5), o($VA3, $VR5), o($VA3, $Vn), o($VA3, $Vo), o($VA3, $VX3), o($VA3, $VY3), o($VA3, $VZ3), o($VA3, $Vp), o($VA3, $Vq), o($VA3, $V_3), o($VA3, $V$3, {
    202: 3296,
    203: 3297,
    111: [1, 3298]
  }), o($VA3, $V04), o($VA3, $V14), o($VA3, $V24), o($VA3, $V34), o($VA3, $V44), o($VA3, $V54), o($VA3, $V64), o($VA3, $V74), o($VA3, $V84), o($Vf7, $V63), o($Vf7, $V73), o($Vf7, $V83), o($Vf7, $V93), {
    19: [1, 3301],
    21: [1, 3304],
    22: 3300,
    87: 3299,
    214: 3302,
    215: [1, 3303]
  }, {
    193: [1, 3307],
    194: 3305,
    195: [1, 3306]
  }, o($VB3, $VP5), o($VB3, $VQ5), o($VB3, $VR5), o($VB3, $Vn), o($VB3, $Vo), o($VB3, $VX3), o($VB3, $VY3), o($VB3, $VZ3), o($VB3, $Vp), o($VB3, $Vq), o($VB3, $V_3), o($VB3, $V$3, {
    202: 3308,
    203: 3309,
    111: [1, 3310]
  }), o($VB3, $V04), o($VB3, $V14), o($VB3, $V24), o($VB3, $V34), o($VB3, $V44), o($VB3, $V54), o($VB3, $V64), o($VB3, $V74), o($VB3, $V84), o($Vg7, $V63), o($Vg7, $V73), o($Vg7, $V83), o($Vg7, $V93), o($VA3, $Vk5), {
    193: [1, 3313],
    194: 3311,
    195: [1, 3312]
  }, o($Vz3, $VP5), o($Vz3, $VQ5), o($Vz3, $VR5), o($Vz3, $Vn), o($Vz3, $Vo), o($Vz3, $VX3), o($Vz3, $VY3), o($Vz3, $VZ3), o($Vz3, $Vp), o($Vz3, $Vq), o($Vz3, $V_3), o($Vz3, $V$3, {
    202: 3314,
    203: 3315,
    111: [1, 3316]
  }), o($Vz3, $V04), o($Vz3, $V14), o($Vz3, $V24), o($Vz3, $V34), o($Vz3, $V44), o($Vz3, $V54), o($Vz3, $V64), o($Vz3, $V74), o($Vz3, $V84), o($Ve7, $V63), o($Ve7, $V73), o($Ve7, $V83), o($Ve7, $V93), {
    193: [1, 3319],
    194: 3317,
    195: [1, 3318]
  }, o($VA3, $VP5), o($VA3, $VQ5), o($VA3, $VR5), o($VA3, $Vn), o($VA3, $Vo), o($VA3, $VX3), o($VA3, $VY3), o($VA3, $VZ3), o($VA3, $Vp), o($VA3, $Vq), o($VA3, $V_3), o($VA3, $V$3, {
    202: 3320,
    203: 3321,
    111: [1, 3322]
  }), o($VA3, $V04), o($VA3, $V14), o($VA3, $V24), o($VA3, $V34), o($VA3, $V44), o($VA3, $V54), o($VA3, $V64), o($VA3, $V74), o($VA3, $V84), o($Vf7, $V63), o($Vf7, $V73), o($Vf7, $V83), o($Vf7, $V93), {
    19: [1, 3325],
    21: [1, 3328],
    22: 3324,
    87: 3323,
    214: 3326,
    215: [1, 3327]
  }, {
    193: [1, 3331],
    194: 3329,
    195: [1, 3330]
  }, o($VB3, $VP5), o($VB3, $VQ5), o($VB3, $VR5), o($VB3, $Vn), o($VB3, $Vo), o($VB3, $VX3), o($VB3, $VY3), o($VB3, $VZ3), o($VB3, $Vp), o($VB3, $Vq), o($VB3, $V_3), o($VB3, $V$3, {
    202: 3332,
    203: 3333,
    111: [1, 3334]
  }), o($VB3, $V04), o($VB3, $V14), o($VB3, $V24), o($VB3, $V34), o($VB3, $V44), o($VB3, $V54), o($VB3, $V64), o($VB3, $V74), o($VB3, $V84), o($Vg7, $V63), o($Vg7, $V73), o($Vg7, $V83), o($Vg7, $V93), o($Vn4, $VB8), o($VC6, $VI3), o($Vn4, $VJ3, {
    31: 3335,
    193: [1, 3336]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3337,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VK6, $VC8), o($VM6, $VN6, {
    60: 3338
  }), o($VI, $VJ, {
    63: 3339,
    73: 3340,
    75: 3341,
    76: 3342,
    92: 3345,
    94: 3346,
    87: 3348,
    88: 3349,
    89: 3350,
    78: 3351,
    44: 3352,
    95: 3356,
    22: 3357,
    91: 3359,
    118: 3360,
    99: 3364,
    214: 3367,
    105: 3368,
    107: 3369,
    19: [1, 3366],
    21: [1, 3371],
    69: [1, 3343],
    71: [1, 3344],
    79: [1, 3361],
    80: [1, 3362],
    81: [1, 3363],
    85: [1, 3347],
    96: [1, 3353],
    97: [1, 3354],
    98: [1, 3355],
    101: $VD8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 3358],
    215: [1, 3370]
  }), o($VM6, $VE8), o($VI, $VJ, {
    63: 3372,
    73: 3373,
    75: 3374,
    76: 3375,
    92: 3378,
    94: 3379,
    87: 3381,
    88: 3382,
    89: 3383,
    78: 3384,
    44: 3385,
    95: 3389,
    22: 3390,
    91: 3392,
    118: 3393,
    99: 3397,
    214: 3400,
    105: 3401,
    107: 3402,
    19: [1, 3399],
    21: [1, 3404],
    69: [1, 3376],
    71: [1, 3377],
    79: [1, 3394],
    80: [1, 3395],
    81: [1, 3396],
    85: [1, 3380],
    96: [1, 3386],
    97: [1, 3387],
    98: [1, 3388],
    101: $VF8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 3391],
    215: [1, 3403]
  }), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3405,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM6, $VA2), o($VM6, $Vw), o($VM6, $Vx), o($VM6, $Vn), o($VM6, $Vo), o($VM6, $Vy), o($VM6, $Vp), o($VM6, $Vq), o($VM6, $Vs2, {
    99: 2489,
    95: 3406,
    101: $Vt7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $Vt2), o($V58, $V13), o($VM6, $VG8), o($Vv7, $VP3), o($Vx7, $VQ3), o($Vx7, $VR3), o($Vx7, $VS3), {
    100: [1, 3407]
  }, o($Vx7, $VT1), {
    100: [1, 3409],
    106: 3408,
    108: [1, 3410],
    109: [1, 3411],
    110: 3412,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3413]
  }, o($Vx7, $VU3), {
    121: [1, 3414]
  }, {
    19: [1, 3417],
    21: [1, 3420],
    22: 3416,
    87: 3415,
    214: 3418,
    215: [1, 3419]
  }, o($Vn4, $VH8), o($V78, $Vs1, {
    82: 3421
  }), o($V78, $Vi7), o($V78, $Vj7), o($V78, $Vk7), o($V78, $Vl7), o($V78, $Vm7), o($Vc8, $Vn7, {
    57: 3422,
    51: [1, 3423]
  }), o($Vd8, $Vo7, {
    61: 3424,
    53: [1, 3425]
  }), o($Ve8, $Vp7), o($Ve8, $Vq7, {
    74: 3426,
    76: 3427,
    78: 3428,
    44: 3429,
    118: 3430,
    79: [1, 3431],
    80: [1, 3432],
    81: [1, 3433],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($Ve8, $Vr7), o($Ve8, $Vs7, {
    77: 3434,
    73: 3435,
    92: 3436,
    94: 3437,
    95: 3441,
    99: 3442,
    96: [1, 3438],
    97: [1, 3439],
    98: [1, 3440],
    101: $VI8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 3444,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Ve8, $Vu7), o($VJ8, $Vy1, {
    93: 3445
  }), o($VK8, $Vz1, {
    99: 2992,
    95: 3446,
    101: $Vf8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VL8, $VB1, {
    86: 3447
  }), o($VL8, $VB1, {
    86: 3448
  }), o($VL8, $VB1, {
    86: 3449
  }), o($Ve8, $VC1, {
    105: 2996,
    107: 2997,
    91: 3450,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM8, $Vz7), o($VM8, $VA7), o($VJ8, $VG1), o($VJ8, $VH1), o($VJ8, $VI1), o($VJ8, $VJ1), o($VL8, $VK1), o($VL1, $VM1, {
    162: 3451
  }), o($VN8, $VO1), {
    119: [1, 3452],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM8, $VE1), o($VM8, $VF1), {
    19: [1, 3456],
    21: [1, 3460],
    22: 3454,
    33: 3453,
    200: 3455,
    214: 3457,
    215: [1, 3459],
    216: [1, 3458]
  }, {
    100: [1, 3461]
  }, o($VJ8, $VT1), o($VL8, $Vn), o($VL8, $Vo), {
    100: [1, 3463],
    106: 3462,
    108: [1, 3464],
    109: [1, 3465],
    110: 3466,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3467]
  }, o($VL8, $Vp), o($VL8, $Vq), o($V78, $Vs1, {
    82: 3468
  }), o($Vp4, $VZ5), o($Vp4, $VK1), o($VG, $Vd2), o($VG, $Ve2), o($VG, $Vv1), o($VG, $Vw1), o($Vt1, $Vs1, {
    82: 3469
  }), o($VG, $VE1), o($VG, $VF1), {
    19: [1, 3473],
    21: [1, 3477],
    22: 3471,
    33: 3470,
    200: 3472,
    214: 3474,
    215: [1, 3476],
    216: [1, 3475]
  }, {
    119: [1, 3478],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VG, $Vf2), o($VG, $Vg2), o($Vt1, $Vs1, {
    82: 3479
  }), o($Vh2, $Vy1, {
    93: 3480
  }), o($Vt1, $Vz1, {
    99: 3021,
    95: 3481,
    101: $Vg8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $VG1), o($Vh2, $VH1), o($Vh2, $VI1), o($Vh2, $VJ1), {
    100: [1, 3482]
  }, o($Vh2, $VT1), {
    70: [1, 3483]
  }, o($Vo2, $Vp2, {
    83: 3484,
    84: 3485,
    192: 3486,
    190: [1, 3487]
  }), o($Vq2, $Vp2, {
    83: 3488,
    84: 3489,
    192: 3490,
    190: $VO8
  }), o($Vr1, $Vs2, {
    99: 2558,
    95: 3492,
    101: $VD7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx1, $Vt2), o($Vt1, $Vu2, {
    90: 3493,
    95: 3494,
    91: 3495,
    99: 3496,
    105: 3498,
    107: 3499,
    101: $VP8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vw2, {
    90: 3493,
    95: 3494,
    91: 3495,
    99: 3496,
    105: 3498,
    107: 3499,
    101: $VP8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vt1, $Vx2, {
    90: 3493,
    95: 3494,
    91: 3495,
    99: 3496,
    105: 3498,
    107: 3499,
    101: $VP8,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN1, $Vy2), o($Vz2, $Vp2, {
    83: 3500,
    84: 3501,
    192: 3502,
    190: [1, 3503]
  }), o($Vu1, $VA2), o($Vu1, $Vw), o($Vu1, $Vx), o($Vu1, $Vn), o($Vu1, $Vo), o($Vu1, $Vy), o($Vu1, $Vp), o($Vu1, $Vq), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 3504],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3505,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vx1, $V13), o($VN1, $V23), o($VN1, $V33), o($VN1, $V43), o($VN1, $V53), {
    111: [1, 3506]
  }, o($VN1, $Va3), o($Vt1, $Vk5), {
    193: [1, 3509],
    194: 3507,
    195: [1, 3508]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 3510,
    203: 3511,
    111: [1, 3512]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 3515],
    194: 3513,
    195: [1, 3514]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 3516,
    203: 3517,
    111: [1, 3518]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 3521],
    21: [1, 3524],
    22: 3520,
    87: 3519,
    214: 3522,
    215: [1, 3523]
  }, {
    193: [1, 3527],
    194: 3525,
    195: [1, 3526]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 3528,
    203: 3529,
    111: [1, 3530]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($Vt1, $Vk5), {
    193: [1, 3533],
    194: 3531,
    195: [1, 3532]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 3534,
    203: 3535,
    111: [1, 3536]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 3539],
    194: 3537,
    195: [1, 3538]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 3540,
    203: 3541,
    111: [1, 3542]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 3545],
    21: [1, 3548],
    22: 3544,
    87: 3543,
    214: 3546,
    215: [1, 3547]
  }, {
    193: [1, 3551],
    194: 3549,
    195: [1, 3550]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 3552,
    203: 3553,
    111: [1, 3554]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($VG, $VT3), {
    121: [1, 3555]
  }, o($VG, $VH3), o($Vh2, $VP3), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3556,
    214: 45,
    215: $Vk
  }, {
    19: $VQ8,
    21: $VR8,
    22: 3558,
    100: [1, 3569],
    108: [1, 3570],
    109: [1, 3571],
    110: 3568,
    181: 3559,
    191: 3557,
    196: 3562,
    197: 3563,
    198: 3564,
    201: 3567,
    204: [1, 3572],
    205: [1, 3573],
    206: [1, 3578],
    207: [1, 3579],
    208: [1, 3580],
    209: [1, 3581],
    210: [1, 3574],
    211: [1, 3575],
    212: [1, 3576],
    213: [1, 3577],
    214: 3561,
    215: $VS8
  }, o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3582,
    214: 45,
    215: $Vk
  }, {
    19: $VT8,
    21: $VU8,
    22: 3584,
    100: [1, 3595],
    108: [1, 3596],
    109: [1, 3597],
    110: 3594,
    181: 3585,
    191: 3583,
    196: 3588,
    197: 3589,
    198: 3590,
    201: 3593,
    204: [1, 3598],
    205: [1, 3599],
    206: [1, 3604],
    207: [1, 3605],
    208: [1, 3606],
    209: [1, 3607],
    210: [1, 3600],
    211: [1, 3601],
    212: [1, 3602],
    213: [1, 3603],
    214: 3587,
    215: $VV8
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 3608]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3609,
    214: 45,
    215: $Vk
  }, {
    19: $VW8,
    21: $VX8,
    22: 3611,
    100: [1, 3622],
    108: [1, 3623],
    109: [1, 3624],
    110: 3621,
    181: 3612,
    191: 3610,
    196: 3615,
    197: 3616,
    198: 3617,
    201: 3620,
    204: [1, 3625],
    205: [1, 3626],
    206: [1, 3631],
    207: [1, 3632],
    208: [1, 3633],
    209: [1, 3634],
    210: [1, 3627],
    211: [1, 3628],
    212: [1, 3629],
    213: [1, 3630],
    214: 3614,
    215: $VY8
  }, o($VD1, $Vk5), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($VI4, $Vp2, {
    84: 3269,
    192: 3270,
    83: 3635,
    190: $Vz8
  }), o($Vx3, $VA2), o($Vx3, $Vw), o($Vx3, $Vx), o($Vx3, $Vn), o($Vx3, $Vo), o($Vx3, $Vy), o($Vx3, $Vp), o($Vx3, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3636,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VI4, $Vp2, {
    84: 3269,
    192: 3270,
    83: 3637,
    190: $Vz8
  }), o($VA3, $Vs2, {
    99: 2736,
    95: 3638,
    101: $VG7,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VG4, $Vt2), o($VG4, $V13), o($Vx3, $Vw3), o($VL5, $VH3), o($Vz3, $VI3), o($VL5, $VJ3, {
    31: 3639,
    193: [1, 3640]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3641,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx3, $VO3), o($VA3, $VI3), o($Vx3, $VJ3, {
    31: 3642,
    193: [1, 3643]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3644,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VC3, $VP3), o($VD3, $VQ3), o($VD3, $VR3), o($VD3, $VS3), {
    100: [1, 3645]
  }, o($VD3, $VT1), {
    100: [1, 3647],
    106: 3646,
    108: [1, 3648],
    109: [1, 3649],
    110: 3650,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3651]
  }, o($VM5, $VT3), o($VB3, $VI3), o($VM5, $VJ3, {
    31: 3652,
    193: [1, 3653]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3654,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VD3, $VU3), {
    121: [1, 3655]
  }, {
    19: [1, 3658],
    21: [1, 3661],
    22: 3657,
    87: 3656,
    214: 3659,
    215: [1, 3660]
  }, o($VH4, $V71), o($VH4, $V81), o($VH4, $V91), o($Vz3, $Vi5), o($Vz3, $Vj5), {
    19: $VH7,
    21: $VI7,
    22: 3663,
    87: 3662,
    214: 2771,
    215: $VJ7
  }, o($VI4, $V71), o($VI4, $V81), o($VI4, $V91), o($VA3, $Vi5), o($VA3, $Vj5), {
    19: $VK7,
    21: $VL7,
    22: 3665,
    87: 3664,
    214: 2797,
    215: $VM7
  }, o($VD3, $VD5), o($VD3, $VK1), o($VD3, $Vn), o($VD3, $Vo), o($VD3, $Vp), o($VD3, $Vq), o($VK4, $V71), o($VK4, $V81), o($VK4, $V91), o($VB3, $Vi5), o($VB3, $Vj5), {
    19: $VN7,
    21: $VO7,
    22: 3667,
    87: 3666,
    214: 2824,
    215: $VP7
  }, o($VH4, $V71), o($VH4, $V81), o($VH4, $V91), o($Vz3, $Vi5), o($Vz3, $Vj5), {
    19: $VQ7,
    21: $VR7,
    22: 3669,
    87: 3668,
    214: 2851,
    215: $VS7
  }, o($VI4, $V71), o($VI4, $V81), o($VI4, $V91), o($VA3, $Vi5), o($VA3, $Vj5), {
    19: $VT7,
    21: $VU7,
    22: 3671,
    87: 3670,
    214: 2877,
    215: $VV7
  }, o($VD3, $VD5), o($VD3, $VK1), o($VD3, $Vn), o($VD3, $Vo), o($VD3, $Vp), o($VD3, $Vq), o($VK4, $V71), o($VK4, $V81), o($VK4, $V91), o($VB3, $Vi5), o($VB3, $Vj5), {
    19: $VW7,
    21: $VX7,
    22: 3673,
    87: 3672,
    214: 2904,
    215: $VY7
  }, o($VZ7, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3674,
    214: 45,
    215: $Vk
  }, {
    19: $VZ8,
    21: $V_8,
    22: 3676,
    100: [1, 3687],
    108: [1, 3688],
    109: [1, 3689],
    110: 3686,
    181: 3677,
    191: 3675,
    196: 3680,
    197: 3681,
    198: 3682,
    201: 3685,
    204: [1, 3690],
    205: [1, 3691],
    206: [1, 3696],
    207: [1, 3697],
    208: [1, 3698],
    209: [1, 3699],
    210: [1, 3692],
    211: [1, 3693],
    212: [1, 3694],
    213: [1, 3695],
    214: 3679,
    215: $V$8
  }, o($VK6, $Vo7, {
    61: 3700,
    53: [1, 3701]
  }), o($VM6, $Vp7), o($VM6, $Vq7, {
    74: 3702,
    76: 3703,
    78: 3704,
    44: 3705,
    118: 3706,
    79: [1, 3707],
    80: [1, 3708],
    81: [1, 3709],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VM6, $Vr7), o($VM6, $Vs7, {
    77: 3710,
    73: 3711,
    92: 3712,
    94: 3713,
    95: 3717,
    99: 3718,
    96: [1, 3714],
    97: [1, 3715],
    98: [1, 3716],
    101: $V09,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 3720,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VM6, $Vu7), o($Vv7, $Vy1, {
    93: 3721
  }), o($Vw7, $Vz1, {
    99: 3364,
    95: 3722,
    101: $VD8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx7, $VB1, {
    86: 3723
  }), o($Vx7, $VB1, {
    86: 3724
  }), o($Vx7, $VB1, {
    86: 3725
  }), o($VM6, $VC1, {
    105: 3368,
    107: 3369,
    91: 3726,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vy7, $Vz7), o($Vy7, $VA7), o($Vv7, $VG1), o($Vv7, $VH1), o($Vv7, $VI1), o($Vv7, $VJ1), o($Vx7, $VK1), o($VL1, $VM1, {
    162: 3727
  }), o($VB7, $VO1), {
    119: [1, 3728],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vy7, $VE1), o($Vy7, $VF1), {
    19: [1, 3732],
    21: [1, 3736],
    22: 3730,
    33: 3729,
    200: 3731,
    214: 3733,
    215: [1, 3735],
    216: [1, 3734]
  }, {
    100: [1, 3737]
  }, o($Vv7, $VT1), o($Vx7, $Vn), o($Vx7, $Vo), {
    100: [1, 3739],
    106: 3738,
    108: [1, 3740],
    109: [1, 3741],
    110: 3742,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3743]
  }, o($Vx7, $Vp), o($Vx7, $Vq), o($VM6, $Vp7), o($VM6, $Vq7, {
    74: 3744,
    76: 3745,
    78: 3746,
    44: 3747,
    118: 3748,
    79: [1, 3749],
    80: [1, 3750],
    81: [1, 3751],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VM6, $Vr7), o($VM6, $Vs7, {
    77: 3752,
    73: 3753,
    92: 3754,
    94: 3755,
    95: 3759,
    99: 3760,
    96: [1, 3756],
    97: [1, 3757],
    98: [1, 3758],
    101: $V19,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 3762,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VM6, $Vu7), o($Vv7, $Vy1, {
    93: 3763
  }), o($Vw7, $Vz1, {
    99: 3397,
    95: 3764,
    101: $VF8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx7, $VB1, {
    86: 3765
  }), o($Vx7, $VB1, {
    86: 3766
  }), o($Vx7, $VB1, {
    86: 3767
  }), o($VM6, $VC1, {
    105: 3401,
    107: 3402,
    91: 3768,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vy7, $Vz7), o($Vy7, $VA7), o($Vv7, $VG1), o($Vv7, $VH1), o($Vv7, $VI1), o($Vv7, $VJ1), o($Vx7, $VK1), o($VL1, $VM1, {
    162: 3769
  }), o($VB7, $VO1), {
    119: [1, 3770],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vy7, $VE1), o($Vy7, $VF1), {
    19: [1, 3774],
    21: [1, 3778],
    22: 3772,
    33: 3771,
    200: 3773,
    214: 3775,
    215: [1, 3777],
    216: [1, 3776]
  }, {
    100: [1, 3779]
  }, o($Vv7, $VT1), o($Vx7, $Vn), o($Vx7, $Vo), {
    100: [1, 3781],
    106: 3780,
    108: [1, 3782],
    109: [1, 3783],
    110: 3784,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3785]
  }, o($Vx7, $Vp), o($Vx7, $Vq), {
    121: [1, 3786]
  }, o($V58, $VP3), o($Vx7, $V13), o($Vx7, $V23), o($Vx7, $V33), o($Vx7, $V43), o($Vx7, $V53), {
    111: [1, 3787]
  }, o($Vx7, $Va3), o($Vy7, $Vk5), o($VB7, $VD5), o($VB7, $VK1), o($VB7, $Vn), o($VB7, $Vo), o($VB7, $Vp), o($VB7, $Vq), o($V29, $Vp2, {
    83: 3788,
    84: 3789,
    192: 3790,
    190: $V39
  }), o($Vd8, $V$7), o($Vr, $Vs, {
    55: 3792,
    59: 3793,
    40: 3794,
    43: $Vt
  }), o($Ve8, $V08), o($Vr, $Vs, {
    59: 3795,
    40: 3796,
    43: $Vt
  }), o($Ve8, $V18), o($Ve8, $V28), o($Ve8, $Vz7), o($Ve8, $VA7), {
    119: [1, 3797],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Ve8, $VE1), o($Ve8, $VF1), {
    19: [1, 3801],
    21: [1, 3805],
    22: 3799,
    33: 3798,
    200: 3800,
    214: 3802,
    215: [1, 3804],
    216: [1, 3803]
  }, o($Ve8, $V38), o($Ve8, $V48), o($V49, $Vy1, {
    93: 3806
  }), o($Ve8, $Vz1, {
    99: 3442,
    95: 3807,
    101: $VI8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $VG1), o($V49, $VH1), o($V49, $VI1), o($V49, $VJ1), {
    100: [1, 3808]
  }, o($V49, $VT1), {
    70: [1, 3809]
  }, o($VK8, $Vs2, {
    99: 2992,
    95: 3810,
    101: $Vf8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VJ8, $Vt2), o($Ve8, $Vu2, {
    90: 3811,
    95: 3812,
    91: 3813,
    99: 3814,
    105: 3816,
    107: 3817,
    101: $V59,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vw2, {
    90: 3811,
    95: 3812,
    91: 3813,
    99: 3814,
    105: 3816,
    107: 3817,
    101: $V59,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vx2, {
    90: 3811,
    95: 3812,
    91: 3813,
    99: 3814,
    105: 3816,
    107: 3817,
    101: $V59,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN8, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 3818],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3819,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM8, $VA2), o($VM8, $Vw), o($VM8, $Vx), o($VM8, $Vn), o($VM8, $Vo), o($VM8, $Vy), o($VM8, $Vp), o($VM8, $Vq), o($VJ8, $V13), o($VN8, $V23), o($VN8, $V33), o($VN8, $V43), o($VN8, $V53), {
    111: [1, 3820]
  }, o($VN8, $Va3), o($V29, $Vp2, {
    84: 3789,
    192: 3790,
    83: 3821,
    190: $V39
  }), o($Vq2, $Vp2, {
    84: 3489,
    192: 3490,
    83: 3822,
    190: $VO8
  }), o($VG, $VA2), o($VG, $Vw), o($VG, $Vx), o($VG, $Vn), o($VG, $Vo), o($VG, $Vy), o($VG, $Vp), o($VG, $Vq), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3823,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vq2, $Vp2, {
    84: 3489,
    192: 3490,
    83: 3824,
    190: $VO8
  }), o($Vt1, $Vs2, {
    99: 3021,
    95: 3825,
    101: $Vg8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vh2, $Vt2), o($Vh2, $V13), o($VG, $Vw3), o($VG3, $VH3), o($Vr1, $VI3), o($VG3, $VJ3, {
    31: 3826,
    193: [1, 3827]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3828,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VG, $VO3), o($Vt1, $VI3), o($VG, $VJ3, {
    31: 3829,
    193: [1, 3830]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3831,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vx1, $VP3), o($VA1, $VQ3), o($VA1, $VR3), o($VA1, $VS3), {
    100: [1, 3832]
  }, o($VA1, $VT1), {
    100: [1, 3834],
    106: 3833,
    108: [1, 3835],
    109: [1, 3836],
    110: 3837,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 3838]
  }, o($Vu1, $VT3), o($VD1, $VI3), o($Vu1, $VJ3, {
    31: 3839,
    193: [1, 3840]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 3841,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($VA1, $VU3), {
    121: [1, 3842]
  }, {
    19: [1, 3845],
    21: [1, 3848],
    22: 3844,
    87: 3843,
    214: 3846,
    215: [1, 3847]
  }, o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $Vh8,
    21: $Vi8,
    22: 3850,
    87: 3849,
    214: 3056,
    215: $Vj8
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $Vk8,
    21: $Vl8,
    22: 3852,
    87: 3851,
    214: 3082,
    215: $Vm8
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $Vn8,
    21: $Vo8,
    22: 3854,
    87: 3853,
    214: 3109,
    215: $Vp8
  }, o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $Vq8,
    21: $Vr8,
    22: 3856,
    87: 3855,
    214: 3136,
    215: $Vs8
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $Vt8,
    21: $Vu8,
    22: 3858,
    87: 3857,
    214: 3162,
    215: $Vv8
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $Vw8,
    21: $Vx8,
    22: 3860,
    87: 3859,
    214: 3189,
    215: $Vy8
  }, o($Vt1, $Vk5), {
    193: [1, 3863],
    194: 3861,
    195: [1, 3862]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 3864,
    203: 3865,
    111: [1, 3866]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 3869],
    194: 3867,
    195: [1, 3868]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 3870,
    203: 3871,
    111: [1, 3872]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 3875],
    21: [1, 3878],
    22: 3874,
    87: 3873,
    214: 3876,
    215: [1, 3877]
  }, {
    193: [1, 3881],
    194: 3879,
    195: [1, 3880]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 3882,
    203: 3883,
    111: [1, 3884]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($Vx3, $VT3), {
    121: [1, 3885]
  }, o($Vx3, $VH3), o($VG4, $VP3), o($VH4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3886,
    214: 45,
    215: $Vk
  }, {
    19: $V69,
    21: $V79,
    22: 3888,
    100: [1, 3899],
    108: [1, 3900],
    109: [1, 3901],
    110: 3898,
    181: 3889,
    191: 3887,
    196: 3892,
    197: 3893,
    198: 3894,
    201: 3897,
    204: [1, 3902],
    205: [1, 3903],
    206: [1, 3908],
    207: [1, 3909],
    208: [1, 3910],
    209: [1, 3911],
    210: [1, 3904],
    211: [1, 3905],
    212: [1, 3906],
    213: [1, 3907],
    214: 3891,
    215: $V89
  }, o($VI4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3912,
    214: 45,
    215: $Vk
  }, {
    19: $V99,
    21: $Va9,
    22: 3914,
    100: [1, 3925],
    108: [1, 3926],
    109: [1, 3927],
    110: 3924,
    181: 3915,
    191: 3913,
    196: 3918,
    197: 3919,
    198: 3920,
    201: 3923,
    204: [1, 3928],
    205: [1, 3929],
    206: [1, 3934],
    207: [1, 3935],
    208: [1, 3936],
    209: [1, 3937],
    210: [1, 3930],
    211: [1, 3931],
    212: [1, 3932],
    213: [1, 3933],
    214: 3917,
    215: $Vb9
  }, o($VD3, $V13), o($VD3, $V23), o($VD3, $V33), o($VD3, $V43), o($VD3, $V53), {
    111: [1, 3938]
  }, o($VD3, $Va3), o($VK4, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 3939,
    214: 45,
    215: $Vk
  }, {
    19: $Vc9,
    21: $Vd9,
    22: 3941,
    100: [1, 3952],
    108: [1, 3953],
    109: [1, 3954],
    110: 3951,
    181: 3942,
    191: 3940,
    196: 3945,
    197: 3946,
    198: 3947,
    201: 3950,
    204: [1, 3955],
    205: [1, 3956],
    206: [1, 3961],
    207: [1, 3962],
    208: [1, 3963],
    209: [1, 3964],
    210: [1, 3957],
    211: [1, 3958],
    212: [1, 3959],
    213: [1, 3960],
    214: 3944,
    215: $Ve9
  }, o($VB3, $Vk5), o($VE3, $VD5), o($VE3, $VK1), o($VE3, $Vn), o($VE3, $Vo), o($VE3, $Vp), o($VE3, $Vq), o($Vz3, $VZ5), o($Vz3, $VK1), o($VA3, $VZ5), o($VA3, $VK1), o($VB3, $VZ5), o($VB3, $VK1), o($Vz3, $VZ5), o($Vz3, $VK1), o($VA3, $VZ5), o($VA3, $VK1), o($VB3, $VZ5), o($VB3, $VK1), {
    193: [1, 3967],
    194: 3965,
    195: [1, 3966]
  }, o($VC6, $VP5), o($VC6, $VQ5), o($VC6, $VR5), o($VC6, $Vn), o($VC6, $Vo), o($VC6, $VX3), o($VC6, $VY3), o($VC6, $VZ3), o($VC6, $Vp), o($VC6, $Vq), o($VC6, $V_3), o($VC6, $V$3, {
    202: 3968,
    203: 3969,
    111: [1, 3970]
  }), o($VC6, $V04), o($VC6, $V14), o($VC6, $V24), o($VC6, $V34), o($VC6, $V44), o($VC6, $V54), o($VC6, $V64), o($VC6, $V74), o($VC6, $V84), o($Vf9, $V63), o($Vf9, $V73), o($Vf9, $V83), o($Vf9, $V93), o($VM6, $V08), o($Vr, $Vs, {
    59: 3971,
    40: 3972,
    43: $Vt
  }), o($VM6, $V18), o($VM6, $V28), o($VM6, $Vz7), o($VM6, $VA7), {
    119: [1, 3973],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM6, $VE1), o($VM6, $VF1), {
    19: [1, 3977],
    21: [1, 3981],
    22: 3975,
    33: 3974,
    200: 3976,
    214: 3978,
    215: [1, 3980],
    216: [1, 3979]
  }, o($VM6, $V38), o($VM6, $V48), o($V58, $Vy1, {
    93: 3982
  }), o($VM6, $Vz1, {
    99: 3718,
    95: 3983,
    101: $V09,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $VG1), o($V58, $VH1), o($V58, $VI1), o($V58, $VJ1), {
    100: [1, 3984]
  }, o($V58, $VT1), {
    70: [1, 3985]
  }, o($Vw7, $Vs2, {
    99: 3364,
    95: 3986,
    101: $VD8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vv7, $Vt2), o($VM6, $Vu2, {
    90: 3987,
    95: 3988,
    91: 3989,
    99: 3990,
    105: 3992,
    107: 3993,
    101: $Vg9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vw2, {
    90: 3987,
    95: 3988,
    91: 3989,
    99: 3990,
    105: 3992,
    107: 3993,
    101: $Vg9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vx2, {
    90: 3987,
    95: 3988,
    91: 3989,
    99: 3990,
    105: 3992,
    107: 3993,
    101: $Vg9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VB7, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 3994],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 3995,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vy7, $VA2), o($Vy7, $Vw), o($Vy7, $Vx), o($Vy7, $Vn), o($Vy7, $Vo), o($Vy7, $Vy), o($Vy7, $Vp), o($Vy7, $Vq), o($Vv7, $V13), o($VB7, $V23), o($VB7, $V33), o($VB7, $V43), o($VB7, $V53), {
    111: [1, 3996]
  }, o($VB7, $Va3), o($VM6, $V18), o($VM6, $V28), o($VM6, $Vz7), o($VM6, $VA7), {
    119: [1, 3997],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM6, $VE1), o($VM6, $VF1), {
    19: [1, 4001],
    21: [1, 4005],
    22: 3999,
    33: 3998,
    200: 4000,
    214: 4002,
    215: [1, 4004],
    216: [1, 4003]
  }, o($VM6, $V38), o($VM6, $V48), o($V58, $Vy1, {
    93: 4006
  }), o($VM6, $Vz1, {
    99: 3760,
    95: 4007,
    101: $V19,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $VG1), o($V58, $VH1), o($V58, $VI1), o($V58, $VJ1), {
    100: [1, 4008]
  }, o($V58, $VT1), {
    70: [1, 4009]
  }, o($Vw7, $Vs2, {
    99: 3397,
    95: 4010,
    101: $VF8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vv7, $Vt2), o($VM6, $Vu2, {
    90: 4011,
    95: 4012,
    91: 4013,
    99: 4014,
    105: 4016,
    107: 4017,
    101: $Vh9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vw2, {
    90: 4011,
    95: 4012,
    91: 4013,
    99: 4014,
    105: 4016,
    107: 4017,
    101: $Vh9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vx2, {
    90: 4011,
    95: 4012,
    91: 4013,
    99: 4014,
    105: 4016,
    107: 4017,
    101: $Vh9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VB7, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 4018],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4019,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vy7, $VA2), o($Vy7, $Vw), o($Vy7, $Vx), o($Vy7, $Vn), o($Vy7, $Vo), o($Vy7, $Vy), o($Vy7, $Vp), o($Vy7, $Vq), o($Vv7, $V13), o($VB7, $V23), o($VB7, $V33), o($VB7, $V43), o($VB7, $V53), {
    111: [1, 4020]
  }, o($VB7, $Va3), o($VM6, $Vk5), {
    19: [1, 4023],
    21: [1, 4026],
    22: 4022,
    87: 4021,
    214: 4024,
    215: [1, 4025]
  }, o($V96, $VB8), o($V78, $VI3), o($V96, $VJ3, {
    31: 4027,
    193: [1, 4028]
  }), {
    19: $VK3,
    21: $VL3,
    22: 643,
    129: 4029,
    199: $VM3,
    214: 646,
    215: $VN3
  }, o($Vd8, $VC8), o($Ve8, $VN6, {
    60: 4030
  }), o($VI, $VJ, {
    63: 4031,
    73: 4032,
    75: 4033,
    76: 4034,
    92: 4037,
    94: 4038,
    87: 4040,
    88: 4041,
    89: 4042,
    78: 4043,
    44: 4044,
    95: 4048,
    22: 4049,
    91: 4051,
    118: 4052,
    99: 4056,
    214: 4059,
    105: 4060,
    107: 4061,
    19: [1, 4058],
    21: [1, 4063],
    69: [1, 4035],
    71: [1, 4036],
    79: [1, 4053],
    80: [1, 4054],
    81: [1, 4055],
    85: [1, 4039],
    96: [1, 4045],
    97: [1, 4046],
    98: [1, 4047],
    101: $Vi9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 4050],
    215: [1, 4062]
  }), o($Ve8, $VE8), o($VI, $VJ, {
    63: 4064,
    73: 4065,
    75: 4066,
    76: 4067,
    92: 4070,
    94: 4071,
    87: 4073,
    88: 4074,
    89: 4075,
    78: 4076,
    44: 4077,
    95: 4081,
    22: 4082,
    91: 4084,
    118: 4085,
    99: 4089,
    214: 4092,
    105: 4093,
    107: 4094,
    19: [1, 4091],
    21: [1, 4096],
    69: [1, 4068],
    71: [1, 4069],
    79: [1, 4086],
    80: [1, 4087],
    81: [1, 4088],
    85: [1, 4072],
    96: [1, 4078],
    97: [1, 4079],
    98: [1, 4080],
    101: $Vj9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 4083],
    215: [1, 4095]
  }), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4097,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Ve8, $VA2), o($Ve8, $Vw), o($Ve8, $Vx), o($Ve8, $Vn), o($Ve8, $Vo), o($Ve8, $Vy), o($Ve8, $Vp), o($Ve8, $Vq), o($Ve8, $Vs2, {
    99: 3442,
    95: 4098,
    101: $VI8,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $Vt2), o($V49, $V13), o($Ve8, $VG8), o($VJ8, $VP3), o($VL8, $VQ3), o($VL8, $VR3), o($VL8, $VS3), {
    100: [1, 4099]
  }, o($VL8, $VT1), {
    100: [1, 4101],
    106: 4100,
    108: [1, 4102],
    109: [1, 4103],
    110: 4104,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4105]
  }, o($VL8, $VU3), {
    121: [1, 4106]
  }, {
    19: [1, 4109],
    21: [1, 4112],
    22: 4108,
    87: 4107,
    214: 4110,
    215: [1, 4111]
  }, o($V96, $VH8), o($VG, $VT3), {
    121: [1, 4113]
  }, o($VG, $VH3), o($Vh2, $VP3), o($Vo2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 4114,
    214: 45,
    215: $Vk
  }, {
    19: $Vk9,
    21: $Vl9,
    22: 4116,
    100: [1, 4127],
    108: [1, 4128],
    109: [1, 4129],
    110: 4126,
    181: 4117,
    191: 4115,
    196: 4120,
    197: 4121,
    198: 4122,
    201: 4125,
    204: [1, 4130],
    205: [1, 4131],
    206: [1, 4136],
    207: [1, 4137],
    208: [1, 4138],
    209: [1, 4139],
    210: [1, 4132],
    211: [1, 4133],
    212: [1, 4134],
    213: [1, 4135],
    214: 4119,
    215: $Vm9
  }, o($Vq2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 4140,
    214: 45,
    215: $Vk
  }, {
    19: $Vn9,
    21: $Vo9,
    22: 4142,
    100: [1, 4153],
    108: [1, 4154],
    109: [1, 4155],
    110: 4152,
    181: 4143,
    191: 4141,
    196: 4146,
    197: 4147,
    198: 4148,
    201: 4151,
    204: [1, 4156],
    205: [1, 4157],
    206: [1, 4162],
    207: [1, 4163],
    208: [1, 4164],
    209: [1, 4165],
    210: [1, 4158],
    211: [1, 4159],
    212: [1, 4160],
    213: [1, 4161],
    214: 4145,
    215: $Vp9
  }, o($VA1, $V13), o($VA1, $V23), o($VA1, $V33), o($VA1, $V43), o($VA1, $V53), {
    111: [1, 4166]
  }, o($VA1, $Va3), o($Vz2, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 4167,
    214: 45,
    215: $Vk
  }, {
    19: $Vq9,
    21: $Vr9,
    22: 4169,
    100: [1, 4180],
    108: [1, 4181],
    109: [1, 4182],
    110: 4179,
    181: 4170,
    191: 4168,
    196: 4173,
    197: 4174,
    198: 4175,
    201: 4178,
    204: [1, 4183],
    205: [1, 4184],
    206: [1, 4189],
    207: [1, 4190],
    208: [1, 4191],
    209: [1, 4192],
    210: [1, 4185],
    211: [1, 4186],
    212: [1, 4187],
    213: [1, 4188],
    214: 4172,
    215: $Vs9
  }, o($VD1, $Vk5), o($VN1, $VD5), o($VN1, $VK1), o($VN1, $Vn), o($VN1, $Vo), o($VN1, $Vp), o($VN1, $Vq), o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $VQ8,
    21: $VR8,
    22: 4194,
    87: 4193,
    214: 3561,
    215: $VS8
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $VT8,
    21: $VU8,
    22: 4196,
    87: 4195,
    214: 3587,
    215: $VV8
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $VW8,
    21: $VX8,
    22: 4198,
    87: 4197,
    214: 3614,
    215: $VY8
  }, o($VA3, $Vk5), {
    193: [1, 4201],
    194: 4199,
    195: [1, 4200]
  }, o($Vz3, $VP5), o($Vz3, $VQ5), o($Vz3, $VR5), o($Vz3, $Vn), o($Vz3, $Vo), o($Vz3, $VX3), o($Vz3, $VY3), o($Vz3, $VZ3), o($Vz3, $Vp), o($Vz3, $Vq), o($Vz3, $V_3), o($Vz3, $V$3, {
    202: 4202,
    203: 4203,
    111: [1, 4204]
  }), o($Vz3, $V04), o($Vz3, $V14), o($Vz3, $V24), o($Vz3, $V34), o($Vz3, $V44), o($Vz3, $V54), o($Vz3, $V64), o($Vz3, $V74), o($Vz3, $V84), o($Ve7, $V63), o($Ve7, $V73), o($Ve7, $V83), o($Ve7, $V93), {
    193: [1, 4207],
    194: 4205,
    195: [1, 4206]
  }, o($VA3, $VP5), o($VA3, $VQ5), o($VA3, $VR5), o($VA3, $Vn), o($VA3, $Vo), o($VA3, $VX3), o($VA3, $VY3), o($VA3, $VZ3), o($VA3, $Vp), o($VA3, $Vq), o($VA3, $V_3), o($VA3, $V$3, {
    202: 4208,
    203: 4209,
    111: [1, 4210]
  }), o($VA3, $V04), o($VA3, $V14), o($VA3, $V24), o($VA3, $V34), o($VA3, $V44), o($VA3, $V54), o($VA3, $V64), o($VA3, $V74), o($VA3, $V84), o($Vf7, $V63), o($Vf7, $V73), o($Vf7, $V83), o($Vf7, $V93), {
    19: [1, 4213],
    21: [1, 4216],
    22: 4212,
    87: 4211,
    214: 4214,
    215: [1, 4215]
  }, {
    193: [1, 4219],
    194: 4217,
    195: [1, 4218]
  }, o($VB3, $VP5), o($VB3, $VQ5), o($VB3, $VR5), o($VB3, $Vn), o($VB3, $Vo), o($VB3, $VX3), o($VB3, $VY3), o($VB3, $VZ3), o($VB3, $Vp), o($VB3, $Vq), o($VB3, $V_3), o($VB3, $V$3, {
    202: 4220,
    203: 4221,
    111: [1, 4222]
  }), o($VB3, $V04), o($VB3, $V14), o($VB3, $V24), o($VB3, $V34), o($VB3, $V44), o($VB3, $V54), o($VB3, $V64), o($VB3, $V74), o($VB3, $V84), o($Vg7, $V63), o($Vg7, $V73), o($Vg7, $V83), o($Vg7, $V93), o($VZ7, $V71), o($VZ7, $V81), o($VZ7, $V91), o($VC6, $Vi5), o($VC6, $Vj5), {
    19: $VZ8,
    21: $V_8,
    22: 4224,
    87: 4223,
    214: 3679,
    215: $V$8
  }, o($VM6, $VE8), o($VI, $VJ, {
    63: 4225,
    73: 4226,
    75: 4227,
    76: 4228,
    92: 4231,
    94: 4232,
    87: 4234,
    88: 4235,
    89: 4236,
    78: 4237,
    44: 4238,
    95: 4242,
    22: 4243,
    91: 4245,
    118: 4246,
    99: 4250,
    214: 4253,
    105: 4254,
    107: 4255,
    19: [1, 4252],
    21: [1, 4257],
    69: [1, 4229],
    71: [1, 4230],
    79: [1, 4247],
    80: [1, 4248],
    81: [1, 4249],
    85: [1, 4233],
    96: [1, 4239],
    97: [1, 4240],
    98: [1, 4241],
    101: $Vt9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 4244],
    215: [1, 4256]
  }), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4258,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM6, $VA2), o($VM6, $Vw), o($VM6, $Vx), o($VM6, $Vn), o($VM6, $Vo), o($VM6, $Vy), o($VM6, $Vp), o($VM6, $Vq), o($VM6, $Vs2, {
    99: 3718,
    95: 4259,
    101: $V09,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $Vt2), o($V58, $V13), o($VM6, $VG8), o($Vv7, $VP3), o($Vx7, $VQ3), o($Vx7, $VR3), o($Vx7, $VS3), {
    100: [1, 4260]
  }, o($Vx7, $VT1), {
    100: [1, 4262],
    106: 4261,
    108: [1, 4263],
    109: [1, 4264],
    110: 4265,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4266]
  }, o($Vx7, $VU3), {
    121: [1, 4267]
  }, {
    19: [1, 4270],
    21: [1, 4273],
    22: 4269,
    87: 4268,
    214: 4271,
    215: [1, 4272]
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4274,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM6, $VA2), o($VM6, $Vw), o($VM6, $Vx), o($VM6, $Vn), o($VM6, $Vo), o($VM6, $Vy), o($VM6, $Vp), o($VM6, $Vq), o($VM6, $Vs2, {
    99: 3760,
    95: 4275,
    101: $V19,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $Vt2), o($V58, $V13), o($VM6, $VG8), o($Vv7, $VP3), o($Vx7, $VQ3), o($Vx7, $VR3), o($Vx7, $VS3), {
    100: [1, 4276]
  }, o($Vx7, $VT1), {
    100: [1, 4278],
    106: 4277,
    108: [1, 4279],
    109: [1, 4280],
    110: 4281,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4282]
  }, o($Vx7, $VU3), {
    121: [1, 4283]
  }, {
    19: [1, 4286],
    21: [1, 4289],
    22: 4285,
    87: 4284,
    214: 4287,
    215: [1, 4288]
  }, o($Vx7, $VD5), o($Vx7, $VK1), o($Vx7, $Vn), o($Vx7, $Vo), o($Vx7, $Vp), o($Vx7, $Vq), o($V29, $VO4), {
    19: $Vi,
    21: $Vj,
    22: 4290,
    214: 45,
    215: $Vk
  }, {
    19: $Vu9,
    21: $Vv9,
    22: 4292,
    100: [1, 4303],
    108: [1, 4304],
    109: [1, 4305],
    110: 4302,
    181: 4293,
    191: 4291,
    196: 4296,
    197: 4297,
    198: 4298,
    201: 4301,
    204: [1, 4306],
    205: [1, 4307],
    206: [1, 4312],
    207: [1, 4313],
    208: [1, 4314],
    209: [1, 4315],
    210: [1, 4308],
    211: [1, 4309],
    212: [1, 4310],
    213: [1, 4311],
    214: 4295,
    215: $Vw9
  }, o($Vd8, $Vo7, {
    61: 4316,
    53: [1, 4317]
  }), o($Ve8, $Vp7), o($Ve8, $Vq7, {
    74: 4318,
    76: 4319,
    78: 4320,
    44: 4321,
    118: 4322,
    79: [1, 4323],
    80: [1, 4324],
    81: [1, 4325],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($Ve8, $Vr7), o($Ve8, $Vs7, {
    77: 4326,
    73: 4327,
    92: 4328,
    94: 4329,
    95: 4333,
    99: 4334,
    96: [1, 4330],
    97: [1, 4331],
    98: [1, 4332],
    101: $Vx9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 4336,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Ve8, $Vu7), o($VJ8, $Vy1, {
    93: 4337
  }), o($VK8, $Vz1, {
    99: 4056,
    95: 4338,
    101: $Vi9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VL8, $VB1, {
    86: 4339
  }), o($VL8, $VB1, {
    86: 4340
  }), o($VL8, $VB1, {
    86: 4341
  }), o($Ve8, $VC1, {
    105: 4060,
    107: 4061,
    91: 4342,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM8, $Vz7), o($VM8, $VA7), o($VJ8, $VG1), o($VJ8, $VH1), o($VJ8, $VI1), o($VJ8, $VJ1), o($VL8, $VK1), o($VL1, $VM1, {
    162: 4343
  }), o($VN8, $VO1), {
    119: [1, 4344],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM8, $VE1), o($VM8, $VF1), {
    19: [1, 4348],
    21: [1, 4352],
    22: 4346,
    33: 4345,
    200: 4347,
    214: 4349,
    215: [1, 4351],
    216: [1, 4350]
  }, {
    100: [1, 4353]
  }, o($VJ8, $VT1), o($VL8, $Vn), o($VL8, $Vo), {
    100: [1, 4355],
    106: 4354,
    108: [1, 4356],
    109: [1, 4357],
    110: 4358,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4359]
  }, o($VL8, $Vp), o($VL8, $Vq), o($Ve8, $Vp7), o($Ve8, $Vq7, {
    74: 4360,
    76: 4361,
    78: 4362,
    44: 4363,
    118: 4364,
    79: [1, 4365],
    80: [1, 4366],
    81: [1, 4367],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($Ve8, $Vr7), o($Ve8, $Vs7, {
    77: 4368,
    73: 4369,
    92: 4370,
    94: 4371,
    95: 4375,
    99: 4376,
    96: [1, 4372],
    97: [1, 4373],
    98: [1, 4374],
    101: $Vy9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 4378,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Ve8, $Vu7), o($VJ8, $Vy1, {
    93: 4379
  }), o($VK8, $Vz1, {
    99: 4089,
    95: 4380,
    101: $Vj9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VL8, $VB1, {
    86: 4381
  }), o($VL8, $VB1, {
    86: 4382
  }), o($VL8, $VB1, {
    86: 4383
  }), o($Ve8, $VC1, {
    105: 4093,
    107: 4094,
    91: 4384,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM8, $Vz7), o($VM8, $VA7), o($VJ8, $VG1), o($VJ8, $VH1), o($VJ8, $VI1), o($VJ8, $VJ1), o($VL8, $VK1), o($VL1, $VM1, {
    162: 4385
  }), o($VN8, $VO1), {
    119: [1, 4386],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM8, $VE1), o($VM8, $VF1), {
    19: [1, 4390],
    21: [1, 4394],
    22: 4388,
    33: 4387,
    200: 4389,
    214: 4391,
    215: [1, 4393],
    216: [1, 4392]
  }, {
    100: [1, 4395]
  }, o($VJ8, $VT1), o($VL8, $Vn), o($VL8, $Vo), {
    100: [1, 4397],
    106: 4396,
    108: [1, 4398],
    109: [1, 4399],
    110: 4400,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4401]
  }, o($VL8, $Vp), o($VL8, $Vq), {
    121: [1, 4402]
  }, o($V49, $VP3), o($VL8, $V13), o($VL8, $V23), o($VL8, $V33), o($VL8, $V43), o($VL8, $V53), {
    111: [1, 4403]
  }, o($VL8, $Va3), o($VM8, $Vk5), o($VN8, $VD5), o($VN8, $VK1), o($VN8, $Vn), o($VN8, $Vo), o($VN8, $Vp), o($VN8, $Vq), o($Vt1, $Vk5), {
    193: [1, 4406],
    194: 4404,
    195: [1, 4405]
  }, o($Vr1, $VP5), o($Vr1, $VQ5), o($Vr1, $VR5), o($Vr1, $Vn), o($Vr1, $Vo), o($Vr1, $VX3), o($Vr1, $VY3), o($Vr1, $VZ3), o($Vr1, $Vp), o($Vr1, $Vq), o($Vr1, $V_3), o($Vr1, $V$3, {
    202: 4407,
    203: 4408,
    111: [1, 4409]
  }), o($Vr1, $V04), o($Vr1, $V14), o($Vr1, $V24), o($Vr1, $V34), o($Vr1, $V44), o($Vr1, $V54), o($Vr1, $V64), o($Vr1, $V74), o($Vr1, $V84), o($VS5, $V63), o($VS5, $V73), o($VS5, $V83), o($VS5, $V93), {
    193: [1, 4412],
    194: 4410,
    195: [1, 4411]
  }, o($Vt1, $VP5), o($Vt1, $VQ5), o($Vt1, $VR5), o($Vt1, $Vn), o($Vt1, $Vo), o($Vt1, $VX3), o($Vt1, $VY3), o($Vt1, $VZ3), o($Vt1, $Vp), o($Vt1, $Vq), o($Vt1, $V_3), o($Vt1, $V$3, {
    202: 4413,
    203: 4414,
    111: [1, 4415]
  }), o($Vt1, $V04), o($Vt1, $V14), o($Vt1, $V24), o($Vt1, $V34), o($Vt1, $V44), o($Vt1, $V54), o($Vt1, $V64), o($Vt1, $V74), o($Vt1, $V84), o($VT5, $V63), o($VT5, $V73), o($VT5, $V83), o($VT5, $V93), {
    19: [1, 4418],
    21: [1, 4421],
    22: 4417,
    87: 4416,
    214: 4419,
    215: [1, 4420]
  }, {
    193: [1, 4424],
    194: 4422,
    195: [1, 4423]
  }, o($VD1, $VP5), o($VD1, $VQ5), o($VD1, $VR5), o($VD1, $Vn), o($VD1, $Vo), o($VD1, $VX3), o($VD1, $VY3), o($VD1, $VZ3), o($VD1, $Vp), o($VD1, $Vq), o($VD1, $V_3), o($VD1, $V$3, {
    202: 4425,
    203: 4426,
    111: [1, 4427]
  }), o($VD1, $V04), o($VD1, $V14), o($VD1, $V24), o($VD1, $V34), o($VD1, $V44), o($VD1, $V54), o($VD1, $V64), o($VD1, $V74), o($VD1, $V84), o($VU5, $V63), o($VU5, $V73), o($VU5, $V83), o($VU5, $V93), o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($VH4, $V71), o($VH4, $V81), o($VH4, $V91), o($Vz3, $Vi5), o($Vz3, $Vj5), {
    19: $V69,
    21: $V79,
    22: 4429,
    87: 4428,
    214: 3891,
    215: $V89
  }, o($VI4, $V71), o($VI4, $V81), o($VI4, $V91), o($VA3, $Vi5), o($VA3, $Vj5), {
    19: $V99,
    21: $Va9,
    22: 4431,
    87: 4430,
    214: 3917,
    215: $Vb9
  }, o($VD3, $VD5), o($VD3, $VK1), o($VD3, $Vn), o($VD3, $Vo), o($VD3, $Vp), o($VD3, $Vq), o($VK4, $V71), o($VK4, $V81), o($VK4, $V91), o($VB3, $Vi5), o($VB3, $Vj5), {
    19: $Vc9,
    21: $Vd9,
    22: 4433,
    87: 4432,
    214: 3944,
    215: $Ve9
  }, o($VC6, $VZ5), o($VC6, $VK1), o($VM6, $Vp7), o($VM6, $Vq7, {
    74: 4434,
    76: 4435,
    78: 4436,
    44: 4437,
    118: 4438,
    79: [1, 4439],
    80: [1, 4440],
    81: [1, 4441],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($VM6, $Vr7), o($VM6, $Vs7, {
    77: 4442,
    73: 4443,
    92: 4444,
    94: 4445,
    95: 4449,
    99: 4450,
    96: [1, 4446],
    97: [1, 4447],
    98: [1, 4448],
    101: $Vz9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 4452,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($VM6, $Vu7), o($Vv7, $Vy1, {
    93: 4453
  }), o($Vw7, $Vz1, {
    99: 4250,
    95: 4454,
    101: $Vt9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vx7, $VB1, {
    86: 4455
  }), o($Vx7, $VB1, {
    86: 4456
  }), o($Vx7, $VB1, {
    86: 4457
  }), o($VM6, $VC1, {
    105: 4254,
    107: 4255,
    91: 4458,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Vy7, $Vz7), o($Vy7, $VA7), o($Vv7, $VG1), o($Vv7, $VH1), o($Vv7, $VI1), o($Vv7, $VJ1), o($Vx7, $VK1), o($VL1, $VM1, {
    162: 4459
  }), o($VB7, $VO1), {
    119: [1, 4460],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Vy7, $VE1), o($Vy7, $VF1), {
    19: [1, 4464],
    21: [1, 4468],
    22: 4462,
    33: 4461,
    200: 4463,
    214: 4465,
    215: [1, 4467],
    216: [1, 4466]
  }, {
    100: [1, 4469]
  }, o($Vv7, $VT1), o($Vx7, $Vn), o($Vx7, $Vo), {
    100: [1, 4471],
    106: 4470,
    108: [1, 4472],
    109: [1, 4473],
    110: 4474,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4475]
  }, o($Vx7, $Vp), o($Vx7, $Vq), {
    121: [1, 4476]
  }, o($V58, $VP3), o($Vx7, $V13), o($Vx7, $V23), o($Vx7, $V33), o($Vx7, $V43), o($Vx7, $V53), {
    111: [1, 4477]
  }, o($Vx7, $Va3), o($Vy7, $Vk5), o($VB7, $VD5), o($VB7, $VK1), o($VB7, $Vn), o($VB7, $Vo), o($VB7, $Vp), o($VB7, $Vq), {
    121: [1, 4478]
  }, o($V58, $VP3), o($Vx7, $V13), o($Vx7, $V23), o($Vx7, $V33), o($Vx7, $V43), o($Vx7, $V53), {
    111: [1, 4479]
  }, o($Vx7, $Va3), o($Vy7, $Vk5), o($VB7, $VD5), o($VB7, $VK1), o($VB7, $Vn), o($VB7, $Vo), o($VB7, $Vp), o($VB7, $Vq), {
    193: [1, 4482],
    194: 4480,
    195: [1, 4481]
  }, o($V78, $VP5), o($V78, $VQ5), o($V78, $VR5), o($V78, $Vn), o($V78, $Vo), o($V78, $VX3), o($V78, $VY3), o($V78, $VZ3), o($V78, $Vp), o($V78, $Vq), o($V78, $V_3), o($V78, $V$3, {
    202: 4483,
    203: 4484,
    111: [1, 4485]
  }), o($V78, $V04), o($V78, $V14), o($V78, $V24), o($V78, $V34), o($V78, $V44), o($V78, $V54), o($V78, $V64), o($V78, $V74), o($V78, $V84), o($VA9, $V63), o($VA9, $V73), o($VA9, $V83), o($VA9, $V93), o($Ve8, $V08), o($Vr, $Vs, {
    59: 4486,
    40: 4487,
    43: $Vt
  }), o($Ve8, $V18), o($Ve8, $V28), o($Ve8, $Vz7), o($Ve8, $VA7), {
    119: [1, 4488],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Ve8, $VE1), o($Ve8, $VF1), {
    19: [1, 4492],
    21: [1, 4496],
    22: 4490,
    33: 4489,
    200: 4491,
    214: 4493,
    215: [1, 4495],
    216: [1, 4494]
  }, o($Ve8, $V38), o($Ve8, $V48), o($V49, $Vy1, {
    93: 4497
  }), o($Ve8, $Vz1, {
    99: 4334,
    95: 4498,
    101: $Vx9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $VG1), o($V49, $VH1), o($V49, $VI1), o($V49, $VJ1), {
    100: [1, 4499]
  }, o($V49, $VT1), {
    70: [1, 4500]
  }, o($VK8, $Vs2, {
    99: 4056,
    95: 4501,
    101: $Vi9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VJ8, $Vt2), o($Ve8, $Vu2, {
    90: 4502,
    95: 4503,
    91: 4504,
    99: 4505,
    105: 4507,
    107: 4508,
    101: $VB9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vw2, {
    90: 4502,
    95: 4503,
    91: 4504,
    99: 4505,
    105: 4507,
    107: 4508,
    101: $VB9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vx2, {
    90: 4502,
    95: 4503,
    91: 4504,
    99: 4505,
    105: 4507,
    107: 4508,
    101: $VB9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN8, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 4509],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4510,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM8, $VA2), o($VM8, $Vw), o($VM8, $Vx), o($VM8, $Vn), o($VM8, $Vo), o($VM8, $Vy), o($VM8, $Vp), o($VM8, $Vq), o($VJ8, $V13), o($VN8, $V23), o($VN8, $V33), o($VN8, $V43), o($VN8, $V53), {
    111: [1, 4511]
  }, o($VN8, $Va3), o($Ve8, $V18), o($Ve8, $V28), o($Ve8, $Vz7), o($Ve8, $VA7), {
    119: [1, 4512],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Ve8, $VE1), o($Ve8, $VF1), {
    19: [1, 4516],
    21: [1, 4520],
    22: 4514,
    33: 4513,
    200: 4515,
    214: 4517,
    215: [1, 4519],
    216: [1, 4518]
  }, o($Ve8, $V38), o($Ve8, $V48), o($V49, $Vy1, {
    93: 4521
  }), o($Ve8, $Vz1, {
    99: 4376,
    95: 4522,
    101: $Vy9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $VG1), o($V49, $VH1), o($V49, $VI1), o($V49, $VJ1), {
    100: [1, 4523]
  }, o($V49, $VT1), {
    70: [1, 4524]
  }, o($VK8, $Vs2, {
    99: 4089,
    95: 4525,
    101: $Vj9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VJ8, $Vt2), o($Ve8, $Vu2, {
    90: 4526,
    95: 4527,
    91: 4528,
    99: 4529,
    105: 4531,
    107: 4532,
    101: $VC9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vw2, {
    90: 4526,
    95: 4527,
    91: 4528,
    99: 4529,
    105: 4531,
    107: 4532,
    101: $VC9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vx2, {
    90: 4526,
    95: 4527,
    91: 4528,
    99: 4529,
    105: 4531,
    107: 4532,
    101: $VC9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN8, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 4533],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4534,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM8, $VA2), o($VM8, $Vw), o($VM8, $Vx), o($VM8, $Vn), o($VM8, $Vo), o($VM8, $Vy), o($VM8, $Vp), o($VM8, $Vq), o($VJ8, $V13), o($VN8, $V23), o($VN8, $V33), o($VN8, $V43), o($VN8, $V53), {
    111: [1, 4535]
  }, o($VN8, $Va3), o($Ve8, $Vk5), {
    19: [1, 4538],
    21: [1, 4541],
    22: 4537,
    87: 4536,
    214: 4539,
    215: [1, 4540]
  }, o($Vo2, $V71), o($Vo2, $V81), o($Vo2, $V91), o($Vr1, $Vi5), o($Vr1, $Vj5), {
    19: $Vk9,
    21: $Vl9,
    22: 4543,
    87: 4542,
    214: 4119,
    215: $Vm9
  }, o($Vq2, $V71), o($Vq2, $V81), o($Vq2, $V91), o($Vt1, $Vi5), o($Vt1, $Vj5), {
    19: $Vn9,
    21: $Vo9,
    22: 4545,
    87: 4544,
    214: 4145,
    215: $Vp9
  }, o($VA1, $VD5), o($VA1, $VK1), o($VA1, $Vn), o($VA1, $Vo), o($VA1, $Vp), o($VA1, $Vq), o($Vz2, $V71), o($Vz2, $V81), o($Vz2, $V91), o($VD1, $Vi5), o($VD1, $Vj5), {
    19: $Vq9,
    21: $Vr9,
    22: 4547,
    87: 4546,
    214: 4172,
    215: $Vs9
  }, o($Vz3, $VZ5), o($Vz3, $VK1), o($VA3, $VZ5), o($VA3, $VK1), o($VB3, $VZ5), o($VB3, $VK1), o($VM6, $V18), o($VM6, $V28), o($VM6, $Vz7), o($VM6, $VA7), {
    119: [1, 4548],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM6, $VE1), o($VM6, $VF1), {
    19: [1, 4552],
    21: [1, 4556],
    22: 4550,
    33: 4549,
    200: 4551,
    214: 4553,
    215: [1, 4555],
    216: [1, 4554]
  }, o($VM6, $V38), o($VM6, $V48), o($V58, $Vy1, {
    93: 4557
  }), o($VM6, $Vz1, {
    99: 4450,
    95: 4558,
    101: $Vz9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $VG1), o($V58, $VH1), o($V58, $VI1), o($V58, $VJ1), {
    100: [1, 4559]
  }, o($V58, $VT1), {
    70: [1, 4560]
  }, o($Vw7, $Vs2, {
    99: 4250,
    95: 4561,
    101: $Vt9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($Vv7, $Vt2), o($VM6, $Vu2, {
    90: 4562,
    95: 4563,
    91: 4564,
    99: 4565,
    105: 4567,
    107: 4568,
    101: $VD9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vw2, {
    90: 4562,
    95: 4563,
    91: 4564,
    99: 4565,
    105: 4567,
    107: 4568,
    101: $VD9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM6, $Vx2, {
    90: 4562,
    95: 4563,
    91: 4564,
    99: 4565,
    105: 4567,
    107: 4568,
    101: $VD9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VB7, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 4569],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4570,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Vy7, $VA2), o($Vy7, $Vw), o($Vy7, $Vx), o($Vy7, $Vn), o($Vy7, $Vo), o($Vy7, $Vy), o($Vy7, $Vp), o($Vy7, $Vq), o($Vv7, $V13), o($VB7, $V23), o($VB7, $V33), o($VB7, $V43), o($VB7, $V53), {
    111: [1, 4571]
  }, o($VB7, $Va3), o($VM6, $Vk5), {
    19: [1, 4574],
    21: [1, 4577],
    22: 4573,
    87: 4572,
    214: 4575,
    215: [1, 4576]
  }, o($VM6, $Vk5), {
    19: [1, 4580],
    21: [1, 4583],
    22: 4579,
    87: 4578,
    214: 4581,
    215: [1, 4582]
  }, o($V29, $V71), o($V29, $V81), o($V29, $V91), o($V78, $Vi5), o($V78, $Vj5), {
    19: $Vu9,
    21: $Vv9,
    22: 4585,
    87: 4584,
    214: 4295,
    215: $Vw9
  }, o($Ve8, $VE8), o($VI, $VJ, {
    63: 4586,
    73: 4587,
    75: 4588,
    76: 4589,
    92: 4592,
    94: 4593,
    87: 4595,
    88: 4596,
    89: 4597,
    78: 4598,
    44: 4599,
    95: 4603,
    22: 4604,
    91: 4606,
    118: 4607,
    99: 4611,
    214: 4614,
    105: 4615,
    107: 4616,
    19: [1, 4613],
    21: [1, 4618],
    69: [1, 4590],
    71: [1, 4591],
    79: [1, 4608],
    80: [1, 4609],
    81: [1, 4610],
    85: [1, 4594],
    96: [1, 4600],
    97: [1, 4601],
    98: [1, 4602],
    101: $VE9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ,
    161: [1, 4605],
    215: [1, 4617]
  }), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4619,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Ve8, $VA2), o($Ve8, $Vw), o($Ve8, $Vx), o($Ve8, $Vn), o($Ve8, $Vo), o($Ve8, $Vy), o($Ve8, $Vp), o($Ve8, $Vq), o($Ve8, $Vs2, {
    99: 4334,
    95: 4620,
    101: $Vx9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $Vt2), o($V49, $V13), o($Ve8, $VG8), o($VJ8, $VP3), o($VL8, $VQ3), o($VL8, $VR3), o($VL8, $VS3), {
    100: [1, 4621]
  }, o($VL8, $VT1), {
    100: [1, 4623],
    106: 4622,
    108: [1, 4624],
    109: [1, 4625],
    110: 4626,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4627]
  }, o($VL8, $VU3), {
    121: [1, 4628]
  }, {
    19: [1, 4631],
    21: [1, 4634],
    22: 4630,
    87: 4629,
    214: 4632,
    215: [1, 4633]
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4635,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Ve8, $VA2), o($Ve8, $Vw), o($Ve8, $Vx), o($Ve8, $Vn), o($Ve8, $Vo), o($Ve8, $Vy), o($Ve8, $Vp), o($Ve8, $Vq), o($Ve8, $Vs2, {
    99: 4376,
    95: 4636,
    101: $Vy9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $Vt2), o($V49, $V13), o($Ve8, $VG8), o($VJ8, $VP3), o($VL8, $VQ3), o($VL8, $VR3), o($VL8, $VS3), {
    100: [1, 4637]
  }, o($VL8, $VT1), {
    100: [1, 4639],
    106: 4638,
    108: [1, 4640],
    109: [1, 4641],
    110: 4642,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4643]
  }, o($VL8, $VU3), {
    121: [1, 4644]
  }, {
    19: [1, 4647],
    21: [1, 4650],
    22: 4646,
    87: 4645,
    214: 4648,
    215: [1, 4649]
  }, o($VL8, $VD5), o($VL8, $VK1), o($VL8, $Vn), o($VL8, $Vo), o($VL8, $Vp), o($VL8, $Vq), o($Vr1, $VZ5), o($Vr1, $VK1), o($Vt1, $VZ5), o($Vt1, $VK1), o($VD1, $VZ5), o($VD1, $VK1), o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4651,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM6, $VA2), o($VM6, $Vw), o($VM6, $Vx), o($VM6, $Vn), o($VM6, $Vo), o($VM6, $Vy), o($VM6, $Vp), o($VM6, $Vq), o($VM6, $Vs2, {
    99: 4450,
    95: 4652,
    101: $Vz9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V58, $Vt2), o($V58, $V13), o($VM6, $VG8), o($Vv7, $VP3), o($Vx7, $VQ3), o($Vx7, $VR3), o($Vx7, $VS3), {
    100: [1, 4653]
  }, o($Vx7, $VT1), {
    100: [1, 4655],
    106: 4654,
    108: [1, 4656],
    109: [1, 4657],
    110: 4658,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4659]
  }, o($Vx7, $VU3), {
    121: [1, 4660]
  }, {
    19: [1, 4663],
    21: [1, 4666],
    22: 4662,
    87: 4661,
    214: 4664,
    215: [1, 4665]
  }, o($Vx7, $VD5), o($Vx7, $VK1), o($Vx7, $Vn), o($Vx7, $Vo), o($Vx7, $Vp), o($Vx7, $Vq), o($Vx7, $VD5), o($Vx7, $VK1), o($Vx7, $Vn), o($Vx7, $Vo), o($Vx7, $Vp), o($Vx7, $Vq), o($V78, $VZ5), o($V78, $VK1), o($Ve8, $Vp7), o($Ve8, $Vq7, {
    74: 4667,
    76: 4668,
    78: 4669,
    44: 4670,
    118: 4671,
    79: [1, 4672],
    80: [1, 4673],
    81: [1, 4674],
    119: $VJ,
    125: $VJ,
    127: $VJ,
    189: $VJ,
    218: $VJ
  }), o($Ve8, $Vr7), o($Ve8, $Vs7, {
    77: 4675,
    73: 4676,
    92: 4677,
    94: 4678,
    95: 4682,
    99: 4683,
    96: [1, 4679],
    97: [1, 4680],
    98: [1, 4681],
    101: $VF9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V11, $Vs, {
    40: 169,
    44: 171,
    38: 4685,
    43: $Vp1,
    79: $V21,
    80: $V31,
    81: $V41
  }), o($Ve8, $Vu7), o($VJ8, $Vy1, {
    93: 4686
  }), o($VK8, $Vz1, {
    99: 4611,
    95: 4687,
    101: $VE9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VL8, $VB1, {
    86: 4688
  }), o($VL8, $VB1, {
    86: 4689
  }), o($VL8, $VB1, {
    86: 4690
  }), o($Ve8, $VC1, {
    105: 4615,
    107: 4616,
    91: 4691,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VM8, $Vz7), o($VM8, $VA7), o($VJ8, $VG1), o($VJ8, $VH1), o($VJ8, $VI1), o($VJ8, $VJ1), o($VL8, $VK1), o($VL1, $VM1, {
    162: 4692
  }), o($VN8, $VO1), {
    119: [1, 4693],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($VM8, $VE1), o($VM8, $VF1), {
    19: [1, 4697],
    21: [1, 4701],
    22: 4695,
    33: 4694,
    200: 4696,
    214: 4698,
    215: [1, 4700],
    216: [1, 4699]
  }, {
    100: [1, 4702]
  }, o($VJ8, $VT1), o($VL8, $Vn), o($VL8, $Vo), {
    100: [1, 4704],
    106: 4703,
    108: [1, 4705],
    109: [1, 4706],
    110: 4707,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4708]
  }, o($VL8, $Vp), o($VL8, $Vq), {
    121: [1, 4709]
  }, o($V49, $VP3), o($VL8, $V13), o($VL8, $V23), o($VL8, $V33), o($VL8, $V43), o($VL8, $V53), {
    111: [1, 4710]
  }, o($VL8, $Va3), o($VM8, $Vk5), o($VN8, $VD5), o($VN8, $VK1), o($VN8, $Vn), o($VN8, $Vo), o($VN8, $Vp), o($VN8, $Vq), {
    121: [1, 4711]
  }, o($V49, $VP3), o($VL8, $V13), o($VL8, $V23), o($VL8, $V33), o($VL8, $V43), o($VL8, $V53), {
    111: [1, 4712]
  }, o($VL8, $Va3), o($VM8, $Vk5), o($VN8, $VD5), o($VN8, $VK1), o($VN8, $Vn), o($VN8, $Vo), o($VN8, $Vp), o($VN8, $Vq), {
    121: [1, 4713]
  }, o($V58, $VP3), o($Vx7, $V13), o($Vx7, $V23), o($Vx7, $V33), o($Vx7, $V43), o($Vx7, $V53), {
    111: [1, 4714]
  }, o($Vx7, $Va3), o($Vy7, $Vk5), o($VB7, $VD5), o($VB7, $VK1), o($VB7, $Vn), o($VB7, $Vo), o($VB7, $Vp), o($VB7, $Vq), o($Ve8, $V18), o($Ve8, $V28), o($Ve8, $Vz7), o($Ve8, $VA7), {
    119: [1, 4715],
    122: 191,
    123: 192,
    124: 193,
    125: $VP1,
    127: $VQ1,
    189: $VR1,
    217: 195,
    218: $VS1
  }, o($Ve8, $VE1), o($Ve8, $VF1), {
    19: [1, 4719],
    21: [1, 4723],
    22: 4717,
    33: 4716,
    200: 4718,
    214: 4720,
    215: [1, 4722],
    216: [1, 4721]
  }, o($Ve8, $V38), o($Ve8, $V48), o($V49, $Vy1, {
    93: 4724
  }), o($Ve8, $Vz1, {
    99: 4683,
    95: 4725,
    101: $VF9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $VG1), o($V49, $VH1), o($V49, $VI1), o($V49, $VJ1), {
    100: [1, 4726]
  }, o($V49, $VT1), {
    70: [1, 4727]
  }, o($VK8, $Vs2, {
    99: 4611,
    95: 4728,
    101: $VE9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($VJ8, $Vt2), o($Ve8, $Vu2, {
    90: 4729,
    95: 4730,
    91: 4731,
    99: 4732,
    105: 4734,
    107: 4735,
    101: $VG9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vw2, {
    90: 4729,
    95: 4730,
    91: 4731,
    99: 4732,
    105: 4734,
    107: 4735,
    101: $VG9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($Ve8, $Vx2, {
    90: 4729,
    95: 4730,
    91: 4731,
    99: 4732,
    105: 4734,
    107: 4735,
    101: $VG9,
    102: $VR,
    103: $VS,
    104: $VT,
    112: $VU,
    113: $VV,
    114: $VW,
    115: $VX,
    116: $VY,
    117: $VZ
  }), o($VN8, $Vy2), {
    19: $VB2,
    21: $VC2,
    22: 370,
    71: $VD2,
    81: $VE2,
    100: $VF2,
    108: $VG2,
    109: $VH2,
    110: 382,
    163: [1, 4736],
    164: 365,
    165: 366,
    166: 367,
    167: 368,
    181: 371,
    185: $VI2,
    196: 376,
    197: 377,
    198: 378,
    201: 381,
    204: $VJ2,
    205: $VK2,
    206: $VL2,
    207: $VM2,
    208: $VN2,
    209: $VO2,
    210: $VP2,
    211: $VQ2,
    212: $VR2,
    213: $VS2,
    214: 375,
    215: $VT2
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4737,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($VM8, $VA2), o($VM8, $Vw), o($VM8, $Vx), o($VM8, $Vn), o($VM8, $Vo), o($VM8, $Vy), o($VM8, $Vp), o($VM8, $Vq), o($VJ8, $V13), o($VN8, $V23), o($VN8, $V33), o($VN8, $V43), o($VN8, $V53), {
    111: [1, 4738]
  }, o($VN8, $Va3), o($Ve8, $Vk5), {
    19: [1, 4741],
    21: [1, 4744],
    22: 4740,
    87: 4739,
    214: 4742,
    215: [1, 4743]
  }, o($Ve8, $Vk5), {
    19: [1, 4747],
    21: [1, 4750],
    22: 4746,
    87: 4745,
    214: 4748,
    215: [1, 4749]
  }, o($VM6, $Vk5), {
    19: [1, 4753],
    21: [1, 4756],
    22: 4752,
    87: 4751,
    214: 4754,
    215: [1, 4755]
  }, o($VU2, $VV2, {
    126: 397,
    130: 398,
    131: 399,
    132: 400,
    136: 401,
    137: 402,
    138: 403,
    144: 404,
    146: 405,
    147: 406,
    120: 4757,
    121: $VW2,
    148: $VX2,
    189: $VY2
  }), o($Ve8, $VA2), o($Ve8, $Vw), o($Ve8, $Vx), o($Ve8, $Vn), o($Ve8, $Vo), o($Ve8, $Vy), o($Ve8, $Vp), o($Ve8, $Vq), o($Ve8, $Vs2, {
    99: 4683,
    95: 4758,
    101: $VF9,
    102: $VR,
    103: $VS,
    104: $VT
  }), o($V49, $Vt2), o($V49, $V13), o($Ve8, $VG8), o($VJ8, $VP3), o($VL8, $VQ3), o($VL8, $VR3), o($VL8, $VS3), {
    100: [1, 4759]
  }, o($VL8, $VT1), {
    100: [1, 4761],
    106: 4760,
    108: [1, 4762],
    109: [1, 4763],
    110: 4764,
    206: $VU1,
    207: $VV1,
    208: $VW1,
    209: $VX1
  }, {
    100: [1, 4765]
  }, o($VL8, $VU3), {
    121: [1, 4766]
  }, {
    19: [1, 4769],
    21: [1, 4772],
    22: 4768,
    87: 4767,
    214: 4770,
    215: [1, 4771]
  }, o($VL8, $VD5), o($VL8, $VK1), o($VL8, $Vn), o($VL8, $Vo), o($VL8, $Vp), o($VL8, $Vq), o($VL8, $VD5), o($VL8, $VK1), o($VL8, $Vn), o($VL8, $Vo), o($VL8, $Vp), o($VL8, $Vq), o($Vx7, $VD5), o($Vx7, $VK1), o($Vx7, $Vn), o($Vx7, $Vo), o($Vx7, $Vp), o($Vx7, $Vq), {
    121: [1, 4773]
  }, o($V49, $VP3), o($VL8, $V13), o($VL8, $V23), o($VL8, $V33), o($VL8, $V43), o($VL8, $V53), {
    111: [1, 4774]
  }, o($VL8, $Va3), o($VM8, $Vk5), o($VN8, $VD5), o($VN8, $VK1), o($VN8, $Vn), o($VN8, $Vo), o($VN8, $Vp), o($VN8, $Vq), o($Ve8, $Vk5), {
    19: [1, 4777],
    21: [1, 4780],
    22: 4776,
    87: 4775,
    214: 4778,
    215: [1, 4779]
  }, o($VL8, $VD5), o($VL8, $VK1), o($VL8, $Vn), o($VL8, $Vo), o($VL8, $Vp), o($VL8, $Vq)];
  this.defaultActions = {
    6: [2, 11],
    24: [2, 1],
    115: [2, 119],
    116: [2, 120],
    117: [2, 121],
    124: [2, 132],
    125: [2, 133],
    205: [2, 252],
    206: [2, 253],
    207: [2, 254],
    208: [2, 255],
    337: [2, 35],
    397: [2, 142],
    398: [2, 146],
    400: [2, 148],
    585: [2, 33],
    586: [2, 37],
    623: [2, 34],
    1120: [2, 146],
    1122: [2, 148]
  };

  this.performAction = function anonymous(yytext, yyleng, yylineno, yy, yystate
  /* action[1] */
  , $$
  /* vstack */
  , _$
  /* lstack */
  ) {
    /* this == yyval */
    var $0 = $$.length - 1;

    switch (yystate) {
      case 1:
        var imports = Object.keys(ShExJisonParser._imports).length ? {
          imports: ShExJisonParser._imports
        } : {};
        var startObj = ShExJisonParser.start ? {
          start: ShExJisonParser.start
        } : {};
        var startActs = ShExJisonParser.startActs ? {
          startActs: ShExJisonParser.startActs
        } : {};
        var shapes = ShExJisonParser.shapes ? {
          shapes: Object.values(ShExJisonParser.shapes)
        } : {};
        var shexj = Object.assign({
          type: "Schema"
        }, imports, startActs, startObj, shapes);

        if (ShExJisonParser.options.index) {
          if (ShExJisonParser._base !== null) shexj._base = ShExJisonParser._base;
          shexj._prefixes = ShExJisonParser._prefixes;
          shexj._index = {
            shapeExprs: ShExJisonParser.shapes || {},
            tripleExprs: ShExJisonParser.productions || {}
          };
          shexj._sourceMap = ShExJisonParser._sourceMap;
        }

        return shexj;
        break;

      case 2:
        yy.parser.yy = {
          lexer: yy.lexer
        };
        break;

      case 15:
        // t: @@
        ShExJisonParser._setBase(ShExJisonParser._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));

        break;

      case 16:
        // t: ShExParser-test.js/with pre-defined prefixes
        ShExJisonParser._prefixes[$$[$0 - 1].slice(0, -1)] = $$[$0];
        break;

      case 17:
        // t: @@
        ShExJisonParser._imports.push($$[$0]);

        break;

      case 20:
        if (ShExJisonParser.start) error(new Error("Parse error: start already defined"), yy);
        ShExJisonParser.start = shapeJunction("ShapeOr", $$[$0 - 1], $$[$0]); // t: startInline

        break;

      case 21:
        ShExJisonParser.startActs = $$[$0]; // t: startCode1

        break;

      case 22:
        this.$ = [$$[$0]]; // t: startCode1;

        break;

      case 23:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: startCode3;

        break;

      case 26:
        // t: 1dot 1val1vsMinusiri3??
        if ($$[$0 - 3]["abstract"] || $$[$0 - 1].length) {
          // t: $$[$0-3]: 1dotAbstractShapeCode1  $$[$0-2]: @@
          addShape($$[$0 - 2], Object.assign({
            type: "ShapeDecl"
          }, $$[$0 - 3], $$[$0 - 1].length > 0 ? {
            restricts: $$[$0 - 1]
          } : {}, {
            shapeExpr: $$[$0]
          }), yy); // $$[$01]: t: @@
        } else {
          addShape($$[$0 - 2], $$[$0], yy);
        }

        break;

      case 27:
        this.$ = {};
        break;

      case 28:
        this.$ = {
          "abstract": true
        };
        break;

      case 29:
      case 95:
        this.$ = []; // t: 1dot, 1dotAnnot3;

        break;

      case 30:
      case 96:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1dotAnnot3;

        break;

      case 31:
        this.$ = nonest($$[$0]);
        break;

      case 32:
        this.$ = {
          type: "ShapeExternal"
        };
        break;

      case 33:
        if ($$[$0 - 2]) $$[$0 - 1] = {
          type: "ShapeNot",
          "shapeExpr": nonest($$[$0 - 1])
        }; // t:@@

        if ($$[$0]) {
          // If there were disjuncts,
          //           shapeOr will have $$[$0].set needsAtom.
          //           Prepend $$[$0].needsAtom with $$[$0-1].
          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
          $$[$0].needsAtom.unshift(nonest($$[$0 - 1]));
          delete $$[$0].needsAtom;
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0 - 1];
        }

        break;

      case 34:
        $$[$0 - 1] = {
          type: "ShapeNot",
          "shapeExpr": nonest($$[$0 - 1])
        }; // !!! opt

        if ($$[$0]) {
          // If there were disjuncts,
          //           shapeOr will have $$[$0].set needsAtom.
          //           Prepend $$[$0].needsAtom with $$[$0-1].
          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
          $$[$0].needsAtom.unshift(nonest($$[$0 - 1]));
          delete $$[$0].needsAtom;
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0 - 1];
        }

        break;

      case 35:
        $$[$0].needsAtom.unshift(nonest($$[$0 - 1]));
        delete $$[$0].needsAtom;
        this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };

        break;

      case 36:
      case 231:
      case 248:
        this.$ = null;
        break;

      case 37:
      case 41:
      case 44:
      case 50:
      case 57:
      case 188:
      case 247:
        this.$ = $$[$0];
        break;

      case 39:
        // returns a ShapeOr
        var disjuncts = $$[$0].map(nonest);
        this.$ = {
          type: "ShapeOr",
          shapeExprs: disjuncts,
          needsAtom: disjuncts
        }; // t: @@

        break;

      case 40:
        // returns a ShapeAnd
        // $$[$0-1] could have implicit conjuncts and explicit nested ANDs (will have .nested: true)
        $$[$0 - 1].filter(function (c) {
          return c.type === "ShapeAnd";
        }).length === $$[$0 - 1].length;
        var and = {
          type: "ShapeAnd",
          shapeExprs: $$[$0 - 1].reduce(function (acc, elt) {
            return acc.concat(elt.type === 'ShapeAnd' && !elt.nested ? elt.shapeExprs : nonest(elt));
          }, [])
        };
        this.$ = $$[$0].length > 0 ? {
          type: "ShapeOr",
          shapeExprs: [and].concat($$[$0].map(nonest))
        } : and; // t: @@

        this.$.needsAtom = and.shapeExprs;
        break;

      case 42:
      case 45:
        this.$ = [$$[$0]];
        break;

      case 43:
      case 46:
      case 48:
      case 52:
      case 55:
      case 59:
        this.$ = $$[$0 - 1].concat($$[$0]);
        break;

      case 47:
      case 51:
      case 54:
      case 58:
        this.$ = [];
        break;

      case 49:
        this.$ = shapeJunction("ShapeOr", $$[$0 - 1], $$[$0]);
        break;

      case 53:
      case 56:
        this.$ = shapeJunction("ShapeAnd", $$[$0 - 1], $$[$0]); // t: @@;

        break;

      case 60:
        this.$ = $$[$0 - 1] ? {
          type: "ShapeNot",
          "shapeExpr": nonest($$[$0])
        }
        /* t:@@ */
        : $$[$0];
        break;

      case 61:
        this.$ = false;
        break;

      case 62:
        this.$ = true;
        break;

      case 63:
        this.$ = $$[$0 - 1] ? {
          type: "ShapeNot",
          "shapeExpr": nonest($$[$0])
        }
        /* t: 1NOTNOTdot, 1NOTNOTIRI, 1NOTNOTvs */
        : $$[$0];
        break;

      case 64:
      case 73:
      case 78:
        this.$ = $$[$0] ? {
          type: "ShapeAnd",
          shapeExprs: [extend({
            type: "NodeConstraint"
          }, $$[$0 - 1]), $$[$0]]
        } : $$[$0 - 1];
        break;

      case 66:
        this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0 - 1], [$$[$0]])
        /* t: 1dotRef1 */
        : $$[$0 - 1]; // t:@@;

        break;

      case 67:
      case 76:
      case 81:
        this.$ = Object.assign($$[$0 - 1], {
          nested: true
        }); // t: 1val1vsMinusiri3;

        break;

      case 68:
      case 77:
      case 82:
        this.$ = EmptyShape; // t: 1dot;

        break;

      case 75:
        this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0 - 1], [$$[$0]])
        /* t:@@ */
        : $$[$0 - 1]; // t: 1dotRef1 -- use _QnonLitNodeConstraint_E_Opt like below?;

        break;

      case 80:
        this.$ = $$[$0] ? {
          type: "ShapeAnd",
          shapeExprs: [extend({
            type: "NodeConstraint"
          }, $$[$0 - 1]), $$[$0]]
        } : $$[$0 - 1]; // t: !! look to 1dotRef1;

        break;

      case 91:
        // t: 1dotRefLNex@@
        $$[$0] = $$[$0].substr(1, $$[$0].length - 1);
        var namePos = $$[$0].indexOf(':');
        this.$ = addSourceMap(expandPrefix($$[$0].substr(0, namePos), yy) + $$[$0].substr(namePos + 1), yy); // ShapeRef

        break;

      case 92:
        // t: 1dotRefNS1@@
        $$[$0] = $$[$0].substr(1, $$[$0].length - 1);
        this.$ = addSourceMap(expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy), yy); // ShapeRef

        break;

      case 93:
        this.$ = addSourceMap($$[$0], yy); // ShapeRef // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;

        break;

      case 94:
      case 97:
        // t: !!
        this.$ = $$[$0 - 2];

        if ($$[$0 - 1].length) {
          this.$.annotations = $$[$0 - 1];
        } // t: !!


        if ($$[$0]) {
          this.$.semActs = $$[$0].semActs;
        } // t: !!


        break;

      case 98:
        this.$ = extend({
          type: "NodeConstraint",
          nodeKind: "literal"
        }, $$[$0]); // t: 1literalPattern;

        break;

      case 99:
        if (numericDatatypes.indexOf($$[$0 - 1]) === -1) numericFacets.forEach(function (facet) {
          if (facet in $$[$0]) error(new Error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0 - 1]), yy);
        });
        this.$ = extend({
          type: "NodeConstraint",
          datatype: $$[$0 - 1]
        }, $$[$0]); // t: 1datatype

        break;

      case 100:
        this.$ = {
          type: "NodeConstraint",
          values: $$[$0 - 1]
        }; // t: 1val1IRIREF;

        break;

      case 101:
        this.$ = extend({
          type: "NodeConstraint"
        }, $$[$0]);
        break;

      case 102:
        this.$ = {}; // t: 1literalPattern;

        break;

      case 103:
        if (Object.keys($$[$0 - 1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error(new Error("Parse error: facet " + Object.keys($$[$0])[0] + " defined multiple times"), yy);
        }

        this.$ = extend($$[$0 - 1], $$[$0]); // t: 1literalLength

        break;

      case 105:
      case 111:
        if (Object.keys($$[$0 - 1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error(new Error("Parse error: facet " + Object.keys($$[$0])[0] + " defined multiple times"), yy);
        }

        this.$ = extend($$[$0 - 1], $$[$0]); // t: !! look to 1literalLength

        break;

      case 106:
        this.$ = extend({
          type: "NodeConstraint"
        }, $$[$0 - 1], $$[$0] ? $$[$0] : {}); // t: 1iriPattern;

        break;

      case 107:
        this.$ = extend({
          type: "NodeConstraint"
        }, $$[$0]); // t: @@;

        break;

      case 108:
        this.$ = {};
        break;

      case 109:
        if (Object.keys($$[$0 - 1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error(new Error("Parse error: facet " + Object.keys($$[$0])[0] + " defined multiple times"), yy);
        }

        this.$ = extend($$[$0 - 1], $$[$0]);
        break;

      case 112:
        this.$ = {
          nodeKind: "iri"
        }; // t: 1iriPattern;

        break;

      case 113:
        this.$ = {
          nodeKind: "bnode"
        }; // t: 1bnodeLength;

        break;

      case 114:
        this.$ = {
          nodeKind: "nonliteral"
        }; // t: 1nonliteralLength;

        break;

      case 117:
        this.$ = keyValObject($$[$0 - 1], parseInt($$[$0], 10)); // t: 1literalLength;

        break;

      case 118:
        this.$ = unescapeRegexp($$[$0]); // t: 1literalPattern;

        break;

      case 119:
        this.$ = "length"; // t: 1literalLength;

        break;

      case 120:
        this.$ = "minlength"; // t: 1literalMinlength;

        break;

      case 121:
        this.$ = "maxlength"; // t: 1literalMaxlength;

        break;

      case 122:
        this.$ = keyValObject($$[$0 - 1], $$[$0]); // t: 1literalMininclusive;

        break;

      case 123:
        this.$ = keyValObject($$[$0 - 1], parseInt($$[$0], 10)); // t: 1literalTotaldigits;

        break;

      case 124:
        this.$ = parseInt($$[$0], 10);
        break;

      case 125:
      case 126:
        this.$ = parseFloat($$[$0]);
        break;

      case 127:
        // ## deprecated
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE) this.$ = parseFloat($$[$0 - 2].value);else if (numericDatatypes.indexOf($$[$0]) !== -1) this.$ = parseInt($$[$0 - 2].value);else error(new Error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]), yy);
        break;

      case 128:
        this.$ = "mininclusive"; // t: 1literalMininclusive;

        break;

      case 129:
        this.$ = "minexclusive"; // t: 1literalMinexclusive;

        break;

      case 130:
        this.$ = "maxinclusive"; // t: 1literalMaxinclusive;

        break;

      case 131:
        this.$ = "maxexclusive"; // t: 1literalMaxexclusive;

        break;

      case 132:
        this.$ = "totaldigits"; // t: 1literalTotaldigits;

        break;

      case 133:
        this.$ = "fractiondigits"; // t: 1literalFractiondigits;

        break;

      case 134:
        // t: 1dotExtend3
        this.$ = $$[$0 - 2] === EmptyShape ? {
          type: "Shape"
        } : $$[$0 - 2]; // t: 0

        if ($$[$0 - 1].length) {
          this.$.annotations = $$[$0 - 1];
        } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2


        if ($$[$0]) {
          this.$.semActs = $$[$0].semActs;
        } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot


        break;

      case 135:
        // t: 1dotExtend3
        var exprObj = $$[$0 - 1] ? {
          expression: $$[$0 - 1]
        } : EmptyObject; // t: 0, 0Extend1

        this.$ = exprObj === EmptyObject && $$[$0 - 3] === EmptyObject ? EmptyShape : extend({
          type: "Shape"
        }, exprObj, $$[$0 - 3]);
        break;

      case 136:
        this.$ = ["extends", [$$[$0]]]; // t: 1dotExtend1;

        break;

      case 137:
        this.$ = ["extra", $$[$0]]; // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;

        break;

      case 138:
        this.$ = ["closed", true]; // t: 1dotClosed;

        break;

      case 139:
        this.$ = EmptyObject;
        break;

      case 140:
        if ($$[$0 - 1] === EmptyObject) $$[$0 - 1] = {};
        if ($$[$0][0] === "closed") $$[$0 - 1]["closed"] = true; // t: 1dotClosed
        else if ($$[$0][0] in $$[$0 - 1]) $$[$0 - 1][$$[$0][0]] = unionAll($$[$0 - 1][$$[$0][0]], $$[$0][1]); // t: 1dotExtend3, 3groupdot3Extra, 3groupdotExtra3
          else $$[$0 - 1][$$[$0][0]] = $$[$0][1]; // t: 1dotExtend1

        this.$ = $$[$0 - 1];
        break;

      case 143:
        this.$ = $$[$0]; // t: 1dotExtra1, 3groupdot3Extra;

        break;

      case 144:
        this.$ = [$$[$0]]; // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;

        break;

      case 145:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 3groupdotExtra3;

        break;

      case 149:
        this.$ = {
          type: "OneOf",
          expressions: unionAll([$$[$0 - 1]], $$[$0])
        }; // t: 2oneOfdot;

        break;

      case 150:
        this.$ = $$[$0]; // t: 2oneOfdot;

        break;

      case 151:
        this.$ = [$$[$0]]; // t: 2oneOfdot;

        break;

      case 152:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 2oneOfdot;

        break;

      case 155:
        this.$ = $$[$0 - 1];
        break;

      case 159:
        this.$ = {
          type: "EachOf",
          expressions: unionAll([$$[$0 - 2]], $$[$0 - 1])
        }; // t: 2groupOfdot;

        break;

      case 160:
        this.$ = $$[$0]; // ## deprecated // t: 2groupOfdot;

        break;

      case 161:
        this.$ = $$[$0]; // t: 2groupOfdot;

        break;

      case 162:
        this.$ = [$$[$0]]; // t: 2groupOfdot;

        break;

      case 163:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 2groupOfdot;

        break;

      case 164:
        if ($$[$0 - 1]) {
          this.$ = extend({
            id: $$[$0 - 1]
          }, $$[$0]);
          addProduction($$[$0 - 1], this.$, yy);
        } else {
          this.$ = $$[$0];
        }

        break;

      case 166:
        this.$ = addSourceMap($$[$0], yy);
        break;

      case 171:
        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0 - 4]; // Copy all of the new attributes into the encapsulated shape.

        if ("min" in $$[$0 - 2]) {
          this.$.min = $$[$0 - 2].min;
        } // t: open3groupdotclosecard23Annot3Code2


        if ("max" in $$[$0 - 2]) {
          this.$.max = $$[$0 - 2].max;
        } // t: open3groupdotclosecard23Annot3Code2


        if ($$[$0 - 1].length) {
          this.$.annotations = $$[$0 - 1];
        } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2


        if ($$[$0]) {
          this.$.semActs = "semActs" in $$[$0 - 4] ? $$[$0 - 4].semActs.concat($$[$0].semActs) : $$[$0].semActs;
        } // t: open3groupdotcloseCode1, !open1dotOr1dot


        break;

      case 172:
        this.$ = {}; // t: 1dot;

        break;

      case 174:
        // $$[$0]: t: 1dotCode1
        if ($$[$0 - 3] !== EmptyShape && false) { var t; } // %7: t: 1inversedotCode1


        this.$ = extend({
          type: "TripleConstraint"
        }, $$[$0 - 5], {
          predicate: $$[$0 - 4]
        }, $$[$0 - 3] === EmptyShape ? {} : {
          valueExpr: $$[$0 - 3]
        }, $$[$0 - 2], $$[$0]); // t: 1dot, 1inversedot

        if ($$[$0 - 1].length) this.$["annotations"] = $$[$0 - 1]; // t: 1dotAnnot3, 1inversedotAnnot3

        break;

      case 177:
        this.$ = {
          min: 0,
          max: UNBOUNDED
        }; // t: 1cardStar;

        break;

      case 178:
        this.$ = {
          min: 1,
          max: UNBOUNDED
        }; // t: 1cardPlus;

        break;

      case 179:
        this.$ = {
          min: 0,
          max: 1
        }; // t: 1cardOpt;

        break;

      case 180:
        $$[$0] = $$[$0].substr(1, $$[$0].length - 2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = {
          min: parseInt(nums[0], 10)
        }; // t: 1card2blank, 1card2Star

        if (nums.length === 2) this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);else this.$["max"] = UNBOUNDED;
        break;

      case 181:
        this.$ = {
          inverse: true
        }; // t: 1inversedot;

        break;

      case 182:
        this.$ = $$[$0 - 1]; // t: 1val1IRIREF;

        break;

      case 183:
        this.$ = []; // t: 1val1IRIREF;

        break;

      case 184:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1IRIREF;

        break;

      case 189:
        this.$ = [$$[$0]]; // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;

        break;

      case 190:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;

        break;

      case 191:
        this.$ = [$$[$0]]; // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;

        break;

      case 192:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;

        break;

      case 193:
        this.$ = [$$[$0]]; // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;

        break;

      case 194:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;

        break;

      case 195:
        this.$ = {
          type: "IriStemRange",
          stem: {
            type: "Wildcard"
          },
          exclusions: $$[$0]
        };
        break;

      case 196:
        this.$ = {
          type: "LiteralStemRange",
          stem: {
            type: "Wildcard"
          },
          exclusions: $$[$0]
        };
        break;

      case 197:
        this.$ = {
          type: "LanguageStemRange",
          stem: {
            type: "Wildcard"
          },
          exclusions: $$[$0]
        };
        break;

      case 198:
        if ($$[$0]) {
          this.$ = {
            // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: $$[$0].length ? "IriStemRange" : "IriStem",
            stem: $$[$0 - 1]
          };
          if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0 - 1]; // t: 1val1IRIREF, 1AvalA
        }

        break;

      case 199:
        this.$ = []; // t: 1val1iriStem, 1val1iriStemMinusiri3;

        break;

      case 200:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1iriStemMinusiri3;

        break;

      case 201:
        this.$ = $$[$0]; // t: 1val1iriStemMinusiri3;

        break;

      case 204:
        this.$ = $$[$0] ? {
          type: "IriStem",
          stem: $$[$0 - 1]
        }
        /* t: 1val1iriStemMinusiriStem3 */
        : $$[$0 - 1]; // t: 1val1iriStemMinusiri3;

        break;

      case 207:
        if ($$[$0]) {
          this.$ = {
            // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
            type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
            stem: $$[$0 - 1].value
          };
          if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: 1val1literalStemMinusliteral3
        } else {
          this.$ = $$[$0 - 1]; // t: 1val1LITERAL
        }

        break;

      case 208:
        this.$ = []; // t: 1val1literalStem, 1val1literalStemMinusliteral3;

        break;

      case 209:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1literalStemMinusliteral3;

        break;

      case 210:
        this.$ = $$[$0]; // t: 1val1literalStemMinusliteral3;

        break;

      case 213:
        this.$ = $$[$0] ? {
          type: "LiteralStem",
          stem: $$[$0 - 1].value
        }
        /* t: 1val1literalStemMinusliteral3 */
        : $$[$0 - 1].value; // t: 1val1literalStemMinusliteralStem3;

        break;

      case 214:
        if ($$[$0]) {
          this.$ = {
            // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: $$[$0 - 1]
          };
          if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
        } else {
          this.$ = {
            type: "Language",
            languageTag: $$[$0 - 1]
          }; // t: 1val1language
        }

        break;

      case 215:
        this.$ = {
          // t: @@
          type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
          stem: ""
        };
        if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: @@

        break;

      case 216:
        this.$ = []; // t: 1val1languageStem, 1val1languageStemMinuslanguage3;

        break;

      case 217:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1languageStemMinuslanguage3;

        break;

      case 218:
        this.$ = $$[$0]; // t: 1val1languageStemMinuslanguage3;

        break;

      case 221:
        this.$ = $$[$0] ? {
          type: "LanguageStem",
          stem: $$[$0 - 1]
        }
        /* t: 1val1languageStemMinuslanguageStem3 */
        : $$[$0 - 1]; // t: 1val1languageStemMinuslanguage3;

        break;

      case 222:
        this.$ = addSourceMap($$[$0], yy); // Inclusion // t: 2groupInclude1;

        break;

      case 223:
        this.$ = {
          type: "Annotation",
          predicate: $$[$0 - 1],
          object: $$[$0]
        }; // t: 1dotAnnotIRIREF;

        break;

      case 226:
        this.$ = $$[$0].length ? {
          semActs: $$[$0]
        } : null; // t: 1dotCode1/2oneOfDot;

        break;

      case 227:
        this.$ = []; // t: 1dot, 1dotCode1;

        break;

      case 228:
        this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1dotCode1;

        break;

      case 229:
        this.$ = $$[$0] ? unescapeSemanticAction($$[$0 - 1], $$[$0])
        /* t: 1dotCode1 */
        : {
          type: "SemAct",
          name: $$[$0 - 1]
        }; // t: 1dotNoCode1;

        break;

      case 236:
        this.$ = RDF_TYPE; // t: 1AvalA;

        break;

      case 242:
        this.$ = createLiteral($$[$0], XSD_INTEGER); // t: 1val1INTEGER;

        break;

      case 243:
        this.$ = createLiteral($$[$0], XSD_DECIMAL); // t: 1val1DECIMAL;

        break;

      case 244:
        this.$ = createLiteral($$[$0], XSD_DOUBLE); // t: 1val1DOUBLE;

        break;

      case 246:
        this.$ = $$[$0] ? extend($$[$0 - 1], {
          type: $$[$0]
        }) : $$[$0 - 1]; // t: 1val1Datatype;

        break;

      case 250:
        this.$ = {
          value: "true",
          type: XSD_BOOLEAN
        }; // t: 1val1true;

        break;

      case 251:
        this.$ = {
          value: "false",
          type: XSD_BOOLEAN
        }; // t: 1val1false;

        break;

      case 252:
        this.$ = unescapeString($$[$0], 1); // t: 1val1STRING_LITERAL2;

        break;

      case 253:
        this.$ = unescapeString($$[$0], 3); // t: 1val1STRING_LITERAL1;

        break;

      case 254:
        this.$ = unescapeString($$[$0], 1); // t: 1val1STRING_LITERAL_LONG2;

        break;

      case 255:
        this.$ = unescapeString($$[$0], 3); // t: 1val1STRING_LITERAL_LONG1;

        break;

      case 256:
        this.$ = unescapeLangString($$[$0], 1); // t: @@;

        break;

      case 257:
        this.$ = unescapeLangString($$[$0], 3); // t: @@;

        break;

      case 258:
        this.$ = unescapeLangString($$[$0], 1); // t: 1val1LANGTAG;

        break;

      case 259:
        this.$ = unescapeLangString($$[$0], 3); // t: 1val1STRING_LITERAL_LONG2_with_LANGTAG;

        break;

      case 260:
        // t: 1dot
        var unesc = ShExUtil.unescapeText($$[$0].slice(1, -1), {});
        this.$ = ShExJisonParser._base === null || absoluteIRI.test(unesc) ? unesc : _resolveIRI(unesc);
        break;

      case 262:
        // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos1 = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos1), yy) + ShExUtil.unescapeText($$[$0].substr(namePos1 + 1), pnameEscapeReplacements);
        break;

      case 263:
        // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);
        break;

      case 265:
        this.$ = $$[$0]; // t: 0Extends1, 1dotExtends1, 1dot3ExtendsLN;

        break;

      case 268:
        this.$ = $$[$0]; // t: @_$[$0-1]dotSpecialize1, @_$[$0-1]dot3Specialize, @_$[$0-1]dotSpecialize3;

        break;
    }
  };
}

ShExJisonParser.prototype = Object.create(JisonParser.prototype);
Object.defineProperty(ShExJisonParser.prototype, 'constructor', {
  value: ShExJisonParser,
  enumerable: false,
  writable: true
});
exports._b = ShExJisonParser;
/* generated by ts-jison-lex 0.0.9 */

__webpack_unused_export__ = ({
  value: true
});

function ShExJisonLexer() {
  var yy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  this.options = {
    "moduleName": "ShExJison"
  };
  JisonLexer.call(this, yy);
  this.rules = [/^(?:\s+|(#[^\u000a\u000d]*|\/\*([^*]|\*([^/]|\\\/))*\*\/))/, /^(?:(@(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*))))/, /^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)))/, /^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/, /^(?:@)/, /^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*)))/, /^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/, /^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/, /^(?:(([+-])?([0-9])*\.([0-9])+))/, /^(?:(([+-])?([0-9])+))/, /^(?:{ANON})/, /^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/, /^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/, /^(?:a\b)/, /^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/, /^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/, /^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/, /^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/, /^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/, /^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/, /^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/, /^(?:([Bb][Aa][Ss][Ee]))/, /^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/, /^(?:([iI][mM][pP][oO][rR][tT]))/, /^(?:([sS][tT][aA][rR][tT]))/, /^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/, /^(?:([Aa][Bb][Ss][Tt][Rr][Aa][Cc][Tt]))/, /^(?:([Rr][Ee][Ss][Tt][Rr][Ii][Cc][Tt][Ss]))/, /^(?:([Ee][Xx][Tt][Ee][Nn][Dd][Ss]))/, /^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/, /^(?:([Ee][Xx][Tt][Rr][Aa]))/, /^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/, /^(?:([Bb][Nn][Oo][Dd][Ee]))/, /^(?:([Ii][Rr][Ii]))/, /^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/, /^(?:([Aa][Nn][Dd]))/, /^(?:([Oo][Rr]))/, /^(?:([No][Oo][Tt]))/, /^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/, /^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/, /^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/, /^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/, /^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/, /^(?:=)/, /^(?:\/\/)/, /^(?:\{)/, /^(?:\})/, /^(?:&)/, /^(?:\|\|)/, /^(?:\|)/, /^(?:,)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\$)/, /^(?:!)/, /^(?:\^\^)/, /^(?:\^)/, /^(?:\.)/, /^(?:~)/, /^(?:;)/, /^(?:\*)/, /^(?:\+)/, /^(?:\?)/, /^(?:-)/, /^(?:%)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:$)/, /^(?:[a-zA-Z0-9_-]+)/, /^(?:.)/];
  this.conditions = {
    "INITIAL": {
      "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
      "inclusive": true
    }
  };

  this.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
    var YYSTATE = YY_START;

    switch ($avoiding_name_collisions) {
      case 0:
        /**/
        break;

      case 1:
        return 79;
        break;

      case 2:
        return 80;
        break;

      case 3:
        yy_.yytext = yy_.yytext.substr(1);
        return 185;
        break;

      case 4:
        return 81;
        break;

      case 5:
        return 215;
        break;

      case 6:
        return 159;
        break;

      case 7:
        return 109;
        break;

      case 8:
        return 108;
        break;

      case 9:
        return 100;
        break;

      case 10:
        return 'ANON';
        break;

      case 11:
        return 19;
        break;

      case 12:
        return 21;
        break;

      case 13:
        return 199;
        break;

      case 14:
        return 101;
        break;

      case 15:
        return 216;
        break;

      case 16:
        return 195;
        break;

      case 17:
        return 211;
        break;

      case 18:
        return 213;
        break;

      case 19:
        return 210;
        break;

      case 20:
        return 212;
        break;

      case 21:
        return 207;
        break;

      case 22:
        return 209;
        break;

      case 23:
        return 206;
        break;

      case 24:
        return 208;
        break;

      case 25:
        return 18;
        break;

      case 26:
        return 20;
        break;

      case 27:
        return 23;
        break;

      case 28:
        return 26;
        break;

      case 29:
        return 39;
        break;

      case 30:
        return 36;
        break;

      case 31:
        return 220;
        break;

      case 32:
        return 218;
        break;

      case 33:
        return 125;
        break;

      case 34:
        return 127;
        break;

      case 35:
        return 85;
        break;

      case 36:
        return 97;
        break;

      case 37:
        return 96;
        break;

      case 38:
        return 98;
        break;

      case 39:
        return 53;
        break;

      case 40:
        return 51;
        break;

      case 41:
        return 43;
        break;

      case 42:
        return 112;
        break;

      case 43:
        return 113;
        break;

      case 44:
        return 114;
        break;

      case 45:
        return 115;
        break;

      case 46:
        return 102;
        break;

      case 47:
        return 103;
        break;

      case 48:
        return 104;
        break;

      case 49:
        return 116;
        break;

      case 50:
        return 117;
        break;

      case 51:
        return 27;
        break;

      case 52:
        return 190;
        break;

      case 53:
        return 119;
        break;

      case 54:
        return 121;
        break;

      case 55:
        return 189;
        break;

      case 56:
        return '||';
        break;

      case 57:
        return 135;
        break;

      case 58:
        return 140;
        break;

      case 59:
        return 69;
        break;

      case 60:
        return 70;
        break;

      case 61:
        return 161;
        break;

      case 62:
        return 163;
        break;

      case 63:
        return 148;
        break;

      case 64:
        return '!';
        break;

      case 65:
        return 111;
        break;

      case 66:
        return 160;
        break;

      case 67:
        return 71;
        break;

      case 68:
        return 178;
        break;

      case 69:
        return 141;
        break;

      case 70:
        return 156;
        break;

      case 71:
        return 157;
        break;

      case 72:
        return 158;
        break;

      case 73:
        return 179;
        break;

      case 74:
        return 193;
        break;

      case 75:
        return 204;
        break;

      case 76:
        return 205;
        break;

      case 77:
        return 7;
        break;

      case 78:
        return 'unexpected word "' + yy_.yytext + '"';
        break;

      case 79:
        return 'invalid character ' + yy_.yytext;
        break;
    }
  };
}

ShExJisonLexer.prototype = Object.create(JisonLexer.prototype);
Object.defineProperty(ShExJisonLexer.prototype, 'constructor', {
  value: ShExJisonLexer,
  enumerable: false,
  writable: true
});
__webpack_unused_export__ = ShExJisonLexer;

/***/ }),

/***/ 30787:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ShExParserCjsModule = function () {
  var ShExJison = (__webpack_require__(66569)/* .Parser */ ._b); // Creates a ShEx parser with the given pre-defined prefixes


  var prepareParser = function prepareParser(baseIRI, prefixes, schemaOptions) {
    schemaOptions = schemaOptions || {}; // Create a copy of the prefixes

    var prefixesCopy = {};

    for (var prefix in prefixes || {}) {
      prefixesCopy[prefix] = prefixes[prefix];
    } // Create a new parser with the given prefixes
    // (Workaround for https://github.com/zaach/jison/issues/241)


    var parser = new ShExJison();

    function runParser() {
      // ShExJison.base = baseIRI || "";
      // ShExJison.basePath = ShExJison.base.replace(/[^\/]*$/, '');
      // ShExJison.baseRoot = ShExJison.base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
      ShExJison._prefixes = Object.create(prefixesCopy);
      ShExJison._imports = [];

      ShExJison._setBase(baseIRI);

      ShExJison._setFileName(baseIRI);

      ShExJison.options = schemaOptions;
      var errors = [];

      ShExJison.recoverable = function (e) {
        return errors.push(e);
      };

      var ret = null;

      try {
        ret = ShExJison.prototype.parse.apply(parser, arguments);
      } catch (e) {
        errors.push(e);
      }

      ShExJison.reset();
      errors.forEach(function (e) {
        if ("hash" in e) {
          var hash = e.hash;
          var location = hash.loc;
          delete hash.loc;
          Object.assign(e, hash, {
            location: location
          });
        }

        return e;
      });

      if (errors.length == 1) {
        errors[0].parsed = ret;
        throw errors[0];
      } else if (errors.length) {
        var all = new Error("" + errors.length + " parser errors:\n" + errors.map(function (e) {
          return contextError(e, parser.yy.lexer);
        }).join("\n"));
        all.errors = errors;
        all.parsed = ret;
        throw all;
      } else {
        return ret;
      }
    }

    parser.parse = runParser;

    parser._setBase = function (base) {
      ShExJison._setBase;
      baseIRI = base;
    };

    parser._setFileName = ShExJison._setFileName;

    parser._setOptions = function (opts) {
      ShExJison.options = opts;
    };

    parser._resetBlanks = ShExJison._resetBlanks;
    parser.reset = ShExJison.reset;
    ShExJison.options = schemaOptions;
    return parser;

    function contextError(e, lexer) {
      // use the lexer's pretty-printing
      var line = e.location.first_line;
      var col = e.location.first_column + 1;
      var posStr = "pos" in e.hash ? "\n" + e.hash.pos : "";
      return "".concat(baseIRI, "\n line: ").concat(line, ", column: ").concat(col, ": ").concat(e.message).concat(posStr);
    }
  };

  return {
    construct: prepareParser
  };
}();

if (true) module.exports = ShExParserCjsModule;

/***/ }),

/***/ 24102:
/***/ ((module) => {

/**
 *
 * isIRI, isBlank, getLiteralType, getLiteralValue
 */
var ShExTermCjsModule = function () {
  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
      schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
      dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;
  var RdfLangString = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
  var XsdString = "http://www.w3.org/2001/XMLSchema#string"; // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.

  function resolveRelativeIRI(base, iri) {
    if (absoluteIRI.test(iri)) return iri;

    switch (iri[0]) {
      // An empty relative IRI indicates the base IRI
      case undefined:
        return base;
      // Resolve relative fragment IRIs against the base IRI

      case '#':
        return base + iri;
      // Resolve relative query string IRIs by replacing the query string

      case '?':
        return base.replace(/(?:\?.*)?$/, iri);
      // Resolve root-relative IRIs at the root of the base IRI

      case '/':
        var m = base.match(schemeAuthority); // Resolve scheme-relative IRIs to the scheme

        return (iri[1] === '/' ? m[1] : m[0]) + _removeDotSegments(iri);
      // Resolve all other IRIs at the base IRI's path

      default:
        {
          return _removeDotSegments(base.replace(/[^\/?]*(?:\?.*)?$/, '') + iri);
        }
    }
  } // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.


  function _removeDotSegments(iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri)) return iri; // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'

    var length = iri.length;
    var result = '',
        i = -1,
        pathStart = -1,
        segmentStart = 0,
        next = '/';

    while (i < length) {
      switch (next) {
        // The path starts with the first slash after the authority
        case ':':
          if (pathStart < 0) {
            // Skip two slashes before the authority
            if (iri[++i] === '/' && iri[++i] === '/') // Skip to slash after the authority
              while ((pathStart = i + 1) < length && iri[pathStart] !== '/') {
                i = pathStart;
              }
          }

          break;
        // Don't modify a query string or fragment

        case '?':
        case '#':
          i = length;
          break;
        // Handle '/.' or '/..' path segments

        case '/':
          if (iri[i + 1] === '.') {
            next = iri[++i + 1];

            switch (next) {
              // Remove a '/.' segment
              case '/':
                result += iri.substring(segmentStart, i - 1);
                segmentStart = i + 1;
                break;
              // Remove a trailing '/.' segment

              case undefined:
              case '?':
              case '#':
                return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
              // Remove a '/..' segment

              case '.':
                next = iri[++i + 1];

                if (next === undefined || next === '/' || next === '?' || next === '#') {
                  result += iri.substring(segmentStart, i - 2); // Try to remove the parent path from result

                  if ((segmentStart = result.lastIndexOf('/')) >= pathStart) result = result.substr(0, segmentStart); // Remove a trailing '/..' segment

                  if (next !== '/') return result + '/' + iri.substr(i + 1);
                  segmentStart = i + 1;
                }

            }
          }

      }

      next = iri[++i];
    }

    return result + iri.substring(segmentStart);
  }

  function internalTerm(node) {
    // !!rdfjsTermToInternal
    switch (node.termType) {
      case "NamedNode":
        return node.value;

      case "BlankNode":
        return "_:" + node.value;

      case "Literal":
        return "\"" + node.value.replace(/"/g, '\\"') + "\"" + (node.datatypeString === RdfLangString ? "@" + node.language : node.datatypeString === XsdString ? "" : "^^" + node.datatypeString);

      default:
        throw Error("unknown RDFJS node type: " + JSON.stringify(node));
    }
  }

  function internalTriple(triple) {
    // !!rdfjsTripleToInternal
    return {
      subject: internalTerm(triple.subject),
      predicate: internalTerm(triple.predicate),
      object: internalTerm(triple.object)
    };
  }

  function externalTerm(node, factory) {
    // !!internalTermToRdfjs
    if (isIRI(node)) {
      return factory.namedNode(node);
    } else if (isBlank(node)) {
      return factory.blankNode(node.substr(2));
    } else if (isLiteral(node)) {
      var dtOrLang = getLiteralLanguage(node) || (getLiteralType(node) === XsdString ? null // seems to screw up N3.js
      : factory.namedNode(getLiteralType(node)));
      return factory.literal(getLiteralValue(node), dtOrLang);
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  }

  function externalTriple(triple, factory) {
    // !!rename internalTripleToRdjs
    return factory.quad(externalTerm(triple.subject, factory), externalTerm(triple.predicate, factory), externalTerm(triple.object, factory));
  }

  function internalTermToTurtle(node, base, prefixes) {
    if (isIRI(node)) {
      // if (node === RDF_TYPE) // only valid in Turtle predicates
      //   return "a";
      // Escape special characters
      if (escape.test(node)) node = node.replace(escapeAll, characterReplacer);
      var pref = Object.keys(prefixes).find(function (pref) {
        return node.startsWith(prefixes[pref]);
      });

      if (pref) {
        var rest = node.substr(prefixes[pref].length);
        if (rest.indexOf("\\") === -1) // could also say no more than n of these: [...]
          return pref + ":" + rest.replace(/([~!$&'()*+,;=/?#@%])/g, '\\' + "$1");
      }

      if (node.startsWith(base)) {
        return "<" + node.substr(base.length) + ">";
      } else {
        return "<" + node + ">";
      }
    } else if (isBlank(node)) {
      return node;
    } else if (isLiteral(node)) {
      var value = getLiteralValue(node);
      var type = getLiteralType(node);
      var language = getLiteralLanguage(node); // Escape special characters

      if (escape.test(value)) value = value.replace(escapeAll, characterReplacer); // Write the literal, possibly with type or language

      if (language) return '"' + value + '"@' + language;else if (type && type !== "http://www.w3.org/2001/XMLSchema#string") return '"' + value + '"^^' + this.internalTermToTurtle(type, base, prefixes);else return '"' + value + '"';
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  } // Tests whether the given entity (triple object) represents an IRI in the N3 library


  function isIRI(entity) {
    if (typeof entity !== 'string') return false;else if (entity.length === 0) return true;else {
      var firstChar = entity[0];
      return firstChar !== '"' && firstChar !== '_';
    }
  } // Tests whether the given entity (triple object) represents a literal in the N3 library


  function isLiteral(entity) {
    return typeof entity === 'string' && entity[0] === '"';
  } // Tests whether the given entity (triple object) represents a blank node in the N3 library


  function isBlank(entity) {
    return typeof entity === 'string' && entity.substr(0, 2) === '_:';
  } // Tests whether the given entity represents the default graph


  function isDefaultGraph(entity) {
    return !entity;
  } // Tests whether the given triple is in the default graph


  function inDefaultGraph(triple) {
    return !triple.graph;
  } // Gets the string value of a literal in the N3 library


  function getLiteralValue(literal) {
    var match = /^"([^]*)"/.exec(literal);
    if (!match) throw new Error(literal + ' is not a literal');
    return match[1].replace(/\\"/g, '"');
  } // Gets the type of a literal in the N3 library


  function getLiteralType(literal) {
    var match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literal);
    if (!match) throw new Error(literal + ' is not a literal');
    return match[1] || (match[2] ? RdfLangString : XsdString);
  } // Gets the language of a literal in the N3 library


  function getLiteralLanguage(literal) {
    var match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literal);
    if (!match) throw new Error(literal + ' is not a literal');
    return match[1] ? match[1].toLowerCase() : '';
  } // Characters in literals that require escaping


  var escape = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
      escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
      escapeReplacements = {
    '\\': '\\\\',
    '"': '\\"',
    '\t': '\\t',
    '\n': '\\n',
    '\r': '\\r',
    '\b': '\\b',
    '\f': '\\f'
  }; // Replaces a character by its escaped version

  function characterReplacer(character) {
    // Replace a single character by its escaped version
    var result = escapeReplacements[character]; // @@ const should be let

    if (result === undefined) {
      // Replace a single character with its 4-bit unicode escape sequence
      if (character.length === 1) {
        result = character.charCodeAt(0).toString(16);
        result = "\\u0000".substr(0, 6 - result.length) + result;
      } // Replace a surrogate pair with its 8-bit unicode escape sequence
      else {
          result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);
          result = "\\U00000000".substr(0, 10 - result.length) + result;
        }
    }

    return result;
  }

  return {
    RdfLangString: RdfLangString,
    XsdString: XsdString,
    resolveRelativeIRI: resolveRelativeIRI,
    isIRI: isIRI,
    isLiteral: isLiteral,
    isBlank: isBlank,
    isDefaultGraph: isDefaultGraph,
    inDefaultGraph: inDefaultGraph,
    getLiteralValue: getLiteralValue,
    getLiteralType: getLiteralType,
    getLiteralLanguage: getLiteralLanguage,
    internalTerm: internalTerm,
    internalTriple: internalTriple,
    externalTerm: externalTerm,
    externalTriple: externalTriple,
    internalTermToTurtle: internalTermToTurtle
  };
}();

if (true) module.exports = ShExTermCjsModule; // node environment

/***/ }),

/***/ 68779:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(85271);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// **ShExUtil** provides ShEx utility functions
var ShExUtilCjsModule = function () {
  var _ShExUtil2;

  var ShExTerm = __webpack_require__(24102);

  var Visitor = __webpack_require__(96061);

  var Hierarchy = __webpack_require__(90802);

  var SX = {};
  SX._namespace = "http://www.w3.org/ns/shex#";
  ["Schema", "@context", "imports", "startActs", "start", "shapes", "ShapeDecl", "ShapeOr", "ShapeAnd", "shapeExprs", "nodeKind", "NodeConstraint", "iri", "bnode", "nonliteral", "literal", "datatype", "length", "minlength", "maxlength", "pattern", "flags", "mininclusive", "minexclusive", "maxinclusive", "maxexclusive", "totaldigits", "fractiondigits", "values", "ShapeNot", "shapeExpr", "Shape", "abstract", "closed", "extra", "expression", "extends", "restricts", "semActs", "ShapeRef", "reference", "ShapeExternal", "EachOf", "OneOf", "expressions", "min", "max", "annotation", "TripleConstraint", "inverse", "negated", "predicate", "valueExpr", "Inclusion", "include", "Language", "languageTag", "IriStem", "LiteralStem", "LanguageStem", "stem", "IriStemRange", "LiteralStemRange", "LanguageStemRange", "exclusion", "Wildcard", "SemAct", "name", "code", "Annotation", "object"].forEach(function (p) {
    SX[p] = SX._namespace + p;
  });
  var RDF = {};
  RDF._namespace = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
  ["type", "first", "rest", "nil"].forEach(function (p) {
    RDF[p] = RDF._namespace + p;
  });
  var XSD = {};
  XSD._namespace = "http://www.w3.org/2001/XMLSchema#";
  ["anyURI"].forEach(function (p) {
    XSD[p] = XSD._namespace + p;
  });
  var OWL = {};
  OWL._namespace = "http://www.w3.org/2002/07/owl#";
  ["Thing"].forEach(function (p) {
    OWL[p] = OWL._namespace + p;
  });
  var Missed = {}; // singleton

  var UNBOUNDED = -1;

  function extend(base) {
    if (!base) base = {};

    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {
      for (var name in arg) {
        base[name] = arg[name];
      }
    }

    return base;
  }

  function isTerm(t) {
    return _typeof(t) !== "object" || "value" in t && Object.keys(t).reduce(function (r, k) {
      return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
    }, true);
  }

  function isShapeRef(expr) {
    return typeof expr === "string"; // test for JSON-LD @ID
  }

  var isInclusion = isShapeRef;

  function ldify(term) {
    if (term[0] !== "\"") return term;
    var ret = {
      value: ShExTerm.getLiteralValue(term)
    };
    var dt = ShExTerm.getLiteralType(term);
    if (dt && dt !== "http://www.w3.org/2001/XMLSchema#string" && dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") ret.type = dt;
    var lang = ShExTerm.getLiteralLanguage(term);
    if (lang) ret.language = lang;
    return ret;
  }

  var ShExUtil = (_ShExUtil2 = {
    SX: SX,
    RDF: RDF,
    version: function version() {
      return "0.5.0";
    },
    Visitor: Visitor,
    index: Visitor.index,

    /* getAST - compile a traditional regular expression abstract syntax tree.
     * Tested but not used at present.
     */
    getAST: function getAST(schema) {
      return {
        type: "AST",
        shapes: schema.shapes.reduce(function (ret, shape) {
          ret[shape.id] = {
            type: "ASTshape",
            expression: _compileShapeToAST(shape.expression, [], schema)
          };
          return ret;
        }, {})
      };
      /* _compileShapeToAST - compile a shape expression to an abstract syntax tree.
       *
       * currently tested but not used.
       */

      function _compileShapeToAST(expression, tripleConstraints, schema) {
        function Epsilon() {
          this.type = "Epsilon";
        }

        function TripleConstraint(ordinal, predicate, inverse, negated, valueExpr) {
          this.type = "TripleConstraint"; // this.ordinal = ordinal; @@ does 1card25

          this.inverse = !!inverse;
          this.negated = !!negated;
          this.predicate = predicate;
          if (valueExpr !== undefined) this.valueExpr = valueExpr;
        }

        function Choice(disjuncts) {
          this.type = "Choice";
          this.disjuncts = disjuncts;
        }

        function EachOf(conjuncts) {
          this.type = "EachOf";
          this.conjuncts = conjuncts;
        }

        function SemActs(expression, semActs) {
          this.type = "SemActs";
          this.expression = expression;
          this.semActs = semActs;
        }

        function KleeneStar(expression) {
          this.type = "KleeneStar";
          this.expression = expression;
        }

        function _compileExpression(expr, schema) {
          var repeated, container;
          /* _repeat: map expr with a min and max cardinality to a corresponding AST with Groups and Stars.
             expr 1 1 => expr
             expr 0 1 => Choice(expr, Eps)
             expr 0 3 => Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps)
             expr 2 5 => EachOf(expr, expr, Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps))
             expr 0 * => KleeneStar(expr)
             expr 1 * => EachOf(expr, KleeneStar(expr))
             expr 2 * => EachOf(expr, expr, KleeneStar(expr))
              @@TODO: favor Plus over Star if Epsilon not in expr.
          */

          function _repeat(expr, min, max) {
            if (min === undefined) {
              min = 1;
            }

            if (max === undefined) {
              max = 1;
            }

            if (min === 1 && max === 1) {
              return expr;
            }

            var opts = max === UNBOUNDED ? new KleeneStar(expr) : Array.from(Array(max - min)).reduce(function (ret, elt, ord) {
              return ord === 0 ? new Choice([expr, new Epsilon()]) : new Choice([new EachOf([expr, ret]), new Epsilon()]);
            }, undefined);
            var reqd = min !== 0 ? new EachOf(Array.from(Array(min)).map(function (ret) {
              return expr; // @@ something with ret
            }).concat(opts)) : opts;
            return reqd;
          }

          if (typeof expr === "string") {
            // Inclusion
            var included = schema._index.tripleExprs[expr].expression;
            return _compileExpression(included, schema);
          } else if (expr.type === "TripleConstraint") {
            // predicate, inverse, negated, valueExpr, annotations, semActs, min, max
            var valueExpr = "valueExprRef" in expr ? schema.valueExprDefns[expr.valueExprRef] : expr.valueExpr;
            var ordinal = tripleConstraints.push(expr) - 1;
            var tp = new TripleConstraint(ordinal, expr.predicate, expr.inverse, expr.negated, valueExpr);
            repeated = _repeat(tp, expr.min, expr.max);
            return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
          } else if (expr.type === "OneOf") {
            container = new Choice(expr.expressions.map(function (e) {
              return _compileExpression(e, schema);
            }));
            repeated = _repeat(container, expr.min, expr.max);
            return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
          } else if (expr.type === "EachOf") {
            container = new EachOf(expr.expressions.map(function (e) {
              return _compileExpression(e, schema);
            }));
            repeated = _repeat(container, expr.min, expr.max);
            return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
          } else throw Error("unexpected expr type: " + expr.type);
        }

        return expression ? _compileExpression(expression, schema) : new Epsilon();
      }
    },
    // tests
    // console.warn("HERE:", ShExJtoAS({"type":"Schema","shapes":[{"id":"http://all.example/S1","type":"Shape","expression":
    //  { "id":"http://all.example/S1e", "type":"EachOf","expressions":[ ] },
    // // { "id":"http://all.example/S1e","type":"TripleConstraint","predicate":"http://all.example/p1"},
    // "extra":["http://all.example/p3","http://all.example/p1","http://all.example/p2"]
    // }]}).shapes['http://all.example/S1']);
    ShExJtoAS: function ShExJtoAS(schema) {
      var _ShExUtil = this;

      schema._prefixes = schema._prefixes || {};
      schema._index = this.index(schema);
      return schema;
    },
    AStoShExJ: function AStoShExJ(schema, abbreviate) {
      schema["@context"] = schema["@context"] || "http://www.w3.org/ns/shex.jsonld";
      delete schema["_index"];
      delete schema["_prefixes"];
      return schema;
    },
    ShExRVisitor: function ShExRVisitor(knownShapeExprs) {
      var v = ShExUtil.Visitor();
      var knownExpressions = {};
      var oldVisitShapeExpr = v.visitShapeExpr,
          oldVisitValueExpr = v.visitValueExpr,
          oldVisitExpression = v.visitExpression;
      v.keepShapeExpr = oldVisitShapeExpr;

      v.visitShapeExpr = v.visitValueExpr = function (expr, label) {
        if (typeof expr === "string") return expr;

        if ("id" in expr) {
          if (knownShapeExprs.indexOf(expr.id) !== -1 || Object.keys(expr).length === 1) return expr.id;
          delete expr.id;
        }

        return oldVisitShapeExpr.call(this, expr, label);
      };

      v.visitExpression = function (expr) {
        if (typeof expr === "string") // shortcut for recursive references e.g. 1Include1 and ../doc/TODO.md
          return expr;

        if ("id" in expr) {
          if (expr.id in knownExpressions) {
            knownExpressions[expr.id].refCount++;
            return expr.id;
          }
        }

        var ret = oldVisitExpression.call(this, expr); // Everything from RDF has an ID, usually a BNode.

        knownExpressions[expr.id] = {
          refCount: 1,
          expr: ret
        };
        return ret;
      };

      v.cleanIds = function () {
        for (var _k in knownExpressions) {
          var known = knownExpressions[_k];
          if (known.refCount === 1 && ShExTerm.isBlank(known.expr.id)) delete known.expr.id;
        }

        ;
      };

      return v;
    },
    // tests
    // const shexr = ShExUtil.ShExRtoShExJ({ "type": "Schema", "shapes": [
    //   { "id": "http://a.example/S1", "type": "Shape",
    //     "expression": {
    //       "type": "TripleConstraint", "predicate": "http://a.example/p1",
    //       "valueExpr": {
    //         "type": "ShapeAnd", "shapeExprs": [
    //           { "type": "NodeConstraint", "nodeKind": "bnode" },
    //           { "id": "http://a.example/S2", "type": "Shape",
    //             "expression": {
    //               "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
    //           //            "http://a.example/S2"
    //         ] } } },
    //   { "id": "http://a.example/S2", "type": "Shape",
    //     "expression": {
    //       "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
    // ] });
    // console.warn("HERE:", shexr.shapes[0].expression.valueExpr);
    // ShExUtil.ShExJtoAS(shexr);
    // console.warn("THERE:", shexr.shapes["http://a.example/S1"].expression.valueExpr);
    ShExRtoShExJ: function ShExRtoShExJ(schema) {
      // compile a list of known shapeExprs
      var knownShapeExprs = [];
      if ("shapes" in schema) [].push.apply(knownShapeExprs, schema.shapes.map(function (sh) {
        return sh.id;
      })); // normalize references to those shapeExprs

      var v = this.ShExRVisitor(knownShapeExprs);
      if ("start" in schema) schema.start = v.visitShapeExpr(schema.start);
      if ("shapes" in schema) schema.shapes = schema.shapes.map(function (sh) {
        return sh.type === SX.ShapeDecl ? {
          type: "ShapeDecl",
          id: sh.id,
          "abstract": sh["abstract"],
          shapeExpr: v.visitShapeExpr(sh.shapeExpr)
        } : v.keepShapeExpr(sh);
      }); // remove extraneous BNode IDs

      v.cleanIds();
      return schema;
    },
    valGrep: function valGrep(obj, type, f) {
      var _ShExUtil = this;

      var ret = [];

      for (var i in obj) {
        var o = obj[i];

        if (_typeof(o) === "object") {
          if ("type" in o && o.type === type) ret.push(f(o));
          ret.push.apply(ret, _ShExUtil.valGrep(o, type, f));
        }
      }

      return ret;
    },
    n3jsToTurtle: function n3jsToTurtle(res) {
      function termToLex(node) {
        return _typeof(node) === "object" ? "\"" + node.value + "\"" + ("type" in node ? "^^<" + node.type + ">" : "language" in node ? "@" + node.language : "") : ShExTerm.isIRI(node) ? "<" + node + ">" : ShExTerm.isBlank(node) ? node : "???";
      }

      return this.valGrep(res, "TestedTriple", function (t) {
        return ["subject", "predicate", "object"].map(function (k) {
          return termToLex(t[k]);
        }).join(" ") + " .";
      });
    },
    valToN3js: function valToN3js(res, factory) {
      return this.valGrep(res, "TestedTriple", function (t) {
        var ret = JSON.parse(JSON.stringify(t));
        if (_typeof(t.object) === "object") ret.object = "\"" + t.object.value + "\"" + ("type" in t.object ? "^^" + t.object.type : "language" in t.object ? "@" + t.object.language : "");
        return ShExTerm.externalTriple(ret, factory);
      });
    }
  }, _defineProperty(_ShExUtil2, "n3jsToTurtle", function n3jsToTurtle(n3js) {
    function termToLex(node) {
      if (ShExTerm.isIRI(node)) return "<" + node + ">";
      if (ShExTerm.isBlank(node)) return node;
      var t = ShExTerm.getLiteralType(node);
      if (t && t !== "http://www.w3.org/2001/XMLSchema#string") return "\"" + ShExTerm.getLiteralValue(node) + "\"" + "^^<" + t + ">";
      return node;
    }

    return n3js.map(function (t) {
      return ["subject", "predicate", "object"].map(function (k) {
        return termToLex(t[k]);
      }).join(" ") + " .";
    });
  }), _defineProperty(_ShExUtil2, "canonicalize", function canonicalize(schema, trimIRI) {
    var ret = JSON.parse(JSON.stringify(schema));
    ret["@context"] = ret["@context"] || "http://www.w3.org/ns/shex.jsonld";
    delete ret._prefixes;
    delete ret._base;
    var index = ret._index || this.index(schema);
    delete ret._index;
    var sourceMap = ret._sourceMap;
    delete ret._sourceMap; // Don't delete ret.productions as it's part of the AS.

    var v = ShExUtil.Visitor();
    var knownExpressions = [];
    var oldVisitInclusion = v.visitInclusion,
        oldVisitExpression = v.visitExpression;

    v.visitInclusion = function (inclusion) {
      if (knownExpressions.indexOf(inclusion) === -1 && inclusion in index.tripleExprs) {
        knownExpressions.push(inclusion);
        return oldVisitExpression.call(v, index.tripleExprs[inclusion]);
      }

      return oldVisitInclusion.call(v, inclusion);
    };

    v.visitExpression = function (expression) {
      if (_typeof(expression) === "object" && "id" in expression) {
        if (knownExpressions.indexOf(expression.id) === -1) {
          knownExpressions.push(expression.id);
          return oldVisitExpression.call(v, index.tripleExprs[expression.id]);
        }

        return expression.id; // Inclusion
      }

      return oldVisitExpression.call(v, expression);
    };

    if (trimIRI) {
      v.visitIRI = function (i) {
        return i.replace(trimIRI, "");
      };

      if ("imports" in ret) ret.imports = v.visitImports(ret.imports);
    }

    if ("shapes" in ret) {
      ret.shapes = Object.keys(index.shapeExprs).sort().map(function (k) {
        if ("extra" in index.shapeExprs[k]) index.shapeExprs[k].extra.sort();
        return v.visitShapeDecl(index.shapeExprs[k]);
      });
    }

    return ret;
  }), _defineProperty(_ShExUtil2, "BiDiClosure", function BiDiClosure() {
    return {
      needs: {},
      neededBy: {},
      inCycle: [],
      test: function test() {
        function expect(l, r) {
          var ls = JSON.stringify(l),
              rs = JSON.stringify(r);
          if (ls !== rs) throw Error(ls + " !== " + rs);
        } // this.add(1, 2); expect(this.needs, { 1:[2]                     }); expect(this.neededBy, { 2:[1]                     });
        // this.add(3, 4); expect(this.needs, { 1:[2], 3:[4]              }); expect(this.neededBy, { 2:[1], 4:[3]              });
        // this.add(2, 3); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1] });


        this.add(2, 3);
        expect(this.needs, {
          2: [3]
        });
        expect(this.neededBy, {
          3: [2]
        });
        this.add(1, 2);
        expect(this.needs, {
          1: [2, 3],
          2: [3]
        });
        expect(this.neededBy, {
          3: [2, 1],
          2: [1]
        });
        this.add(1, 3);
        expect(this.needs, {
          1: [2, 3],
          2: [3]
        });
        expect(this.neededBy, {
          3: [2, 1],
          2: [1]
        });
        this.add(3, 4);
        expect(this.needs, {
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(6, 7);
        expect(this.needs, {
          6: [7],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(5, 6);
        expect(this.needs, {
          5: [6, 7],
          6: [7],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6, 5],
          6: [5],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(5, 7);
        expect(this.needs, {
          5: [6, 7],
          6: [7],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6, 5],
          6: [5],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(7, 8);
        expect(this.needs, {
          5: [6, 7, 8],
          6: [7, 8],
          7: [8],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6, 5],
          6: [5],
          8: [7, 6, 5],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(4, 5);
        expect(this.needs, {
          1: [2, 3, 4, 5, 6, 7, 8],
          2: [3, 4, 5, 6, 7, 8],
          3: [4, 5, 6, 7, 8],
          4: [5, 6, 7, 8],
          5: [6, 7, 8],
          6: [7, 8],
          7: [8]
        });
        expect(this.neededBy, {
          2: [1],
          3: [2, 1],
          4: [3, 2, 1],
          5: [4, 3, 2, 1],
          6: [5, 4, 3, 2, 1],
          7: [6, 5, 4, 3, 2, 1],
          8: [7, 6, 5, 4, 3, 2, 1]
        });
      },
      add: function add(needer, needie, negated) {
        var r = this;
        if (!(needer in r.needs)) r.needs[needer] = [];
        if (!(needie in r.neededBy)) r.neededBy[needie] = []; // // [].concat.apply(r.needs[needer], [needie], r.needs[needie]). emitted only last element

        r.needs[needer] = r.needs[needer].concat([needie], r.needs[needie]).filter(function (el, ord, l) {
          return el !== undefined && l.indexOf(el) === ord;
        }); // // [].concat.apply(r.neededBy[needie], [needer], r.neededBy[needer]). emitted only last element

        r.neededBy[needie] = r.neededBy[needie].concat([needer], r.neededBy[needer]).filter(function (el, ord, l) {
          return el !== undefined && l.indexOf(el) === ord;
        });
        if (needer in this.neededBy) this.neededBy[needer].forEach(function (e) {
          r.needs[e] = r.needs[e].concat([needie], r.needs[needie]).filter(function (el, ord, l) {
            return el !== undefined && l.indexOf(el) === ord;
          });
        });
        if (needie in this.needs) this.needs[needie].forEach(function (e) {
          r.neededBy[e] = r.neededBy[e].concat([needer], r.neededBy[needer]).filter(function (el, ord, l) {
            return el !== undefined && l.indexOf(el) === ord;
          });
        }); // this.neededBy[needie].push(needer);

        if (r.needs[needer].indexOf(needer) !== -1) r.inCycle = r.inCycle.concat(r.needs[needer]);
      },
      trim: function trim() {
        function _trim(a) {
          // filter(function (el, ord, l) { return l.indexOf(el) === ord; })
          for (var i = a.length - 1; i > -1; --i) {
            if (a.indexOf(a[i]) < i) a.splice(i, i + 1);
          }
        }

        for (k in this.needs) {
          _trim(this.needs[k]);
        }

        for (k in this.neededBy) {
          _trim(this.neededBy[k]);
        }
      },
      foundIn: {},
      addIn: function addIn(tripleExpr, shapeExpr) {
        this.foundIn[tripleExpr] = shapeExpr;
      }
    };
  }), _defineProperty(_ShExUtil2, "nestShapes", function nestShapes(schema) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ShExUtil = this;

    var index = schema._index || this.index(schema);

    if (!('no' in options)) {
      options.no = false;
    }

    var shapeLabels = Object.keys(index.shapeExprs || []);
    var shapeReferences = {};
    shapeLabels.forEach(function (label) {
      var shape = index.shapeExprs[label];
      noteReference(label, null); // just note the shape so we have a complete list at the end

      shape = _ShExUtil.skipDecl(shape);

      if (shape.type === 'Shape') {
        if ('extends' in shape) {
          shape["extends"].forEach( // !!! assumes simple reference, not e.g. AND
          function (parent) {
            return noteReference(parent, shape);
          });
        }

        if ('expression' in shape) {
          (_ShExUtil.simpleTripleConstraints(shape) || []).forEach(function (tc) {
            var target = _ShExUtil.getValueType(tc.valueExpr, true);

            noteReference(target, {
              type: 'tc',
              shapeLabel: label,
              tc: tc
            });
          });
        }
      } else if (shape.type === 'NodeConstraint') {// can't have any refs to other shapes
      } else {
        throw Error('nestShapes currently only supports Shapes and NodeConstraints');
      }
    });
    var nestables = Object.keys(shapeReferences).filter(function (label) {
      return shapeReferences[label].length === 1 && shapeReferences[label][0].type === 'tc' // no inheritance support yet
      && label in index.shapeExprs && _ShExUtil.skipDecl(index.shapeExprs[label]).type === 'Shape' // Don't nest e.g. valuesets for now. @@ needs an option
      && !index.shapeExprs[label]["abstract"];
    } // shouldn't have a ref to an unEXTENDed ABSTRACT shape anyways.
    ).filter(function (nestable) {
      return !('noNestPattern' in options) || !nestable.match(RegExp(options.noNestPattern));
    }).reduce(function (acc, label) {
      acc[label] = {
        referrer: shapeReferences[label][0].shapeLabel,
        predicate: shapeReferences[label][0].tc.predicate
      };
      return acc;
    }, {});

    if (!options.no) {
      var oldToNew = {};

      if (options.rename) {
        if (!('transform' in options)) {
          options.transform = function () {
            var map = shapeLabels.reduce(function (acc, k, idx) {
              acc[k] = '_:renamed' + idx;
              return acc;
            }, {});
            return function (id, shapeExpr) {
              return map[id];
            };
          }();
        }

        Object.keys(nestables).forEach(function (oldName) {
          var shapeExpr = index.shapeExprs[oldName];
          var newName = options.transform(oldName, shapeExpr);
          oldToNew[oldName] = shapeExpr.id = newName;
          shapeLabels[shapeLabels.indexOf(oldName)] = newName;
          nestables[newName] = nestables[oldName];
          nestables[newName].was = oldName;
          delete nestables[oldName]; // @@ maybe update index when done? 

          index.shapeExprs[newName] = index.shapeExprs[oldName];
          delete index.shapeExprs[oldName];

          if (shapeReferences[oldName].length !== 1) {
            throw Error('assertion: ' + oldName + ' doesn\'t have one reference: [' + shapeReferences[oldName] + ']');
          }

          var ref = shapeReferences[oldName][0];

          if (ref.type === 'tc') {
            if (typeof ref.tc.valueExpr === 'string') {
              // ShapeRef
              ref.tc.valueExpr = newName;
            } else {
              throw Error('assertion: rename not implemented for TripleConstraint expr: ' + ref.tc.valueExpr); // _ShExUtil.setValueType(ref, newName)
            }
          } else if (ref.type === 'Shape') {
            throw Error('assertion: rename not implemented for Shape: ' + ref);
          } else {
            throw Error('assertion: ' + ref.type + ' not TripleConstraint or Shape');
          }
        });
        Object.keys(nestables).forEach(function (k) {
          var n = nestables[k];

          if (n.referrer in oldToNew) {
            n.newReferrer = oldToNew[n.referrer];
          }
        }); // Restore old order for more concise diffs.

        var shapesCopy = {};
        shapeLabels.forEach(function (label) {
          return shapesCopy[label] = index.shapeExprs[label];
        });
        index.shapeExprs = shapesCopy;
      } else {
        var doomed = [];
        var ids = schema.shapes.map(function (s) {
          return s.id;
        });
        Object.keys(nestables).forEach(function (oldName) {
          var borged = index.shapeExprs[oldName]; // In principle, the ShExJ shouldn't have a Decl if the above criteria are met,
          // but the ShExJ may be generated by something which emits Decls regardless.

          shapeReferences[oldName][0].tc.valueExpr = _ShExUtil.skipDecl(borged);
          var delme = ids.indexOf(oldName);
          if (schema.shapes[delme].id !== oldName) throw Error('assertion: found ' + schema.shapes[delme].id + ' instead of ' + oldName);
          doomed.push(delme);
          delete index.shapeExprs[oldName];
        });
        doomed.sort(function (l, r) {
          return r - l;
        }).forEach(function (delme) {
          var id = schema.shapes[delme].id;
          if (!nestables[id]) throw Error('deleting unexpected shape ' + id);
          delete schema.shapes[delme].id;
          schema.shapes.splice(delme, 1);
        });
      }
    } // console.dir(nestables)
    // console.dir(shapeReferences)


    return nestables;

    function noteReference(id, reference) {
      if (!(id in shapeReferences)) {
        shapeReferences[id] = [];
      }

      if (reference) {
        shapeReferences[id].push(reference);
      }
    }
  }), _defineProperty(_ShExUtil2, "getPredicateUsage", function getPredicateUsage(schema) {
    var untyped = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ShExUtil = this; // populate shapeHierarchy


    var shapeHierarchy = Hierarchy.create();
    Object.keys(schema.shapes).forEach(function (label) {
      var shapeExpr = _ShExUtil.skipDecl(schema.shapes[label]);

      if (shapeExpr.type === 'Shape') {
        (shapeExpr["extends"] || []).forEach(function (superShape) {
          return shapeHierarchy.add(superShape.reference, label);
        });
      }
    });
    Object.keys(schema.shapes).forEach(function (label) {
      if (!(label in shapeHierarchy.parents)) shapeHierarchy.parents[label] = [];
    });
    var predicates = {}; // IRI->{ uses: [shapeLabel], commonType: shapeExpr }

    Object.keys(schema.shapes).forEach(function (shapeLabel) {
      var shapeExpr = _ShExUtil.skipDecl(schema.shapes[shapeLabel]);

      if (shapeExpr.type === 'Shape') {
        var tcs = _ShExUtil.simpleTripleConstraints(shapeExpr) || [];
        tcs.forEach(function (tc) {
          var newType = _ShExUtil.getValueType(tc.valueExpr);

          if (!(tc.predicate in predicates)) {
            predicates[tc.predicate] = {
              uses: [shapeLabel],
              commonType: newType,
              polymorphic: false
            };

            if (_typeof(newType) === 'object') {
              untyped[tc.predicate] = {
                shapeLabel: shapeLabel,
                predicate: tc.predicate,
                newType: newType,
                references: []
              };
            }
          } else {
            predicates[tc.predicate].uses.push(shapeLabel);
            var curType = predicates[tc.predicate].commonType;

            if (_typeof(curType) === 'object' || curType === null) {
              // another use of a predicate with no commonType
              // console.warn(`${shapeLabel} ${tc.predicate}:${newType} uses untypable predicate`)
              untyped[tc.predicate].references.push({
                shapeLabel: shapeLabel,
                newType: newType
              });
            } else if (_typeof(newType) === 'object') {
              // first use of a predicate with no detectable commonType
              predicates[tc.predicate].commonType = null;
              untyped[tc.predicate] = {
                shapeLabel: shapeLabel,
                predicate: tc.predicate,
                curType: curType,
                newType: newType,
                references: []
              };
            } else if (curType === newType) {
              ; // same type again
            } else if (shapeHierarchy.parents[curType] && shapeHierarchy.parents[curType].indexOf(newType) !== -1) {
              predicates[tc.predicate].polymorphic = true; // already covered by current commonType
            } else {
              var idx = shapeHierarchy.parents[newType] ? shapeHierarchy.parents[newType].indexOf(curType) : -1;

              if (idx === -1) {
                var intersection = shapeHierarchy.parents[curType] ? shapeHierarchy.parents[curType].filter(function (lab) {
                  return -1 !== shapeHierarchy.parents[newType].indexOf(lab);
                }) : [];

                if (intersection.length === 0) {
                  untyped[tc.predicate] = {
                    shapeLabel: shapeLabel,
                    predicate: tc.predicate,
                    curType: curType,
                    newType: newType,
                    references: []
                  }; // console.warn(`${shapeLabel} ${tc.predicate} : ${newType} isn\'t related to ${curType}`)

                  predicates[tc.predicate].commonType = null;
                } else {
                  predicates[tc.predicate].commonType = intersection[0];
                  predicates[tc.predicate].polymorphic = true;
                }
              } else {
                predicates[tc.predicate].commonType = shapeHierarchy.parents[newType][idx];
                predicates[tc.predicate].polymorphic = true;
              }
            }
          }
        });
      }
    });
    return predicates;
  }), _defineProperty(_ShExUtil2, "simpleTripleConstraints", function simpleTripleConstraints(shape) {
    if (!('expression' in shape)) {
      return [];
    }

    if (shape.expression.type === 'TripleConstraint') {
      return [shape.expression];
    }

    if (shape.expression.type === 'EachOf' && !shape.expression.expressions.find(function (expr) {
      return expr.type !== 'TripleConstraint';
    })) {
      return shape.expression.expressions;
    }

    throw Error('can\'t (yet) express ' + JSON.stringify(shape));
  }), _defineProperty(_ShExUtil2, "skipDecl", function skipDecl(shapeExpr) {
    return shapeExpr.type === 'ShapeDecl' ? shapeExpr.shapeExpr : shapeExpr;
  }), _defineProperty(_ShExUtil2, "getValueType", function getValueType(valueExpr) {
    if (typeof valueExpr === 'string') {
      return valueExpr;
    }

    if (valueExpr.reference) {
      return valueExpr.reference;
    }

    if (valueExpr.nodeKind === 'iri') {
      return OWL.Thing;
    } // !! push this test to callers


    if (valueExpr.datatype) {
      return valueExpr.datatype;
    } // if (valueExpr.extends && valueExpr.extends.length === 1) { return valueExpr.extends[0] }


    return valueExpr; // throw Error('no value type for ' + JSON.stringify(valueExpr))
  }), _defineProperty(_ShExUtil2, "getDependencies", function getDependencies(schema, ret) {
    ret = ret || this.BiDiClosure();
    (schema.shapes || []).forEach(function (shape) {
      function _walkShapeExpression(shapeExpr, negated) {
        if (typeof shapeExpr === "string") {
          // ShapeRef
          ret.add(shape.id, shapeExpr);
        } else if (shapeExpr.type === "ShapeOr" || shapeExpr.type === "ShapeAnd") {
          shapeExpr.shapeExprs.forEach(function (expr) {
            _walkShapeExpression(expr, negated);
          });
        } else if (shapeExpr.type === "ShapeNot") {
          _walkShapeExpression(shapeExpr.shapeExpr, negated ^ 1); // !!! test negation

        } else if (shapeExpr.type === "Shape") {
          _walkShape(shapeExpr, negated);
        } else if (shapeExpr.type === "NodeConstraint") {// no impact on dependencies
        } else if (shapeExpr.type === "ShapeExternal") {} else throw Error("expected Shape{And,Or,Ref,External} or NodeConstraint in " + JSON.stringify(shapeExpr));
      }

      function _walkShape(shape, negated) {
        function _walkTripleExpression(tripleExpr, negated) {
          function _exprGroup(exprs, negated) {
            exprs.forEach(function (nested) {
              _walkTripleExpression(nested, negated); // ?? negation allowed?

            });
          }

          function _walkTripleConstraint(tc, negated) {
            if (tc.valueExpr) _walkShapeExpression(tc.valueExpr, negated);
            if (negated && ret.inCycle.indexOf(shape.id) !== -1) // illDefined/negatedRefCycle.err
              throw Error("Structural error: " + shape.id + " appears in negated cycle");
          }

          if (typeof tripleExpr === "string") {
            // Inclusion
            ret.add(shape.id, tripleExpr);
          } else {
            if ("id" in tripleExpr) ret.addIn(tripleExpr.id, shape.id);

            if (tripleExpr.type === "TripleConstraint") {
              _walkTripleConstraint(tripleExpr, negated);
            } else if (tripleExpr.type === "OneOf" || tripleExpr.type === "EachOf") {
              _exprGroup(tripleExpr.expressions);
            } else {
              throw Error("expected {TripleConstraint,OneOf,EachOf,Inclusion} in " + tripleExpr);
            }
          }
        }

        ["extends", "restricts"].forEach(function (attr) {
          if (shape[attr] && shape[attr].length > 0) shape[attr].forEach(function (i) {
            ret.add(shape.id, i);
          });
        });
        if (shape.expression) _walkTripleExpression(shape.expression, negated);
      }

      if (shape.type === "ShapeDecl") shape = shape.shapeExpr;

      _walkShapeExpression(shape, 0); // 0 means false for bitwise XOR

    });
    return ret;
  }), _defineProperty(_ShExUtil2, "partition", function partition(schema, includes, deps, cantFind) {
    var inputIndex = schema._index || this.index(schema);
    var outputIndex = {
      shapeExprs: new Map(),
      tripleExprs: new Map()
    };
    includes = includes instanceof Array ? includes : [includes]; // build dependency tree if not passed one

    deps = deps || this.getDependencies(schema);

    cantFind = cantFind || function (what, why) {
      throw new Error("Error: can't find shape " + (why ? why + " dependency " + what : what));
    };

    var partition = {};

    for (var _k2 in schema) {
      partition[_k2] = _k2 === "shapes" ? [] : schema[_k2];
    }

    includes.forEach(function (i) {
      if (i in outputIndex.shapeExprs) {// already got it.
      } else if (i in inputIndex.shapeExprs) {
        var adding = inputIndex.shapeExprs[i];
        partition.shapes.push(adding);
        outputIndex.shapeExprs[adding.id] = adding;
        if (i in deps.needs) deps.needs[i].forEach(function (n) {
          // Turn any needed TE into an SE.
          if (n in deps.foundIn) n = deps.foundIn[n];

          if (n in outputIndex.shapeExprs) {} else if (n in inputIndex.shapeExprs) {
            var needed = inputIndex.shapeExprs[n];
            partition.shapes.push(needed);
            outputIndex.shapeExprs[needed.id] = needed;
          } else cantFind(n, i);
        });
      } else {
        cantFind(i, "supplied");
      }
    });
    return partition;
  }), _defineProperty(_ShExUtil2, "flatten", function flatten(schema, deps, cantFind) {
    var v = this.Visitor();
    return v.visitSchema(schema);
  }), _defineProperty(_ShExUtil2, "emptySchema", function emptySchema() {
    return {
      type: "Schema"
    };
  }), _defineProperty(_ShExUtil2, "merge", function merge(left, right, overwrite, inPlace) {
    var ret = inPlace ? left : this.emptySchema();

    function mergeArray(attr) {
      Object.keys(left[attr] || {}).forEach(function (key) {
        if (!(attr in ret)) ret[attr] = {};
        ret[attr][key] = left[attr][key];
      });
      Object.keys(right[attr] || {}).forEach(function (key) {
        if (!(attr in left) || !(key in left[attr]) || overwrite) {
          if (!(attr in ret)) ret[attr] = {};
          ret[attr][key] = right[attr][key];
        }
      });
    }

    function mergeMap(attr) {
      (left[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr in ret)) ret[attr] = new Map();
        ret[attr].set(key, left[attr].get(key));
      });
      (right[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr in left) || !left[attr].has(key) || overwrite) {
          if (!(attr in ret)) ret[attr] = new Map();
          ret[attr].set(key, right[attr].get(key));
        }
      });
    } // base


    if ("_base" in left) ret._base = left._base;
    if ("_base" in right) if (!("_base" in left) || overwrite) ret._base = right._base;
    mergeArray("_prefixes");
    mergeMap("_sourceMap");
    if ("imports" in right) if (!("imports" in left) || overwrite) ret.imports = right.imports; // startActs

    if ("startActs" in left) ret.startActs = left.startActs;
    if ("startActs" in right) if (!("startActs" in left) || overwrite) ret.startActs = right.startActs; // start

    if ("start" in left) ret.start = left.start;
    if ("start" in right) if (!("start" in left) || overwrite) ret.start = right.start;
    var lindex = left._index || this.index(left); // shapes

    if (!inPlace) (left.shapes || []).forEach(function (lshape) {
      if (!("shapes" in ret)) ret.shapes = [];
      ret.shapes.push(lshape);
    });
    (right.shapes || []).forEach(function (rshape) {
      if (!("shapes" in left) || !(rshape.id in lindex.shapeExprs) || overwrite) {
        if (!("shapes" in ret)) ret.shapes = [];
        ret.shapes.push(rshape);
      }
    });
    if (left._index || right._index) ret._index = this.index(ret); // inefficient; could build above

    return ret;
  }), _defineProperty(_ShExUtil2, "absolutizeResults", function absolutizeResults(parsed, base) {
    // !! duplicate of Validation-test.js:84: const referenceResult = parseJSONFile(resultsFile...)
    function mapFunction(k, obj) {
      // resolve relative URLs in results file
      if (["shape", "reference", "node", "subject", "predicate", "object"].indexOf(k) !== -1 && ShExTerm.isIRI(obj[k])) {
        obj[k] = ShExTerm.resolveRelativeIRI(base, obj[k]);
      }
    }

    function resolveRelativeURLs(obj) {
      Object.keys(obj).forEach(function (k) {
        if (_typeof(obj[k]) === "object") {
          resolveRelativeURLs(obj[k]);
        }

        if (mapFunction) {
          mapFunction(k, obj);
        }
      });
    }

    resolveRelativeURLs(parsed);
    return parsed;
  }), _defineProperty(_ShExUtil2, "getProofGraph", function getProofGraph(res, db, dataFactory) {
    function _dive1(solns) {
      if (solns.type === "NodeConstraintTest") {} else if (solns.type === "SolutionList" || solns.type === "ShapeAndResults" || solns.type === "ExtensionResults") {
        solns.solutions.forEach(function (s) {
          if (s.solution) // no .solution for <S> {}
            _dive1(s.solution);
        });
      } else if (solns.type === "ShapeOrResults") {
        _dive1(solns.solution);
      } else if (solns.type === "ShapeTest") {
        if ("solution" in solns) _dive1(solns.solution);
      } else if (solns.type === "OneOfSolutions" || solns.type === "EachOfSolutions") {
        solns.solutions.forEach(function (s) {
          _dive1(s);
        });
      } else if (solns.type === "OneOfSolution" || solns.type === "EachOfSolution") {
        solns.expressions.forEach(function (s) {
          _dive1(s);
        });
      } else if (solns.type === "TripleConstraintSolutions") {
        solns.solutions.map(function (s) {
          if (s.type !== "TestedTriple") throw Error("unexpected result type: " + s.type);
          var s2 = s;
          if (_typeof(s2.object) === "object") s2.object = "\"" + s2.object.value.replace(/"/g, "\\\"") + "\"" + (s2.object.language ? "@" + s2.object.language : s2.object.type ? "^^" + s2.object.type : "");
          db.addQuad(ShExTerm.externalTriple(s2, dataFactory));

          if ("referenced" in s) {
            _dive1(s.referenced);
          }
        });
      } else if (solns.type === "ExtendedResults") {
        _dive1(solns.extensions);

        if ("local" in solns) _dive1(solns.local);
      } else if (solns.type === "Recursion") {} else {
        throw Error("unexpected expr type " + solns.type + " in " + JSON.stringify(solns));
      }
    }

    _dive1(res);

    return db;
  }), _defineProperty(_ShExUtil2, "validateSchema", function validateSchema(schema) {
    // obselete, but may need other validations in the future.
    var _ShExUtil = this;

    var visitor = this.Visitor();
    var currentLabel = currentExtra = null;
    var currentNegated = false;
    var dependsOn = {};
    var inTE = false;
    var oldVisitShape = visitor.visitShape;
    var negativeDeps = Hierarchy.create();
    var positiveDeps = Hierarchy.create();
    var index = schema.index || this.index(schema);

    visitor.visitShape = function (shape, label) {
      var lastExtra = currentExtra;
      currentExtra = shape.extra;
      var ret = oldVisitShape.call(visitor, shape, label);
      currentExtra = lastExtra;
      return ret;
    };

    var oldVisitShapeNot = visitor.visitShapeNot;

    visitor.visitShapeNot = function (shapeNot, label) {
      var lastNegated = currentNegated;
      currentNegated ^= true;
      var ret = oldVisitShapeNot.call(visitor, shapeNot, label);
      currentNegated = lastNegated;
      return ret;
    };

    var oldVisitTripleConstraint = visitor.visitTripleConstraint;

    visitor.visitTripleConstraint = function (expr) {
      var lastNegated = currentNegated;
      if (currentExtra && currentExtra.indexOf(expr.predicate) !== -1) currentNegated ^= true;
      inTE = true;
      var ret = oldVisitTripleConstraint.call(visitor, expr);
      inTE = false;
      currentNegated = lastNegated;
      return ret;
    };

    var oldVisitShapeRef = visitor.visitShapeRef;

    visitor.visitShapeRef = function (shapeRef) {
      if (!(shapeRef in index.shapeExprs)) throw firstError(Error("Structural error: reference to " + JSON.stringify(shapeRef) + " not found in schema shape expressions:\n" + dumpKeys(index.shapeExprs) + "."), shapeRef);
      if (!inTE && shapeRef === currentLabel) throw firstError(Error("Structural error: circular reference to " + currentLabel + "."), shapeRef);
      (currentNegated ? negativeDeps : positiveDeps).add(currentLabel, shapeRef);
      return oldVisitShapeRef.call(visitor, shapeRef);
    };

    var oldVisitInclusion = visitor.visitInclusion;

    visitor.visitInclusion = function (inclusion) {
      var refd;
      if (!(refd = index.tripleExprs[inclusion])) throw firstError(Error("Structural error: included shape " + inclusion + " not found in schema triple expressions:\n" + dumpKeys(index.tripleExprs) + "."), inclusion); // if (refd.type !== "Shape")
      //   throw Error("Structural error: " + inclusion + " is not a simple shape.");

      return oldVisitInclusion.call(visitor, inclusion);
    };

    (schema.shapes || []).forEach(function (shape) {
      currentLabel = shape.id;
      visitor.visitShapeDecl(shape, shape.id);
    });
    var circs = Object.keys(negativeDeps.children).filter(function (k) {
      return negativeDeps.children[k].filter(function (k2) {
        return k2 in negativeDeps.children && negativeDeps.children[k2].indexOf(k) !== -1 || k2 in positiveDeps.children && positiveDeps.children[k2].indexOf(k) !== -1;
      }).length > 0;
    });
    if (circs.length) throw firstError(Error("Structural error: circular negative dependencies on " + circs.join(',') + "."), circs[0]);

    function dumpKeys(obj) {
      return obj ? Object.keys(obj).map(function (u) {
        return u.substr(0, 2) === '_:' ? u : '<' + u + '>';
      }).join("\n        ") : '- none defined -';
    }

    function firstError(e, obj) {
      if ("_sourceMap" in schema) e.location = (schema._sourceMap.get(obj) || [undefined])[0];
      return e;
    }
  }), _defineProperty(_ShExUtil2, "isWellDefined", function isWellDefined(schema) {
    this.validateSchema(schema); // const deps = this.getDependencies(schema);

    return schema;
  }), _defineProperty(_ShExUtil2, "walkVal", function walkVal(val, cb) {
    var _ShExUtil = this;

    if (typeof val === "string") {
      // ShapeRef
      return null; // 1NOTRefOR1dot_pass-inOR
    } else if (val.type === "SolutionList") {
      // dependent_shape
      return val.solutions.reduce(function (ret, exp) {
        var n = _ShExUtil.walkVal(exp, cb);

        if (n) Object.keys(n).forEach(function (k) {
          if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
        });
        return ret;
      }, {});
    } else if (val.type === "NodeConstraintTest") {
      // 1iri_pass-iri
      return _ShExUtil.walkVal(val.shapeExpr, cb);
    } else if (val.type === "NodeConstraint") {
      // 1iri_pass-iri
      return null;
    } else if (val.type === "ShapeTest") {
      // 0_empty
      var vals = [];
      visitSolution(val, vals); // A ShapeTest is a sort of Solution.

      var ret = vals.length ? {
        'http://shex.io/reflex': vals
      } : {};
      if ("solution" in val) Object.assign(ret, _ShExUtil.walkVal(val.solution, cb));
      return Object.keys(ret).length ? ret : null;
    } else if (val.type === "Shape") {
      // 1NOTNOTdot_passIv1
      return null;
    } else if (val.type === "ShapeNotTest") {
      // 1NOT_vsANDvs__passIv1
      return _ShExUtil.walkVal(val.shapeExpr, cb);
    } else if (val.type === "ShapeNotResults") {
      // NOT1dotOR2dot_pass-empty
      return _ShExUtil.walkVal(val.solution, cb);
    } else if (val.type === "Failure") {
      // NOT1dotOR2dot_pass-empty
      return null; // !!TODO
    } else if (val.type === "ShapeNot") {
      // 1NOTNOTIRI_passIo1,
      return _ShExUtil.walkVal(val.shapeExpr, cb);
    } else if (val.type === "ShapeOrResults") {
      // 1dotRefOR3_passShape1
      return _ShExUtil.walkVal(val.solution, cb);
    } else if (val.type === "ShapeOr") {
      // 1NOT_literalORvs__passIo1
      return val.shapeExprs.reduce(function (ret, exp) {
        var n = _ShExUtil.walkVal(exp, cb);

        if (n) Object.keys(n).forEach(function (k) {
          if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
        });
        return ret;
      }, {});
    } else if (val.type === "ShapeAndResults" || // 1iriRef1_pass-iri
    val.type === "ExtensionResults") {
      // extends-abstract-multi-empty_pass-missingOptRef1
      return val.solutions.reduce(function (ret, exp) {
        var n = _ShExUtil.walkVal(exp, cb);

        if (n) Object.keys(n).forEach(function (k) {
          if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
        });
        return ret;
      }, {});
    } else if (val.type === "ShapeAnd") {
      // 1NOT_literalANDvs__passIv1
      return val.shapeExprs.reduce(function (ret, exp) {
        var n = _ShExUtil.walkVal(exp, cb);

        if (n) Object.keys(n).forEach(function (k) {
          if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
        });
        return ret;
      }, {});
    } else if (val.type === "ExtendedResults") {
      // extends-abstract-multi-empty_pass-missingOptRef1
      return ["extensions", "local"].reduce(function (ret, exp) {
        var n = _ShExUtil.walkVal(exp, cb);

        if (n) Object.keys(n).forEach(function (k) {
          if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
        });
        return ret;
      }, {});
    } else if (val.type === "EachOfSolutions" || val.type === "OneOfSolutions") {
      // 1dotOne2dot_pass_p1
      return val.solutions.reduce(function (ret, sln) {
        sln.expressions.forEach(function (exp) {
          var n = _ShExUtil.walkVal(exp, cb);

          if (n) Object.keys(n).forEach(function (k) {
            if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
          });
        });
        return ret;
      }, {});
    } else if (val.type === "TripleConstraintSolutions") {
      // 1dot_pass-noOthers
      if ("solutions" in val) {
        var _ret = {};
        var _vals = [];
        _ret[val.predicate] = _vals;
        val.solutions.forEach(function (sln) {
          return visitSolution(sln, _vals);
        });
        return _vals.length ? _ret : null;
      } else {
        return null;
      }
    } else if (val.type === "Recursion") {
      // 3circRefPlus1_pass-recursiveData
      return null;
    } else {
      // console.log(val);
      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }

    return val;

    function visitSolution(sln, vals) {
      var toAdd = [];

      if (chaseList(sln.referenced, toAdd)) {
        // parse 1val1IRIREF.ttl
        [].push.apply(vals, toAdd);
      } else {
        // 1dot_pass-noOthers
        var newElt = cb(sln) || {};

        if ("referenced" in sln) {
          var t = _ShExUtil.walkVal(sln.referenced, cb);

          if (t) newElt.nested = t;
        }

        if (Object.keys(newElt).length > 0) vals.push(newElt);
      }

      function chaseList(li) {
        if (!li) return false;
        if (li.node === RDF.nil) return true;

        if ("solution" in li && "solutions" in li.solution && li.solution.solutions.length === 1 && "expressions" in li.solution.solutions[0] && li.solution.solutions[0].expressions.length === 2 && "predicate" in li.solution.solutions[0].expressions[0] && li.solution.solutions[0].expressions[0].predicate === RDF.first && li.solution.solutions[0].expressions[1].predicate === RDF.rest) {
          var expressions = li.solution.solutions[0].expressions;
          var ent = expressions[0];
          var rest = expressions[1].solutions[0];
          var member = ent.solutions[0];

          var _newElt = cb(member);

          if ("referenced" in member) {
            var _t = _ShExUtil.walkVal(member.referenced, cb);

            if (_t) {
              if (_newElt) _newElt.nested = _t;else _newElt = _t;
            }
          }

          if (_newElt) vals.push(_newElt);
          return rest.object === RDF.nil ? true : chaseList(rest.referenced.type === "ShapeOrResults" // heuristic for `nil OR @<list>` idiom
          ? rest.referenced.solution : rest.referenced);
        }
      }
    }
  }), _defineProperty(_ShExUtil2, "valToValues", function valToValues(val) {
    return this.walkVal(val, function (sln) {
      return "object" in sln ? {
        ldterm: sln.object
      } : null;
    });
  }), _defineProperty(_ShExUtil2, "valToExtension", function valToExtension(val, lookfor) {
    var map = this.walkVal(val, function (sln) {
      return "extensions" in sln ? {
        extensions: sln.extensions
      } : null;
    });

    function extensions(obj) {
      var list = [];
      var crushed = {};

      function crush(elt) {
        if (crushed === null) return elt;

        if (Array.isArray(elt)) {
          crushed = null;
          return elt;
        }

        for (k in elt) {
          if (k in crushed) {
            crushed = null;
            return elt;
          }

          crushed[k] = ldify(elt[k]);
        }

        return elt;
      }

      for (var _k3 in obj) {
        if (_k3 === "extensions") {
          if (obj[_k3]) list.push(crush(ldify(obj[_k3][lookfor])));
        } else if (_k3 === "nested") {
          var nested = extensions(obj[_k3]);
          if (Array.isArray(nested)) nested.forEach(crush);else crush(nested);
          list.push(nested);
        } else {
          list.push(crush(extensions(obj[_k3])));
        }
      }

      return list.length === 1 ? list[0] : crushed ? crushed : list;
    }

    return extensions(map);
  }), _defineProperty(_ShExUtil2, "valuesToSchema", function valuesToSchema(values) {
    // console.log(JSON.stringify(values, null, "  "));
    var v = values;
    var t = values[RDF.type][0].ldterm;

    if (t === SX.Schema) {
      /* Schema { "@context":"http://www.w3.org/ns/shex.jsonld"
       *           startActs:[SemAct+]? start:(shapeExpr|labeledShapeExpr)?
       *           shapes:[labeledShapeExpr+]? }
       */
      var ret = {
        "@context": "http://www.w3.org/ns/shex.jsonld",
        type: "Schema"
      };
      if (SX.startActs in v) ret.startActs = v[SX.startActs].map(function (e) {
        var ret = {
          type: "SemAct",
          name: e.nested[SX.name][0].ldterm
        };
        if (SX.code in e.nested) ret.code = e.nested[SX.code][0].ldterm.value;
        return ret;
      });
      if (SX.imports in v) ret.imports = v[SX.imports].map(function (e) {
        return e.ldterm;
      });
      if (values[SX.start]) ret.start = extend({
        id: values[SX.start][0].ldterm
      }, shapeExpr(values[SX.start][0].nested));
      var shapes = values[SX.shapes];

      if (shapes) {
        ret.shapes = shapes.map(function (v) {
          // @@ console.log(v.nested);
          var t = v.nested[RDF.type][0].ldterm;
          var obj = t === SX.ShapeDecl ? {
            type: SX.ShapeDecl,
            "abstract": !!v.nested[SX["abstract"]][0].ldterm.value,
            shapeExpr: shapeExpr(v.nested[SX.shapeExpr][0].nested)
          } : shapeExpr(v.nested);
          return extend({
            id: v.ldterm
          }, obj);
        });
      } // console.log(ret);


      return ret;
    } else {
      throw Error("unknown schema type in " + JSON.stringify(values));
    }

    function findType(v, elts, f) {
      var t = v[RDF.type][0].ldterm.substr(SX._namespace.length);
      var elt = elts[t];
      if (!elt) return Missed;

      if (elt.nary) {
        var _ret2 = {
          type: t
        };
        _ret2[elt.prop] = v[SX[elt.prop]].map(function (e) {
          return valueOf(e);
        });
        return _ret2;
      } else {
        var _ret3 = {
          type: t
        };

        if (elt.prop) {
          _ret3[elt.prop] = valueOf(v[SX[elt.prop]][0]);
        }

        return _ret3;
      }

      function valueOf(x) {
        return elt.expr && "nested" in x ? extend({
          id: x.ldterm
        }, f(x.nested)) : x.ldterm;
      }
    }

    function shapeExpr(v) {
      // shapeExpr = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeRef | ShapeExternal;
      var elts = {
        "ShapeAnd": {
          nary: true,
          expr: true,
          prop: "shapeExprs"
        },
        "ShapeOr": {
          nary: true,
          expr: true,
          prop: "shapeExprs"
        },
        "ShapeNot": {
          nary: false,
          expr: true,
          prop: "shapeExpr"
        },
        "ShapeRef": {
          nary: false,
          expr: false,
          prop: "reference"
        },
        "ShapeExternal": {
          nary: false,
          expr: false,
          prop: null
        }
      };
      var ret = findType(v, elts, shapeExpr);
      if (ret !== Missed) return ret;
      var t = v[RDF.type][0].ldterm;

      if (t === SX.ShapeDecl) {
        var _ret4 = {
          type: "ShapeDecl"
        };
        ["abstract"].forEach(function (a) {
          if (SX[a] in v) _ret4[a] = !!v[SX[a]][0].ldterm.value;
        });

        if (SX.shapeExpr in v) {
          _ret4.shapeExpr = "nested" in v[SX.shapeExpr][0] ? extend({
            id: v[SX.shapeExpr][0].ldterm
          }, shapeExpr(v[SX.shapeExpr][0].nested)) : v[SX.shapeExpr][0].ldterm;
        }

        return _ret4;
      } else if (t === SX.Shape) {
        ret = {
          type: "Shape"
        };
        ["closed"].forEach(function (a) {
          if (SX[a] in v) ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        ["extra", "extends", "restricts"].forEach(function (a) {
          if (SX[a] in v) ret[a] = v[SX[a]].map(function (e) {
            return e.ldterm;
          });
        });

        if (SX.expression in v) {
          ret.expression = "nested" in v[SX.expression][0] ? extend({
            id: v[SX.expression][0].ldterm
          }, tripleExpr(v[SX.expression][0].nested)) : v[SX.expression][0].ldterm;
        }

        if (SX.annotation in v) ret.annotations = v[SX.annotation].map(function (e) {
          return {
            type: "Annotation",
            predicate: e.nested[SX.predicate][0].ldterm,
            object: e.nested[SX.object][0].ldterm
          };
        });
        if (SX.semActs in v) ret.semActs = v[SX.semActs].map(function (e) {
          var ret = {
            type: "SemAct",
            name: e.nested[SX.name][0].ldterm
          };
          if (SX.code in e.nested) ret.code = e.nested[SX.code][0].ldterm.value;
          return ret;
        });
        return ret;
      } else if (t === SX.NodeConstraint) {
        var _ret5 = {
          type: "NodeConstraint"
        };
        if (SX.values in v) _ret5.values = v[SX.values].map(function (v1) {
          return objectValue(v1);
        });
        if (SX.nodeKind in v) _ret5.nodeKind = v[SX.nodeKind][0].ldterm.substr(SX._namespace.length);
        ["length", "minlength", "maxlength", "mininclusive", "maxinclusive", "minexclusive", "maxexclusive", "totaldigits", "fractiondigits"].forEach(function (a) {
          if (SX[a] in v) _ret5[a] = parseFloat(v[SX[a]][0].ldterm.value);
        });
        if (SX.pattern in v) _ret5.pattern = v[SX.pattern][0].ldterm.value;
        if (SX.flags in v) _ret5.flags = v[SX.flags][0].ldterm.value;
        if (SX.datatype in v) _ret5.datatype = v[SX.datatype][0].ldterm;
        return _ret5;
      } else {
        throw Error("unknown shapeExpr type in " + JSON.stringify(v));
      }
    }

    function objectValue(v, expectString) {
      if ("nested" in v) {
        var _t2 = v.nested[RDF.type][0].ldterm;

        if ([SX.IriStem, SX.LiteralStem, SX.LanguageStem].indexOf(_t2) !== -1) {
          var ldterm = v.nested[SX.stem][0].ldterm.value;
          return {
            type: _t2.substr(SX._namespace.length),
            stem: ldterm
          };
        } else if ([SX.Language].indexOf(_t2) !== -1) {
          return {
            type: "Language",
            languageTag: v.nested[SX.languageTag][0].ldterm.value
          };
        } else if ([SX.IriStemRange, SX.LiteralStemRange, SX.LanguageStemRange].indexOf(_t2) !== -1) {
          var st = v.nested[SX.stem][0];
          var stem = st;

          if (_typeof(st) === "object") {
            if (_typeof(st.ldterm) === "object") {
              stem = st.ldterm;
            } else if (st.ldterm.startsWith("_:")) {
              stem = {
                type: "Wildcard"
              };
            }
          }

          var _ret6 = {
            type: _t2.substr(SX._namespace.length),
            stem: stem.type !== "Wildcard" ? stem.value : stem
          };

          if (SX.exclusion in v.nested) {
            // IriStemRange:
            // * [{"ldterm":"http://a.example/v1"},{"ldterm":"http://a.example/v3"}] <-- no value
            // * [{"ldterm":"_:b836","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v1"}}]}},
            //    {"ldterm":"_:b838","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v3"}}]}}]
            // LiteralStemRange:
            // * [{"ldterm":{"value":"v1"}},{"ldterm":{"value":"v3"}}]
            // * [{"ldterm":"_:b866","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v1"}}]}},
            //    {"ldterm":"_:b868","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v3"}}]}}]
            // LanguageStemRange:
            // * [{"ldterm":{"value":"fr-be"}},{"ldterm":{"value":"fr-ch"}}]
            // * [{"ldterm":"_:b851","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-be"}}]}},
            //    {"ldterm":"_:b853","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-ch"}}]}}]
            _ret6.exclusions = v.nested[SX.exclusion].map(function (v1) {
              return objectValue(v1, _t2 !== SX.IriStemRange);
            });
          }

          return _ret6;
        } else {
          throw Error("unknown objectValue type in " + JSON.stringify(v));
        }
      } else {
        return expectString ? v.ldterm.value : v.ldterm;
      }
    }

    function tripleExpr(v) {
      // tripleExpr = EachOf | OneOf | TripleConstraint | Inclusion ;
      var elts = {
        "EachOf": {
          nary: true,
          expr: true,
          prop: "expressions"
        },
        "OneOf": {
          nary: true,
          expr: true,
          prop: "expressions"
        },
        "Inclusion": {
          nary: false,
          expr: false,
          prop: "include"
        }
      };
      var ret = findType(v, elts, tripleExpr);

      if (ret !== Missed) {
        minMaxAnnotSemActs(v, ret);
        return ret;
      }

      var t = v[RDF.type][0].ldterm;

      if (t === SX.TripleConstraint) {
        var _ret7 = {
          type: "TripleConstraint",
          predicate: v[SX.predicate][0].ldterm
        };
        ["inverse"].forEach(function (a) {
          if (SX[a] in v) _ret7[a] = !!v[SX[a]][0].ldterm.value;
        });
        if (SX.valueExpr in v) _ret7.valueExpr = extend({
          id: v[SX.valueExpr][0].ldterm
        }, "nested" in v[SX.valueExpr][0] ? shapeExpr(v[SX.valueExpr][0].nested) : {});
        minMaxAnnotSemActs(v, _ret7);
        return _ret7;
      } else {
        throw Error("unknown tripleExpr type in " + JSON.stringify(v));
      }
    }

    function minMaxAnnotSemActs(v, ret) {
      if (SX.min in v) ret.min = parseInt(v[SX.min][0].ldterm.value);

      if (SX.max in v) {
        ret.max = parseInt(v[SX.max][0].ldterm.value);
        if (isNaN(ret.max)) ret.max = UNBOUNDED;
      }

      if (SX.annotation in v) ret.annotations = v[SX.annotation].map(function (e) {
        return {
          type: "Annotation",
          predicate: e.nested[SX.predicate][0].ldterm,
          object: e.nested[SX.object][0].ldterm
        };
      });
      if (SX.semActs in v) ret.semActs = v[SX.semActs].map(function (e) {
        var ret = {
          type: "SemAct",
          name: e.nested[SX.name][0].ldterm
        };
        if (SX.code in e.nested) ret.code = e.nested[SX.code][0].ldterm.value;
        return ret;
      });
      return ret;
    }
  }), _defineProperty(_ShExUtil2, "simpleToShapeMap", function simpleToShapeMap(x) {
    return Object.keys(x).reduce(function (ret, k) {
      x[k].forEach(function (s) {
        ret.push({
          node: k,
          shape: s
        });
      });
      return ret;
    }, []);
  }), _defineProperty(_ShExUtil2, "absolutizeShapeMap", function absolutizeShapeMap(parsed, base) {
    return parsed.map(function (elt) {
      return Object.assign(elt, {
        node: ShExTerm.resolveRelativeIRI(base, elt.node),
        shape: ShExTerm.resolveRelativeIRI(base, elt.shape)
      });
    });
  }), _defineProperty(_ShExUtil2, "errsToSimple", function errsToSimple(val) {
    var _ShExUtil = this;

    if (val.type === "FailureList") {
      return val.errors.reduce(function (ret, e) {
        return ret.concat(_ShExUtil.errsToSimple(e));
      }, []);
    } else if (val.type === "Failure") {
      return ["validating " + val.node + " as " + val.shape + ":"].concat(errorList(val.errors).reduce(function (ret, e) {
        var nested = _ShExUtil.errsToSimple(e).map(function (s) {
          return "  " + s;
        });

        return ret.length > 0 ? ret.concat(["  OR"]).concat(nested) : nested.map(function (s) {
          return "  " + s;
        });
      }, []));
    } else if (val.type === "TypeMismatch") {
      var _nested = Array.isArray(val.errors) ? val.errors.reduce(function (ret, e) {
        return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(function (s) {
          return "  " + s;
        }));
      }, []) : "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));

      return ["validating " + n3ify(val.triple.object) + ":"].concat(_nested);
    } else if (val.type === "RestrictionError") {
      var nested = val.errors.constructor === Array ? val.errors.reduce(function (ret, e) {
        return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(function (s) {
          return "  " + s;
        }));
      }, []) : "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["validating restrictions on " + n3ify(val.focus) + ":"].concat(nested);
    } else if (val.type === "ShapeAndFailure") {
      return Array.isArray(val.errors) ? val.errors.reduce(function (ret, e) {
        return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(function (s) {
          return "  " + s;
        }));
      }, []) : "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    } else if (val.type === "ShapeOrFailure") {
      return Array.isArray(val.errors) ? val.errors.reduce(function (ret, e) {
        return ret.concat(" OR " + (typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)));
      }, []) : " OR " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    } else if (val.type === "ShapeNotFailure") {
      return ["Node " + val.errors.node + " expected to NOT pass " + val.errors.shape];
    } else if (val.type === "ExcessTripleViolation") {
      return ["validating " + n3ify(val.triple.object) + ": exceeds cardinality"];
    } else if (val.type === "ClosedShapeViolation") {
      return ["Unexpected triple(s): {"].concat(val.unexpectedTriples.map(function (t) {
        return "  " + t.subject + " " + t.predicate + " " + n3ify(t.object) + " .";
      })).concat(["}"]);
    } else if (val.type === "NodeConstraintViolation") {
      var w = __webpack_require__(51397)();

      w._write(w._writeNodeConstraint(val.shapeExpr).join(""));

      var txt;
      w.end(function (err, res) {
        txt = res;
      });
      return ["NodeConstraintError: expected to match " + txt];
    } else if (val.type === "MissingProperty") {
      return ["Missing property: " + val.property];
    } else if (val.type === "NegatedProperty") {
      return ["Unexpected property: " + val.property];
    } else if (val.type === "AbstractShapeFailure") {
      return ["Abstract Shape: " + val.shape];
    } else if (Array.isArray(val)) {
      return val.reduce(function (ret, e) {
        var nested = _ShExUtil.errsToSimple(e).map(function (s) {
          return "  " + s;
        });

        return ret.length ? ret.concat(["AND"]).concat(nested) : nested;
      }, []);
    } else if (val.type === "SemActFailure") {
      var _nested2 = Array.isArray(val.errors) ? val.errors.reduce(function (ret, e) {
        return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(function (s) {
          return "  " + s;
        }));
      }, []) : "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));

      return ["rejected by semantic action:"].concat(_nested2);
    } else if (val.type === "SemActViolation") {
      return [val.message];
    } else if (val.type === "BooleanSemActFailure") {
      return ["Failed evaluating " + val.code + " on context " + JSON.stringify(val.ctx)];
    } else {
      debugger; // console.log(val);

      throw Error("unknown shapeExpression type \"" + val.type + "\" in " + JSON.stringify(val));
    }

    function errorList(errors) {
      return errors.reduce(function (acc, e) {
        var attrs = Object.keys(e);
        return acc.concat(attrs.length === 1 && attrs[0] === "errors" ? errorList(e.errors) : e);
      }, []);
    }
  }), _defineProperty(_ShExUtil2, "resolveRelativeIRI", ShExTerm.resolveRelativeIRI), _defineProperty(_ShExUtil2, "resolvePrefixedIRI", function resolvePrefixedIRI(prefixedIri, prefixes) {
    var colon = prefixedIri.indexOf(":");
    if (colon === -1) return null;
    var prefix = prefixes[prefixedIri.substr(0, colon)];
    return prefix === undefined ? null : prefix + prefixedIri.substr(colon + 1);
  }), _defineProperty(_ShExUtil2, "parsePassedNode", function parsePassedNode(passedValue, meta, deflt, known, reportUnknown) {
    if (passedValue === undefined || passedValue.length === 0) return known && known(meta.base) ? meta.base : deflt ? deflt() : this.NotSupplied;
    if (passedValue[0] === "_" && passedValue[1] === ":") return passedValue;

    if (passedValue[0] === "\"") {
      var m = passedValue.match(/^"((?:[^"\\]|\\")*)"(?:@(.+)|\^\^(?:<(.*)>|([^:]*):(.*)))?$/);
      if (!m) throw Error("malformed literal: " + passedValue);
      var lex = m[1],
          lang = m[2],
          rel = m[3],
          pre = m[4],
          local = m[5]; // Turn the literal into an N3.js atom.

      var quoted = "\"" + lex + "\"";
      if (lang !== undefined) return quoted + "@" + lang;

      if (pre !== undefined) {
        if (!(pre in meta.prefixes)) throw Error("error parsing node " + passedValue + " no prefix for \"" + pre + "\"");
        return quoted + "^^" + meta.prefixes[pre] + local;
      }

      if (rel !== undefined) return quoted + "^^" + ShExTerm.resolveRelativeIRI(meta.base, rel);
      return quoted;
    }

    if (!meta) return known(passedValue) ? passedValue : this.UnknownIRI;
    var relIRI = passedValue[0] === "<" && passedValue[passedValue.length - 1] === ">";
    if (relIRI) passedValue = passedValue.substr(1, passedValue.length - 2);
    var t = ShExTerm.resolveRelativeIRI(meta.base || "", passedValue); // fall back to base-less mode

    if (known(t)) return t;

    if (!relIRI) {
      var t2 = this.resolvePrefixedIRI(passedValue, meta.prefixes);
      if (t2 !== null && known(t2)) return t2;
    }

    return reportUnknown ? reportUnknown(t) : this.UnknownIRI;
  }), _defineProperty(_ShExUtil2, "executeQueryPromise", function executeQueryPromise(query, endpoint) {
    var _this = this;

    var rows;
    var queryURL = endpoint + "?query=" + encodeURIComponent(query);
    return fetch(queryURL, {
      headers: {
        'Accept': 'application/sparql-results+json'
      }
    }).then(function (resp) {
      return resp.json();
    }).then(function (jsonObject) {
      return _this.parseSparqlJsonResults(jsonObject);
    }); // .then(x => new Promise(resolve => setTimeout(() => resolve(x), 1000)));
  }), _defineProperty(_ShExUtil2, "executeQuery", function executeQuery(query, endpoint) {
    var rows;
    var queryURL = endpoint + "?query=" + encodeURIComponent(query);
    var xhr = new XMLHttpRequest();
    xhr.open("GET", queryURL, false);
    xhr.setRequestHeader('Accept', 'application/sparql-results+json');
    xhr.send(); // const selectsBlock = query.match(/SELECT\s*(.*?)\s*{/)[1];
    // const selects = selectsBlock.match(/\?[^\s?]+/g);

    var jsonObject = JSON.parse(xhr.responseText);
    return this.parseSparqlJsonResults(jsonObject);
  }), _defineProperty(_ShExUtil2, "parseSparqlJsonResults", function parseSparqlJsonResults(jsonObject) {
    var selects = jsonObject.head.vars;
    return jsonObject.results.bindings.map(function (row) {
      // spec: https://www.w3.org/TR/rdf-sparql-json-res/#variable-binding-results
      return selects.map(function (sel) {
        var elt = row[sel];

        switch (elt.type) {
          case "uri":
            return elt.value;

          case "bnode":
            return "_:" + elt.value;

          case "literal":
            return "\"" + elt.value.replace(/"/g, '\\""') + "\"" + ("xml:lang" in elt ? "@" + elt["xml:lang"] : "") + ("datatype" in elt ? "^^" + elt.datatype : "");

          case "typed-literal":
            // encountered in wikidata query service
            return "\"" + elt.value.replace(/"/g, '\\""') + "\"" + ("^^" + elt.datatype);

          default:
            throw "unknown XML results type: " + elt.type;
        }
      });
    });
  }), _defineProperty(_ShExUtil2, "rdfjsDB", function rdfjsDB(db
  /*:typeof N3Store*/
  , queryTracker
  /*:QueryTracker*/
  ) {
    function getSubjects() {
      return db.getSubjects().map(ShExTerm.internalTerm);
    }

    function getPredicates() {
      return db.getPredicates().map(ShExTerm.internalTerm);
    }

    function getObjects() {
      return db.getObjects().map(ShExTerm.internalTerm);
    }

    function getQuads()
    /*: Quad[]*/
    {
      return db.getQuads.apply(db, arguments).map(ShExTerm.internalTriple);
    }

    function getNeighborhood(point
    /*: string*/
    , shapeLabel
    /*: string*/

    /*, shape */
    ) {
      // I'm guessing a local DB doesn't benefit from shape optimization.
      var startTime;

      if (queryTracker) {
        startTime = new Date();
        queryTracker.start(false, point, shapeLabel);
      }

      var outgoing
      /*: Quad[]*/
      = db.getQuads(point, null, null, null).map(ShExTerm.internalTriple);

      if (queryTracker) {
        var time = new Date();
        queryTracker.end(outgoing, time.valueOf() - startTime.valueOf());
        startTime = time;
      }

      if (queryTracker) {
        queryTracker.start(true, point, shapeLabel);
      }

      var incoming
      /*: Quad[]*/
      = db.getQuads(null, null, point, null).map(ShExTerm.internalTriple);

      if (queryTracker) {
        queryTracker.end(incoming, new Date().valueOf() - startTime.valueOf());
      }

      return {
        outgoing: outgoing,
        incoming: incoming
      };
    }

    return {
      // size: db.size,
      getNeighborhood: getNeighborhood,
      getSubjects: getSubjects,
      getPredicates: getPredicates,
      getObjects: getObjects,
      getQuads: getQuads,

      get size() {
        return db.size;
      } // getQuads: function (s, p, o, graph, shapeLabel) {
      //   // console.log(Error(s + p + o).stack)
      //   if (queryTracker)
      //     queryTracker.start(!!s, s ? s : o, shapeLabel);
      //   const quads = db.getQuads(s, p, o, graph)
      //   if (queryTracker)
      //     queryTracker.end(quads, new Date() - startTime);
      //   return quads;
      // }


    };
  }), _defineProperty(_ShExUtil2, "makeTriplesDB", function makeTriplesDB(queryTracker) {
    var _ShExUtil = this;

    var incoming = [];
    var outgoing = [];

    function getTriplesByIRI(s, p, o, g) {
      return incoming.concat(outgoing).filter(function (t) {
        return (!s || s === t.subject) && (!p || p === t.predicate) && (!s || s === t.object);
      });
    }

    function getNeighborhood(point, shapeLabel, shape) {
      return {
        outgoing: outgoing,
        incoming: incoming
      };
    }

    return {
      getNeighborhood: getNeighborhood,
      getTriplesByIRI: getTriplesByIRI,
      getSubjects: function getSubjects() {
        return ["!Triples DB can't index subjects"];
      },
      getPredicates: function getPredicates() {
        return ["!Triples DB can't index predicates"];
      },
      getObjects: function getObjects() {
        return ["!Triples DB can't index objects"];
      },

      get size() {
        return undefined;
      },

      addIncomingTriples: function addIncomingTriples(tz) {
        Array.prototype.push.apply(incoming, tz);
      },
      addOutgoingTriples: function addOutgoingTriples(tz) {
        Array.prototype.push.apply(outgoing, tz);
      }
    };
  }), _defineProperty(_ShExUtil2, "NotSupplied", "-- not supplied --"), _defineProperty(_ShExUtil2, "UnknownIRI", "-- not found --"), _defineProperty(_ShExUtil2, "unescapeText", function unescapeText(string, replacements) {
    var regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;

    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;

        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance

          return String.fromCharCode(charCode);
        } else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance

          if (charCode < 0xFFFF) return String.fromCharCode(charCode);
          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        } else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
          return replacement;
        }
      });
      return string;
    } catch (error) {
      console.warn(error);
      return '';
    }
  }), _ShExUtil2);

  function n3ify(ldterm) {
    if (_typeof(ldterm) !== "object") return ldterm;
    var ret = "\"" + ldterm.value + "\"";
    if ("language" in ldterm) return ret + "@" + ldterm.language;
    if ("type" in ldterm) return ret + "^^" + ldterm.type;
    return ret;
  } // Add the ShExUtil functions to the given object or its prototype


  function AddShExUtil(parent, toPrototype) {
    for (var name in ShExUtil) {
      if (!toPrototype) parent[name] = ShExUtil[name];else parent.prototype[name] = ApplyToThis(ShExUtil[name]);
    }

    return parent;
  } // Returns a function that applies `f` to the `this` object


  function ApplyToThis(f) {
    return function (a) {
      return f(this, a);
    };
  }

  return AddShExUtil(AddShExUtil);
}();

if (true) module.exports = ShExUtilCjsModule; // node environment

/***/ }),

/***/ 6748:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* ShExValidator - javascript module to validate a graph with respect to Shape Expressions
 *
 * Status: 1/2 tested, no known bugs.
 *
 * TODO:
 *   constraint violation reporting.
 */
var ShExValidatorCjsModule = function () {
  var UNBOUNDED = -1; // interface constants

  var Start = {
    term: "START"
  };
  var InterfaceOptions = {
    "coverage": {
      "firstError": "fail on first error (usually used with eval-simple-1err)",
      "exhaustive": "find as many errors as possible (usually used with eval-threaded-nerr)"
    }
  };
  var VERBOSE = false; // "VERBOSE" in process.env;
  // **ShExValidator** provides ShEx utility functions

  var ProgramFlowError = {
    type: "ProgramFlowError",
    errors: [{
      type: "UntrackedError"
    }]
  };

  var ShExTerm = __webpack_require__(24102);

  var ShExVisitor = __webpack_require__(96061);

  var ShExUtil = __webpack_require__(68779);

  var Hierarchy = __webpack_require__(90802);

  function getLexicalValue(term) {
    return ShExTerm.isIRI(term) ? term : ShExTerm.isLiteral(term) ? ShExTerm.getLiteralValue(term) : term.substr(2); // bnodes start with "_:"
  }

  var XSD = "http://www.w3.org/2001/XMLSchema#";
  var integerDatatypes = [XSD + "integer", XSD + "nonPositiveInteger", XSD + "negativeInteger", XSD + "long", XSD + "int", XSD + "short", XSD + "byte", XSD + "nonNegativeInteger", XSD + "unsignedLong", XSD + "unsignedInt", XSD + "unsignedShort", XSD + "unsignedByte", XSD + "positiveInteger"];
  var decimalDatatypes = [XSD + "decimal"].concat(integerDatatypes);
  var numericDatatypes = [XSD + "float", XSD + "double"].concat(decimalDatatypes);
  var numericParsers = {};

  numericParsers[XSD + "integer"] = function (label, parseError) {
    if (!label.match(/^[+-]?[0-9]+$/)) {
      parseError("illegal integer value '" + label + "'");
    }

    return parseInt(label);
  };

  numericParsers[XSD + "decimal"] = function (label, parseError) {
    if (!label.match(/^[+-]?(?:[0-9]*\.[0-9]+|[0-9]+)$/)) {
      // XSD has no pattern for decimal?
      parseError("illegal decimal value '" + label + "'");
    }

    return parseFloat(label);
  };

  var DECIMAL_REGEX = /^[+\-]?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[eE][+\-]?[0-9]+)?$/;

  numericParsers[XSD + "float"] = function (label, parseError) {
    if (label === "NaN") return NaN;
    if (label === "INF") return Infinity;
    if (label === "-INF") return -Infinity;

    if (!label.match(DECIMAL_REGEX)) {
      // XSD has no pattern for float?
      parseError("illegal float value '" + label + "'");
    }

    return parseFloat(label);
  };

  numericParsers[XSD + "double"] = function (label, parseError) {
    if (label === "NaN") return NaN;
    if (label === "INF") return Infinity;
    if (label === "-INF") return -Infinity;

    if (!label.match(DECIMAL_REGEX)) {
      parseError("illegal double value '" + label + "'");
    }

    return Number(label);
  };

  function testRange(value, datatype, parseError) {
    var ranges = {
      //    integer            -1 0 1 +1 | "" -1.0 +1.0 1e0 NaN INF
      //    decimal            -1 0 1 +1 -1.0 +1.0 | "" 1e0 NaN INF
      //    float              -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | "" +INF
      //    double             -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | "" +INF
      //    nonPositiveInteger -1 0 +0 -0 | 1 +1 1a a1
      //    negativeInteger    -1 | 0 +0 -0 1
      //    long               -1 0 1 +1 |
      //    int                -1 0 1 +1 |
      //    short              -32768 0 32767 | -32769 32768
      //    byte               -128 0 127 | "" -129 128
      //    nonNegativeInteger 0 -0 +0 1 +1 | -1
      //    unsignedLong       0 1 | -1
      //    unsignedInt        0 1 | -1
      //    unsignedShort      0 65535 | -1 65536
      //    unsignedByte       0 255 | -1 256
      //    positiveInteger    1 | -1 0
      //    string             "" "a" "0"
      //    boolean            true false 0 1 | "" TRUE FALSE tRuE fAlSe -1 2 10 01
      //    dateTime           "2012-01-02T12:34:56.78Z" | "" "2012-01-02T" "2012-01-02"
      integer: {
        min: -Infinity,
        max: Infinity
      },
      decimal: {
        min: -Infinity,
        max: Infinity
      },
      "float": {
        min: -Infinity,
        max: Infinity
      },
      "double": {
        min: -Infinity,
        max: Infinity
      },
      nonPositiveInteger: {
        min: -Infinity,
        max: 0
      },
      negativeInteger: {
        min: -Infinity,
        max: -1
      },
      "long": {
        min: -9223372036854775808,
        max: 9223372036854775807
      },
      "int": {
        min: -2147483648,
        max: 2147483647
      },
      "short": {
        min: -32768,
        max: 32767
      },
      "byte": {
        min: -128,
        max: 127
      },
      nonNegativeInteger: {
        min: 0,
        max: Infinity
      },
      unsignedLong: {
        min: 0,
        max: 18446744073709551615
      },
      unsignedInt: {
        min: 0,
        max: 4294967295
      },
      unsignedShort: {
        min: 0,
        max: 65535
      },
      unsignedByte: {
        min: 0,
        max: 255
      },
      positiveInteger: {
        min: 1,
        max: Infinity
      }
    };
    var parms = ranges[datatype.substr(XSD.length)];
    if (!parms) throw Error("unexpected datatype: " + datatype);

    if (value < parms.min) {
      parseError("\"" + value + "\"^^<" + datatype + "> is less than the min:", parms.min);
    } else if (value > parms.max) {
      parseError("\"" + value + "\"^^<" + datatype + "> is greater than the max:", parms.min);
    }
  }

  ;
  /*
  function intSubType (spec, label, parseError) {
    const ret = numericParsers[XSD + "integer"](label, parseError);
    if ("min" in spec && ret < spec.min)
      parseError("illegal " + XSD + spec.type + " value '" + label + "' should not be < " + spec.min);
    if ("max" in spec && ret > spec.max)
      parseError("illegal " + XSD + spec.type + " value '" + label + "' should not be > " + spec.max);
    return ret;
  }
  [{type: "nonPositiveInteger", max: 0},
   {type: "negativeInteger", max: -1},
   {type: "long", min: -9223372036854775808, max: 9223372036854775807}, // beyond IEEE double
   {type: "int", min: -2147483648, max: 2147483647},
   {type: "short", min: -32768, max: 32767},
   {type: "byte", min: -128, max: 127},
   {type: "nonNegativeInteger", min: 0},
   {type: "unsignedLong", min: 0, max: 18446744073709551615},
   {type: "unsignedInt", min: 0, max: 4294967295},
   {type: "unsignedShort", min: 0, max: 65535},
   {type: "unsignedByte", min: 0, max: 255},
   {type: "positiveInteger", min: 1}].forEach(function (i) {
     numericParsers[XSD + i.type ] = function (label, parseError) {
       return intSubType(i, label, parseError);
     };
   });
  */

  var stringTests = {
    length: function length(v, l) {
      return v.length === l;
    },
    minlength: function minlength(v, l) {
      return v.length >= l;
    },
    maxlength: function maxlength(v, l) {
      return v.length <= l;
    }
  };
  var numericValueTests = {
    mininclusive: function mininclusive(n, m) {
      return n >= m;
    },
    minexclusive: function minexclusive(n, m) {
      return n > m;
    },
    maxinclusive: function maxinclusive(n, m) {
      return n <= m;
    },
    maxexclusive: function maxexclusive(n, m) {
      return n < m;
    }
  };
  var decimalLexicalTests = {
    totaldigits: function totaldigits(v, d) {
      var m = v.match(/[0-9]/g);
      return m && m.length <= d;
    },
    fractiondigits: function fractiondigits(v, d) {
      var m = v.match(/^[+-]?[0-9]*\.?([0-9]*)$/);
      return m && m[1].length <= d;
    }
  };

  function ldify(term) {
    if (term[0] !== "\"") return term;
    var ret = {
      value: ShExTerm.getLiteralValue(term)
    };
    var dt = ShExTerm.getLiteralType(term);
    if (dt && dt !== "http://www.w3.org/2001/XMLSchema#string" && dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") ret.type = dt;
    var lang = ShExTerm.getLiteralLanguage(term);
    if (lang) ret.language = lang;
    return ret;
  }

  function isTerm(t) {
    return _typeof(t) !== "object" || "value" in t && Object.keys(t).reduce(function (r, k) {
      return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
    }, true);
  }
  /* ShExValidator_constructor - construct an object for validating a schema.
   *
   * schema: a structure produced by a ShEx parser or equivalent.
   * options: object with controls for
   *   lax(true): boolean: whine about missing types in schema.
   *   diagnose(false): boolean: makde validate return a structure with errors.
   */


  function ShExValidator_constructor(schema, db, options) {
    if (!(this instanceof ShExValidator_constructor)) return new ShExValidator_constructor(schema, db, options);
    var index = schema._index || ShExVisitor.index(schema);
    this.type = "ShExValidator";
    options = options || {};
    this.options = options;
    this.options.coverage = this.options.coverage || "exhaustive";
    if (!("noCache" in options && options.noCache)) this.known = {};

    var _ShExValidator = this;

    this.schema = schema;
    this._expect = this.options.lax ? noop : expect; // report errors on missing types.

    this._optimize = {}; // optimizations:
    // hasRepeatedGroups: whether there are patterns like (:p1 ., :p2 .)*

    this.reset = function () {}; // included in case we need it later.
    // const regexModule = this.options.regexModule || require("@shexjs/eval-simple-1err");


    var regexModule = this.options.regexModule || __webpack_require__(72461);
    /* indexTripleConstraints - compile regular expression and index triple constraints
     */


    this.indexTripleConstraints = function (expression) {
      // list of triple constraints from (:p1 ., (:p2 . | :p3 .))
      var tripleConstraints = [];
      if (expression) indexTripleConstraints_dive(expression);
      return tripleConstraints;

      function indexTripleConstraints_dive(expr) {
        if (typeof expr === "string") // Inclusion
          return indexTripleConstraints_dive(index.tripleExprs[expr]);else if (expr.type === "TripleConstraint") {
          tripleConstraints.push(expr);
          return [tripleConstraints.length - 1]; // index of expr
        } else if (expr.type === "OneOf" || expr.type === "EachOf") return expr.expressions.reduce(function (acc, nested) {
          return acc.concat(indexTripleConstraints_dive(nested));
        }, []);else return runtimeError("unexpected expr type: " + expr.type);
      }

      ;
    };
    /* emptyTracker - a tracker that does nothing
     */


    this.emptyTracker = function () {
      var noop = function noop(x) {
        return x;
      };

      return {
        recurse: noop,
        known: noop,
        enter: function enter(point, label) {
          ++this.depth;
        },
        exit: function exit(point, label, ret) {
          --this.depth;
        },
        depth: 0
      };
    };
    /* validate - test point in db against the schema for labelOrShape
     * depth: level of recurssion; for logging.
     */


    this.validate = function (point, label, tracker, seen, subGraph) {
      var _this = this;

      // default to schema's start shape
      if (_typeof(point) === "object" && "termType" in point) {
        point = ShExTerm.internalTerm(point);
      }

      if (_typeof(point) === "object") {
        var shapeMap = point;

        if (this.options.results === "api") {
          return shapeMap.map(function (pair) {
            var time = new Date();

            var res = _this.validate(pair.node, pair.shape, label, tracker); // really tracker and seen


            time = new Date() - time;
            return {
              node: pair.node,
              shape: pair.shape,
              status: "errors" in res ? "nonconformant" : "conformant",
              appinfo: res,
              elapsed: time
            };
          });
        }

        var results = shapeMap.reduce(function (ret, pair) {
          var res = _this.validate(pair.node, pair.shape, label, tracker, subGraph); // really tracker and seen


          return "errors" in res ? {
            passes: ret.passes,
            failures: ret.failures.concat(res)
          } : {
            passes: ret.passes.concat(res),
            failures: ret.failures
          };
        }, {
          passes: [],
          failures: []
        });

        if (false) { var _ret, _add; }

        if (results.failures.length > 0) {
          return results.failures.length !== 1 ? {
            type: "FailureList",
            errors: results.failures
          } : results.failures[0];
        } else {
          return results.passes.length !== 1 ? {
            type: "SolutionList",
            solutions: results.passes
          } : results.passes[0];
        }
      }

      var outside = tracker === undefined; // logging stuff

      if (!tracker) tracker = this.emptyTracker();

      if (!label || label === Start) {
        if (!schema.start) runtimeError("start production not defined");
      }

      var shape = null;

      if (label == Start) {
        shape = schema.start;
      } else if (!("shapes" in this.schema) || this.schema.shapes.length === 0) {
        runtimeError("shape " + label + " not found; no shapes in schema");
      } else if (label in index.shapeExprs) {
        shape = index.shapeExprs[label];
      } else {
        runtimeError("shape " + label + " not found in:\n" + Object.keys(index.shapeExprs || []).map(function (s) {
          return "  " + s;
        }).join("\n"));
      } // if we passed in an expression rather than a label, validate it directly.


      if (typeof label !== "string") return this._validateShapeDecl(point, shape, Start, 0, tracker, seen);
      if (seen === undefined) seen = {};
      var seenKey = point + "@" + (label === Start ? "_: -start-" : label);

      if (!subGraph) {
        // Don't cache base shape validations as they aren't testing the full neighborhood.
        if (seenKey in seen) return tracker.recurse({
          type: "Recursion",
          node: ldify(point),
          shape: label
        });
        if ("known" in this && seenKey in this.known) return tracker.known(this.known[seenKey]);
        seen[seenKey] = {
          point: point,
          shape: label
        };
        tracker.enter(point, label);
      }

      var ret = this._validateDescendants(point, label, 0, tracker, seen, subGraph);

      if (!subGraph) {
        tracker.exit(point, label, ret);
        delete seen[seenKey];
        if ("known" in this) this.known[seenKey] = ret;
      }

      if ("startActs" in schema && outside) {
        ret.startActs = schema.startActs;
      }

      return ret;
    };

    this._validateDescendants = function (point, shapeLabel, depth, tracker, seen, subGraph, allowAbstract) {
      var _this2 = this;

      if (subGraph) // Shape inference doesn't apply when validating base shapes.
        return this._validateShapeDecl(point, index.shapeExprs[shapeLabel], shapeLabel, 0, tracker, seen, subGraph); // Find all non-abstract shapeExprs extended with label. 

      var candidates = [shapeLabel];
      candidates = candidates.concat(indexExtensions(this.schema)[shapeLabel] || []); // Uniquify list.

      for (var i = candidates.length - 1; i >= 0; --i) {
        if (candidates.indexOf(candidates[i]) < i) candidates.splice(i, 1);
      } // Filter out abstract shapes.


      if (!allowAbstract) candidates = candidates.filter(function (l) {
        return !index.shapeExprs[l]["abstract"];
      }); // Aggregate results in a SolutionList or FailureList.

      var results = candidates.reduce(function (ret, candidateShapeLabel) {
        var shapeExpr = index.shapeExprs[candidateShapeLabel];

        var res = _this2._validateShapeDecl(point, shapeExpr, candidateShapeLabel, 0, tracker, seen, subGraph);

        return "errors" in res ? {
          passes: ret.passes,
          failures: ret.failures.concat(res)
        } : {
          passes: ret.passes.concat(res),
          failures: ret.failures
        };
      }, {
        passes: [],
        failures: []
      });
      var ret;

      if (results.passes.length > 0) {
        ret = results.passes.length !== 1 ? {
          type: "SolutionList",
          solutions: results.passes
        } : results.passes[0];
      } else if (results.failures.length > 0) {
        ret = results.failures.length !== 1 ? {
          type: "FailureList",
          errors: results.failures
        } : results.failures[0];
      } else {
        ret = {
          type: "AbstractShapeFailure",
          shape: shapeLabel,
          errors: shapeLabel + " has no non-abstract children"
        };
      }

      return ret; // @TODO move to Vistior.index

      function indexExtensions(schema) {
        var abstractness = {};
        var extensions = Hierarchy.create();
        makeSchemaVisitor().visitSchema(schema);
        return extensions.children;

        function makeSchemaVisitor(schema) {
          var schemaVisitor = ShExUtil.Visitor();
          var curLabel;
          var curAbstract;
          var oldVisitShapeDecl = schemaVisitor.visitShapeDecl;

          schemaVisitor.visitShapeDecl = function (decl) {
            curLabel = decl.id;
            curAbstract = decl["abstract"];
            abstractness[decl.id] = decl["abstract"];
            return oldVisitShapeDecl.call(schemaVisitor, decl, decl.id);
          };

          var oldVisitShape = schemaVisitor.visitShape;

          schemaVisitor.visitShape = function (shape) {
            if ("extends" in shape) {
              shape["extends"].forEach(function (ext) {
                var extendsVisitor = ShExUtil.Visitor();

                extendsVisitor.visitShapeRef = function (parent) {
                  extensions.add(parent, curLabel); // makeSchemaVisitor().visitSchema(schema);

                  return "null";
                };

                extendsVisitor.visitShapeExpr(ext);
              });
            }

            return "null";
          };

          return schemaVisitor;
        }
      }
    };

    this._validateShapeDecl = function (point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph) {
      var expr = shapeExpr.type === "ShapeDecl" ? shapeExpr.shapeExpr : shapeExpr;
      return this._validateShapeExpr(point, expr, shapeLabel, depth, tracker, seen, subgraph);
    };

    this._validateShapeExpr = function (point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph) {
      if (point === "") throw Error("validation needs a valid focus node");
      var ret = null;

      if (typeof shapeExpr === "string") {
        // ShapeRef
        // ret = this._validateShapeDecl(point, schema._index.shapeExprs[shapeExpr], shapeExpr, depth, tracker, seen, subgraph);
        ret = this._validateDescendants(point, shapeExpr, depth, tracker, seen, subgraph, true);
      } else if (shapeExpr.type === "NodeConstraint") {
        var sub = this._errorsMatchingNodeConstraint(point, shapeExpr, null);

        ret = sub.errors && sub.errors.length ? {
          // @@ when are both conditionals needed?
          type: "Failure",
          node: ldify(point),
          shape: shapeLabel,
          errors: sub.errors.map(function (error) {
            // !!! just sub.errors?
            return {
              type: "NodeConstraintViolation",
              shapeExpr: shapeExpr,
              error: error
            };
          })
        } : {
          type: "NodeConstraintTest",
          node: ldify(point),
          shape: shapeLabel,
          shapeExpr: shapeExpr
        };
      } else if (shapeExpr.type === "Shape") {
        ret = this._validateShape(point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph);
      } else if (shapeExpr.type === "ShapeExternal") {
        ret = this.options.validateExtern(point, shapeLabel, tracker, seen);
      } else if (shapeExpr.type === "ShapeOr") {
        var errors = [];

        for (var i = 0; i < shapeExpr.shapeExprs.length; ++i) {
          var nested = shapeExpr.shapeExprs[i];

          var _sub = this._validateShapeExpr(point, nested, shapeLabel, depth, tracker, seen, subgraph);

          if ("errors" in _sub) errors.push(_sub);else return {
            type: "ShapeOrResults",
            solution: _sub
          };
        }

        ret = {
          type: "ShapeOrFailure",
          errors: errors
        };
      } else if (shapeExpr.type === "ShapeNot") {
        var _sub2 = this._validateShapeExpr(point, shapeExpr.shapeExpr, shapeLabel, depth, tracker, seen, subgraph);

        if ("errors" in _sub2) ret = {
          type: "ShapeNotResults",
          solution: _sub2
        };else ret = {
          type: "ShapeNotFailure",
          errors: _sub2
        };
      } else if (shapeExpr.type === "ShapeAnd") {
        var passes = [];
        var _errors = [];

        for (var _i = 0; _i < shapeExpr.shapeExprs.length; ++_i) {
          var _nested = shapeExpr.shapeExprs[_i];

          var _sub3 = this._validateShapeExpr(point, _nested, shapeLabel, depth, tracker, seen, subgraph);

          if ("errors" in _sub3) _errors.push(_sub3);else passes.push(_sub3);
        }

        if (_errors.length > 0) ret = {
          type: "ShapeAndFailure",
          errors: _errors
        };else ret = {
          type: "ShapeAndResults",
          solutions: passes
        };
      } else {
        throw Error("expected one of Shape{Ref,And,Or} or NodeConstraint, got " + JSON.stringify(shapeExpr));
      }

      if (typeof shapeExpr !== "string" // ShapeRefs are haneled in the referent.
      && shapeExpr.type !== "Shape" // Shapes are handled in the try-everything loop.
      && !("errors" in ret) && "semActs" in shapeExpr) {
        var semActErrors = this.semActHandler.dispatchAll(shapeExpr.semActs, Object.assign({
          node: point
        }, ret), ret);
        if (semActErrors.length) // some semAct aborted
          return {
            type: "Failure",
            node: ldify(point),
            shape: shapeLabel,
            errors: semActErrors
          };
      }

      return ret;
    };

    this._validateShape = function (point, shape, shapeLabel, depth, tracker, seen, subgraph) {
      var _this3 = this;

      var _ShExValidator = this;

      var valParms = {
        db: db,
        shapeLabel: shapeLabel,
        depth: depth,
        tracker: tracker,
        seen: seen
      };
      var ret = null;
      var startAcionStorage = {}; // !!! need test to see this write to results structure.

      if ("startActs" in schema) {
        var semActErrors = this.semActHandler.dispatchAll(schema.startActs, null, startAcionStorage);
        if (semActErrors.length) return {
          type: "Failure",
          node: ldify(point),
          shape: shapeLabel,
          errors: semActErrors
        }; // some semAct aborted !! return a better error
      }

      var fromDB = (subgraph || db).getNeighborhood(point, shapeLabel, shape);
      var outgoingLength = fromDB.outgoing.length;
      var neighborhood = fromDB.outgoing.sort(function (l, r) {
        return l.predicate.localeCompare(r.predicate) || sparqlOrder(l.object, r.object);
      }).concat(fromDB.incoming.sort(function (l, r) {
        return l.predicate.localeCompare(r.predicate) || sparqlOrder(l.object, r.object);
      }));
      var localTCs = this.indexTripleConstraints(shape.expression);
      var extendedTCs = getExtendedTripleConstraints(shape);
      var constraintList = extendedTCs.map(function (ext) {
        return ext.tripleConstraint;
      }).concat(localTCs);
      var tripleList = matchByPredicate(constraintList, neighborhood, outgoingLength, point, valParms);

      var _whatsMissing = whatsMissing(tripleList, neighborhood, outgoingLength, shape.extra || []),
          misses = _whatsMissing.misses,
          extras = _whatsMissing.extras;

      var xp = crossProduct(tripleList.constraintList, "NO_TRIPLE_CONSTRAINT");
      var partitionErrors = [];
      var regexEngine = regexModule.compile(schema, shape, index);

      var _loop = function _loop() {
        var errors = [];
        var usedTriples = []; // [{s1,p1,o1},{s2,p2,o2}] implicated triples -- used for messages

        var constraintMatchCount = // [2,1,0,1] how many triples matched a constraint
        _seq(neighborhood.length).map(function () {
          return 0;
        }); // t2tc - array mapping neighborhood index to TripleConstraint


        var t2tcForThisShapeAndExtends = xp.get(); // [0,1,0,3] mapping from triple to constraint

        var t2tcForThisShape = [];
        var tripleToExtends = [];

        var extendsToTriples = _seq((shape["extends"] || []).length).map(function () {
          return [];
        });

        t2tcForThisShapeAndExtends.forEach(function (cNo, tNo) {
          if (cNo !== "NO_TRIPLE_CONSTRAINT" && cNo < extendedTCs.length) {
            var extNo = extendedTCs[cNo].extendsNo;
            extendsToTriples[extNo].push(neighborhood[tNo]);
            tripleToExtends[tNo] = cNo;
            t2tcForThisShape[tNo] = "NO_TRIPLE_CONSTRAINT";
          } else {
            tripleToExtends[tNo] = "NO_EXTENDS";
            t2tcForThisShape[tNo] = cNo;
          }
        }); // Triples not mapped to triple constraints are not allowed in closed shapes.

        if (shape.closed) {
          var unexpectedTriples = neighborhood.slice(0, outgoingLength).filter(function (t, i) {
            return t2tcForThisShape[i] === "NO_TRIPLE_CONSTRAINT" && // didn't match a constraint
            tripleToExtends[i] === "NO_EXTENDS" && // didn't match an EXTENDS
            extras.indexOf(i) === -1; // wasn't in EXTRAs.
          });
          if (unexpectedTriples.length > 0) errors.push({
            type: "ClosedShapeViolation",
            unexpectedTriples: unexpectedTriples
          });
        } // Set usedTriples and constraintMatchCount.


        t2tcForThisShape.forEach(function (tpNumber, ord) {
          if (tpNumber !== "NO_TRIPLE_CONSTRAINT") {
            usedTriples.push(neighborhood[ord]);
            ++constraintMatchCount[tpNumber];
          }
        });

        var tc2t = _constraintToTriples(t2tcForThisShape, constraintList, tripleList); // e.g. [[t0, t2], [t1, t3]]


        var results = testExtends(shape, point, extendsToTriples, valParms);

        if (results === null || !("errors" in results)) {
          var sub = regexEngine.match(db, point, constraintList, tc2t, t2tcForThisShape, neighborhood, _this3.semActHandler, null);

          if (!("errors" in sub) && results) {
            results = {
              type: "ExtendedResults",
              extensions: results
            };
            if (Object.keys(sub).length > 0) // no empty objects from {}s.
              results.local = sub;
          } else {
            results = sub;
          }
        }

        if ("errors" in results) [].push.apply(errors, results.errors);
        var possibleRet = {
          type: "ShapeTest",
          node: ldify(point),
          shape: shapeLabel
        };
        if (errors.length === 0 && Object.keys(results).length > 0) // only include .solution for non-empty pattern
          possibleRet.solution = results;

        if ("semActs" in shape) {
          var _semActErrors = _this3.semActHandler.dispatchAll(shape.semActs, Object.assign({
            node: point
          }, results), possibleRet);

          if (_semActErrors.length) // some semAct aborted
            [].push.apply(errors, _semActErrors);
        }

        partitionErrors.push(errors);
        if (errors.length === 0) ret = possibleRet;
      };

      while (xp.next() && ret === null) {
        _loop();
      } // end of while(xp.next())


      var missErrors = misses.map(function (miss) {
        var t = neighborhood[miss.tripleNo];
        return {
          type: "TypeMismatch",
          triple: {
            type: "TestedTriple",
            subject: t.subject,
            predicate: t.predicate,
            object: ldify(t.object)
          },
          constraint: constraintList[miss.constraintNo],
          errors: miss.errors
        };
      }); // Report only last errors until we have a better idea.

      var lastErrors = partitionErrors[partitionErrors.length - 1];
      var errors = missErrors.concat(lastErrors.length === 1 ? lastErrors[0] : lastErrors);
      if (errors.length > 0) ret = {
        type: "Failure",
        node: ldify(point),
        shape: shapeLabel,
        errors: errors
      }; // remove N3jsTripleToString

      if (VERBOSE) neighborhood.forEach(function (t) {
        delete t.toString;
      });
      return addShapeAttributes(shape, ret);
    };

    function matchByPredicate(constraintList, neighborhood, outgoingLength, point, valParms) {
      var outgoing = indexNeighborhood(neighborhood.slice(0, outgoingLength));
      var incoming = indexNeighborhood(neighborhood.slice(outgoingLength));
      return constraintList.reduce(function (ret, constraint, cNo) {
        // subject and object depend on direction of constraint.
        var searchSubject = constraint.inverse ? null : point;
        var searchObject = constraint.inverse ? point : null;
        var index = constraint.inverse ? incoming : outgoing; // get triples matching predciate

        var matchPredicate = index.byPredicate[constraint.predicate] || []; // empty list when no triple matches that constraint
        // strip to triples matching value constraints (apart from @<someShape>)

        var matchConstraints = _ShExValidator._triplesMatchingShapeExpr(matchPredicate, constraint, valParms);

        matchConstraints.hits.forEach(function (evidence) {
          var tNo = neighborhood.indexOf(evidence.triple);
          ret.constraintList[tNo].push(cNo);
          ret.results[cNo][tNo] = evidence.sub;
        });
        matchConstraints.misses.forEach(function (evidence) {
          var tNo = neighborhood.indexOf(evidence.triple);
          ret.misses[tNo] = {
            constraintNo: cNo,
            errors: evidence.errors
          };
        });
        return ret;
      }, {
        misses: {},
        results: _alist(constraintList.length),
        constraintList: _alist(neighborhood.length)
      });
    }

    function whatsMissing(tripleList, neighborhood, outgoingLength, extras) {
      var matchedExtras = []; // triples accounted for by EXTRA

      var misses = tripleList.constraintList.reduce(function (ret, constraints, ord) {
        if (constraints.length === 0 && // matches no constraints
        ord < outgoingLength && // not an incoming triple
        ord in tripleList.misses) {
          // predicate matched some constraint(s)
          if (extras.indexOf(neighborhood[ord].predicate) !== -1) {
            matchedExtras.push(ord);
          } else {
            // not declared extra
            ret.push({
              // so it's a missed triple.
              tripleNo: ord,
              constraintNo: tripleList.misses[ord].constraintNo,
              errors: tripleList.misses[ord].errors
            });
          }
        }

        return ret;
      }, []);
      return {
        misses: misses,
        extras: matchedExtras
      };
    }

    function addShapeAttributes(shape, ret) {
      if ("annotations" in shape) ret.annotations = shape.annotations;
      return ret;
    } // Pivot to triples by constraint.


    function _constraintToTriples(t2tc, constraintList, tripleList) {
      return t2tc.slice().reduce(function (ret, cNo, tNo) {
        if (cNo !== "NO_TRIPLE_CONSTRAINT") ret[cNo].push({
          tNo: tNo,
          res: tripleList.results[cNo][tNo]
        });
        return ret;
      }, _seq(constraintList.length).map(function () {
        return [];
      })); // [length][]
    }

    function testExtends(expr, point, extendsToTriples, valParms) {
      if (!("extends" in expr)) return null;
      var passes = [];
      var errors = [];

      var _loop2 = function _loop2(eNo) {
        var extend = expr["extends"][eNo];
        var subgraph = ShExUtil.makeTriplesDB(null); // These triples were tracked earlier.

        extendsToTriples[eNo].forEach(function (t) {
          return subgraph.addOutgoingTriples([t]);
        });

        var sub = _ShExValidator.validate(point, extend, valParms.tracker, valParms.seen, subgraph);

        if ("errors" in sub) errors.push(sub);else passes.push(sub);
      };

      for (var eNo = 0; eNo < expr["extends"].length; ++eNo) {
        _loop2(eNo);
      }

      if (errors.length > 0) {
        return {
          type: "ExtensionFailure",
          errors: errors
        };
      }

      return {
        type: "ExtensionResults",
        solutions: passes
      };
    }
    /** getExtendedTripleConstraints - walk shape's extends to get all
     * referenced triple constraints.
     *
     * @param {} shape
     * @returns {}
     */


    function getExtendedTripleConstraints(shape) {
      var ret = [];

      if ("extends" in shape) {
        shape["extends"].forEach(function (se, extendsNo) {
          // Index incoming and outgoing arcs by predicate.  Multiple TCs with the
          // same predicate are aggregated into a single TC with the maximum
          // cardinality span. (@@Does this actually reduce permutations?)
          // tests: Extend3G-pass
          var ins = {},
              outs = {};
          visitTripleConstraints(se, ins, outs);
          [ins, outs].forEach(function (directionIndex) {
            Object.keys(directionIndex).forEach(function (predicate) {
              var tripleConstraint = directionIndex[predicate];
              ret.push({
                tripleConstraint: tripleConstraint,
                extendsNo: extendsNo
              });
            });
          });
        });
      }

      return ret;
      /*
       * @expr - shape expression to walk
       * @ins - incoming arcs: map from IRI to {min, max, seen}
       * @outs - outgoing arcs
       */

      function visitTripleConstraints(expr, ins, outs) {
        var visitor = ShExUtil.Visitor();
        var outerMin = 1;
        var outerMax = 1;
        var oldVisitOneOf = visitor.visitOneOf; // Override visitShapeRef to follow references.
        // tests: Extend3G-pass, vitals-RESTRICTS-pass_lie-Vital...

        visitor.visitShapeRef = function (inclusion) {
          return visitor.visitShapeDecl(index.shapeExprs[inclusion]);
        }; // Visit shape's EXTENDS and expression.


        visitor.visitShape = function (shape, label) {
          if ("extends" in shape) {
            shape["extends"].forEach( // extension of an extension...
            function (se) {
              return visitTripleConstraints(se, ins, outs);
            });
          }

          if ("expression" in shape) {
            visitor.visitExpression(shape.expression);
          }

          return {
            type: "Shape"
          }; // NOP
        }; // Any TC inside a OneOf implicitly has a min cardinality of 0.


        visitor.visitOneOf = function (expr) {
          var oldOuterMin = outerMin;
          var oldOuterMax = outerMax;
          outerMin = 0;
          oldVisitOneOf.call(visitor, expr);
          outerMin = oldOuterMin;
          outerMax = oldOuterMax;
        }; // Synthesize a TripleConstraint with the implicit cardinality.


        visitor.visitTripleConstraint = function (expr) {
          var idx = expr.inverse ? ins : outs; // pick an index

          var min = "min" in expr ? expr.min : 1;
          min = min * outerMin;
          var max = "max" in expr ? expr.max : 1;
          max = max * outerMax;
          idx[expr.predicate] = {
            type: "TripleConstraint",
            predicate: expr.predicate,
            min: expr.predicate in idx ? Math.max(idx[expr.predicate].min, min) : min,
            max: expr.predicate in idx ? Math.min(idx[expr.predicate].max, max) : max,
            seen: expr.predicate in idx ? idx[expr.predicate].seen + 1 : 1,
            tcs: expr.predicate in idx ? idx[expr.predicate].tcs.concat([expr]) : [expr]
          };
          return expr;
        }; // Call constructed visitor on expr.


        visitor.visitShapeExpr(expr);
      }
    }

    this._triplesMatchingShapeExpr = function (triples, constraint, valParms) {
      var _ShExValidator = this;

      var misses = [];
      var hits = [];
      triples.forEach(function (triple) {
        var value = constraint.inverse ? triple.subject : triple.object;
        var sub;
        var oldBindings = JSON.parse(JSON.stringify(_ShExValidator.semActHandler.results));
        var errors = constraint.valueExpr === undefined ? undefined : (sub = _ShExValidator._errorsMatchingShapeExpr(value, constraint.valueExpr, valParms)).errors;

        if (!errors) {
          hits.push({
            triple: triple,
            sub: sub
          });
        } else if (hits.indexOf(triple) === -1) {
          _ShExValidator.semActHandler.results = JSON.parse(JSON.stringify(oldBindings));
          misses.push({
            triple: triple,
            errors: sub
          });
        }
      });
      return {
        hits: hits,
        misses: misses
      };
    };

    this._errorsMatchingShapeExpr = function (value, valueExpr, valParms, subgraph) {
      var _ShExValidator = this;

      if (typeof valueExpr === "string") {
        // ShapeRef
        return _ShExValidator.validate(value, valueExpr, valParms.tracker, valParms.seen, subgraph);
      } else if (valueExpr.type === "NodeConstraint") {
        return this._errorsMatchingNodeConstraint(value, valueExpr, null);
      } else if (valueExpr.type === "Shape") {
        return _ShExValidator._validateShapeExpr(value, valueExpr, valParms.shapeLabel, valParms.depth, valParms.tracker, valParms.seen, subgraph);
      } else if (valueExpr.type === "ShapeOr") {
        var errors = [];

        for (var i = 0; i < valueExpr.shapeExprs.length; ++i) {
          var nested = valueExpr.shapeExprs[i];

          var sub = _ShExValidator._errorsMatchingShapeExpr(value, nested, valParms, subgraph);

          if ("errors" in sub) errors.push(sub);else return {
            type: "ShapeOrResults",
            solution: sub
          };
        }

        return {
          type: "ShapeOrFailure",
          errors: errors
        };
      } else if (valueExpr.type === "ShapeAnd") {
        var passes = [];

        for (var _i2 = 0; _i2 < valueExpr.shapeExprs.length; ++_i2) {
          var _nested2 = valueExpr.shapeExprs[_i2];

          var _sub4 = _ShExValidator._errorsMatchingShapeExpr(value, _nested2, valParms, subgraph);

          if ("errors" in _sub4) return {
            type: "ShapeAndFailure",
            errors: [_sub4]
          };else passes.push(_sub4);
        }

        return {
          type: "ShapeAndResults",
          solutions: passes
        };
      } else if (valueExpr.type === "ShapeNot") {
        var _sub5 = _ShExValidator._errorsMatchingShapeExpr(value, valueExpr.shapeExpr, valParms, subgraph); // return sub.errors && sub.errors.length ? {} : {
        //   errors: ["Error validating " + value + " as " + JSON.stringify(valueExpr) + ": expected NOT to pass"] };


        var ret = Object.assign({
          type: null,
          focus: value
        }, valueExpr);

        if (_sub5.errors && _sub5.errors.length) {
          ret.type = "ShapeNotTest"; // ret = {};
        } else {
          ret.type = "ShapeNotFailure";
          ret.errors = ["Error validating " + value + " as " + JSON.stringify(valueExpr) + ": expected NOT to pass"];
        }

        return ret;
      } else {
        throw Error("unknown value expression type '" + valueExpr.type + "'");
      }
    };
    /* _errorsMatchingNodeConstraint - return whether the value matches the value
     * expression without checking shape references.
     */


    this._errorsMatchingNodeConstraint = function (value, valueExpr, recurse) {
      var errors = [];
      var label = ShExTerm.isLiteral(value) ? ShExTerm.getLiteralValue(value) : ShExTerm.isBlank(value) ? value.substring(2) : value;
      var dt = ShExTerm.isLiteral(value) ? ShExTerm.getLiteralType(value) : null;
      var numeric = integerDatatypes.indexOf(dt) !== -1 ? XSD + "integer" : numericDatatypes.indexOf(dt) !== -1 ? dt : undefined;

      function validationError() {
        var errorStr = Array.prototype.join.call(arguments, "");
        errors.push("Error validating " + value + " as " + JSON.stringify(valueExpr) + ": " + errorStr);
        return false;
      } // if (negated) ;


      if (false) {} else {
        if ("nodeKind" in valueExpr) {
          if (["iri", "bnode", "literal", "nonliteral"].indexOf(valueExpr.nodeKind) === -1) {
            validationError("unknown node kind '" + valueExpr.nodeKind + "'");
          }

          if (ShExTerm.isBlank(value)) {
            if (valueExpr.nodeKind === "iri" || valueExpr.nodeKind === "literal") {
              validationError("blank node found when " + valueExpr.nodeKind + " expected");
            }
          } else if (ShExTerm.isLiteral(value)) {
            if (valueExpr.nodeKind !== "literal") {
              validationError("literal found when " + valueExpr.nodeKind + " expected");
            }
          } else if (valueExpr.nodeKind === "bnode" || valueExpr.nodeKind === "literal") {
            validationError("iri found when " + valueExpr.nodeKind + " expected");
          }
        }

        if (valueExpr.datatype && valueExpr.values) validationError("found both datatype and values in " + tripleConstraint);

        if (valueExpr.datatype) {
          if (!ShExTerm.isLiteral(value)) {
            validationError("mismatched datatype: " + value + " is not a literal with datatype " + valueExpr.datatype);
          } else if (ShExTerm.getLiteralType(value) !== valueExpr.datatype) {
            validationError("mismatched datatype: " + ShExTerm.getLiteralType(value) + " !== " + valueExpr.datatype);
          } else if (numeric) {
            testRange(numericParsers[numeric](label, validationError), valueExpr.datatype, validationError);
          } else if (valueExpr.datatype === XSD + "boolean") {
            if (label !== "true" && label !== "false" && label !== "1" && label !== "0") validationError("illegal boolean value: " + label);
          } else if (valueExpr.datatype === XSD + "dateTime") {
            if (!label.match(/^[+-]?\d{4}-[01]\d-[0-3]\dT[0-5]\d:[0-5]\d:[0-5]\d(\.\d+)?([+-][0-2]\d:[0-5]\d|Z)?$/)) validationError("illegal dateTime value: " + label);
          }
        }

        if (valueExpr.values) {
          if (ShExTerm.isLiteral(value) && valueExpr.values.reduce(function (ret, v) {
            if (ret) return true;
            var ld = ldify(value);

            if (v.type === "Language") {
              return v.languageTag === ld.language; // @@ use equals/normalizeTest
            }

            if (!(_typeof(v) === "object" && "value" in v)) return false;
            return v.value === ld.value && v.type === ld.type && v.language === ld.language;
          }, false)) {// literal match
          } else if (valueExpr.values.indexOf(value) !== -1) {// trivial match
          } else {
            if (!valueExpr.values.some(function (valueConstraint) {
              if (_typeof(valueConstraint) === "object" && !("value" in valueConstraint)) {
                /* expect N3.js literals with {Literal,Language}StemRange
                 *       or non-literals with IriStemRange
                 */
                var normalizedTest = function normalizedTest(val, ref, func) {
                  if (ShExTerm.isLiteral(val)) {
                    if (["LiteralStem", "LiteralStemRange"].indexOf(valueConstraint.type) !== -1) {
                      return func(ShExTerm.getLiteralValue(val), ref);
                    } else if (["LanguageStem", "LanguageStemRange"].indexOf(valueConstraint.type) !== -1) {
                      return func(ShExTerm.getLiteralLanguage(val) || null, ref);
                    } else {
                      return validationError("literal " + val + " not comparable with non-literal " + ref);
                    }
                  } else {
                    if (["IriStem", "IriStemRange"].indexOf(valueConstraint.type) === -1) {
                      return validationError("nonliteral " + val + " not comparable with literal " + JSON.stringify(ref));
                    } else {
                      return func(val, ref);
                    }
                  }
                };

                var startsWith = function startsWith(val, ref) {
                  return normalizedTest(val, ref, function (l, r) {
                    return valueConstraint.type === "LanguageStem" || valueConstraint.type === "LanguageStemRange" ? // rfc4647 basic filtering
                    l !== null && (l === r || r === "" || l[r.length] === "-") : // simple substring
                    l.startsWith(r);
                  });
                };

                var equals = function equals(val, ref) {
                  return normalizedTest(val, ref, function (l, r) {
                    return l === r;
                  });
                };

                // isTerm me -- strike "value" in
                if (!("type" in valueConstraint)) runtimeError("expected " + JSON.stringify(valueConstraint) + " to have a 'type' attribute.");
                var stemRangeTypes = ["Language", "IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
                if (stemRangeTypes.indexOf(valueConstraint.type) === -1) runtimeError("expected type attribute '" + valueConstraint.type + "' to be in '" + stemRangeTypes + "'.");

                if (!isTerm(valueConstraint.stem)) {
                  expect(valueConstraint.stem, "type", "Wildcard"); // match whatever but check exclusions below
                } else {
                  if (!startsWith(value, valueConstraint.stem)) {
                    return false;
                  }
                }

                if (valueConstraint.exclusions) {
                  return !valueConstraint.exclusions.some(function (c) {
                    if (!isTerm(c)) {
                      if (!("type" in c)) runtimeError("expected " + JSON.stringify(c) + " to have a 'type' attribute.");
                      var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
                      if (stemTypes.indexOf(c.type) === -1) runtimeError("expected type attribute '" + c.type + "' to be in '" + stemTypes + "'.");
                      return startsWith(value, c.stem);
                    } else {
                      return equals(value, c);
                    }
                  });
                }

                return true;
              } else {// ignore -- would have caught it above
              }
            })) {
              validationError("value " + value + " not found in set " + JSON.stringify(valueExpr.values));
            }
          }
        }
      }

      if ("pattern" in valueExpr) {
        var regexp = "flags" in valueExpr ? new RegExp(valueExpr.pattern, valueExpr.flags) : new RegExp(valueExpr.pattern);
        if (!getLexicalValue(value).match(regexp)) validationError("value " + getLexicalValue(value) + " did not match pattern " + valueExpr.pattern);
      }

      Object.keys(stringTests).forEach(function (test) {
        if (test in valueExpr && !stringTests[test](label, valueExpr[test])) {
          validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
        }
      });
      Object.keys(numericValueTests).forEach(function (test) {
        if (test in valueExpr) {
          if (numeric) {
            if (!numericValueTests[test](numericParsers[numeric](label, validationError), valueExpr[test])) {
              validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
            }
          } else {
            validationError("facet violation: numeric facet " + test + " can't apply to " + value);
          }
        }
      });
      Object.keys(decimalLexicalTests).forEach(function (test) {
        if (test in valueExpr) {
          if (numeric === XSD + "integer" || numeric === XSD + "decimal") {
            if (!decimalLexicalTests[test]("" + numericParsers[numeric](label, validationError), valueExpr[test])) {
              validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
            }
          } else {
            validationError("facet violation: numeric facet " + test + " can't apply to " + value);
          }
        }
      });
      var ret = {
        type: null,
        focus: value,
        shapeExpr: valueExpr
      };

      if (errors.length) {
        ret.type = "NodeConstraintViolation";
        ret.errors = errors;
      } else {
        ret.type = "NodeConstraintTest";
      }

      return ret;
    };

    this.semActHandler = {
      handlers: {},
      results: {},

      /**
       * Store a semantic action handler.
       *
       * @param {string} name - semantic action's URL.
       * @param {object} handler - handler function.
       *
       * The handler object has a dispatch function is invoked with:
       * @param {string} code - text of the semantic action.
       * @param {object} ctx - matched triple or results subset.
       * @param {object} extensionStorage - place where the extension writes into the result structure.
       * @return {bool} false if the extension failed or did not accept the ctx object.
       */
      register: function register(name, handler) {
        this.handlers[name] = handler;
      },

      /**
       * Calls all semantic actions, allowing each to write to resultsArtifact.
       *
       * @param {array} semActs - list of semantic actions to invoke.
       * @return {bool} false if any result was false.
       */
      dispatchAll: function dispatchAll(semActs, ctx, resultsArtifact) {
        var _semActHanlder = this;

        return semActs.reduce(function (ret, semAct) {
          if (ret.length === 0 && semAct.name in _semActHanlder.handlers) {
            var code = "code" in semAct ? semAct.code : _ShExValidator.options.semActs[semAct.name];
            var existing = "extensions" in resultsArtifact && semAct.name in resultsArtifact.extensions;
            var extensionStorage = existing ? resultsArtifact.extensions[semAct.name] : {};

            var response = _semActHanlder.handlers[semAct.name].dispatch(code, ctx, extensionStorage);

            if (typeof response === 'boolean') {
              if (!response) ret.push({
                type: "SemActFailure",
                errors: [{
                  type: "BooleanSemActFailure",
                  code: code,
                  ctx: ctx
                }]
              });
            } else if (_typeof(response) === 'object' && Array.isArray(response)) {
              if (response.length > 0) ret.push({
                type: "SemActFailure",
                errors: response
              });
            } else {
              throw Error("unsupported response from semantic action handler: " + JSON.stringify(response));
            }

            if (!existing && Object.keys(extensionStorage).length > 0) {
              if (!("extensions" in resultsArtifact)) resultsArtifact.extensions = {};
              resultsArtifact.extensions[semAct.name] = extensionStorage;
            }

            return ret;
          }

          return ret;
        }, []);
      }
    };
  } // http://stackoverflow.com/questions/9422386/lazy-cartesian-product-of-arrays-arbitrary-nested-loops


  function crossProduct(sets, emptyValue) {
    var n = sets.length,
        carets = [];
    var args = null;

    function init() {
      args = [];

      for (var i = 0; i < n; i++) {
        carets[i] = 0;
        args[i] = sets[i].length > 0 ? sets[i][0] : emptyValue;
      }
    }

    function next() {
      // special case: crossProduct([]).next().next() returns false.
      if (args !== null && args.length === 0) return false;

      if (args === null) {
        init();
        return true;
      }

      var i = n - 1;
      carets[i]++;

      if (carets[i] < sets[i].length) {
        args[i] = sets[i][carets[i]];
        return true;
      }

      while (carets[i] >= sets[i].length) {
        if (i == 0) {
          return false;
        }

        carets[i] = 0;
        args[i] = sets[i].length > 0 ? sets[i][0] : emptyValue;
        carets[--i]++;
      }

      args[i] = sets[i][carets[i]];
      return true;
    }

    return {
      next: next,
      "do": function _do(block, _context) {
        // old API
        return block.apply(_context, args);
      },
      // new API because
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#Description
      // cautions about functions over arguments.
      get: function get() {
        return args;
      }
    };
  }
  /* N3jsTripleToString - simple toString function to make N3.js's triples
   * printable.
   */


  var N3jsTripleToString = function N3jsTripleToString() {
    function fmt(n) {
      return ShExTerm.isLiteral(n) ? ["http://www.w3.org/2001/XMLSchema#integer", "http://www.w3.org/2001/XMLSchema#float", "http://www.w3.org/2001/XMLSchema#double"].indexOf(ShExTerm.getLiteralType(n)) !== -1 ? parseInt(ShExTerm.getLiteralValue(n)) : n : ShExTerm.isBlank(n) ? n : "<" + n + ">";
    }

    return fmt(this.subject) + " " + fmt(this.predicate) + " " + fmt(this.object) + " .";
  };
  /* indexNeighborhood - index triples by predicate
   * returns: {
   *     byPredicate: Object: mapping from predicate to triples containing that
   *                  predicate.
   *
   *     candidates: [[1,3], [0,2]]: mapping from triple to the triple constraints
   *                 it matches.  It is initialized to []. Mappings that remain an
   *                 empty set indicate a triple which didn't matching anything in
   *                 the shape.
   *
   *     misses: list to recieve value constraint failures.
   *   }
   */


  function indexNeighborhood(triples) {
    return {
      byPredicate: triples.reduce(function (ret, t) {
        var p = t.predicate;
        if (!(p in ret)) ret[p] = [];
        ret[p].push(t); // If in VERBOSE mode, add a nice toString to N3.js's triple objects.

        if (VERBOSE) t.toString = N3jsTripleToString;
        return ret;
      }, {}),
      candidates: _seq(triples.length).map(function () {
        return [];
      }),
      misses: []
    };
  }
  /* sparqlOrder - sort triples by subject following SPARQL partial ordering.
   */


  function sparqlOrder(l, r) {
    var _map = [l, r].map(function (x) {
      return ShExTerm.isBlank(x) ? 1 : ShExTerm.isLiteral(x) ? 2 : 3;
    }),
        _map2 = _slicedToArray(_map, 2),
        lprec = _map2[0],
        rprec = _map2[1];

    return lprec === rprec ? l.localeCompare(r) : lprec - rprec;
  }
  /* Return a list of n `undefined`s.
   *
   * Note that Array(n) on its own returns a "sparse array" so Array(n).map(f)
   * never calls f.
   */


  function _seq(n) {
    return Array.from(Array(n)); // hahaha, javascript, you suck.
  }
  /* Expect property p with value v in object o
   */


  function expect(o, p, v) {
    if (!(p in o)) runtimeError("expected " + JSON.stringify(o) + " to have a '" + p + "' attribute.");
    if (arguments.length > 2 && o[p] !== v) runtimeError("expected " + p + " attribute '" + o[p] + "' to equal '" + v + "'.");
  }

  function noop() {}

  function runtimeError() {
    var errorStr = Array.prototype.join.call(arguments, "");
    var e = new Error(errorStr);
    Error.captureStackTrace(e, runtimeError);
    throw e;
  }

  function _alist(len) {
    return _seq(len).map(function () {
      return [];
    });
  }

  return {
    construct: ShExValidator_constructor,
    start: Start,
    options: InterfaceOptions
  };
}(); // Export the `ShExValidator` class as a whole.


if (true) module.exports = ShExValidatorCjsModule;

/***/ }),

/***/ 96061:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(85271);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ShExVisitor() {
  function isTerm(t) {
    return _typeof(t) !== "object" || "value" in t && Object.keys(t).reduce(function (r, k) {
      return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
    }, true);
  }

  function isShapeRef(expr) {
    return typeof expr === "string"; // test for JSON-LD @ID
  }

  var isInclusion = isShapeRef; // function expect (l, r) { const ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+" !== "+rs); }

  var _ShExUtil = this;

  function visitMap(map, val) {
    var ret = {};
    Object.keys(map).forEach(function (item) {
      ret[item] = val(map[item]);
    });
    return ret;
  }

  var r = {
    runtimeError: function runtimeError(e) {
      throw e;
    },
    visitSchema: function visitSchema(schema) {
      var ret = {
        type: "Schema"
      };

      this._expect(schema, "type", "Schema");

      this._maybeSet(schema, ret, "Schema", ["@context", "prefixes", "base", "imports", "startActs", "start", "shapes"], ["_base", "_prefixes", "_index", "_sourceMap"]);

      return ret;
    },
    visitPrefixes: function visitPrefixes(prefixes) {
      return prefixes === undefined ? undefined : visitMap(prefixes, function (val) {
        return val;
      });
    },
    visitIRI: function visitIRI(i) {
      return i;
    },
    visitImports: function visitImports(imports) {
      var _Visitor = this;

      return imports.map(function (imp) {
        return _Visitor.visitIRI(imp);
      });
    },
    visitStartActs: function visitStartActs(startActs) {
      var _Visitor = this;

      return startActs === undefined ? undefined : startActs.map(function (act) {
        return _Visitor.visitSemAct(act);
      });
    },
    visitSemActs: function visitSemActs(semActs) {
      var _Visitor = this;

      if (semActs === undefined) return undefined;
      var ret = [];
      Object.keys(semActs).forEach(function (label) {
        ret.push(_Visitor.visitSemAct(semActs[label], label));
      });
      return ret;
    },
    visitSemAct: function visitSemAct(semAct, label) {
      var ret = {
        type: "SemAct"
      };

      this._expect(semAct, "type", "SemAct");

      this._maybeSet(semAct, ret, "SemAct", ["name", "code"]);

      return ret;
    },
    visitShapes: function visitShapes(shapes) {
      var _Visitor = this;

      if (shapes === undefined) return undefined;
      return shapes.map(function (shapeExpr) {
        return _Visitor.visitShapeDecl(shapeExpr);
      });
    },
    visitProductions999: function visitProductions999(productions) {
      // !! DELETE
      var _Visitor = this;

      if (productions === undefined) return undefined;
      var ret = {};
      Object.keys(productions).forEach(function (label) {
        ret[label] = _Visitor.visitExpression(productions[label], label);
      });
      return ret;
    },
    visitShapeDecl: function visitShapeDecl(decl, label) {
      return decl.type === "ShapeDecl" ? this._maybeSet(decl, {
        type: "ShapeDecl"
      }, "ShapeDecl", ["id", "abstract", "restricts", "shapeExpr"]) : this.visitShapeExpr(decl, label);
    },
    visitShapeExpr: function visitShapeExpr(expr, label) {
      if (isShapeRef(expr)) return this.visitShapeRef(expr);
      var r = expr.type === "Shape" ? this.visitShape(expr, label) : expr.type === "NodeConstraint" ? this.visitNodeConstraint(expr, label) : expr.type === "ShapeAnd" ? this.visitShapeAnd(expr, label) : expr.type === "ShapeOr" ? this.visitShapeOr(expr, label) : expr.type === "ShapeNot" ? this.visitShapeNot(expr, label) : expr.type === "ShapeExternal" ? this.visitShapeExternal(expr) : null; // if (expr.type === "ShapeRef") r = 0; // console.warn("visitShapeExpr:", r);

      if (r === null) throw Error("unexpected shapeExpr type: " + expr.type);else return r;
    },
    // _visitShapeGroup: visit a grouping expression (shapeAnd, shapeOr)
    _visitShapeGroup: function _visitShapeGroup(expr, label) {
      this._testUnknownAttributes(expr, ["id", "shapeExprs"], expr.type, this.visitShapeNot);

      var _Visitor = this;

      var r = {
        type: expr.type
      };
      if ("id" in expr) r.id = expr.id;
      r.shapeExprs = expr.shapeExprs.map(function (nested) {
        return _Visitor.visitShapeExpr(nested, label);
      });
      return r;
    },
    // _visitShapeNot: visit negated shape
    visitShapeNot: function visitShapeNot(expr, label) {
      this._testUnknownAttributes(expr, ["id", "shapeExpr"], "ShapeNot", this.visitShapeNot);

      var r = {
        type: expr.type
      };
      if ("id" in expr) r.id = expr.id;
      r.shapeExpr = this.visitShapeExpr(expr.shapeExpr, label);
      return r;
    },
    // ### `visitNodeConstraint` deep-copies the structure of a shape
    visitShape: function visitShape(shape, label) {
      var ret = {
        type: "Shape"
      };

      this._expect(shape, "type", "Shape");

      this._maybeSet(shape, ret, "Shape", ["id", "abstract", "extends", "closed", "expression", "extra", "semActs", "annotations"]);

      return ret;
    },
    _visitShapeExprList: function _visitShapeExprList(ext) {
      var _Visitor = this;

      return ext.map(function (t) {
        return _Visitor.visitShapeExpr(t, undefined);
      });
    },
    // ### `visitNodeConstraint` deep-copies the structure of a shape
    visitNodeConstraint: function visitNodeConstraint(shape, label) {
      var ret = {
        type: "NodeConstraint"
      };

      this._expect(shape, "type", "NodeConstraint");

      this._maybeSet(shape, ret, "NodeConstraint", ["id", // "abstract", "extends", "restricts", -- futureWork
      "nodeKind", "datatype", "pattern", "flags", "length", "reference", "minlength", "maxlength", "mininclusive", "minexclusive", "maxinclusive", "maxexclusive", "totaldigits", "fractiondigits", "values", "annotations", "semActs"]);

      return ret;
    },
    visitShapeRef: function visitShapeRef(reference) {
      if (typeof reference !== "string") {
        var ex = Exception("visitShapeRef expected a string, not " + JSON.stringify(reference));
        console.warn(ex);
        throw ex;
      }

      return reference;
    },
    visitShapeExternal: function visitShapeExternal(expr) {
      this._testUnknownAttributes(expr, ["id"], "ShapeExternal", this.visitShapeNot);

      return Object.assign("id" in expr ? {
        id: expr.id
      } : {}, {
        type: "ShapeExternal"
      });
    },
    // _visitGroup: visit a grouping expression (someOf or eachOf)
    _visitGroup: function _visitGroup(expr, type) {
      var _Visitor = this;

      var r = Object.assign( // pre-declare an id so it sorts to the top
      "id" in expr ? {
        id: null
      } : {}, {
        type: expr.type
      });
      r.expressions = expr.expressions.map(function (nested) {
        return _Visitor.visitExpression(nested);
      });
      return this._maybeSet(expr, r, "expr", ["id", "min", "max", "annotations", "semActs"], ["expressions"]);
    },
    visitTripleConstraint: function visitTripleConstraint(expr) {
      return this._maybeSet(expr, Object.assign( // pre-declare an id so it sorts to the top
      "id" in expr ? {
        id: null
      } : {}, {
        type: "TripleConstraint"
      }), "TripleConstraint", ["id", "inverse", "predicate", "valueExpr", "min", "max", "annotations", "semActs"]);
    },
    visitExpression: function visitExpression(expr) {
      if (typeof expr === "string") return this.visitInclusion(expr);
      var r = expr.type === "TripleConstraint" ? this.visitTripleConstraint(expr) : expr.type === "OneOf" ? this.visitOneOf(expr) : expr.type === "EachOf" ? this.visitEachOf(expr) : null;
      if (r === null) throw Error("unexpected expression type: " + expr.type);else return r;
    },
    visitValues: function visitValues(values) {
      var _Visitor = this;

      return values.map(function (t) {
        return isTerm(t) || t.type === "Language" ? t : _Visitor.visitStemRange(t);
      });
    },
    visitStemRange: function visitStemRange(t) {
      var _Visitor = this; // console.log(Error(t.type).stack);
      // this._expect(t, "type", "IriStemRange");


      if (!("type" in t)) _Visitor.runtimeError(Error("expected " + JSON.stringify(t) + " to have a 'type' attribute."));
      var stemRangeTypes = ["IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
      if (stemRangeTypes.indexOf(t.type) === -1) _Visitor.runtimeError(Error("expected type attribute '" + t.type + "' to be in '" + stemRangeTypes + "'."));
      var stem;

      if (isTerm(t)) {
        this._expect(t.stem, "type", "Wildcard");

        stem = {
          type: t.type,
          stem: {
            type: "Wildcard"
          }
        };
      } else {
        stem = {
          type: t.type,
          stem: t.stem
        };
      }

      if (t.exclusions) {
        stem.exclusions = t.exclusions.map(function (c) {
          return _Visitor.visitExclusion(c);
        });
      }

      return stem;
    },
    visitExclusion: function visitExclusion(c) {
      if (!isTerm(c)) {
        // this._expect(c, "type", "IriStem");
        if (!("type" in c)) _Visitor.runtimeError(Error("expected " + JSON.stringify(c) + " to have a 'type' attribute."));
        var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
        if (stemTypes.indexOf(c.type) === -1) _Visitor.runtimeError(Error("expected type attribute '" + c.type + "' to be in '" + stemTypes + "'."));
        return {
          type: c.type,
          stem: c.stem
        };
      } else {
        return c;
      }
    },
    visitInclusion: function visitInclusion(inclusion) {
      if (typeof inclusion !== "string") {
        var ex = Exception("visitInclusion expected a string, not " + JSON.stringify(inclusion));
        console.warn(ex);
        throw ex;
      }

      return inclusion;
    },
    _maybeSet: function _maybeSet(obj, ret, context, members, ignore) {
      var _Visitor = this;

      this._testUnknownAttributes(obj, ignore ? members.concat(ignore) : members, context, this._maybeSet);

      members.forEach(function (member) {
        var methodName = "visit" + member.charAt(0).toUpperCase() + member.slice(1);

        if (member in obj) {
          var f = _Visitor[methodName];

          if (typeof f !== "function") {
            throw Error(methodName + " not found in Visitor");
          }

          var t = f.call(_Visitor, obj[member]);

          if (t !== undefined) {
            ret[member] = t;
          }
        }
      });
      return ret;
    },
    _visitValue: function _visitValue(v) {
      return v;
    },
    _visitList: function _visitList(l) {
      return l.slice();
    },
    _testUnknownAttributes: function _testUnknownAttributes(obj, expected, context, captureFrame) {
      var unknownMembers = Object.keys(obj).reduce(function (ret, k) {
        return k !== "type" && expected.indexOf(k) === -1 ? ret.concat(k) : ret;
      }, []);

      if (unknownMembers.length > 0) {
        var e = Error("unknown propert" + (unknownMembers.length > 1 ? "ies" : "y") + ": " + unknownMembers.map(function (p) {
          return "\"" + p + "\"";
        }).join(",") + " in " + context + ": " + JSON.stringify(obj));
        Error.captureStackTrace(e, captureFrame);
        throw e;
      }
    },
    _expect: function _expect(o, p, v) {
      if (!(p in o)) this.runtimeError(Error("expected " + JSON.stringify(o) + " to have a ." + p));
      if (arguments.length > 2 && o[p] !== v) this.runtimeError(Error("expected " + o[p] + " to equal " + v));
    }
  };
  r.visitBase = r.visitStart = r.visitClosed = r["visit@context"] = r._visitValue;
  r.visitRestricts = r.visitExtends = r._visitShapeExprList;
  r.visitExtra = r.visitAnnotations = r._visitList;
  r.visitAbstract = r.visitInverse = r.visitPredicate = r._visitValue;
  r.visitName = r.visitId = r.visitCode = r.visitMin = r.visitMax = r._visitValue;
  r.visitType = r.visitNodeKind = r.visitDatatype = r.visitPattern = r.visitFlags = r.visitLength = r.visitMinlength = r.visitMaxlength = r.visitMininclusive = r.visitMinexclusive = r.visitMaxinclusive = r.visitMaxexclusive = r.visitTotaldigits = r.visitFractiondigits = r._visitValue;
  r.visitOneOf = r.visitEachOf = r._visitGroup;
  r.visitShapeAnd = r.visitShapeOr = r._visitShapeGroup;
  r.visitInclude = r._visitValue;
  r.visitValueExpr = r.visitShapeExpr;
  return r; // Expect property p with value v in object o
} // The ShEx Vistor is here to minimize deps for ShExValidator.

/** create indexes for schema
 */


ShExVisitor.index = function (schema) {
  var index = {
    shapeExprs: {},
    tripleExprs: {}
  };
  var v = ShExVisitor();
  var oldVisitExpression = v.visitExpression;

  v.visitExpression = function (expression) {
    if (_typeof(expression) === "object" && "id" in expression) index.tripleExprs[expression.id] = expression;
    return oldVisitExpression.call(v, expression);
  };

  var oldVisitShapeExpr = v.visitShapeExpr;

  v.visitShapeExpr = v.visitValueExpr = function (shapeExpr, label) {
    if (_typeof(shapeExpr) === "object" && "id" in shapeExpr) index.shapeExprs[shapeExpr.id] = shapeExpr;
    return oldVisitShapeExpr.call(v, shapeExpr, label);
  };

  var oldVisitShapeDecl = v.visitShapeDecl;

  v.visitShapeDecl = v.visitValueExpr = function (shapeExpr, label) {
    if (_typeof(shapeExpr) === "object" && "id" in shapeExpr) index.shapeExprs[shapeExpr.id] = shapeExpr;
    return oldVisitShapeDecl.call(v, shapeExpr, label);
  };

  v.visitSchema(schema);
  return index;
};

if (true) module.exports = ShExVisitor;

/***/ }),

/***/ 51397:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// **ShExWriter** writes ShEx documents.
var ShExWriterCjsModule = function () {
  var RelateUrl = __webpack_require__(49355);

  var UNBOUNDED = -1; // Matches a literal as represented in memory by the ShEx library

  var ShExLiteralMatcher = /^"([^]*)"(?:\^\^(.+)|@([\-a-z]+))?$/i; // rdf:type predicate (for 'a' abbreviation)

  var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE = RDF_PREFIX + 'type'; // Characters in literals that require escaping

  var ESCAPE_1 = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
      ESCAPE_g = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
      ESCAPE_replacements = {
    '\\': '\\\\',
    '"': '\\"',
    '/': '\\/',
    '\t': '\\t',
    '\n': '\\n',
    '\r': '\\r',
    '\b': '\\b',
    '\f': '\\f'
  };
  var nodeKinds = {
    'iri': "IRI",
    'bnode': "BNODE",
    'literal': "LITERAL",
    'nonliteral': "NONLITERAL"
  };
  var nonLitNodeKinds = {
    'iri': "IRI",
    'bnode': "BNODE",
    'literal': "LITERAL",
    'nonliteral': "NONLITERAL"
  }; // ## Constructor

  function ShExWriter(outputStream, options) {
    if (!(this instanceof ShExWriter)) return new ShExWriter(outputStream, options); // Shift arguments if the first argument is not a stream

    if (outputStream && typeof outputStream.write !== 'function') options = outputStream, outputStream = null;
    options = options || {}; // If no output stream given, send the output as string through the end callback

    if (!outputStream) {
      var output = '';
      this._outputStream = {
        write: function write(chunk, encoding, done) {
          output += chunk;
          done && done();
        },
        end: function end(done) {
          done && done(null, output);
        }
      };
      this._endStream = true;
    } else {
      this._outputStream = outputStream;
      this._endStream = options.end === undefined ? true : !!options.end;
    } // Initialize writer, depending on the format


    this._prefixIRIs = Object.create(null);
    this._baseIRI = options.base || null;
    options.prefixes && this.addPrefixes(options.prefixes);
    this._error = options.error || _throwError;
    this.forceParens = !options.simplifyParentheses; // default to false

    this._expect = options.lax ? noop : expect;
  }

  ShExWriter.prototype = {
    // ## Private methods
    // ### `_write` writes the argument to the output stream
    _write: function _write(string, callback) {
      this._outputStream.write(string, 'utf8', callback);
    },
    // ### `_writeSchema` writes the shape to the output stream
    _writeSchema: function _writeSchema(schema, done) {
      var _ShExWriter = this;

      this._expect(schema, "type", "Schema");

      _ShExWriter.addPrefixes(schema._prefixes);

      if (schema._base) _ShExWriter._baseIRI = schema._base;
      if (_ShExWriter._baseIRI) _ShExWriter._write("BASE <" + _ShExWriter._baseIRI + ">\n"); // don't use _encodeIriOrBlankNode()

      if (schema.imports) schema.imports.forEach(function (imp) {
        _ShExWriter._write("IMPORT " + _ShExWriter._encodeIriOrBlankNode(imp) + "\n");
      });
      if (schema.startActs) schema.startActs.forEach(function (act) {
        _ShExWriter._expect(act, "type", "SemAct");

        _ShExWriter._write(" %" + _ShExWriter._encodePredicate(act.name) + ("code" in act ? "{" + escapeCode(act.code) + "%" + "}" : "%"));
      });
      if (schema.start) _ShExWriter._write("start = " + _ShExWriter._writeShapeExpr(schema.start, done, true, 0).join('') + "\n");
      if ("shapes" in schema) schema.shapes.forEach(function (shapeExpr) {
        var id = shapeExpr.id;
        var _abstract = "";

        if (shapeExpr.type === "ShapeDecl") {
          if (shapeExpr["abstract"]) _abstract = "abstract ";
          shapeExpr = shapeExpr.shapeExpr;
        }

        _ShExWriter._write(_abstract + _ShExWriter._encodeShapeName(id, false) + " " + _ShExWriter._writeShapeExpr(shapeExpr, done, true, 0).join("") + "\n", done);
      });
    },
    _writeShapeExpr: function _writeShapeExpr(shapeExpr, done, forceBraces, parentPrec) {
      var _ShExWriter = this;

      var pieces = [];
      if (typeof shapeExpr === "string") // ShapeRef
        pieces.push("@", _ShExWriter._encodeShapeName(shapeExpr)); // !!! []s for precedence!
      else if (shapeExpr.type === "ShapeDecl") pieces.push(_ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, false, 3));else if (shapeExpr.type === "ShapeExternal") pieces.push("EXTERNAL");else if (shapeExpr.type === "ShapeAnd") {
          if (parentPrec >= 3) pieces.push("(");
          var lastAndElided = false;
          shapeExpr.shapeExprs.forEach(function (expr, ord) {
            if (ord > 0) {
              // && !!! grammar rules too weird here

              /*
                shapeAtom:
                      nonLitNodeConstraint shapeOrRef?
                    | shapeDecl nonLitNodeConstraint?
                 nonLitInlineNodeConstraint:
                      nonLiteralKind stringFacet*
              */
              var nonLitNodeConstraint = function nonLitNodeConstraint(idx) {
                var c = shapeExpr.shapeExprs[idx];
                return c.type !== "NodeConstraint" || "nodeKind" in c && c.nodeKind === "literal" || "datatype" in c || "values" in c ? false : true;
              };

              var shapeOrRef = function shapeOrRef(idx) {
                var c = shapeExpr.shapeExprs[idx];
                return c.type === "Shape" || c.type === "ShapeRef";
              };

              var shapeDecl = function shapeDecl(idx) {
                var c = shapeExpr.shapeExprs[idx];
                return c.type === "Shape";
              };

              var elideAnd = !lastAndElided && (nonLitNodeConstraint(ord - 1) && shapeOrRef(ord) || shapeDecl(ord - 1) && nonLitNodeConstraint(ord));

              if (!elideAnd || true) {
                // !! temporary work-around for ShExC parser bug
                pieces.push(" AND ");
              }

              lastAndElided = elideAnd;
            }

            [].push.apply(pieces, _ShExWriter._writeShapeExpr(expr, done, false, 3));
          });
          if (parentPrec >= 3) pieces.push(")");
        } else if (shapeExpr.type === "ShapeOr") {
          if (parentPrec >= 2) pieces.push("(");
          shapeExpr.shapeExprs.forEach(function (expr, ord) {
            if (ord > 0) pieces.push(" OR ");
            [].push.apply(pieces, _ShExWriter._writeShapeExpr(expr, done, forceBraces, 2));
          });
          if (parentPrec >= 2) pieces.push(")");
        } else if (shapeExpr.type === "ShapeNot") {
          if (parentPrec >= 4) pieces.push("(");
          pieces.push("NOT ");
          [].push.apply(pieces, _ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, forceBraces, 4));
          if (parentPrec >= 4) pieces.push(")");
        } else if (shapeExpr.type === "Shape") {
          [].push.apply(pieces, _ShExWriter._writeShape(shapeExpr, done, forceBraces));
        } else if (shapeExpr.type === "NodeConstraint") {
          [].push.apply(pieces, _ShExWriter._writeNodeConstraint(shapeExpr, done, forceBraces));
        } else throw Error("expected Shape{,And,Or,Ref} or NodeConstraint in " + JSON.stringify(shapeExpr));
      return pieces;
    },
    // ### `_writeShape` writes the shape to the output stream
    _writeShape: function _writeShape(shape, done, forceBraces) {
      var _ShExWriter = this;

      try {
        var _writeShapeActions = function _writeShapeActions(semActs) {
          if (!semActs) return;
          semActs.forEach(function (act) {
            _ShExWriter._expect(act, "type", "SemAct");

            pieces.push(" %", _ShExWriter._encodePredicate(act.name), "code" in act ? "{" + escapeCode(act.code) + "%" + "}" : "%");
          });
        };

        var _writeCardinality = function _writeCardinality(min, max) {
          if (min === 0 && max === 1) pieces.push("?");else if (min === 0 && max === UNBOUNDED) pieces.push("*");else if (min === undefined && max === undefined) ;else if (min === 1 && max === UNBOUNDED) pieces.push("+");else pieces.push("{", min, ",", max === UNBOUNDED ? "*" : max, "}"); // by coincidence, both use the same character.
        };

        var _writeExpression = function _writeExpression(expr, indent, parentPrecedence) {
          function _writeExpressionActions(semActs) {
            if (semActs) {
              semActs.forEach(function (act) {
                _ShExWriter._expect(act, "type", "SemAct");

                pieces.push("\n" + indent + "   %");
                pieces.push(_ShExWriter._encodeValue(act.name));
                if ("code" in act) pieces.push("{" + escapeCode(act.code) + "%" + "}");else pieces.push("%");
              });
            }
          }

          function _exprGroup(exprs, separator, precedence, forceParens) {
            var needsParens = precedence < parentPrecedence || forceParens;

            if (needsParens) {
              pieces.push("(");
            }

            exprs.forEach(function (nested, ord) {
              _writeExpression(nested, indent + "  ", precedence);

              if (ord < exprs.length - 1) pieces.push(separator);
            });

            if (needsParens) {
              pieces.push(")");
            }
          }

          if (typeof expr === "string") {
            pieces.push("&");
            pieces.push(_ShExWriter._encodeShapeName(expr, false));
          } else {
            if ("id" in expr) {
              pieces.push("$");
              pieces.push(_ShExWriter._encodeIriOrBlankNode(expr.id, true));
            }

            if (expr.type === "TripleConstraint") {
              if (expr.inverse) pieces.push("^");
              if (expr.negated) pieces.push("!");
              pieces.push(indent, _ShExWriter._encodePredicate(expr.predicate), " ");
              if ("valueExpr" in expr) [].push.apply(pieces, _ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));else pieces.push(". ");

              _writeCardinality(expr.min, expr.max);

              _ShExWriter._annotations(pieces, expr.annotations, indent);

              _writeExpressionActions(expr.semActs);
            } else if (expr.type === "OneOf") {
              var needsParens = "id" in expr || "min" in expr || "max" in expr || "annotations" in expr || "semActs" in expr;

              _exprGroup(expr.expressions, "\n" + indent + "| ", 1, needsParens || _ShExWriter.forceParens);

              _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt


              _ShExWriter._annotations(pieces, expr.annotations, indent);

              _writeExpressionActions(expr.semActs);
            } else if (expr.type === "EachOf") {
              var _needsParens = "id" in expr || "min" in expr || "max" in expr || "annotations" in expr || "semActs" in expr;

              _exprGroup(expr.expressions, ";\n" + indent, 2, _needsParens || _ShExWriter.forceParens);

              _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt


              _ShExWriter._annotations(pieces, expr.annotations, indent);

              _writeExpressionActions(expr.semActs);
            } else throw Error("unexpected expr type: " + expr.type);
          }
        };

        var pieces = []; // guessing push/join is faster than concat

        this._expect(shape, "type", "Shape");

        if (shape.closed) pieces.push("CLOSED ");
        [{
          keyword: "extends",
          marker: "EXTENDS "
        }].forEach(function (pair) {
          // pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));
          if (shape[pair.keyword] && shape[pair.keyword].length > 0) {
            shape[pair.keyword].forEach(function (i, ord) {
              if (ord) pieces.push(" ");
              pieces.push(pair.marker);
              [].push.apply(pieces, _ShExWriter._writeShapeExpr(i, done, true, 0));
            });
            pieces.push(" ");
          }
        });

        if (shape.extra && shape.extra.length > 0) {
          pieces.push("EXTRA ");
          shape.extra.forEach(function (i, ord) {
            pieces.push(_ShExWriter._encodeShapeName(i, false) + " ");
          });
          pieces.push(" ");
        }

        var empties = ["values", "length", "minlength", "maxlength", "pattern", "flags"];
        pieces.push("{\n");
        if (shape.expression) // t: 0, 0Extend1
          _writeExpression(shape.expression, "  ", 0);
        pieces.push("\n}");

        _writeShapeActions(shape.semActs);

        _ShExWriter._annotations(pieces, shape.annotations, "  ");

        return pieces;
      } catch (error) {
        done && done(error);
      }
    },
    // ### `_writeShape` writes the shape to the output stream
    _writeNodeConstraint: function _writeNodeConstraint(v, done) {
      var _ShExWriter = this;

      try {
        _ShExWriter._expect(v, "type", "NodeConstraint");

        var pieces = [];
        if (v.nodeKind in nodeKinds) pieces.push(nodeKinds[v.nodeKind], " ");else if (v.nodeKind !== undefined) _ShExWriter._error("unexpected nodeKind: " + v.nodeKind); // !!!!

        this._fillNodeConstraint(pieces, v, done);

        this._annotations(pieces, v.annotations, "  ");

        return pieces;
      } catch (error) {
        done && done(error);
      }
    },
    _annotations: function _annotations(pieces, annotations, indent) {
      var _ShExWriter = this;

      if (annotations) {
        annotations.forEach(function (a) {
          _ShExWriter._expect(a, "type", "Annotation");

          pieces.push("//\n" + indent + "   ");
          pieces.push(_ShExWriter._encodeValue(a.predicate));
          pieces.push(" ");
          pieces.push(_ShExWriter._encodeValue(a.object));
        });
      }
    },
    _fillNodeConstraint: function _fillNodeConstraint(pieces, v, done) {
      var _ShExWriter = this;

      if (v.datatype && v.values) _ShExWriter._error("found both datatype and values in " + expr);

      if (v.datatype) {
        pieces.push(_ShExWriter._encodeShapeName(v.datatype));
      }

      if (v.values) {
        pieces.push("[");
        v.values.forEach(function (t, ord) {
          if (ord > 0) pieces.push(" ");

          if (!isTerm(t)) {
            var langOrLiteral = function langOrLiteral(t, c) {
              return ["LanguageStem", "LanguageStemRange"].indexOf(t.type) !== -1 ? "@" + c : ["LiteralStem", "LiteralStemRange"].indexOf(t.type) !== -1 ? '"' + c.replace(ESCAPE_g, c) + '"' : _ShExWriter._encodeValue(c);
            };

            //          expect(t, "type", "IriStemRange");
            if (!("type" in t)) runtimeError("expected " + JSON.stringify(t) + " to have a 'type' attribute.");
            var stemRangeTypes = ["Language", "IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
            if (stemRangeTypes.indexOf(t.type) === -1) runtimeError("expected type attribute '" + t.type + "' to be in '" + stemRangeTypes + "'.");

            if (t.type === "Language") {
              pieces.push("@" + t.languageTag);
            } else if (!isTerm(t.stem)) {
              expect(t.stem, "type", "Wildcard");
              pieces.push(".");
            } else {
              pieces.push(langOrLiteral(t, t.stem) + "~");
            }

            if (t.exclusions) {
              t.exclusions.forEach(function (c) {
                pieces.push(" - ");

                if (!isTerm(c)) {
                  //                expect(c, "type", "IriStem");
                  if (!("type" in c)) runtimeError("expected " + JSON.stringify(c) + " to have a 'type' attribute.");
                  var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
                  if (stemTypes.indexOf(c.type) === -1) runtimeError("expected type attribute '" + c.type + "' to be in '" + stemTypes + "'.");
                  pieces.push(langOrLiteral(t, c.stem) + "~");
                } else {
                  pieces.push(langOrLiteral(t, c));
                }
              });
            }
          } else {
            pieces.push(_ShExWriter._encodeValue(t));
          }
        });
        pieces.push("]");
      }

      if ('pattern' in v) {
        var pattern = v.pattern.replace(/\//g, "\\/"); // if (ESCAPE_1.test(pattern))
        //   pattern = pattern.replace(ESCAPE_g, characterReplacer);

        var flags = 'flags' in v ? v.flags : "";
        pieces.push("/" + pattern + "/" + flags + " ");
      }

      ['length', 'minlength', 'maxlength', 'mininclusive', 'minexclusive', 'maxinclusive', 'maxexclusive', 'totaldigits', 'fractiondigits'].forEach(function (a) {
        if (v[a]) pieces.push(" ", a, " ", v[a]);
      });
      return pieces;

      function isTerm(t) {
        return _typeof(t) !== "object" || "value" in t && Object.keys(t).reduce(function (r, k) {
          return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
        }, true);
      }
    },
    // ### `_encodeIriOrBlankNode` represents an IRI or blank node
    _encodeIriOrBlankNode: function _encodeIriOrBlankNode(iri, trailingSpace) {
      trailingSpace = trailingSpace ? ' ' : ''; // A blank node is represented as-is

      if (iri[0] === '_' && iri[1] === ':') return iri; // Escape special characters

      if (ESCAPE_1.test(iri)) iri = iri.replace(ESCAPE_g, characterReplacer); // Try to represent the IRI as prefixed name

      var prefixMatch = this._prefixRegex.exec(iri);

      return !prefixMatch ? this._relateUrl(iri) : (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]) + trailingSpace;
    },
    // ### ``
    _relateUrl: function _relateUrl(iri) {
      var base = this._baseIRI;

      try {
        if (base && new URL(base).host === new URL(iri).host) // https://github.com/stevenvachon/relateurl/issues/28
          iri = RelateUrl.relate(base, iri, {
            output: RelateUrl.ROOT_PATH_RELATIVE
          });
      } catch (e) {// invalid URL for e.g. already relative IMPORTs
      }

      return '<' + iri + '>';
    },
    // ### `_encodeLiteral` represents a literal
    _encodeLiteral: function _encodeLiteral(value, type, language) {
      // Escape special characters
      if (ESCAPE_1.test(value)) value = value.replace(ESCAPE_g, characterReplacer); // Write the literal, possibly with type or language

      if (language) {
        return '"' + value + '"@' + language;
      } else if (type) {
        // && type !== "http://www.w3.org/2001/XMLSchema#integer" is implied by the parsing rules.
        if (type === "http://www.w3.org/2001/XMLSchema#integer" && value.match(/^[+-]?[0-9]+$/)) {
          return value;
        } else if (type === "http://www.w3.org/2001/XMLSchema#decimal" && value.match(/^[+-]?[0-9]*\.[0-9]+$/)) {
          return value;
        } else if (type === "http://www.w3.org/2001/XMLSchema#double" && value.match(/^[+-]?([0-9]+\.[0-9]*[eE][+-]?[0-9]+|\.?[0-9]+[eE][+-]?[0-9]+)$/)) {
          return value;
        } else {
          return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);
        }
      } else {
        return '"' + value + '"';
      }
    },
    // ### `_encodeShapeName` represents a subject
    _encodeShapeName: function _encodeShapeName(subject, trailingSpace) {
      if (subject[0] === '"') throw new Error('A literal as subject is not allowed: ' + subject);
      return this._encodeIriOrBlankNode(subject, trailingSpace);
    },
    // ### `_encodePredicate` represents a predicate
    _encodePredicate: function _encodePredicate(predicate) {
      if (predicate[0] === '"') throw new Error('A literal as predicate is not allowed: ' + predicate);
      return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);
    },
    // ### `_encodeValue` represents an object
    _encodeValue: function _encodeValue(object) {
      // Represent an IRI or blank node
      if (_typeof(object) !== "object") return this._encodeIriOrBlankNode(object); // Represent a literal

      return this._encodeLiteral(object.value, object.type, object.language);
    },
    // ### `_blockedWrite` replaces `_write` after the writer has been closed
    _blockedWrite: function _blockedWrite() {
      throw new Error('Cannot write because the writer has been closed.');
    },
    writeSchema: function writeSchema(shape, done) {
      this._writeSchema(shape, done);

      this.end(done);
    },
    // ### `addShape` adds the shape to the output stream
    addShape: function addShape(shape, name, done) {
      this._write(_ShExWriter._encodeShapeName(name, false) + " " + _ShExWriter._writeShapeExpr(shape, done, true, 0).join(""), done);
    },
    // ### `addShapes` adds the shapes to the output stream
    addShapes: function addShapes(shapes) {
      for (var i = 0; i < shapes.length; i++) {
        this.addShape(shapes[i]);
      }
    },
    // ### `addPrefix` adds the prefix to the output stream
    addPrefix: function addPrefix(prefix, iri, done) {
      var prefixes = {};
      prefixes[prefix] = iri;
      this.addPrefixes(prefixes, done);
    },
    // ### `addPrefixes` adds the prefixes to the output stream
    addPrefixes: function addPrefixes(prefixes, done) {
      // Add all useful prefixes
      var prefixIRIs = this._prefixIRIs;
      var hasPrefixes = false;

      for (var prefix in prefixes) {
        // Verify whether the prefix can be used and does not exist yet
        var iri = prefixes[prefix];

        if ( // @@ /[#\/]$/.test(iri) && !! what was that?
        prefixIRIs[iri] !== (prefix += ':')) {
          hasPrefixes = true;
          prefixIRIs[iri] = prefix; // Write prefix

          this._write('PREFIX ' + prefix + ' <' + iri + '>\n');
        }
      } // Recreate the prefix matcher


      if (hasPrefixes) {
        var IRIlist = '',
            prefixList = '';

        for (var prefixIRI in prefixIRIs) {
          IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
          prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
        }

        IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
        this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' + '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
      } // End a prefix block with a newline


      this._write(hasPrefixes ? '\n' : '', done);
    },
    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
    _prefixRegex: /$0^/,
    // ### `end` signals the end of the output stream
    end: function end(done) {
      // Disallow further writing
      this._write = this._blockedWrite; // Try to end the underlying stream, ensuring done is called exactly one time

      var singleDone = done && function (error, result) {
        singleDone = null, done(error, result);
      };

      if (this._endStream) {
        try {
          return this._outputStream.end(singleDone);
        } catch (error) {
          /* error closing stream */
        }
      }

      singleDone && singleDone();
    }
  }; // Replaces a character by its escaped version

  function characterReplacer(character) {
    // Replace a single character by its escaped version
    var result = ESCAPE_replacements[character];

    if (result === undefined) {
      // Replace a single character with its 4-bit unicode escape sequence
      if (character.length === 1) {
        result = character.charCodeAt(0).toString(16);
        result = "\\u0000".substr(0, 6 - result.length) + result;
      } // Replace a surrogate pair with its 8-bit unicode escape sequence
      else {
          result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);
          result = "\\U00000000".substr(0, 10 - result.length) + result;
        }
    }

    return result;
  }

  function escapeCode(code) {
    return code.replace(/\\/g, "\\\\").replace(/%/g, "\\%");
  }
  /** _throwError: overridable function to throw Errors().
   *
   * @param func (optional): function at which to truncate stack trace
   * @param str: error message
   */


  function _throwError(func, str) {
    if (typeof func !== "function") {
      str = func;
      func = _throwError;
    }

    var e = new Error(str);
    Error.captureStackTrace(e, func);
    throw e;
  } // Expect property p with value v in object o


  function expect(o, p, v) {
    if (!(p in o)) this._error(expect, "expected " + o + " to have a ." + p);
    if (arguments.length > 2 && o[p] !== v) this._error(expect, "expected " + o[o] + " to equal ." + v);
  } // The empty function


  function noop() {}

  return ShExWriter;
}(); // Export the `ShExWriter` class as a whole.


if (true) module.exports = ShExWriterCjsModule; // node environment

/***/ }),

/***/ 58739:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "_void": () => (/* reexport */ _void),
  "as": () => (/* reexport */ as),
  "cc": () => (/* reexport */ cc),
  "cnt": () => (/* reexport */ cnt),
  "csvw": () => (/* reexport */ csvw),
  "ctag": () => (/* reexport */ ctag),
  "dbo": () => (/* reexport */ dbo),
  "dc11": () => (/* reexport */ dc11),
  "dcat": () => (/* reexport */ dcat),
  "dcterms": () => (/* reexport */ dcterms),
  "dqv": () => (/* reexport */ dqv),
  "dtype": () => (/* reexport */ dtype),
  "duv": () => (/* reexport */ duv),
  "foaf": () => (/* reexport */ foaf),
  "frbr": () => (/* reexport */ frbr),
  "geo": () => (/* reexport */ geo),
  "geof": () => (/* reexport */ geof),
  "geor": () => (/* reexport */ geor),
  "gml": () => (/* reexport */ gml),
  "gn": () => (/* reexport */ gn),
  "gr": () => (/* reexport */ gr),
  "grddl": () => (/* reexport */ grddl),
  "gtfs": () => (/* reexport */ gtfs),
  "http": () => (/* reexport */ http),
  "hydra": () => (/* reexport */ hydra),
  "ical": () => (/* reexport */ ical),
  "ldp": () => (/* reexport */ ldp),
  "lvont": () => (/* reexport */ lvont),
  "ma": () => (/* reexport */ ma),
  "oa": () => (/* reexport */ oa),
  "og": () => (/* reexport */ og),
  "org": () => (/* reexport */ org),
  "owl": () => (/* reexport */ owl),
  "prov": () => (/* reexport */ prov),
  "qb": () => (/* reexport */ qb),
  "qudt": () => (/* reexport */ qudt),
  "qudtv": () => (/* reexport */ qudtv),
  "rdau": () => (/* reexport */ rdau),
  "rdf": () => (/* reexport */ rdf),
  "rdfa": () => (/* reexport */ rdfa),
  "rdfs": () => (/* reexport */ rdfs),
  "rev": () => (/* reexport */ rev),
  "rif": () => (/* reexport */ rif),
  "rr": () => (/* reexport */ rr),
  "rss": () => (/* reexport */ rss),
  "schema": () => (/* reexport */ schema),
  "sd": () => (/* reexport */ sd),
  "sdmx": () => (/* reexport */ sdmx),
  "sem": () => (/* reexport */ sem),
  "sf": () => (/* reexport */ sf),
  "sh": () => (/* reexport */ sh),
  "sioc": () => (/* reexport */ sioc),
  "skos": () => (/* reexport */ skos),
  "skosxl": () => (/* reexport */ skosxl),
  "sosa": () => (/* reexport */ sosa),
  "ssn": () => (/* reexport */ ssn),
  "time": () => (/* reexport */ time),
  "v": () => (/* reexport */ v),
  "vaem": () => (/* reexport */ vaem),
  "vann": () => (/* reexport */ vann),
  "vcard": () => (/* reexport */ vcard),
  "vs": () => (/* reexport */ vs),
  "wdr": () => (/* reexport */ wdr),
  "wdrs": () => (/* reexport */ wdrs),
  "wgs": () => (/* reexport */ wgs),
  "xhv": () => (/* reexport */ xhv),
  "xkos": () => (/* reexport */ xkos),
  "xml": () => (/* reexport */ xml),
  "xsd": () => (/* reexport */ xsd)
});

// EXTERNAL MODULE: ./node_modules/@rdfjs/namespace/index.js
var namespace = __webpack_require__(2325);
var namespace_default = /*#__PURE__*/__webpack_require__.n(namespace);
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/as.js

var as = namespace_default()("http://www.w3.org/ns/activitystreams#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/cc.js

var cc = namespace_default()("http://creativecommons.org/ns#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/cnt.js

var cnt = namespace_default()("http://www.w3.org/2011/content#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/csvw.js

var csvw = namespace_default()("http://www.w3.org/ns/csvw#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ctag.js

var ctag = namespace_default()("http://commontag.org/ns#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dbo.js

var dbo = namespace_default()("http://dbpedia.org/ontology/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dc11.js

var dc11 = namespace_default()("http://purl.org/dc/elements/1.1/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dcat.js

var dcat = namespace_default()("http://www.w3.org/ns/dcat#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dcterms.js

var dcterms = namespace_default()("http://purl.org/dc/terms/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dqv.js

var dqv = namespace_default()("http://www.w3.org/ns/dqv#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/dtype.js

var dtype = namespace_default()("http://www.linkedmodel.org/schema/dtype#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/duv.js

var duv = namespace_default()("http://www.w3.org/ns/duv#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/foaf.js

var foaf = namespace_default()("http://xmlns.com/foaf/0.1/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/frbr.js

var frbr = namespace_default()("http://purl.org/vocab/frbr/core#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/geo.js

var geo = namespace_default()("http://www.opengis.net/ont/geosparql#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/geof.js

var geof = namespace_default()("http://www.opengis.net/def/function/geosparql/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/geor.js

var geor = namespace_default()("http://www.opengis.net/def/rule/geosparql/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gml.js

var gml = namespace_default()("http://www.opengis.net/ont/gml#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gn.js

var gn = namespace_default()("http://www.geonames.org/ontology#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gr.js

var gr = namespace_default()("http://purl.org/goodrelations/v1#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/grddl.js

var grddl = namespace_default()("http://www.w3.org/2003/g/data-view#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/gtfs.js

var gtfs = namespace_default()("http://vocab.gtfs.org/terms#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/http.js

var http = namespace_default()("http://www.w3.org/2011/http#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/hydra.js

var hydra = namespace_default()("http://www.w3.org/ns/hydra/core#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ical.js

var ical = namespace_default()("http://www.w3.org/2002/12/cal/icaltzd#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ldp.js

var ldp = namespace_default()("http://www.w3.org/ns/ldp#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/lvont.js

var lvont = namespace_default()("http://lexvo.org/ontology#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ma.js

var ma = namespace_default()("http://www.w3.org/ns/ma-ont#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/oa.js

var oa = namespace_default()("http://www.w3.org/ns/oa#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/og.js

var og = namespace_default()("http://ogp.me/ns#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/org.js

var org = namespace_default()("http://www.w3.org/ns/org#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/owl.js

var owl = namespace_default()("http://www.w3.org/2002/07/owl#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/prov.js

var prov = namespace_default()("http://www.w3.org/ns/prov#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/qb.js

var qb = namespace_default()("http://purl.org/linked-data/cube#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/qudt.js

var qudt = namespace_default()("http://qudt.org/schema/qudt/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/qudtv.js

var qudtv = namespace_default()("http://qudt.org/vocab/qudt/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdf.js

var rdf = namespace_default()("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdau.js

var rdau = namespace_default()("http://rdaregistry.info/Elements/u/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdfa.js

var rdfa = namespace_default()("http://www.w3.org/ns/rdfa#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rdfs.js

var rdfs = namespace_default()("http://www.w3.org/2000/01/rdf-schema#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rev.js

var rev = namespace_default()("http://purl.org/stuff/rev#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rif.js

var rif = namespace_default()("http://www.w3.org/2007/rif#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rr.js

var rr = namespace_default()("http://www.w3.org/ns/r2rml#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/rss.js

var rss = namespace_default()("http://purl.org/rss/1.0/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sem.js

var sem = namespace_default()("http://semanticweb.cs.vu.nl/2009/11/sem/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/schema.js

var schema = namespace_default()("http://schema.org/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sd.js

var sd = namespace_default()("http://www.w3.org/ns/sparql-service-description#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sdmx.js

var sdmx = namespace_default()("http://purl.org/linked-data/sdmx#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sf.js

var sf = namespace_default()("http://www.opengis.net/ont/sf#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sh.js

var sh = namespace_default()("http://www.w3.org/ns/shacl#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sioc.js

var sioc = namespace_default()("http://rdfs.org/sioc/ns#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/skos.js

var skos = namespace_default()("http://www.w3.org/2004/02/skos/core#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/skosxl.js

var skosxl = namespace_default()("http://www.w3.org/2008/05/skos-xl#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/sosa.js

var sosa = namespace_default()("http://www.w3.org/ns/sosa/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/ssn.js

var ssn = namespace_default()("http://www.w3.org/ns/ssn/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/time.js

var time = namespace_default()("http://www.w3.org/2006/time#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/v.js

var v = namespace_default()("http://rdf.data-vocabulary.org/#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vaem.js

var vaem = namespace_default()("http://www.linkedmodel.org/schema/vaem#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vann.js

var vann = namespace_default()("http://purl.org/vocab/vann/");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vcard.js

var vcard = namespace_default()("http://www.w3.org/2006/vcard/ns#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/void.js

var _void = namespace_default()("http://rdfs.org/ns/void#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/vs.js

var vs = namespace_default()("http://www.w3.org/2003/06/sw-vocab-status/ns#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/wdr.js

var wdr = namespace_default()("http://www.w3.org/2007/05/powder#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/wdrs.js

var wdrs = namespace_default()("http://www.w3.org/2007/05/powder-s#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/wgs.js

var wgs = namespace_default()("http://www.w3.org/2003/01/geo/wgs84_pos#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xhv.js

var xhv = namespace_default()("http://www.w3.org/1999/xhtml/vocab#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xkos.js

var xkos = namespace_default()("http://rdf-vocabulary.ddialliance.org/xkos#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xml.js

var xml = namespace_default()("http://www.w3.org/XML/1998/namespace");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/vocabularies/xsd.js

var xsd = namespace_default()("http://www.w3.org/2001/XMLSchema#");
;// CONCATENATED MODULE: ./node_modules/@tpluscode/rdf-ns-builders/dist/es/index.js






































































/***/ }),

/***/ 70803:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.JisonLexer = void 0;

var JisonLexer =
/** @class */
function () {
  function JisonLexer(yy) {
    if (yy === void 0) {
      yy = {};
    }

    this.yy = yy;
    this.EOF = 1;
    this.options = {};
    this.yyleng = 0;
    this.yylloc = {
      first_line: 1,
      first_column: 0,
      last_line: 1,
      last_column: 0
    };
  }

  JisonLexer.prototype.parseError = function (str, hash) {
    if (this.yy.parser) {
      this.yy.parser.parseError(str, hash);
    } else {
      throw new Error(str);
    }
  }; // resets the lexer, sets new input


  JisonLexer.prototype.setInput = function (input, yy) {
    this.yy = yy || this.yy || {};
    this._input = input;
    this._more = this._backtrack = this.done = false;
    this.yylineno = this.yyleng = 0;
    this.yytext = this.matched = this.match = '';
    this.conditionStack = ['INITIAL'];
    this.yylloc = {
      first_line: 1,
      first_column: 0,
      last_line: 1,
      last_column: 0
    };

    if (this.options.ranges) {
      this.yylloc.range = [0, 0];
    }

    this.offset = 0;
    return this;
  }; // consumes and returns one char from the input


  JisonLexer.prototype.input = function () {
    var ch = this._input[0];
    this.yytext += ch;
    this.yyleng++;
    this.offset++;
    this.match += ch;
    this.matched += ch;
    var lines = ch.match(/(?:\r\n?|\n).*/g);

    if (lines) {
      this.yylineno++;
      this.yylloc.last_line++;
    } else {
      this.yylloc.last_column++;
    }

    if (this.options.ranges) {
      this.yylloc.range[1]++;
    }

    this._input = this._input.slice(1);
    return ch;
  }; // unshifts one char (or a string) into the input


  JisonLexer.prototype.unput = function (ch) {
    var len = ch.length;
    var lines = ch.split(/(?:\r\n?|\n)/g);
    this._input = ch + this._input;
    this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

    this.offset -= len;
    var oldLines = this.match.split(/(?:\r\n?|\n)/g);
    this.match = this.match.substr(0, this.match.length - 1);
    this.matched = this.matched.substr(0, this.matched.length - 1);

    if (lines.length - 1) {
      this.yylineno -= lines.length - 1;
    }

    var r = this.yylloc.range;
    var yylloc = {
      first_line: this.yylloc.first_line,
      last_line: this.yylineno + 1,
      first_column: this.yylloc.first_column,
      last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
    };
    this.yylloc = yylloc;

    if (this.options.ranges) {
      this.yylloc.range = [r[0], r[0] + this.yyleng - len];
    }

    this.yyleng = this.yytext.length;
    return this;
  }; // When called from action, caches matched text and appends it on next action


  JisonLexer.prototype.more = function () {
    this._more = true;
    return this;
  }; // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.


  JisonLexer.prototype.reject = function () {
    if (this.options.backtrack_lexer) {
      this._backtrack = true;
    } else {
      return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
        text: "",
        token: null,
        line: this.yylineno
      });
    }

    return this;
  }; // retain first n characters of the match


  JisonLexer.prototype.less = function (n) {
    this.unput(this.match.slice(n));
  }; // displays already matched input, i.e. for error messages


  JisonLexer.prototype.pastInput = function () {
    var past = this.matched.substr(0, this.matched.length - this.match.length);
    return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
  }; // displays upcoming input, i.e. for error messages


  JisonLexer.prototype.upcomingInput = function () {
    var next = this.match;

    if (next.length < 20) {
      next += this._input.substr(0, 20 - next.length);
    }

    return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
  }; // displays the character position where the lexing error occurred, i.e. for error messages


  JisonLexer.prototype.showPosition = function () {
    var pre = this.pastInput();
    var c = new Array(pre.length + 1).join("-");
    return pre + this.upcomingInput() + "\n" + c + "^";
  }; // test the lexed token: return FALSE when not a match, otherwise return token


  JisonLexer.prototype.test_match = function (match, indexed_rule) {
    var token, lines, backup;

    if (this.options.backtrack_lexer) {
      // save context
      backup = {
        yylineno: this.yylineno,
        yylloc: {
          first_line: this.yylloc.first_line,
          last_line: this.yylloc.last_line,
          first_column: this.yylloc.first_column,
          last_column: this.yylloc.last_column
        },
        yytext: this.yytext,
        match: this.match,
        matches: this.matches,
        matched: this.matched,
        yyleng: this.yyleng,
        offset: this.offset,
        _more: this._more,
        _input: this._input,
        yy: this.yy,
        conditionStack: this.conditionStack.slice(0),
        done: this.done
      };

      if (this.options.ranges) {
        backup.yylloc.range = this.yylloc.range.slice(0);
      }
    }

    lines = match[0].match(/(?:\r\n?|\n).*/g);

    if (lines) {
      this.yylineno += lines.length;
    }

    this.yylloc = {
      first_line: this.yylloc.last_line,
      last_line: this.yylineno + 1,
      first_column: this.yylloc.last_column,
      last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
    };
    this.yytext += match[0];
    this.match += match[0];
    this.matches = match;
    this.yyleng = this.yytext.length;

    if (this.options.ranges) {
      this.yylloc.range = [this.offset, this.offset += this.yyleng];
    }

    this._more = false;
    this._backtrack = false;
    this._input = this._input.slice(match[0].length);
    this.matched += match[0];
    token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

    if (this.done && this._input) {
      this.done = false;
    }

    if (token) {
      return token;
    } else if (this._backtrack) {
      // recover context
      for (var k in backup) {
        // what's the typescript-y way to copy fields across?
        this[k] = backup[k];
      }

      return false; // rule action called reject() implying the next rule should be tested instead.
    }

    return false;
  }; // return next match in input


  JisonLexer.prototype.next = function () {
    if (this.done) {
      return this.EOF;
    }

    if (!this._input) {
      this.done = true;
    }

    var token,
        match = null,
        tempMatch,
        index;

    if (!this._more) {
      this.yytext = '';
      this.match = '';
    }

    var rules = this._currentRules();

    for (var i = 0; i < rules.length; i++) {
      tempMatch = this._input.match(this.rules[rules[i]]);

      if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
        match = tempMatch;
        index = i;

        if (this.options.backtrack_lexer) {
          token = this.test_match(tempMatch, rules[i]);

          if (token !== false) {
            return token;
          } else if (this._backtrack) {
            match = null;
            continue; // rule action called reject() implying a rule MISmatch.
          } else {
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
          }
        } else if (!this.options.flex) {
          break;
        }
      }
    }

    if (match) {
      token = this.test_match(match, rules[index]);

      if (token !== false) {
        return token;
      } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


      return false;
    }

    if (this._input === "") {
      return this.EOF;
    } else {
      return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
        text: "",
        token: null,
        line: this.yylineno
      });
    }
  }; // return next match that has a token


  JisonLexer.prototype.lex = function () {
    var r = this.next();

    if (r) {
      return r;
    } else {
      return this.lex();
    }
  }; // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)


  JisonLexer.prototype.begin = function (condition) {
    this.conditionStack.push(condition);
  }; // pop the previously active lexer condition state off the condition stack


  JisonLexer.prototype.popState = function () {
    var n = this.conditionStack.length - 1;

    if (n > 0) {
      return this.conditionStack.pop();
    } else {
      return this.conditionStack[0];
    }
  }; // produce the lexer rule set which is active for the currently active lexer condition state


  JisonLexer.prototype._currentRules = function () {
    if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
      return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
    } else {
      return this.conditions["INITIAL"].rules;
    }
  }; // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available


  JisonLexer.prototype.topState = function (n) {
    n = this.conditionStack.length - 1 - Math.abs(n || 0);

    if (n >= 0) {
      return this.conditionStack[n];
    } else {
      return "INITIAL";
    }
  }; // alias for begin(condition)


  JisonLexer.prototype.pushState = function (condition) {
    this.begin(condition);
  }; // return the number of states currently on the stack


  JisonLexer.prototype.stateStackSize = function () {
    return this.conditionStack.length;
  };

  return JisonLexer;
}();

exports.JisonLexer = JisonLexer;

/***/ }),

/***/ 64605:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.o = exports.JisonParser = void 0;

var JisonParser =
/** @class */
function () {
  function JisonParser(yy, lexer) {
    if (yy === void 0) {
      yy = {};
    }

    this.yy = yy;
    this.lexer = lexer;
  }

  JisonParser.prototype.trace = function (str) {};

  JisonParser.prototype.parseError = function (str, hash) {
    if (hash.recoverable) {
      this.trace(str);
    } else {
      var error = new Error(str);
      error.hash = hash;
      throw error;
    }
  };

  JisonParser.prototype.parse = function (input) {
    var self = this,
        stack = [0],
        tstack = [],
        // token stack
    vstack = [null],
        // semantic value stack
    lstack = [],
        // location stack
    table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;
    var args = lstack.slice.call(arguments, 1); //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var typedYy = {};
    var sharedState = {
      yy: typedYy
    }; // copy state

    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;

    if (typeof lexer.yylloc == 'undefined') {
      lexer.yylloc = {};
    }

    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
      this.parseError = sharedState.yy.parseError;
    }

    function popStack(n) {
      stack.length = stack.length - 2 * n;
      vstack.length = vstack.length - n;
      lstack.length = lstack.length - n;
    }

    var lex = function lex() {
      var token; // @ts-ignore

      token = lexer.lex() || EOF; // if token isn't its numeric value, convert

      if (typeof token !== 'number') {
        token = self.symbols_[token] || token;
      }

      return token;
    };

    var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;

    while (true) {
      // retreive state number from top of stack
      state = stack[stack.length - 1]; // use default actions if available

      if (this.defaultActions[state]) {
        action = this.defaultActions[state];
      } else {
        if (symbol === null || typeof symbol == 'undefined') {
          symbol = lex();
        } // read action for current state and first input


        action = table[state] && table[state][symbol];
      }

      _handle_error: // handle parse error
      if (typeof action === 'undefined' || !action.length || !action[0]) {
        var error_rule_depth = null;
        var errStr = '';

        if (!recovering) {
          // first see if there's any chance at hitting an error recovery rule:
          error_rule_depth = locateNearestErrorRecoveryRule(state); // Report error

          expected = [];

          for (var _p in table[state]) {
            p = Number(_p);

            if (this.terminals_[p] && p > TERROR) {
              expected.push("'" + this.terminals_[p] + "'");
            }
          }

          if (lexer.showPosition) {
            errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
          } else {
            errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " + (symbol == EOF ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
          }

          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: lexer.yylloc,
            expected: expected,
            recoverable: error_rule_depth !== null
          });
        } else if (preErrorSymbol !== EOF) {
          error_rule_depth = locateNearestErrorRecoveryRule(state);
        } // just recovered from another error


        if (recovering == 3) {
          if (symbol === EOF || preErrorSymbol === EOF) {
            throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
          } // discard current lookahead and grab another


          yyleng = lexer.yyleng;
          yytext = lexer.yytext;
          yylineno = lexer.yylineno;
          yyloc = lexer.yylloc;
          symbol = lex();
        } // try to recover from error


        if (error_rule_depth === null) {
          throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
        }

        popStack(error_rule_depth || 0);
        preErrorSymbol = symbol == TERROR ? null : symbol; // save the lookahead token

        symbol = TERROR; // insert generic error symbol as new lookahead

        state = stack[stack.length - 1];
        action = table[state] && table[state][TERROR];
        recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
      } // this shouldn't happen, unless resolve defaults are off


      if (action[0] instanceof Array && action.length > 1) {
        throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
      }

      switch (action[0]) {
        case 1:
          // shift
          //this.shiftCount++;
          stack.push(symbol);
          vstack.push(lexer.yytext);
          lstack.push(lexer.yylloc);
          stack.push(action[1]); // push state

          symbol = null;

          if (!preErrorSymbol) {
            // normal execution/no error
            yyleng = lexer.yyleng;
            yytext = lexer.yytext;
            yylineno = lexer.yylineno;
            yyloc = lexer.yylloc;

            if (recovering > 0) {
              recovering--;
            }
          } else {
            // error just occurred, resume old lookahead f/ before error
            symbol = preErrorSymbol;
            preErrorSymbol = null;
          }

          break;

        case 2:
          // reduce
          //this.reductionCount++;
          len = this.productions_[action[1]][1]; // perform semantic action

          yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
          // default location, uses first token for firsts, last for lasts

          yyval._$ = {
            first_line: lstack[lstack.length - (len || 1)].first_line,
            last_line: lstack[lstack.length - 1].last_line,
            first_column: lstack[lstack.length - (len || 1)].first_column,
            last_column: lstack[lstack.length - 1].last_column
          };

          if (ranges) {
            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
          } // @ts-ignore


          r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

          if (typeof r !== 'undefined') {
            return r;
          } // pop off stack


          if (len) {
            stack = stack.slice(0, -1 * len * 2);
            vstack = vstack.slice(0, -1 * len);
            lstack = lstack.slice(0, -1 * len);
          }

          stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)

          vstack.push(yyval.$);
          lstack.push(yyval._$); // goto new state = table[STATE][NONTERMINAL]

          newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
          stack.push(newState);
          break;

        case 3:
          // accept
          return true;
      }
    }

    return true; // Return the rule stack depth where the nearest error rule can be found.
    // Return FALSE when no error recovery rule was found.

    function locateNearestErrorRecoveryRule(state) {
      var stack_probe = stack.length - 1;
      var depth = 0; // try to recover from error

      for (;;) {
        // check for error recovery rule in this state
        if (TERROR.toString() in table[state]) {
          return depth;
        }

        if (state === 0 || stack_probe < 2) {
          return null; // No suitable error recovery rule available.
        }

        stack_probe -= 2; // popStack(1): [symbol, action]

        state = stack[stack_probe];
        ++depth;
      }
    }
  };

  return JisonParser;
}();

exports.JisonParser = JisonParser;
/* Function that extends an object with the given value for all given keys
 * e.g., o([1, 3, 4], [6, 7], { x: 1, y: 2 }) = { 1: [6, 7]; 3: [6, 7], 4: [6, 7], x: 1, y: 2 }
 * This is used to docompress parser tables at module load time.
 */

function o(k, v, o) {
  var l = k.length;

  for (o = o || {}; l--; o[k[l]] = v) {
    ;
  }

  return o;
}

exports.o = o;

/***/ }),

/***/ 34475:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);
/* provided dependency */ var console = __webpack_require__(85271);
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var _require = __webpack_require__(84583),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(4541);

var _require2 = __webpack_require__(45058),
    inspect = _require2.inspect;

var _require$types = (__webpack_require__(45058).types),
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : (__webpack_require__(34093).assign);
var objectIs = Object.is ? Object.is : __webpack_require__(40731);
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(523);

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = (/* unused pure expression or super */ null && (["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"]));

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj["catch"] === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    })["catch"](function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert["throws"] = function _throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [_throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ 4541:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var _require = __webpack_require__(45058),
    inspect = _require.inspect;

var _require2 = __webpack_require__(84583),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError = /*#__PURE__*/function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ 84583:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError = /*#__PURE__*/function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(34475);
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(45058);
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(34475);
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ 523:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(40731);
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(43054);

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = (__webpack_require__(45058).types),
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1["delete"](val1);
  memos.val2["delete"](val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set["delete"](val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set["delete"](key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ 31806:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(45642);

/***/ }),

/***/ 31107:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

var settle = __webpack_require__(61135);

var cookies = __webpack_require__(44448);

var buildURL = __webpack_require__(65610);

var buildFullPath = __webpack_require__(56028);

var parseHeaders = __webpack_require__(39077);

var isURLSameOrigin = __webpack_require__(51734);

var createError = __webpack_require__(62226);

var defaults = __webpack_require__(61285);

var Cancel = __webpack_require__(85007);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;

    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response); // Clean up request

      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        } // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request


        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        } // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'


        setTimeout(onloadend);
      };
    } // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || defaults.transitional;

      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }

      reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    } // Add responseType to request if needed


    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function onCanceled(cancel) {
        if (!request) {
          return;
        }

        reject(!cancel || cancel && cancel.type ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);

      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),

/***/ 45642:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

var bind = __webpack_require__(19692);

var Axios = __webpack_require__(79108);

var mergeConfig = __webpack_require__(26163);

var defaults = __webpack_require__(61285);
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context); // Factory for creating new instances

  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Expose Cancel & CancelToken

axios.Cancel = __webpack_require__(85007);
axios.CancelToken = __webpack_require__(96476);
axios.isCancel = __webpack_require__(78448);
axios.VERSION = (__webpack_require__(22037).version); // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(25166); // Expose isAxiosError

axios.isAxiosError = __webpack_require__(85099);
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports["default"] = axios;

/***/ }),

/***/ 85007:
/***/ ((module) => {

"use strict";

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

/***/ }),

/***/ 96476:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(85007);
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this; // eslint-disable-next-line func-names

  this.promise.then(function (cancel) {
    if (!token._listeners) return;
    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }

    token._listeners = null;
  }); // eslint-disable-next-line func-names

  this.promise.then = function (onfulfilled) {
    var _resolve; // eslint-disable-next-line func-names


    var promise = new Promise(function (resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Subscribe to the cancel signal
 */


CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};
/**
 * Unsubscribe from the cancel signal
 */


CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }

  var index = this._listeners.indexOf(listener);

  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),

/***/ 78448:
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),

/***/ 79108:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

var buildURL = __webpack_require__(65610);

var InterceptorManager = __webpack_require__(73060);

var dispatchRequest = __webpack_require__(52756);

var mergeConfig = __webpack_require__(26163);

var validator = __webpack_require__(27375);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config); // Set config.method

  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators["boolean"]),
      forcedJSONParsing: validators.transitional(validators["boolean"]),
      clarifyTimeoutError: validators.transitional(validators["boolean"])
    }, false);
  } // filter out skipped interceptors


  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];
    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);
    promise = Promise.resolve(config);

    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }

  var newConfig = config;

  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();

    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
module.exports = Axios;

/***/ }),

/***/ 73060:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),

/***/ 56028:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(56900);

var combineURLs = __webpack_require__(26787);
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */


module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }

  return requestedURL;
};

/***/ }),

/***/ 62226:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(63669);
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),

/***/ 52756:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

var transformData = __webpack_require__(54725);

var isCancel = __webpack_require__(78448);

var defaults = __webpack_require__(61285);

var Cancel = __webpack_require__(85007);
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Ensure headers exist

  config.headers = config.headers || {}; // Transform request data

  config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),

/***/ 63669:
/***/ ((module) => {

"use strict";

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;

  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };

  return error;
};

/***/ }),

/***/ 26163:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }

    return source;
  } // eslint-disable-next-line consistent-return


  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };
  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
};

/***/ }),

/***/ 61135:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(62226);
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),

/***/ 54725:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

var defaults = __webpack_require__(61285);
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/

  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });
  return data;
};

/***/ }),

/***/ 61285:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);


var utils = __webpack_require__(77320);

var normalizeHeaderName = __webpack_require__(24554);

var enhanceError = __webpack_require__(63669);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(31107);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(31107);
  }

  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    if (utils.isObject(data) || headers && headers['Content-Type'] === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }

          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

/***/ }),

/***/ 22037:
/***/ ((module) => {

module.exports = {
  "version": "0.26.0"
};

/***/ }),

/***/ 19692:
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),

/***/ 65610:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),

/***/ 26787:
/***/ ((module) => {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),

/***/ 44448:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),

/***/ 56900:
/***/ ((module) => {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

/***/ }),

/***/ 85099:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */


module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && payload.isAxiosError === true;
};

/***/ }),

/***/ 51734:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),

/***/ 24554:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),

/***/ 39077:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(77320); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),

/***/ 25166:
/***/ ((module) => {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),

/***/ 27375:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(85271);


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var VERSION = (__webpack_require__(22037).version);

var validators = {}; // eslint-disable-next-line func-names

['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
  validators[type] = function validator(thing) {
    return _typeof(thing) === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */

validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  } // eslint-disable-next-line func-names


  return function (value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console

      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }

    return validator ? validator(value, opt, opts) : true;
  };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */


function assertOptions(options, schema, allowUnknown) {
  if (_typeof(options) !== 'object') {
    throw new TypeError('options must be an object');
  }

  var keys = Object.keys(options);
  var i = keys.length;

  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];

    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);

      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }

      continue;
    }

    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};

/***/ }),

/***/ 77320:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var bind = __webpack_require__(19692); // utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

function isArray(val) {
  return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */


function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */


function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && _typeof(val) === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */


function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


function isDate(val) {
  return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */


function isFile(val) {
  return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */


function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */


function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */


function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (_typeof(obj) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function merge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */


function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }

  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

/***/ }),

/***/ 47703:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


__webpack_require__(22234);

__webpack_require__(1007);

__webpack_require__(68299);

if (__webpack_require__.g._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}

__webpack_require__.g._babelPolyfill = true;
var DEFINE_PROPERTY = "defineProperty";

function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);
"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});

/***/ }),

/***/ 1007:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */
!function (global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var inModule = ( false ? 0 : _typeof(module)) === "object";
  var runtime = global.regeneratorRuntime;

  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    } // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.


    return;
  } // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.


  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  runtime.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (_typeof(global.process) === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  runtime.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
}( // Among the various tricks for obtaining a reference to the global
// object, this seems to be the most reliable technique that does not
// use indirect eval (which violates Content Security Policy).
(typeof __webpack_require__.g === "undefined" ? "undefined" : _typeof(__webpack_require__.g)) === "object" ? __webpack_require__.g : (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" ? window : (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" ? self : this);

/***/ }),

/***/ 73958:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ 29033:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(85271);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var base64 = __webpack_require__(73958);

var ieee754 = __webpack_require__(83226);

var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? // eslint-disable-line dot-notation
Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
: null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */

Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}

function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    var proto = {
      foo: function foo() {
        return 42;
      }
    };
    Object.setPrototypeOf(proto, Uint8Array.prototype);
    Object.setPrototypeOf(arr, proto);
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.buffer;
  }
});
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.byteOffset;
  }
});

function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"');
  } // Return an augmented `Uint8Array` instance


  var buf = new Uint8Array(length);
  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError('The "string" argument must be of type string. Received type number');
    }

    return allocUnsafe(arg);
  }

  return from(arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

function from(value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value);
  }

  if (value == null) {
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
  }

  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof value === 'number') {
    throw new TypeError('The "value" argument must not be of type number. Received type number');
  }

  var valueOf = value.valueOf && value.valueOf();

  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length);
  }

  var b = fromObject(value);
  if (b) return b;

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
}; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148


Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number');
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"');
  }
}

function alloc(size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }

  return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};

function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};

function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding);
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);
  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);

  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }

  return buf;
}

function fromArrayView(arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    var copy = new Uint8Array(arrayView);
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
  }

  return fromArrayLike(arrayView);
}

function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds');
  }

  var buf;

  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  } // Return an augmented `Uint8Array` instance


  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}

function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0);
    }

    return fromArrayLike(obj);
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data);
  }
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
};

Buffer.compare = function compare(a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
        buf.copy(buffer, pos);
      } else {
        Uint8Array.prototype.set.call(buffer, buf, pos);
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    } else {
      buf.copy(buffer, pos);
    }

    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + _typeof(string));
  }

  var len = string.length;
  var mustMatch = arguments.length > 2 && arguments[2] === true;
  if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
        }

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coercion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>';
};

if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }

  if (!Buffer.isBuffer(target)) {
    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + _typeof(target));
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  }

  var strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  var i;

  for (i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;

    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte = void 0,
          thirdByte = void 0,
          fourthByte = void 0,
          tempCodePoint = void 0;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]];
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)

  for (var i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

  Object.setPrototypeOf(newBuf, Buffer.prototype);
  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var lo = first + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24);
  var hi = this[++offset] + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);
  return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var hi = first * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + this[++offset];
  var lo = this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + last;
  return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var val = this[offset + 4] + this[offset + 5] * Math.pow(2, 8) + this[offset + 6] * Math.pow(2, 16) + (last << 24); // Overflow

  return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24));
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var val = (first << 24) + // Overflow
  this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + this[++offset];
  return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + last);
});

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

function wrtBigUInt64LE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  var lo = Number(value & BigInt(0xffffffff));
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  return offset;
}

function wrtBigUInt64BE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  var lo = Number(value & BigInt(0xffffffff));
  buf[offset + 7] = lo;
  lo = lo >> 8;
  buf[offset + 6] = lo;
  lo = lo >> 8;
  buf[offset + 5] = lo;
  lo = lo >> 8;
  buf[offset + 4] = lo;
  var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset + 3] = hi;
  hi = hi >> 8;
  buf[offset + 2] = hi;
  hi = hi >> 8;
  buf[offset + 1] = hi;
  hi = hi >> 8;
  buf[offset] = hi;
  return offset + 8;
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } else if (typeof val === 'boolean') {
    val = Number(val);
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
    var len = bytes.length;

    if (len === 0) {
      throw new TypeError('The value "' + val + '" is invalid for argument "value"');
    }

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage


var errors = {};

function E(sym, getMessage, Base) {
  errors[sym] = /*#__PURE__*/function (_Base) {
    _inherits(NodeError, _Base);

    var _super = _createSuper(NodeError);

    function NodeError() {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _super.call(this);
      Object.defineProperty(_assertThisInitialized(_this), 'message', {
        value: getMessage.apply(_assertThisInitialized(_this), arguments),
        writable: true,
        configurable: true
      }); // Add the error code to the name to include it in the stack trace.

      _this.name = "".concat(_this.name, " [").concat(sym, "]"); // Access the stack to generate the error message including the error code
      // from the name.

      _this.stack; // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.

      delete _this.name;
      return _this;
    }

    _createClass(NodeError, [{
      key: "toString",
      value: function toString() {
        return "".concat(this.name, " [").concat(sym, "]: ").concat(this.message);
      }
    }, {
      key: "code",
      get: function get() {
        return sym;
      },
      set: function set(value) {
        Object.defineProperty(this, 'code', {
          configurable: true,
          enumerable: true,
          value: value,
          writable: true
        });
      }
    }]);

    return NodeError;
  }(Base);
}

E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {
  if (name) {
    return "".concat(name, " is outside of buffer bounds");
  }

  return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function (name, actual) {
  return "The \"".concat(name, "\" argument must be of type number. Received type ").concat(_typeof(actual));
}, TypeError);
E('ERR_OUT_OF_RANGE', function (str, range, input) {
  var msg = "The value of \"".concat(str, "\" is out of range.");
  var received = input;

  if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) {
    received = addNumericalSeparator(String(input));
  } else if (typeof input === 'bigint') {
    received = String(input);

    if (input > Math.pow(BigInt(2), BigInt(32)) || input < -Math.pow(BigInt(2), BigInt(32))) {
      received = addNumericalSeparator(received);
    }

    received += 'n';
  }

  msg += " It must be ".concat(range, ". Received ").concat(received);
  return msg;
}, RangeError);

function addNumericalSeparator(val) {
  var res = '';
  var i = val.length;
  var start = val[0] === '-' ? 1 : 0;

  for (; i >= start + 4; i -= 3) {
    res = "_".concat(val.slice(i - 3, i)).concat(res);
  }

  return "".concat(val.slice(0, i)).concat(res);
} // CHECK FUNCTIONS
// ===============


function checkBounds(buf, offset, byteLength) {
  validateNumber(offset, 'offset');

  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1));
  }
}

function checkIntBI(value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    var n = typeof min === 'bigint' ? 'n' : '';
    var range;

    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = ">= 0".concat(n, " and < 2").concat(n, " ** ").concat((byteLength + 1) * 8).concat(n);
      } else {
        range = ">= -(2".concat(n, " ** ").concat((byteLength + 1) * 8 - 1).concat(n, ") and < 2 ** ") + "".concat((byteLength + 1) * 8 - 1).concat(n);
      }
    } else {
      range = ">= ".concat(min).concat(n, " and <= ").concat(max).concat(n);
    }

    throw new errors.ERR_OUT_OF_RANGE('value', range, value);
  }

  checkBounds(buf, offset, byteLength);
}

function validateNumber(value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
  }
}

function boundsError(value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type);
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset', ">= ".concat(type ? 1 : 0, " and <= ").concat(length), value);
} // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

  str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  var i;

  for (i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
} // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166


function isInstance(obj, type) {
  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}

function numberIsNaN(obj) {
  // For IE11 support
  return obj !== obj; // eslint-disable-line no-self-compare
} // Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219


var hexSliceLookupTable = function () {
  var alphabet = '0123456789abcdef';
  var table = new Array(256);

  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16;

    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j];
    }
  }

  return table;
}(); // Return not function with Error if BigInt not supported


function defineBigIntMethod(fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}

function BufferBigIntNotDefined() {
  throw new Error('BigInt not supported');
}

/***/ }),

/***/ 80593:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(57701);

var callBind = __webpack_require__(24373);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
  var intrinsic = GetIntrinsic(name, !!allowMissing);

  if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
    return callBind(intrinsic);
  }

  return intrinsic;
};

/***/ }),

/***/ 24373:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(3767);

var GetIntrinsic = __webpack_require__(57701);

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
  try {
    $defineProperty({}, 'a', {
      value: 1
    });
  } catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
  }
}

module.exports = function callBind(originalFunction) {
  var func = $reflectApply(bind, $call, arguments);

  if ($gOPD && $defineProperty) {
    var desc = $gOPD(func, 'length');

    if (desc.configurable) {
      // original length, plus the receiver, minus any additional arguments (after the receiver)
      $defineProperty(func, 'length', {
        value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
      });
    }
  }

  return func;
};

var applyBind = function applyBind() {
  return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
  $defineProperty(module.exports, 'apply', {
    value: applyBind
  });
} else {
  module.exports.apply = applyBind;
}

/***/ }),

/***/ 49228:
/***/ ((module) => {

"use strict";
/* jshint esversion: 6 */

/* jslint node: true */


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (object) {
  return serialize(object);

  function serialize(object) {
    if (object === null || _typeof(object) !== 'object' || object.toJSON != null) {
      return JSON.stringify(object);
    }

    if (Array.isArray(object) && object.length === 0) {
      return '[]';
    }

    if (Array.isArray(object) && object.length === 1) {
      return '[' + serialize(object[0]) + ']';
    }

    if (Array.isArray(object)) {
      return '[' + object.reduce(function (t, cv, ci) {
        t = ci === 1 ? serialize(t) : t;
        return t + ',' + serialize(cv);
      }) + ']';
    }

    var keys = Object.keys(object);

    if (keys.length === 0) {
      return '{}';
    }

    if (keys.length === 1) {
      return '{' + serialize(keys[0]) + ':' + serialize(object[keys[0]]) + '}';
    }

    return '{' + keys.sort().reduce(function (t, cv, ci) {
      t = ci === 1 ? serialize(t) + ':' + serialize(object[t]) : t;
      return t + ',' + serialize(cv) + ':' + serialize(object[cv]);
    }) + '}';
  }
};

/***/ }),

/***/ 92383:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Clownface = __webpack_require__(65847);
/**
 * Factory to create graph pointer objects
 *
 * @param {Object} init
 * @param {DatasetCore} init.dataset an RDF/JS dataset
 * @param {string|Term} [init.graph] graph URI
 * @param {Term|Term[]} [init.term] one or more RDF/JS term(s) which will be the pointer's context
 * @param {string} [init.value] one or more raw values which will create literal node as the pointer's context
 * @param {DataFactory} [init.factory=@rdfjs/data-model] an RDF/JS factory which will be used to create nodes
 * @param {Context} [init._context] an existing clownface context. takes precedence before other params
 * @returns {Clownface}
 */


function factory(_ref) {
  var dataset = _ref.dataset,
      graph = _ref.graph,
      term = _ref.term,
      value = _ref.value,
      factory = _ref.factory,
      _context = _ref._context;
  return new Clownface({
    dataset: dataset,
    graph: graph,
    term: term,
    value: value,
    factory: factory,
    _context: _context
  });
}

module.exports = factory;

/***/ }),

/***/ 65847:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var rdf = __webpack_require__(73728);

var ns = __webpack_require__(97780);

var toArray = __webpack_require__(21300);

var toTermArray = __webpack_require__(81427);

var Context = __webpack_require__(70644);
/**
 * A graph pointer object, which points at 0..N nodes within a dataset
 */


var Clownface = /*#__PURE__*/function () {
  function Clownface(_ref) {
    var _this = this;

    var dataset = _ref.dataset,
        graph = _ref.graph,
        term = _ref.term,
        value = _ref.value,
        _ref$factory = _ref.factory,
        factory = _ref$factory === void 0 ? rdf : _ref$factory,
        _context = _ref._context;

    _classCallCheck(this, Clownface);

    this.factory = factory;
    this.namespace = ns(factory);

    if (_context) {
      this._context = _context;
      return;
    }

    var terms = term && toArray(term) || value && toArray(value) || [null];
    /**
     * The underlying context which references actual node being pointed
     *
     * @type {Context[]}
     * @private
     */

    this._context = terms.map(function (term) {
      return new Context({
        dataset: dataset,
        graph: graph,
        value: term,
        factory: _this.factory,
        namespace: _this.namespace
      });
    });
  }
  /**
   * Gets the current RDF/JS term or undefined if pointer has no context
   *
   * @returns {undefined|Term}
   */


  _createClass(Clownface, [{
    key: "list",

    /**
     * Creates an iterator which iterates and rdf:List of the current term
     *
     * @returns {Iterable | null}
     */
    value: function list() {
      var _this2 = this;

      if (this.terms.length > 1) {
        throw new Error('iterator over multiple terms is not supported');
      }

      if (this.term) {
        if (this.term.termType !== 'NamedNode' && this.term.termType !== 'BlankNode') {
          return null;
        }

        if (!this.term.equals(this.namespace.nil) && !this.out(this.namespace.first).term) {
          return null;
        }
      }

      var item = this;
      return _defineProperty({}, Symbol.iterator, function () {
        return {
          next: function next() {
            if (!item.term || item.term.equals(_this2.namespace.nil)) {
              return {
                done: true
              };
            }

            var value = item.out(_this2.namespace.first);

            if (value.terms.length > 1) {
              throw new Error("Invalid list: multiple values for rdf:first on ".concat(item.value));
            }

            var rest = item.out(_this2.namespace.rest);

            if (rest.terms.length > 1) {
              throw new Error("Invalid list: multiple values for rdf:rest on ".concat(item.value));
            }

            item = rest;
            return {
              done: false,
              value: value
            };
          }
        };
      });
    }
    /**
     * Returns an array of graph pointers where each one has a single _context
     *
     * @returns {Clownface[]}
     */

  }, {
    key: "toArray",
    value: function toArray() {
      return this._context.map(function (context) {
        return Clownface.fromContext(context);
      }).filter(function (context) {
        return context.terms.some(Boolean);
      });
    }
    /**
     * Returns graph pointers which meet the condition specified in a callback function
     * @param {FilterCallback} callback
     * @returns {Clownface}
     */

  }, {
    key: "filter",
    value: function filter(callback) {
      return Clownface.fromContext(this._context.filter(function (context) {
        return callback(Clownface.fromContext(context));
      }));
    }
    /**
     * Performs the specified action on every graph pointer
     * @param {ForEachCallback} callback
     * @returns {Clownface}
     */

  }, {
    key: "forEach",
    value: function forEach(callback) {
      this.toArray().forEach(callback);
      return this;
    }
    /**
     * Calls a defined callback function on each graph pointer, and returns an array that contains the results.
     * @template T
     * @param {MapCallback<T>} callback
     * @returns {T[]}
     */

  }, {
    key: "map",
    value: function map(callback) {
      return this.toArray().map(callback);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.values.join();
    }
    /**
     * Creates graph pointer to one or more node(s)
     *
     * Depending on the value creates pointers to:
     *
     * - blank node context for null `values`
     * - literal for string `values` and no `options` paramter
     * - matching RDF/JS term
     * - term created according to `options.type` parameter
     *
     * @param {null|string|string[]|Term|Term[]|Clownface|Clownface[]} values
     * @param {Object} [options]
     * @param {"NamedNode"|"BlankNode"|"Literal"} [options.type] explicit type for nodes
     * @param {string} [options.language] language tag of literals
     * @param {string} [options.datatype] datatype of literals
     * @returns {Clownface}
     */

  }, {
    key: "node",
    value: function node(values) {
      var _this3 = this;

      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          type = _ref3.type,
          datatype = _ref3.datatype,
          language = _ref3.language;

      values = this._toTermArray(values, type, datatype || language) || [null];
      var context = values.reduce(function (context, value) {
        return context.concat(_this3._context.reduce(function (all, current) {
          return all.concat([current.clone({
            value: value
          })]);
        }, []));
      }, []);
      return Clownface.fromContext(context);
    }
    /**
     * Creates graph pointer to one or more blank nodes
     * @param {null|string|string[]|BlankNode|BlankNode[]|Clownface|Clownface[]} [values] blank node identifiers (generates it when falsy) or existing RDF/JS blank node(s)
     * @returns {Clownface}
     */

  }, {
    key: "blankNode",
    value: function blankNode(values) {
      return this.node(values, {
        type: 'BlankNode'
      });
    }
    /**
     * Creates graph pointer to one or more literal nodes
     * @param {string|string[]|boolean|boolean[]|number|number[]|Literal|Literal[]|Clownface|Clownface[]} values literal values as JS objects or RDF/JS Literal(s)
     * @param {string|Term} [languageOrDatatype] a language tag string or datatype term
     * @returns {Clownface}
     */

  }, {
    key: "literal",
    value: function literal(values, languageOrDatatype) {
      return this.node(values, {
        type: 'Literal',
        datatype: languageOrDatatype
      });
    }
    /**
     * Creates graph pointer to one or more named nodes
     * @param {string|string[]|NamedNode|NamedNode[]|Clownface|Clownface[]} values URI(s) or RDF/JS NamedNode(s)
     * @returns {Clownface}
     */

  }, {
    key: "namedNode",
    value: function namedNode(values) {
      return this.node(values, {
        type: 'NamedNode'
      });
    }
    /**
     * Creates a graph pointer to nodes which are linked to the current pointer by `predicates`
     * @param {Term|Term[]|Clownface|Clownface[]} predicates one or more RDF/JS term identifying a property
     * @returns {Clownface}
     */

  }, {
    key: "in",
    value: function _in(predicates) {
      predicates = this._toTermArray(predicates);

      var context = this._context.reduce(function (all, current) {
        return all.concat(current["in"](predicates));
      }, []);

      return Clownface.fromContext(context);
    }
    /**
     * Creates a graph pointer to nodes which link the current pointer by `predicates`
     * @param {Term|Term[]|Clownface|Clownface[]} predicates one or more RDF/JS term identifying a property
     * @param {object} [options]
     * @param {string | string[] | undefined} [options.language]
     * @returns {Clownface}
     */

  }, {
    key: "out",
    value: function out(predicates) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      predicates = this._toTermArray(predicates);

      var context = this._context.reduce(function (all, current) {
        return all.concat(current.out(predicates, options));
      }, []);

      return Clownface.fromContext(context);
    }
    /**
     * Creates a graph pointer to nodes which are subjects of predicates, optionally also with specific objects
     *
     * If the current context is empty, will check all potential subjects
     *
     * @param {Term|Term[]|Clownface|Clownface[]} predicates RDF property identifiers
     * @param {*} [objects] object values to match
     * @returns {Clownface}
     */

  }, {
    key: "has",
    value: function has(predicates, objects) {
      predicates = this._toTermArray(predicates);
      objects = this._toTermArray(objects);

      var context = this._context.reduce(function (all, current) {
        return all.concat(current.has(predicates, objects));
      }, []);

      return Clownface.fromContext(context);
    }
    /**
     * Creates a new quad(s) in the dataset where the current context is the object
     *
     * @param {Term|Term[]|Clownface|Clownface[]} predicates
     * @param {NamedNode|NamedNode[]|Clownface|Clownface[]} subjects one or more nodes to use as subjects
     * @param {GraphPointerCallback} [callback] called for each object, with subject pointer as parameter
     * @returns {Clownface} current graph pointer
     */

  }, {
    key: "addIn",
    value: function addIn(predicates, subjects, callback) {
      if (!predicates) {
        throw new Error('predicate parameter is required');
      }

      if (typeof subjects === 'function') {
        callback = subjects;
        subjects = null;
      }

      predicates = this._toTermArray(predicates);
      subjects = this._toTermArray(subjects) || [this.factory.blankNode()];

      var context = this._context.map(function (context) {
        return context.addIn(predicates, subjects);
      });

      if (callback) {
        Clownface.fromContext(context).forEach(callback);
      }

      return this;
    }
    /**
     * Creates a new quad(s) in the dataset where the current context is the subject
     *
     * @param {Term|Term[]|Clownface|Clownface[]} predicates
     * @param {*} objects one or more values to use for objects
     * @param {GraphPointerCallback} [callback] called for each subject, with object pointer as parameter
     * @returns {Clownface} current graph pointer
     */

  }, {
    key: "addOut",
    value: function addOut(predicates, objects, callback) {
      if (!predicates) {
        throw new Error('predicate parameter is required');
      }

      if (typeof objects === 'function') {
        callback = objects;
        objects = null;
      }

      predicates = this._toTermArray(predicates);
      objects = this._toTermArray(objects) || [this.factory.blankNode()];

      var context = this._context.map(function (context) {
        return context.addOut(predicates, objects);
      });

      if (callback) {
        Clownface.fromContext(context).forEach(callback);
      }

      return this;
    }
    /**
     * Creates a new RDF list or lists containing the given items
     *
     * @param {Term|Term[]|Clownface|Clownface[]} predicates
     * @param {*} items one or more values to use for subjects
     * @returns {Clownface} current graph pointer
     */

  }, {
    key: "addList",
    value: function addList(predicates, items) {
      if (!predicates || !items) {
        throw new Error('predicate and items parameter is required');
      }

      predicates = this._toTermArray(predicates);
      items = this._toTermArray(items);

      this._context.forEach(function (context) {
        return context.addList(predicates, items);
      });

      return this;
    }
    /**
     * Deletes all quads where the current graph pointer contexts are the objects
     *
     * @param {Term|Term[]|Clownface|Clownface[]} predicates
     * @returns {Clownface} current graph pointer
     */

  }, {
    key: "deleteIn",
    value: function deleteIn(predicates) {
      predicates = this._toTermArray(predicates);

      this._context.forEach(function (context) {
        return context.deleteIn(predicates);
      });

      return this;
    }
    /**
     * Deletes all quads where the current graph pointer contexts are the subjects
     *
     * @param {Term|Term[]|Clownface|Clownface[]} predicates
     * @returns {Clownface} current graph pointer
     */

  }, {
    key: "deleteOut",
    value: function deleteOut(predicates) {
      predicates = this._toTermArray(predicates);

      this._context.forEach(function (context) {
        return context.deleteOut(predicates);
      });

      return this;
    }
    /**
     * Deletes entire RDF lists where the current graph pointer is the subject
     *
     * @param {Term|Term[]|Clownface|Clownface[]} predicates
     * @returns {Clownface} current graph pointer
     */

  }, {
    key: "deleteList",
    value: function deleteList(predicates) {
      if (!predicates) {
        throw new Error('predicate parameter is required');
      }

      predicates = this._toTermArray(predicates);

      this._context.forEach(function (context) {
        return context.deleteList(predicates);
      });

      return this;
    }
  }, {
    key: "_toTermArray",
    value: function _toTermArray(predicates, type, languageOrDatatype) {
      return toTermArray(predicates, type, languageOrDatatype, this.factory);
    }
  }, {
    key: "term",
    get: function get() {
      var terms = this.terms;

      if (terms.length !== 1) {
        return undefined;
      }

      return terms[0];
    }
    /**
     * Gets the current terms or an empty array if the pointer has no context
     *
     * @returns {Term[]}
     */

  }, {
    key: "terms",
    get: function get() {
      return this._context.map(function (node) {
        return node.term;
      }).filter(Boolean);
    }
    /**
     * Gets the string representation of term
     *
     * @returns {undefined|string}
     */

  }, {
    key: "value",
    get: function get() {
      var term = this.term;
      return term && term.value;
    }
    /**
     * Gets the string representation of terms
     *
     * @returns {string[]}
     */

  }, {
    key: "values",
    get: function get() {
      return this.terms.map(function (term) {
        return term.value;
      });
    }
    /**
     * Gets the current context's dataset, or undefined if there are multiple
     *
     * @returns {undefined|DatasetCore}
     */

  }, {
    key: "dataset",
    get: function get() {
      var datasets = this.datasets;

      if (datasets.length !== 1) {
        return undefined;
      }

      return datasets[0];
    }
    /**
     * Gets the current context's datasets
     *
     * @returns {DatasetCore[]}
     */

  }, {
    key: "datasets",
    get: function get() {
      return this._context.map(function (node) {
        return node.dataset;
      }).filter(Boolean);
    }
  }], [{
    key: "fromContext",
    value: function fromContext(context) {
      return new Clownface({
        _context: toArray(context),
        factory: context.factory
      });
    }
  }]);

  return Clownface;
}();
/**
 * @callback GraphPointerCallback
 * @param {Clownface} pointer graph pointer to the new or existing node
 */

/**
 * @callback FilterCallback
 * @param {Clownface} pointer
 * @return {boolean}
 */

/**
 * @callback ForEachCallback
 * @param {Clownface} pointer
 */

/**
 * @callback MapCallback
 * @template T
 * @param {Clownface} pointer
 * @return {T}
 */


module.exports = Clownface;

/***/ }),

/***/ 70644:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var inArray = __webpack_require__(56633);

var term = __webpack_require__(46720);

var toArray = __webpack_require__(21300);

var _require = __webpack_require__(67903),
    createLanguageMapper = _require.createLanguageMapper;

var Context = /*#__PURE__*/function () {
  function Context(_ref) {
    var dataset = _ref.dataset,
        graph = _ref.graph,
        value = _ref.value,
        factory = _ref.factory,
        namespace = _ref.namespace;

    _classCallCheck(this, Context);

    this.dataset = dataset;
    this.graph = graph;
    this.factory = factory;
    this.namespace = namespace;
    this.term = term(value, undefined, undefined, factory);
  }

  _createClass(Context, [{
    key: "clone",
    value: function clone(_ref2) {
      var _ref2$dataset = _ref2.dataset,
          dataset = _ref2$dataset === void 0 ? this.dataset : _ref2$dataset,
          _ref2$graph = _ref2.graph,
          graph = _ref2$graph === void 0 ? this.graph : _ref2$graph,
          value = _ref2.value,
          _ref2$factory = _ref2.factory,
          factory = _ref2$factory === void 0 ? this.factory : _ref2$factory,
          _ref2$namespace = _ref2.namespace,
          namespace = _ref2$namespace === void 0 ? this.namespace : _ref2$namespace;
      return new Context({
        dataset: dataset,
        graph: graph,
        value: value,
        factory: factory,
        namespace: namespace
      });
    }
  }, {
    key: "has",
    value: function has(predicate, object) {
      var _this = this;

      return this.matchProperty(toArray(this.term), predicate, object, toArray(this.graph), 'subject').map(function (subject) {
        return _this.clone({
          value: subject
        });
      });
    }
  }, {
    key: "in",
    value: function _in(predicate) {
      var _this2 = this;

      return this.matchProperty(null, predicate, toArray(this.term), toArray(this.graph), 'subject').map(function (subject) {
        return _this2.clone({
          value: subject
        });
      });
    }
  }, {
    key: "out",
    value: function out(predicate, _ref3) {
      var _this3 = this;

      var language = _ref3.language;
      var objects = this.matchProperty(toArray(this.term), predicate, null, toArray(this.graph), 'object');

      if (typeof language !== 'undefined') {
        var languages = typeof language === 'string' ? [language] : language;
        var getLiteralsForLanguage = createLanguageMapper(objects);
        objects = languages.map(getLiteralsForLanguage).find(Boolean) || [];
      }

      return objects.map(function (object) {
        return _this3.clone({
          value: object
        });
      });
    }
  }, {
    key: "addIn",
    value: function addIn(predicates, subjects) {
      var _this4 = this;

      var context = [];

      if (this.term) {
        subjects.forEach(function (subject) {
          predicates.forEach(function (predicate) {
            _this4.dataset.add(_this4.factory.quad(subject, predicate, _this4.term, _this4.graph));
          });
          context.push(_this4.clone({
            value: subject
          }));
        });
      }

      return context;
    }
  }, {
    key: "addOut",
    value: function addOut(predicates, objects) {
      var _this5 = this;

      var context = [];

      if (this.term) {
        objects.forEach(function (object) {
          predicates.forEach(function (predicate) {
            _this5.dataset.add(_this5.factory.quad(_this5.term, predicate, object, _this5.graph));
          });
          context.push(_this5.clone({
            value: object
          }));
        });
      }

      return context;
    }
  }, {
    key: "addList",
    value: function addList(predicates, items) {
      var _this6 = this;

      if (!this.term) {
        return;
      }

      predicates.forEach(function (predicate) {
        var nodes = items.map(function () {
          return _this6.factory.blankNode();
        });

        _this6.dataset.add(_this6.factory.quad(_this6.term, predicate, nodes[0] || _this6.namespace.nil, _this6.graph));

        for (var index = 0; index < nodes.length; index++) {
          _this6.dataset.add(_this6.factory.quad(nodes[index], _this6.namespace.first, items[index], _this6.graph));

          _this6.dataset.add(_this6.factory.quad(nodes[index], _this6.namespace.rest, nodes[index + 1] || _this6.namespace.nil, _this6.graph));
        }
      });
    }
  }, {
    key: "deleteIn",
    value: function deleteIn(predicate) {
      this.deleteMatch(null, predicate, toArray(this.term), toArray(this.graph));
    }
  }, {
    key: "deleteOut",
    value: function deleteOut(predicate) {
      this.deleteMatch(toArray(this.term), predicate, null, toArray(this.graph));
    }
  }, {
    key: "deleteList",
    value: function deleteList(predicates) {
      var _this7 = this;

      predicates.forEach(function (predicate) {
        var _iterator = _createForOfIteratorHelper(_this7.dataset.match(_this7.term, predicate)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var quad = _step.value;

            _this7.deleteItems(quad);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }, {
    key: "deleteItems",
    value: function deleteItems(start) {
      var _this8 = this;

      var quads = [start];

      while (!quads[quads.length - 1].object.equals(this.namespace.nil)) {
        var node = quads[quads.length - 1].object;
        quads = quads.concat(_toConsumableArray(this.dataset.match(node)));
      }

      quads.forEach(function (quad) {
        _this8.dataset["delete"](quad);
      });
    }
  }, {
    key: "match",
    value: function match(subject, predicate, object, graph) {
      var matches = [];

      var _iterator2 = _createForOfIteratorHelper(this.dataset),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var quad = _step2.value;

          if (subject && !inArray(quad.subject, subject)) {
            continue;
          }

          if (predicate && !inArray(quad.predicate, predicate)) {
            continue;
          }

          if (object && !inArray(quad.object, object)) {
            continue;
          }

          if (graph && !inArray(quad.graph, graph)) {
            continue;
          }

          matches.push(quad);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return matches;
    }
  }, {
    key: "matchProperty",
    value: function matchProperty(subject, predicate, object, graph, property) {
      return this.match(subject, predicate, object, graph).map(function (quad) {
        return quad[property];
      });
    }
  }, {
    key: "deleteMatch",
    value: function deleteMatch(subject, predicate, object, graph) {
      var _this9 = this;

      this.match(subject, predicate, object, graph).forEach(function (quad) {
        _this9.dataset["delete"](quad);
      });
    }
  }]);

  return Context;
}();

module.exports = Context;

/***/ }),

/***/ 54381:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rdf = __webpack_require__(73728);

var namespace = __webpack_require__(97780);

var _namespace = namespace(rdf),
    xsd = _namespace.xsd;

function booleanToLiteral(value) {
  var factory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rdf;

  if (typeof value !== 'boolean') {
    return null;
  }

  return factory.literal(value.toString(), xsd('boolean'));
}

function numberToLiteral(value) {
  var factory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rdf;

  if (typeof value !== 'number') {
    return null;
  }

  if (Number.isInteger(value)) {
    return factory.literal(value.toString(10), xsd('integer'));
  }

  return factory.literal(value.toString(10), xsd('double'));
}

function stringToLiteral(value) {
  var factory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rdf;

  if (typeof value !== 'string') {
    return null;
  }

  return factory.literal(value);
}

function toLiteral(value) {
  var factory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rdf;
  return booleanToLiteral(value, factory) || numberToLiteral(value, factory) || stringToLiteral(value, factory);
}

module.exports = {
  booleanToLiteral: booleanToLiteral,
  numberToLiteral: numberToLiteral,
  stringToLiteral: stringToLiteral,
  toLiteral: toLiteral
};

/***/ }),

/***/ 56633:
/***/ ((module) => {

function inArray(node, array) {
  return array.some(function (otherNode) {
    return otherNode.equals(node);
  });
}

module.exports = inArray;

/***/ }),

/***/ 67903:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var RDF = __webpack_require__(73728);

var namespace = __webpack_require__(97780);

var ns = namespace(RDF);

function mapLiteralsByLanguage(map, current) {
  var notLiteral = current.termType !== 'Literal';
  var notStringLiteral = ns.langString.equals(current.datatype) || ns.xsd.string.equals(current.datatype);
  if (notLiteral || !notStringLiteral) return map;
  var language = current.language.toLowerCase();

  if (map.has(language)) {
    map.get(language).push(current);
  } else {
    map.set(language, [current]);
  }

  return map;
}

function createLanguageMapper(objects) {
  var literalsByLanguage = objects.reduce(mapLiteralsByLanguage, new Map());

  var langMapEntries = _toConsumableArray(literalsByLanguage.entries());

  return function (language) {
    var languageLowerCase = language.toLowerCase();

    if (languageLowerCase === '*') {
      return langMapEntries[0] && langMapEntries[0][1];
    }

    var exactMatch = literalsByLanguage.get(languageLowerCase);

    if (exactMatch) {
      return exactMatch;
    }

    var secondaryMatches = langMapEntries.find(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          entryLanguage = _ref2[0];

      return entryLanguage.startsWith(languageLowerCase);
    });
    return secondaryMatches && secondaryMatches[1];
  };
}

module.exports = {
  createLanguageMapper: createLanguageMapper
};

/***/ }),

/***/ 97780:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var namespace = __webpack_require__(2325);

var ns = function ns(factory) {
  var xsd = namespace('http://www.w3.org/2001/XMLSchema#', {
    factory: factory
  });
  var rdf = namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#', {
    factory: factory
  });
  return {
    first: rdf.first,
    nil: rdf.nil,
    rest: rdf.rest,
    langString: rdf.langString,
    xsd: xsd
  };
};

module.exports = ns;

/***/ }),

/***/ 46720:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(54381),
    toLiteral = _require.toLiteral;

function blankNode(value, factory) {
  if (value && typeof value !== 'string') {
    throw new Error('Blank node identifier must be a string');
  }

  return factory.blankNode(value);
}

function literal(value, languageOrDatatype, factory) {
  if (typeof value === 'string') {
    // check if it's given, if given try RDF/JS Term value otherwise convert it to a string
    languageOrDatatype = languageOrDatatype && (languageOrDatatype.value || languageOrDatatype.toString());

    if (languageOrDatatype && languageOrDatatype.indexOf(':') !== -1) {
      languageOrDatatype = factory.namedNode(languageOrDatatype);
    }

    return factory.literal(value.toString(), languageOrDatatype);
  }

  var term = toLiteral(value, factory);

  if (!term) {
    throw new Error('The value cannot be converted to a literal node');
  }

  return term;
}

function namedNode(value, factory) {
  if (typeof value !== 'string') {
    throw new Error('Named node must be an IRI string');
  }

  return factory.namedNode(value);
}

function term(value) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Literal';
  var languageOrDatatype = arguments.length > 2 ? arguments[2] : undefined;
  var factory = arguments.length > 3 ? arguments[3] : undefined;

  // it's already a RDF/JS Term
  if (value && _typeof(value) === 'object' && value.termType) {
    return value;
  } // first check if it's a blank node...


  if (type === 'BlankNode') {
    return blankNode(value, factory);
  } // ...cause that's the only type that doesn't require a value


  if (value === null || typeof value === 'undefined') {
    return undefined;
  }

  if (type === 'Literal') {
    return literal(value, languageOrDatatype, factory);
  }

  if (type === 'NamedNode') {
    return namedNode(value, factory);
  }

  throw new Error('unknown type');
}

module.exports = term;

/***/ }),

/***/ 21300:
/***/ ((module) => {

function toArray(value, defaultValue) {
  if (typeof value === 'undefined' || value === null) {
    return defaultValue;
  }

  if (!Array.isArray(value)) {
    return [value];
  }

  return value;
}

module.exports = toArray;

/***/ }),

/***/ 81427:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var term = __webpack_require__(46720);

var toArray = __webpack_require__(21300);

function toTermArray(items, type, languageOrDatatype, factory) {
  if ((typeof items === 'undefined' || items === null) && !type) {
    return items;
  }

  return (toArray(items) || [undefined]).reduce(function (all, item) {
    if (_typeof(item) === 'object' && item.terms) {
      return all.concat(item.terms);
    }

    all.push(term(item, type, languageOrDatatype, factory));
    return all;
  }, []);
}

module.exports = toTermArray;

/***/ }),

/***/ 85271:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(45058);

var assert = __webpack_require__(34475);

function now() {
  return new Date().getTime();
}

var slice = Array.prototype.slice;
var console;
var times = {};

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
  console = __webpack_require__.g.console;
} else if (typeof window !== "undefined" && window.console) {
  console = window.console;
} else {
  console = {};
}

var functions = [[log, "log"], [info, "info"], [warn, "warn"], [error, "error"], [time, "time"], [timeEnd, "timeEnd"], [trace, "trace"], [dir, "dir"], [consoleAssert, "assert"]];

for (var i = 0; i < functions.length; i++) {
  var tuple = functions[i];
  var f = tuple[0];
  var name = tuple[1];

  if (!console[name]) {
    console[name] = f;
  }
}

module.exports = console;

function log() {}

function info() {
  console.log.apply(console, arguments);
}

function warn() {
  console.log.apply(console, arguments);
}

function error() {
  console.warn.apply(console, arguments);
}

function time(label) {
  times[label] = now();
}

function timeEnd(label) {
  var time = times[label];

  if (!time) {
    throw new Error("No such label: " + label);
  }

  delete times[label];
  var duration = now() - time;
  console.log(label + ": " + duration + "ms");
}

function trace() {
  var err = new Error();
  err.name = "Trace";
  err.message = util.format.apply(null, arguments);
  console.error(err.stack);
}

function dir(object) {
  console.log(util.inspect(object) + "\n");
}

function consoleAssert(expression) {
  if (!expression) {
    var arr = slice.call(arguments, 1);
    assert.ok(false, util.format.apply(null, arr));
  }
}

/***/ }),

/***/ 68299:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(19122);

module.exports = __webpack_require__(88544).RegExp.escape;

/***/ }),

/***/ 6819:
/***/ ((module) => {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),

/***/ 39855:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cof = __webpack_require__(93679);

module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

/***/ }),

/***/ 84339:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(43336)('unscopables');

var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(78012)(ArrayProto, UNSCOPABLES, {});

module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),

/***/ 53763:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var at = __webpack_require__(53593)(true); // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex


module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

/***/ }),

/***/ 12702:
/***/ ((module) => {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }

  return it;
};

/***/ }),

/***/ 56154:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(7156);

module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),

/***/ 62147:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


var toObject = __webpack_require__(62515);

var toAbsoluteIndex = __webpack_require__(36241);

var toLength = __webpack_require__(8315);

module.exports = [].copyWithin || function copyWithin(target
/* = 0 */
, start
/* = 0, end = @length */
) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;

  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }

  while (count-- > 0) {
    if (from in O) O[to] = O[from];else delete O[to];
    to += inc;
    from += inc;
  }

  return O;
};

/***/ }),

/***/ 81132:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


var toObject = __webpack_require__(62515);

var toAbsoluteIndex = __webpack_require__(36241);

var toLength = __webpack_require__(8315);

module.exports = function fill(value
/* , start = 0, end = @length */
) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

  while (endPos > index) {
    O[index++] = value;
  }

  return O;
};

/***/ }),

/***/ 35273:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var forOf = __webpack_require__(72734);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

/***/ }),

/***/ 24687:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(98499);

var toLength = __webpack_require__(8315);

var toAbsoluteIndex = __webpack_require__(36241);

module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }
    return !IS_INCLUDES && -1;
  };
};

/***/ }),

/***/ 23970:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(50566);

var IObject = __webpack_require__(331);

var toObject = __webpack_require__(62515);

var toLength = __webpack_require__(8315);

var asc = __webpack_require__(65486);

module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;

    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);

        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true;
              // some

              case 5:
                return val;
              // find

              case 6:
                return index;
              // findIndex

              case 2:
                result.push(val);
              // filter
            } else if (IS_EVERY) return false; // every
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),

/***/ 46419:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aFunction = __webpack_require__(6819);

var toObject = __webpack_require__(62515);

var IObject = __webpack_require__(331);

var toLength = __webpack_require__(8315);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }

    index += i;

    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }

  for (; isRight ? index >= 0 : length > index; index += i) {
    if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
  }

  return memo;
};

/***/ }),

/***/ 72642:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(7156);

var isArray = __webpack_require__(1320);

var SPECIES = __webpack_require__(43336)('species');

module.exports = function (original) {
  var C;

  if (isArray(original)) {
    C = original.constructor; // cross-realm fallback

    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }

  return C === undefined ? Array : C;
};

/***/ }),

/***/ 65486:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(72642);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

/***/ }),

/***/ 98327:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var aFunction = __webpack_require__(6819);

var isObject = __webpack_require__(7156);

var invoke = __webpack_require__(72765);

var arraySlice = [].slice;
var factories = {};

var construct = function construct(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) {
      n[i] = 'a[' + i + ']';
    } // eslint-disable-next-line no-new-func


    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }

  return factories[len](F, args);
};

module.exports = Function.bind || function bind(that
/* , ...args */
) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);

  var bound = function bound()
  /* args... */
  {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };

  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

/***/ }),

/***/ 42858:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(93679);

var TAG = __webpack_require__(43336)('toStringTag'); // ES3 wrong here


var ARG = cof(function () {
  return arguments;
}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (e) {
    /* empty */
  }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
  : ARG ? cof(O) // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),

/***/ 93679:
/***/ ((module) => {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

/***/ }),

/***/ 54396:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var dP = (__webpack_require__(4835).f);

var create = __webpack_require__(64275);

var redefineAll = __webpack_require__(97228);

var ctx = __webpack_require__(50566);

var anInstance = __webpack_require__(12702);

var forOf = __webpack_require__(72734);

var $iterDefine = __webpack_require__(64873);

var step = __webpack_require__(37218);

var setSpecies = __webpack_require__(4798);

var DESCRIPTORS = __webpack_require__(94926);

var fastKey = (__webpack_require__(93763).fastKey);

var validate = __webpack_require__(68546);

var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function getEntry(that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index]; // frozen object case

  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type

      that._i = create(null); // index

      that._f = undefined; // first entry

      that._l = undefined; // last entry

      that[SIZE] = 0; // size

      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }

        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function _delete(key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);

        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }

        return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn
      /* , that = undefined */
      ) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;

        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this); // revert to the last existing entry

          while (entry && entry.r) {
            entry = entry.p;
          }
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function get() {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var entry = getEntry(that, key);
    var prev, index; // change existing entry

    if (entry) {
      entry.v = value; // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true),
        // <- index
        k: key,
        // <- key
        v: value,
        // <- value
        p: prev = that._l,
        // <- previous entry
        n: undefined,
        // <- next entry
        r: false // <- removed

      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++; // add to index

      if (index !== 'F') that._i[index] = entry;
    }

    return that;
  },
  getEntry: getEntry,
  setStrong: function setStrong(C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target

      this._k = kind; // kind

      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l; // revert to the last existing entry

      while (entry && entry.r) {
        entry = entry.p;
      } // get next entry


      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      } // return step by kind


      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

    setSpecies(NAME);
  }
};

/***/ }),

/***/ 11872:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(42858);

var from = __webpack_require__(35273);

module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

/***/ }),

/***/ 74495:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var redefineAll = __webpack_require__(97228);

var getWeak = (__webpack_require__(93763).getWeak);

var anObject = __webpack_require__(56154);

var isObject = __webpack_require__(7156);

var anInstance = __webpack_require__(12702);

var forOf = __webpack_require__(72734);

var createArrayMethod = __webpack_require__(23970);

var $has = __webpack_require__(35389);

var validate = __webpack_require__(68546);

var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0; // fallback for uncaught frozen keys

var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function UncaughtFrozenStore() {
  this.a = [];
};

var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function get(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function has(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function set(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.a.push([key, value]);
  },
  'delete': function _delete(key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};
module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type

      that._i = id++; // collection id

      that._l = undefined; // leak store for uncaught frozen objects

      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function _delete(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),

/***/ 61966:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(97381);

var $export = __webpack_require__(15913);

var redefine = __webpack_require__(57278);

var redefineAll = __webpack_require__(97228);

var meta = __webpack_require__(93763);

var forOf = __webpack_require__(72734);

var anInstance = __webpack_require__(12702);

var isObject = __webpack_require__(7156);

var fails = __webpack_require__(55810);

var $iterDetect = __webpack_require__(15508);

var setToStringTag = __webpack_require__(98094);

var inheritIfRequired = __webpack_require__(3654);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};

  var fixMethod = function fixMethod(KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);
      return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);
      return this;
    });
  };

  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C(); // early implementations not supports chaining

    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    }); // most early implementations doesn't supports iterables, most modern - not close it correctly

    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same

    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;

      while (index--) {
        $instance[ADDER](index, index);
      }

      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);
  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);
  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
  return C;
};

/***/ }),

/***/ 88544:
/***/ ((module) => {

var core = module.exports = {
  version: '2.6.11'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),

/***/ 91348:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $defineProperty = __webpack_require__(4835);

var createDesc = __webpack_require__(86256);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

/***/ }),

/***/ 50566:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// optional / simple context binding
var aFunction = __webpack_require__(6819);

module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;

  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };

    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };

    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }

  return function ()
  /* ...args */
  {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ 92115:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var fails = __webpack_require__(55810);

var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function lz(num) {
  return num > 9 ? num : '0' + num;
}; // PhantomJS / old WebKit has a broken implementations


module.exports = fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

/***/ }),

/***/ 20296:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var anObject = __webpack_require__(56154);

var toPrimitive = __webpack_require__(48537);

var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

/***/ }),

/***/ 80408:
/***/ ((module) => {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),

/***/ 94926:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(55810)(function () {
  return Object.defineProperty({}, 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ 62241:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(7156);

var document = (__webpack_require__(97381).document); // typeof document.createElement is 'object' in old IE


var is = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),

/***/ 46921:
/***/ ((module) => {

// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ }),

/***/ 58727:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(39924);

var gOPS = __webpack_require__(65421);

var pIE = __webpack_require__(4616);

module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;

  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;

    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ 15913:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(97381);

var core = __webpack_require__(88544);

var hide = __webpack_require__(78012);

var redefine = __webpack_require__(57278);

var ctx = __webpack_require__(50566);

var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;

  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

    out = (own ? target : source)[key]; // bind timers to global for call from export context

    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

    if (target) redefine(target, key, out, type & $export.U); // export

    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};

global.core = core; // type bitmap

$export.F = 1; // forced

$export.G = 2; // global

$export.S = 4; // static

$export.P = 8; // proto

$export.B = 16; // bind

$export.W = 32; // wrap

$export.U = 64; // safe

$export.R = 128; // real proto method for `library`

module.exports = $export;

/***/ }),

/***/ 43483:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MATCH = __webpack_require__(43336)('match');

module.exports = function (KEY) {
  var re = /./;

  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) {
      /* empty */
    }
  }

  return true;
};

/***/ }),

/***/ 55810:
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),

/***/ 28644:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


__webpack_require__(25997);

var redefine = __webpack_require__(57278);

var hide = __webpack_require__(78012);

var fails = __webpack_require__(55810);

var defined = __webpack_require__(80408);

var wks = __webpack_require__(43336);

var regexpExec = __webpack_require__(56997);

var SPECIES = wks('species');
var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;

  re.exec = function () {
    var result = [];
    result.groups = {
      a: '7'
    };
    return result;
  };

  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;

  re.exec = function () {
    return originalExec.apply(this, arguments);
  };

  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
}();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};

    O[SYMBOL] = function () {
      return 7;
    };

    return ''[KEY](O) != 7;
  });
  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    re.exec = function () {
      execCalled = true;
      return null;
    };

    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};

      re.constructor[SPECIES] = function () {
        return re;
      };
    }

    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return {
            done: true,
            value: nativeRegExpMethod.call(regexp, str, arg2)
          };
        }

        return {
          done: true,
          value: nativeMethod.call(str, regexp, arg2)
        };
      }

      return {
        done: false
      };
    });
    var strfn = fns[0];
    var rxfn = fns[1];
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    } // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

/***/ }),

/***/ 92188:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 21.2.5.3 get RegExp.prototype.flags

var anObject = __webpack_require__(56154);

module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

/***/ }),

/***/ 43120:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

var isArray = __webpack_require__(1320);

var isObject = __webpack_require__(7156);

var toLength = __webpack_require__(8315);

var ctx = __webpack_require__(50566);

var IS_CONCAT_SPREADABLE = __webpack_require__(43336)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
      spreadable = false;

      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }

    sourceIndex++;
  }

  return targetIndex;
}

module.exports = flattenIntoArray;

/***/ }),

/***/ 72734:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ctx = __webpack_require__(50566);

var call = __webpack_require__(72471);

var isArrayIter = __webpack_require__(77063);

var anObject = __webpack_require__(56154);

var toLength = __webpack_require__(8315);

var getIterFn = __webpack_require__(17637);

var BREAK = {};
var RETURN = {};

var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};

exports.BREAK = BREAK;
exports.RETURN = RETURN;

/***/ }),

/***/ 61174:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(83192)('native-function-to-string', Function.toString);

/***/ }),

/***/ 97381:
/***/ ((module) => {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),

/***/ 35389:
/***/ ((module) => {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),

/***/ 78012:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var dP = __webpack_require__(4835);

var createDesc = __webpack_require__(86256);

module.exports = __webpack_require__(94926) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ 31225:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var document = (__webpack_require__(97381).document);

module.exports = document && document.documentElement;

/***/ }),

/***/ 15142:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = !__webpack_require__(94926) && !__webpack_require__(55810)(function () {
  return Object.defineProperty(__webpack_require__(62241)('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ 3654:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(7156);

var setPrototypeOf = (__webpack_require__(66931).set);

module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;

  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }

  return that;
};

/***/ }),

/***/ 72765:
/***/ ((module) => {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;

  switch (args.length) {
    case 0:
      return un ? fn() : fn.call(that);

    case 1:
      return un ? fn(args[0]) : fn.call(that, args[0]);

    case 2:
      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

    case 3:
      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

    case 4:
      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
  }

  return fn.apply(that, args);
};

/***/ }),

/***/ 331:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(93679); // eslint-disable-next-line no-prototype-builtins


module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),

/***/ 77063:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// check on default Array iterator
var Iterators = __webpack_require__(5301);

var ITERATOR = __webpack_require__(43336)('iterator');

var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),

/***/ 1320:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(93679);

module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

/***/ }),

/***/ 75127:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(7156);

var floor = Math.floor;

module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

/***/ }),

/***/ 7156:
/***/ ((module) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (it) {
  return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),

/***/ 41993:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(7156);

var cof = __webpack_require__(93679);

var MATCH = __webpack_require__(43336)('match');

module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

/***/ }),

/***/ 72471:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(56154);

module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),

/***/ 8258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var create = __webpack_require__(64275);

var descriptor = __webpack_require__(86256);

var setToStringTag = __webpack_require__(98094);

var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

__webpack_require__(78012)(IteratorPrototype, __webpack_require__(43336)('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, {
    next: descriptor(1, next)
  });
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),

/***/ 64873:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var LIBRARY = __webpack_require__(74219);

var $export = __webpack_require__(15913);

var redefine = __webpack_require__(57278);

var hide = __webpack_require__(78012);

var Iterators = __webpack_require__(5301);

var $iterCreate = __webpack_require__(8258);

var setToStringTag = __webpack_require__(98094);

var getPrototypeOf = __webpack_require__(84153);

var ITERATOR = __webpack_require__(43336)('iterator');

var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);

  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];

    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };

      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }

    return function entries() {
      return new Constructor(this, kind);
    };
  };

  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype; // Fix native

  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  } // fix Array#{values, @@iterator}.name in V8 / FF


  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;

    $default = function values() {
      return $native.call(this);
    };
  } // Define iterator


  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  } // Plug for library


  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;

  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }

  return methods;
};

/***/ }),

/***/ 15508:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ITERATOR = __webpack_require__(43336)('iterator');

var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();

  riter['return'] = function () {
    SAFE_CLOSING = true;
  }; // eslint-disable-next-line no-throw-literal


  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {
  /* empty */
}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;

  try {
    var arr = [7];
    var iter = arr[ITERATOR]();

    iter.next = function () {
      return {
        done: safe = true
      };
    };

    arr[ITERATOR] = function () {
      return iter;
    };

    exec(arr);
  } catch (e) {
    /* empty */
  }

  return safe;
};

/***/ }),

/***/ 37218:
/***/ ((module) => {

module.exports = function (done, value) {
  return {
    value: value,
    done: !!done
  };
};

/***/ }),

/***/ 5301:
/***/ ((module) => {

module.exports = {};

/***/ }),

/***/ 74219:
/***/ ((module) => {

module.exports = false;

/***/ }),

/***/ 94774:
/***/ ((module) => {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = !$expm1 // Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

/***/ }),

/***/ 161:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(84012);

var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function roundTiesToEven(n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs); // eslint-disable-next-line no-self-compare

  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

/***/ }),

/***/ 95447:
/***/ ((module) => {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

/***/ }),

/***/ 88124:
/***/ ((module) => {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (arguments.length === 0 // eslint-disable-next-line no-self-compare
  || x != x // eslint-disable-next-line no-self-compare
  || inLow != inLow // eslint-disable-next-line no-self-compare
  || inHigh != inHigh // eslint-disable-next-line no-self-compare
  || outLow != outLow // eslint-disable-next-line no-self-compare
  || outHigh != outHigh) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

/***/ }),

/***/ 84012:
/***/ ((module) => {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

/***/ }),

/***/ 93763:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var META = __webpack_require__(97936)('meta');

var isObject = __webpack_require__(7156);

var has = __webpack_require__(35389);

var setDesc = (__webpack_require__(4835).f);

var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var FREEZE = !__webpack_require__(55810)(function () {
  return isExtensible(Object.preventExtensions({}));
});

var setMeta = function setMeta(it) {
  setDesc(it, META, {
    value: {
      i: 'O' + ++id,
      // object ID
      w: {} // weak collections IDs

    }
  });
};

var fastKey = function fastKey(it, create) {
  // return primitive with prefix
  if (!isObject(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F'; // not necessary to add metadata

    if (!create) return 'E'; // add missing metadata

    setMeta(it); // return object ID
  }

  return it[META].i;
};

var getWeak = function getWeak(it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true; // not necessary to add metadata

    if (!create) return false; // add missing metadata

    setMeta(it); // return hash weak collections IDs
  }

  return it[META].w;
}; // add metadata on freeze-family methods calling


var onFreeze = function onFreeze(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};

var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

/***/ }),

/***/ 98953:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Map = __webpack_require__(58969);

var $export = __webpack_require__(15913);

var shared = __webpack_require__(83192)('metadata');

var store = shared.store || (shared.store = new (__webpack_require__(3491))());

var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
  var targetMetadata = store.get(target);

  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }

  var keyMetadata = targetMetadata.get(targetKey);

  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  }

  return keyMetadata;
};

var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};

var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};

var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};

var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) {
    keys.push(key);
  });
  return keys;
};

var toMetaKey = function toMetaKey(it) {
  return it === undefined || _typeof(it) == 'symbol' ? it : String(it);
};

var exp = function exp(O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

/***/ }),

/***/ 91842:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(97381);

var macrotask = (__webpack_require__(8220).set);

var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(93679)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function flush() {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();

    while (head) {
      fn = head.fn;
      head = head.next;

      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }

    last = undefined;
    if (parent) parent.enter();
  }; // Node.js


  if (isNode) {
    notify = function notify() {
      process.nextTick(flush);
    }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, {
      characterData: true
    }); // eslint-disable-line no-new

    notify = function notify() {
      node.data = toggle = !toggle;
    }; // environments with maybe non-completely correct, but existent Promise

  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);

    notify = function notify() {
      promise.then(flush);
    }; // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout

  } else {
    notify = function notify() {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = {
      fn: fn,
      next: undefined
    };
    if (last) last.next = task;

    if (!head) {
      head = task;
      notify();
    }

    last = task;
  };
};

/***/ }),

/***/ 4086:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 25.4.1.5 NewPromiseCapability(C)

var aFunction = __webpack_require__(6819);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

/***/ }),

/***/ 78559:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 19.1.2.1 Object.assign(target, source, ...)

var DESCRIPTORS = __webpack_require__(94926);

var getKeys = __webpack_require__(39924);

var gOPS = __webpack_require__(65421);

var pIE = __webpack_require__(4616);

var toObject = __webpack_require__(62515);

var IObject = __webpack_require__(331);

var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

module.exports = !$assign || __webpack_require__(55810)(function () {
  var A = {};
  var B = {}; // eslint-disable-next-line no-undef

  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;

  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;

    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  }

  return T;
} : $assign;

/***/ }),

/***/ 64275:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(56154);

var dPs = __webpack_require__(6447);

var enumBugKeys = __webpack_require__(46921);

var IE_PROTO = __webpack_require__(28662)('IE_PROTO');

var Empty = function Empty() {
  /* empty */
};

var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(62241)('iframe');

  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';

  (__webpack_require__(31225).appendChild)(iframe);

  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);

  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;

  while (i--) {
    delete _createDict[PROTOTYPE][enumBugKeys[i]];
  }

  return _createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;

  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

    result[IE_PROTO] = O;
  } else result = _createDict();

  return Properties === undefined ? result : dPs(result, Properties);
};

/***/ }),

/***/ 4835:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var anObject = __webpack_require__(56154);

var IE8_DOM_DEFINE = __webpack_require__(15142);

var toPrimitive = __webpack_require__(48537);

var dP = Object.defineProperty;
exports.f = __webpack_require__(94926) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ 6447:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var dP = __webpack_require__(4835);

var anObject = __webpack_require__(56154);

var getKeys = __webpack_require__(39924);

module.exports = __webpack_require__(94926) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;

  while (length > i) {
    dP.f(O, P = keys[i++], Properties[P]);
  }

  return O;
};

/***/ }),

/***/ 38249:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // Forced replacement prototype accessors methods

module.exports = __webpack_require__(74219) || !__webpack_require__(55810)(function () {
  var K = Math.random(); // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call

  __defineSetter__.call(null, K, function () {
    /* empty */
  });

  delete __webpack_require__(97381)[K];
});

/***/ }),

/***/ 23299:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var pIE = __webpack_require__(4616);

var createDesc = __webpack_require__(86256);

var toIObject = __webpack_require__(98499);

var toPrimitive = __webpack_require__(48537);

var has = __webpack_require__(35389);

var IE8_DOM_DEFINE = __webpack_require__(15142);

var gOPD = Object.getOwnPropertyDescriptor;
exports.f = __webpack_require__(94926) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {
    /* empty */
  }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),

/***/ 3136:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(98499);

var gOPN = (__webpack_require__(32982).f);

var toString = {}.toString;
var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

/***/ }),

/***/ 32982:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(57960);

var hiddenKeys = (__webpack_require__(46921).concat)('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

/***/ }),

/***/ 65421:
/***/ ((__unused_webpack_module, exports) => {

exports.f = Object.getOwnPropertySymbols;

/***/ }),

/***/ 84153:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(35389);

var toObject = __webpack_require__(62515);

var IE_PROTO = __webpack_require__(28662)('IE_PROTO');

var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];

  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }

  return O instanceof Object ? ObjectProto : null;
};

/***/ }),

/***/ 57960:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var has = __webpack_require__(35389);

var toIObject = __webpack_require__(98499);

var arrayIndexOf = __webpack_require__(24687)(false);

var IE_PROTO = __webpack_require__(28662)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;

  for (key in O) {
    if (key != IE_PROTO) has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys


  while (names.length > i) {
    if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ 39924:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(57960);

var enumBugKeys = __webpack_require__(46921);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

/***/ }),

/***/ 4616:
/***/ ((__unused_webpack_module, exports) => {

exports.f = {}.propertyIsEnumerable;

/***/ }),

/***/ 4057:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(15913);

var core = __webpack_require__(88544);

var fails = __webpack_require__(55810);

module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

/***/ }),

/***/ 38941:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(94926);

var getKeys = __webpack_require__(39924);

var toIObject = __webpack_require__(98499);

var isEnum = (__webpack_require__(4616).f);

module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;

    while (length > i) {
      key = keys[i++];

      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }

    return result;
  };
};

/***/ }),

/***/ 82600:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(32982);

var gOPS = __webpack_require__(65421);

var anObject = __webpack_require__(56154);

var Reflect = (__webpack_require__(97381).Reflect);

module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

/***/ }),

/***/ 5031:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $parseFloat = (__webpack_require__(97381).parseFloat);

var $trim = (__webpack_require__(30618).trim);

module.exports = 1 / $parseFloat(__webpack_require__(13596) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

/***/ }),

/***/ 46971:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $parseInt = (__webpack_require__(97381).parseInt);

var $trim = (__webpack_require__(30618).trim);

var ws = __webpack_require__(13596);

var hex = /^[-+]?0[xX]/;
module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

/***/ }),

/***/ 58228:
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return {
      e: false,
      v: exec()
    };
  } catch (e) {
    return {
      e: true,
      v: e
    };
  }
};

/***/ }),

/***/ 13507:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(56154);

var isObject = __webpack_require__(7156);

var newPromiseCapability = __webpack_require__(4086);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

/***/ }),

/***/ 86256:
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ 97228:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var redefine = __webpack_require__(57278);

module.exports = function (target, src, safe) {
  for (var key in src) {
    redefine(target, key, src[key], safe);
  }

  return target;
};

/***/ }),

/***/ 57278:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(97381);

var hide = __webpack_require__(78012);

var has = __webpack_require__(35389);

var SRC = __webpack_require__(97936)('src');

var $toString = __webpack_require__(61174);

var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

(__webpack_require__(88544).inspectSource) = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),

/***/ 24585:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var classof = __webpack_require__(42858);

var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec

module.exports = function (R, S) {
  var exec = R.exec;

  if (typeof exec === 'function') {
    var result = exec.call(R, S);

    if (_typeof(result) !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }

    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }

  return builtinExec.call(R, S);
};

/***/ }),

/***/ 56997:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var regexpFlags = __webpack_require__(92188);

var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.

var nativeReplace = String.prototype.replace;
var patchedExec = nativeExec;
var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
}(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }

    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }

    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

/***/ }),

/***/ 6813:
/***/ ((module) => {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

/***/ }),

/***/ 94261:
/***/ ((module) => {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

/***/ }),

/***/ 87598:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://tc39.github.io/proposal-setmap-offrom/

var $export = __webpack_require__(15913);

var aFunction = __webpack_require__(6819);

var ctx = __webpack_require__(50566);

var forOf = __webpack_require__(72734);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, {
    from: function from(source
    /* , mapFn, thisArg */
    ) {
      var mapFn = arguments[1];
      var mapping, A, n, cb;
      aFunction(this);
      mapping = mapFn !== undefined;
      if (mapping) aFunction(mapFn);
      if (source == undefined) return new this();
      A = [];

      if (mapping) {
        n = 0;
        cb = ctx(mapFn, arguments[2], 2);
        forOf(source, false, function (nextItem) {
          A.push(cb(nextItem, n++));
        });
      } else {
        forOf(source, false, A.push, A);
      }

      return new this(A);
    }
  });
};

/***/ }),

/***/ 65329:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://tc39.github.io/proposal-setmap-offrom/

var $export = __webpack_require__(15913);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, {
    of: function of() {
      var length = arguments.length;
      var A = new Array(length);

      while (length--) {
        A[length] = arguments[length];
      }

      return new this(A);
    }
  });
};

/***/ }),

/***/ 66931:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */
var isObject = __webpack_require__(7156);

var anObject = __webpack_require__(56154);

var check = function check(O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};

module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = __webpack_require__(50566)(Function.call, (__webpack_require__(23299).f)(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }

    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

/***/ }),

/***/ 4798:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(97381);

var dP = __webpack_require__(4835);

var DESCRIPTORS = __webpack_require__(94926);

var SPECIES = __webpack_require__(43336)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function get() {
      return this;
    }
  });
};

/***/ }),

/***/ 98094:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var def = (__webpack_require__(4835).f);

var has = __webpack_require__(35389);

var TAG = __webpack_require__(43336)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
    configurable: true,
    value: tag
  });
};

/***/ }),

/***/ 28662:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(83192)('keys');

var uid = __webpack_require__(97936);

module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),

/***/ 83192:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var core = __webpack_require__(88544);

var global = __webpack_require__(97381);

var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(74219) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

/***/ }),

/***/ 2035:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(56154);

var aFunction = __webpack_require__(6819);

var SPECIES = __webpack_require__(43336)('species');

module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),

/***/ 81411:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var fails = __webpack_require__(55810);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {
      /* empty */
    }, 1) : method.call(null);
  });
};

/***/ }),

/***/ 53593:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toInteger = __webpack_require__(73230);

var defined = __webpack_require__(80408); // true  -> String#at
// false -> String#codePointAt


module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),

/***/ 62376:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(41993);

var defined = __webpack_require__(80408);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

/***/ }),

/***/ 19927:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var fails = __webpack_require__(55810);

var defined = __webpack_require__(80408);

var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)

var createHTML = function createHTML(string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

/***/ }),

/***/ 91925:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(8315);

var repeat = __webpack_require__(51924);

var defined = __webpack_require__(80408);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

/***/ }),

/***/ 51924:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toInteger = __webpack_require__(73230);

var defined = __webpack_require__(80408);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");

  for (; n > 0; (n >>>= 1) && (str += str)) {
    if (n & 1) res += str;
  }

  return res;
};

/***/ }),

/***/ 30618:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var defined = __webpack_require__(80408);

var fails = __webpack_require__(55810);

var spaces = __webpack_require__(13596);

var space = '[' + spaces + ']';
var non = "\u200B\x85";
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function exporter(KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
}; // 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim


var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

/***/ }),

/***/ 13596:
/***/ ((module) => {

module.exports = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003" + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

/***/ }),

/***/ 8220:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ctx = __webpack_require__(50566);

var invoke = __webpack_require__(72765);

var html = __webpack_require__(31225);

var cel = __webpack_require__(62241);

var global = __webpack_require__(97381);

var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function run() {
  var id = +this; // eslint-disable-next-line no-prototype-builtins

  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var listener = function listener(event) {
  run.call(event.data);
}; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };

    defer(counter);
    return counter;
  };

  clearTask = function clearImmediate(id) {
    delete queue[id];
  }; // Node.js 0.8-


  if (__webpack_require__(93679)(process) == 'process') {
    defer = function defer(id) {
      process.nextTick(ctx(run, id, 1));
    }; // Sphere (JS game engine) Dispatch API

  } else if (Dispatch && Dispatch.now) {
    defer = function defer(id) {
      Dispatch.now(ctx(run, id, 1));
    }; // Browsers with MessageChannel, includes WebWorkers

  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function defer(id) {
      global.postMessage(id + '', '*');
    };

    global.addEventListener('message', listener, false); // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function defer(id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    }; // Rest old browsers

  } else {
    defer = function defer(id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}

module.exports = {
  set: setTask,
  clear: clearTask
};

/***/ }),

/***/ 36241:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toInteger = __webpack_require__(73230);

var max = Math.max;
var min = Math.min;

module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),

/***/ 93472:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(73230);

var toLength = __webpack_require__(8315);

module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

/***/ }),

/***/ 73230:
/***/ ((module) => {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;

module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),

/***/ 98499:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(331);

var defined = __webpack_require__(80408);

module.exports = function (it) {
  return IObject(defined(it));
};

/***/ }),

/***/ 8315:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 7.1.15 ToLength
var toInteger = __webpack_require__(73230);

var min = Math.min;

module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),

/***/ 62515:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(80408);

module.exports = function (it) {
  return Object(defined(it));
};

/***/ }),

/***/ 48537:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(7156); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string


module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ 20431:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (__webpack_require__(94926)) {
  var LIBRARY = __webpack_require__(74219);

  var global = __webpack_require__(97381);

  var fails = __webpack_require__(55810);

  var $export = __webpack_require__(15913);

  var $typed = __webpack_require__(39161);

  var $buffer = __webpack_require__(69782);

  var ctx = __webpack_require__(50566);

  var anInstance = __webpack_require__(12702);

  var propertyDesc = __webpack_require__(86256);

  var hide = __webpack_require__(78012);

  var redefineAll = __webpack_require__(97228);

  var toInteger = __webpack_require__(73230);

  var toLength = __webpack_require__(8315);

  var toIndex = __webpack_require__(93472);

  var toAbsoluteIndex = __webpack_require__(36241);

  var toPrimitive = __webpack_require__(48537);

  var has = __webpack_require__(35389);

  var classof = __webpack_require__(42858);

  var isObject = __webpack_require__(7156);

  var toObject = __webpack_require__(62515);

  var isArrayIter = __webpack_require__(77063);

  var create = __webpack_require__(64275);

  var getPrototypeOf = __webpack_require__(84153);

  var gOPN = (__webpack_require__(32982).f);

  var getIterFn = __webpack_require__(17637);

  var uid = __webpack_require__(97936);

  var wks = __webpack_require__(43336);

  var createArrayMethod = __webpack_require__(23970);

  var createArrayIncludes = __webpack_require__(24687);

  var speciesConstructor = __webpack_require__(2035);

  var ArrayIterators = __webpack_require__(54806);

  var Iterators = __webpack_require__(5301);

  var $iterDetect = __webpack_require__(15508);

  var setSpecies = __webpack_require__(4798);

  var arrayFill = __webpack_require__(81132);

  var arrayCopyWithin = __webpack_require__(62147);

  var $DP = __webpack_require__(4835);

  var $GOPD = __webpack_require__(23299);

  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';
  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });
  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });
  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function toOffset(it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function validate(it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function allocate(C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    }

    return new C(length);
  };

  var speciesFromList = function speciesFromList(O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function fromList(C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);

    while (length > index) {
      result[index] = list[index++];
    }

    return result;
  };

  var addGetter = function addGetter(it, key, internal) {
    dP(it, key, {
      get: function get() {
        return this._d[internal];
      }
    });
  };

  var $from = function from(source
  /* , mapfn, thisArg */
  ) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;

    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      }

      O = values;
    }

    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);

    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }

    return result;
  };

  var $of = function of()
  /* ...items */
  {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);

    while (length > index) {
      result[index] = arguments[index++];
    }

    return result;
  }; // iOS Safari 6.x fails here


  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
    arrayToLocaleString.call(new Uint8Array(1));
  });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start
    /* , end */
    ) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn
    /* , thisArg */
    ) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value
    /* , start, end */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn
    /* , thisArg */
    ) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate
    /* , thisArg */
    ) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate
    /* , thisArg */
    ) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn
    /* , thisArg */
    ) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement
    /* , fromIndex */
    ) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement
    /* , fromIndex */
    ) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) {
      // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement
    /* , fromIndex */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn
    /* , thisArg */
    ) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn
    /* , initialValue */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;

      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      }

      return that;
    },
    some: function some(callbackfn
    /* , thisArg */
    ) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike
  /* , offset */
  ) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);

    while (index < len) {
      this[offset + index] = src[index++];
    }
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function isTAIndex(target, key) {
    return isObject(target) && target[TYPED_ARRAY] && _typeof(key) != 'symbol' && key in target && String(+key) == String(key);
  };

  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
  };

  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors
    && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
      target[key] = desc.value;
      return target;
    }

    return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () {
    arrayToString.call({});
  })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function constructor() {
      /* noop */
    },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function get() {
      return this[TYPED_ARRAY];
    }
  }); // eslint-disable-next-line max-statements

  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];

    var getter = function getter(that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };

    var setter = function setter(that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };

    var addElement = function addElement(that, index) {
      dP(that, index, {
        get: function get() {
          return getter(this, index);
        },
        set: function set(value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;

        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;

          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }

          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }

        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });

        while (index < length) {
          addElement(that, index++);
        }
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new

      new TypedArray(null); // eslint-disable-line no-new

      new TypedArray(1.5); // eslint-disable-line no-new

      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass; // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645

        if (!isObject(data)) return new Base(toIndex(data));

        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
        }

        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }

    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function get() {
          return NAME;
        }
      });
    }

    O[NAME] = TypedArray;
    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });
    $export($export.S + $export.F * fails(function () {
      Base.of.call(TypedArray, 1);
    }), NAME, {
      from: $from,
      of: $of
    });
    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
    $export($export.P, NAME, proto);
    setSpecies(NAME);
    $export($export.P + $export.F * FORCED_SET, NAME, {
      set: $set
    });
    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, {
      slice: $slice
    });
    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {
      toLocaleString: $toLocaleString
    });
    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () {
  /* empty */
};

/***/ }),

/***/ 69782:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(97381);

var DESCRIPTORS = __webpack_require__(94926);

var LIBRARY = __webpack_require__(74219);

var $typed = __webpack_require__(39161);

var hide = __webpack_require__(78012);

var redefineAll = __webpack_require__(97228);

var fails = __webpack_require__(55810);

var anInstance = __webpack_require__(12702);

var toInteger = __webpack_require__(73230);

var toLength = __webpack_require__(8315);

var toIndex = __webpack_require__(93472);

var gOPN = (__webpack_require__(32982).f);

var dP = (__webpack_require__(4835).f);

var arrayFill = __webpack_require__(81132);

var setToStringTag = __webpack_require__(98094);

var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError; // eslint-disable-next-line no-shadow-restricted-names

var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754

function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value); // eslint-disable-next-line no-self-compare

  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);

    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {
    ;
  }

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {
    ;
  }

  buffer[--i] |= s * 128;
  return buffer;
}

function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;

  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {
    ;
  }

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {
    ;
  }

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}

function packI8(it) {
  return [it & 0xff];
}

function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}

function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}

function packF64(it) {
  return packIEEE754(it, 52, 8);
}

function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, {
    get: function get() {
      return this[internal];
    }
  });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}

function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);

  for (var i = 0; i < bytes; i++) {
    store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
  }
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset
    /* , littleEndian */
    ) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset
    /* , littleEndian */
    ) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new

    new $ArrayBuffer(1.5); // eslint-disable-line no-new

    new $ArrayBuffer(NaN); // eslint-disable-line no-new

    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };

    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];

    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }

    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  } // iOS Safari 7.x bug


  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

/***/ }),

/***/ 39161:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(97381);

var hide = __webpack_require__(78012);

var uid = __webpack_require__(97936);

var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;
var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

/***/ }),

/***/ 97936:
/***/ ((module) => {

var id = 0;
var px = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),

/***/ 851:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(97381);

var navigator = global.navigator;
module.exports = navigator && navigator.userAgent || '';

/***/ }),

/***/ 68546:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(7156);

module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

/***/ }),

/***/ 45721:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(97381);

var core = __webpack_require__(88544);

var LIBRARY = __webpack_require__(74219);

var wksExt = __webpack_require__(99078);

var defineProperty = (__webpack_require__(4835).f);

module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
    value: wksExt.f(name)
  });
};

/***/ }),

/***/ 99078:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

exports.f = __webpack_require__(43336);

/***/ }),

/***/ 43336:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var store = __webpack_require__(83192)('wks');

var uid = __webpack_require__(97936);

var _Symbol = (__webpack_require__(97381).Symbol);

var USE_SYMBOL = typeof _Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),

/***/ 17637:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(42858);

var ITERATOR = __webpack_require__(43336)('iterator');

var Iterators = __webpack_require__(5301);

module.exports = (__webpack_require__(88544).getIteratorMethod) = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

/***/ }),

/***/ 19122:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(15913);

var $re = __webpack_require__(6813)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {
  escape: function escape(it) {
    return $re(it);
  }
});

/***/ }),

/***/ 44611:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(15913);

$export($export.P, 'Array', {
  copyWithin: __webpack_require__(62147)
});

__webpack_require__(84339)('copyWithin');

/***/ }),

/***/ 59892:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $every = __webpack_require__(23970)(4);

$export($export.P + $export.F * !__webpack_require__(81411)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn
  /* , thisArg */
  ) {
    return $every(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ 9217:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(15913);

$export($export.P, 'Array', {
  fill: __webpack_require__(81132)
});

__webpack_require__(84339)('fill');

/***/ }),

/***/ 19355:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $filter = __webpack_require__(23970)(2);

$export($export.P + $export.F * !__webpack_require__(81411)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn
  /* , thisArg */
  ) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ 60109:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $export = __webpack_require__(15913);

var $find = __webpack_require__(23970)(6);

var KEY = 'findIndex';
var forced = true; // Shouldn't skip holes

if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(84339)(KEY);

/***/ }),

/***/ 44138:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $export = __webpack_require__(15913);

var $find = __webpack_require__(23970)(5);

var KEY = 'find';
var forced = true; // Shouldn't skip holes

if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(84339)(KEY);

/***/ }),

/***/ 20791:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $forEach = __webpack_require__(23970)(0);

var STRICT = __webpack_require__(81411)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn
  /* , thisArg */
  ) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ 38671:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ctx = __webpack_require__(50566);

var $export = __webpack_require__(15913);

var toObject = __webpack_require__(62515);

var call = __webpack_require__(72471);

var isArrayIter = __webpack_require__(77063);

var toLength = __webpack_require__(8315);

var createProperty = __webpack_require__(91348);

var getIterFn = __webpack_require__(17637);

$export($export.S + $export.F * !__webpack_require__(15508)(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike
  /* , mapfn = undefined, thisArg = undefined */
  ) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);

      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }

    result.length = index;
    return result;
  }
});

/***/ }),

/***/ 24751:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $indexOf = __webpack_require__(24687)(false);

var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(81411)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement
  /* , fromIndex = 0 */
  ) {
    return NEGATIVE_ZERO // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

/***/ }),

/***/ 41621:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(15913);

$export($export.S, 'Array', {
  isArray: __webpack_require__(1320)
});

/***/ }),

/***/ 54806:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var addToUnscopables = __webpack_require__(84339);

var step = __webpack_require__(37218);

var Iterators = __webpack_require__(5301);

var toIObject = __webpack_require__(98499); // 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()


module.exports = __webpack_require__(64873)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target

  this._i = 0; // next index

  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;

  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }

  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),

/***/ 99437:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 22.1.3.13 Array.prototype.join(separator)

var $export = __webpack_require__(15913);

var toIObject = __webpack_require__(98499);

var arrayJoin = [].join; // fallback for not array-like strings

$export($export.P + $export.F * (__webpack_require__(331) != Object || !__webpack_require__(81411)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

/***/ }),

/***/ 49822:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var toIObject = __webpack_require__(98499);

var toInteger = __webpack_require__(73230);

var toLength = __webpack_require__(8315);

var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(81411)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement
  /* , fromIndex = @[*-1] */
  ) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;

    for (; index >= 0; index--) {
      if (index in O) if (O[index] === searchElement) return index || 0;
    }

    return -1;
  }
});

/***/ }),

/***/ 60633:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $map = __webpack_require__(23970)(1);

$export($export.P + $export.F * !__webpack_require__(81411)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn
  /* , thisArg */
  ) {
    return $map(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ 6705:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var createProperty = __webpack_require__(91348); // WebKit Array.of isn't generic


$export($export.S + $export.F * __webpack_require__(55810)(function () {
  function F() {
    /* empty */
  }

  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of()
  /* ...args */
  {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);

    while (aLen > index) {
      createProperty(result, index, arguments[index++]);
    }

    result.length = aLen;
    return result;
  }
});

/***/ }),

/***/ 18738:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $reduce = __webpack_require__(46419);

$export($export.P + $export.F * !__webpack_require__(81411)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn
  /* , initialValue */
  ) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

/***/ }),

/***/ 79121:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $reduce = __webpack_require__(46419);

$export($export.P + $export.F * !__webpack_require__(81411)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn
  /* , initialValue */
  ) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

/***/ }),

/***/ 67263:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var html = __webpack_require__(31225);

var cof = __webpack_require__(93679);

var toAbsoluteIndex = __webpack_require__(36241);

var toLength = __webpack_require__(8315);

var arraySlice = [].slice; // fallback for not array-like ES3 strings and DOM objects

$export($export.P + $export.F * __webpack_require__(55810)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;

    for (; i < size; i++) {
      cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    }

    return cloned;
  }
});

/***/ }),

/***/ 9253:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $some = __webpack_require__(23970)(3);

$export($export.P + $export.F * !__webpack_require__(81411)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn
  /* , thisArg */
  ) {
    return $some(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ 90919:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var aFunction = __webpack_require__(6819);

var toObject = __webpack_require__(62515);

var fails = __webpack_require__(55810);

var $sort = [].sort;
var test = [1, 2, 3];
$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null); // Old WebKit
}) || !__webpack_require__(81411)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
  }
});

/***/ }),

/***/ 33821:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(4798)('Array');

/***/ }),

/***/ 28384:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(15913);

$export($export.S, 'Date', {
  now: function now() {
    return new Date().getTime();
  }
});

/***/ }),

/***/ 59701:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(15913);

var toISOString = __webpack_require__(92115); // PhantomJS / old WebKit has a broken implementations


$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

/***/ }),

/***/ 52334:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var toObject = __webpack_require__(62515);

var toPrimitive = __webpack_require__(48537);

$export($export.P + $export.F * __webpack_require__(55810)(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
    toISOString: function toISOString() {
      return 1;
    }
  }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

/***/ }),

/***/ 73233:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var TO_PRIMITIVE = __webpack_require__(43336)('toPrimitive');

var proto = Date.prototype;
if (!(TO_PRIMITIVE in proto)) __webpack_require__(78012)(proto, TO_PRIMITIVE, __webpack_require__(20296));

/***/ }),

/***/ 51325:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;

if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(57278)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this); // eslint-disable-next-line no-self-compare

    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

/***/ }),

/***/ 10161:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(15913);

$export($export.P, 'Function', {
  bind: __webpack_require__(98327)
});

/***/ }),

/***/ 30015:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isObject = __webpack_require__(7156);

var getPrototypeOf = __webpack_require__(84153);

var HAS_INSTANCE = __webpack_require__(43336)('hasInstance');

var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)

if (!(HAS_INSTANCE in FunctionProto)) (__webpack_require__(4835).f)(FunctionProto, HAS_INSTANCE, {
  value: function value(O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

    while (O = getPrototypeOf(O)) {
      if (this.prototype === O) return true;
    }

    return false;
  }
});

/***/ }),

/***/ 66042:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var dP = (__webpack_require__(4835).f);

var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name'; // 19.2.4.2 name

NAME in FProto || __webpack_require__(94926) && dP(FProto, NAME, {
  configurable: true,
  get: function get() {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

/***/ }),

/***/ 58969:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var strong = __webpack_require__(54396);

var validate = __webpack_require__(68546);

var MAP = 'Map'; // 23.1 Map Objects

module.exports = __webpack_require__(61966)(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),

/***/ 84717:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(15913);

var log1p = __webpack_require__(95447);

var sqrt = Math.sqrt;
var $acosh = Math.acosh;
$export($export.S + $export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
&& Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
&& $acosh(Infinity) == Infinity), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

/***/ }),

/***/ 77292:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(15913);

var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
} // Tor Browser bug: Math.asinh(0) -> -0


$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
  asinh: asinh
});

/***/ }),

/***/ 21840:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(15913);

var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0

$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

/***/ }),

/***/ 3255:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(15913);

var sign = __webpack_require__(84012);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

/***/ }),

/***/ 65728:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

/***/ }),

/***/ 96255:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(15913);

var exp = Math.exp;
$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

/***/ }),

/***/ 82834:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(15913);

var $expm1 = __webpack_require__(94774);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {
  expm1: $expm1
});

/***/ }),

/***/ 64489:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  fround: __webpack_require__(161)
});

/***/ }),

/***/ 50575:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(15913);

var abs = Math.abs;
$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) {
    // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;

    while (i < aLen) {
      arg = abs(arguments[i++]);

      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }

    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

/***/ }),

/***/ 61369:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(15913);

var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity

$export($export.S + $export.F * __webpack_require__(55810)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

/***/ }),

/***/ 2751:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

/***/ }),

/***/ 89617:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  log1p: __webpack_require__(95447)
});

/***/ }),

/***/ 33656:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

/***/ }),

/***/ 61850:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  sign: __webpack_require__(84012)
});

/***/ }),

/***/ 55424:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(15913);

var expm1 = __webpack_require__(94774);

var exp = Math.exp; // V8 near Chromium 38 has a problem with very small numbers

$export($export.S + $export.F * __webpack_require__(55810)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

/***/ }),

/***/ 230:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(15913);

var expm1 = __webpack_require__(94774);

var exp = Math.exp;
$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

/***/ }),

/***/ 48471:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

/***/ }),

/***/ 40440:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(97381);

var has = __webpack_require__(35389);

var cof = __webpack_require__(93679);

var inheritIfRequired = __webpack_require__(3654);

var toPrimitive = __webpack_require__(48537);

var fails = __webpack_require__(55810);

var gOPN = (__webpack_require__(32982).f);

var gOPD = (__webpack_require__(23299).f);

var dP = (__webpack_require__(4835).f);

var $trim = (__webpack_require__(30618).trim);

var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype; // Opera ~12 has broken Object#toString

var BROKEN_COF = cof(__webpack_require__(64275)(proto)) == NUMBER;
var TRIM = ('trim' in String.prototype); // 7.1.3 ToNumber(argument)

var toNumber = function toNumber(argument) {
  var it = toPrimitive(argument, false);

  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;

    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:
        case 98:
          radix = 2;
          maxCode = 49;
          break;
        // fast equal /^0b[01]+$/i

        case 79:
        case 111:
          radix = 8;
          maxCode = 55;
          break;
        // fast equal /^0o[0-7]+$/i

        default:
          return +it;
      }

      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols

        if (code < 48 || code > maxCode) return NaN;
      }

      return parseInt(digits, radix);
    }
  }

  return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number // check on 1..constructor(foo) case
    && (BROKEN_COF ? fails(function () {
      proto.valueOf.call(that);
    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };

  for (var keys = __webpack_require__(94926) ? gOPN(Base) : ( // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }

  $Number.prototype = proto;
  proto.constructor = $Number;

  __webpack_require__(57278)(global, NUMBER, $Number);
}

/***/ }),

/***/ 31914:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(15913);

$export($export.S, 'Number', {
  EPSILON: Math.pow(2, -52)
});

/***/ }),

/***/ 44117:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(15913);

var _isFinite = (__webpack_require__(97381).isFinite);

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ }),

/***/ 59619:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(15913);

$export($export.S, 'Number', {
  isInteger: __webpack_require__(75127)
});

/***/ }),

/***/ 95849:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(15913);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

/***/ }),

/***/ 94750:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(15913);

var isInteger = __webpack_require__(75127);

var abs = Math.abs;
$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

/***/ }),

/***/ 41550:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(15913);

$export($export.S, 'Number', {
  MAX_SAFE_INTEGER: 0x1fffffffffffff
});

/***/ }),

/***/ 73529:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(15913);

$export($export.S, 'Number', {
  MIN_SAFE_INTEGER: -0x1fffffffffffff
});

/***/ }),

/***/ 42791:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var $parseFloat = __webpack_require__(5031); // 20.1.2.12 Number.parseFloat(string)


$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {
  parseFloat: $parseFloat
});

/***/ }),

/***/ 66831:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var $parseInt = __webpack_require__(46971); // 20.1.2.13 Number.parseInt(string, radix)


$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {
  parseInt: $parseInt
});

/***/ }),

/***/ 81077:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var toInteger = __webpack_require__(73230);

var aNumberValue = __webpack_require__(39855);

var repeat = __webpack_require__(51924);

var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function multiply(n, c) {
  var i = -1;
  var c2 = c;

  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};

var divide = function divide(n) {
  var i = 6;
  var c = 0;

  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = c % n * 1e7;
  }
};

var numToString = function numToString() {
  var i = 6;
  var s = '';

  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  }

  return s;
};

var pow = function pow(x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function log(x) {
  var n = 0;
  var x2 = x;

  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }

  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }

  return n;
};

$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !__webpack_require__(55810)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare

    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);

    if (x < 0) {
      s = '-';
      x = -x;
    }

    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;

      if (e > 0) {
        multiply(0, z);
        j = f;

        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }

        multiply(pow(10, j, 1), 0);
        j = e - 1;

        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }

        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }

    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }

    return m;
  }
});

/***/ }),

/***/ 50820:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $fails = __webpack_require__(55810);

var aNumberValue = __webpack_require__(39855);

var $toPrecision = 1.0.toPrecision;
$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

/***/ }),

/***/ 85331:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(15913);

$export($export.S + $export.F, 'Object', {
  assign: __webpack_require__(78559)
});

/***/ }),

/***/ 83290:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


$export($export.S, 'Object', {
  create: __webpack_require__(64275)
});

/***/ }),

/***/ 8424:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)


$export($export.S + $export.F * !__webpack_require__(94926), 'Object', {
  defineProperties: __webpack_require__(6447)
});

/***/ }),

/***/ 3690:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


$export($export.S + $export.F * !__webpack_require__(94926), 'Object', {
  defineProperty: (__webpack_require__(4835).f)
});

/***/ }),

/***/ 50754:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(7156);

var meta = (__webpack_require__(93763).onFreeze);

__webpack_require__(4057)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

/***/ }),

/***/ 42357:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(98499);

var $getOwnPropertyDescriptor = (__webpack_require__(23299).f);

__webpack_require__(4057)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),

/***/ 86022:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(4057)('getOwnPropertyNames', function () {
  return (__webpack_require__(3136).f);
});

/***/ }),

/***/ 86667:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(62515);

var $getPrototypeOf = __webpack_require__(84153);

__webpack_require__(4057)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),

/***/ 34919:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(7156);

__webpack_require__(4057)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

/***/ }),

/***/ 69219:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(7156);

__webpack_require__(4057)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

/***/ }),

/***/ 93270:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(7156);

__webpack_require__(4057)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

/***/ }),

/***/ 92456:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(15913);

$export($export.S, 'Object', {
  is: __webpack_require__(94261)
});

/***/ }),

/***/ 22506:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(62515);

var $keys = __webpack_require__(39924);

__webpack_require__(4057)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

/***/ }),

/***/ 36527:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(7156);

var meta = (__webpack_require__(93763).onFreeze);

__webpack_require__(4057)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

/***/ }),

/***/ 27571:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(7156);

var meta = (__webpack_require__(93763).onFreeze);

__webpack_require__(4057)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

/***/ }),

/***/ 98490:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(15913);

$export($export.S, 'Object', {
  setPrototypeOf: (__webpack_require__(66931).set)
});

/***/ }),

/***/ 34554:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 19.1.3.6 Object.prototype.toString()

var classof = __webpack_require__(42858);

var test = {};
test[__webpack_require__(43336)('toStringTag')] = 'z';

if (test + '' != '[object z]') {
  __webpack_require__(57278)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

/***/ }),

/***/ 53271:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var $parseFloat = __webpack_require__(5031); // 18.2.4 parseFloat(string)


$export($export.G + $export.F * (parseFloat != $parseFloat), {
  parseFloat: $parseFloat
});

/***/ }),

/***/ 317:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var $parseInt = __webpack_require__(46971); // 18.2.5 parseInt(string, radix)


$export($export.G + $export.F * (parseInt != $parseInt), {
  parseInt: $parseInt
});

/***/ }),

/***/ 70829:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var LIBRARY = __webpack_require__(74219);

var global = __webpack_require__(97381);

var ctx = __webpack_require__(50566);

var classof = __webpack_require__(42858);

var $export = __webpack_require__(15913);

var isObject = __webpack_require__(7156);

var aFunction = __webpack_require__(6819);

var anInstance = __webpack_require__(12702);

var forOf = __webpack_require__(72734);

var speciesConstructor = __webpack_require__(2035);

var task = (__webpack_require__(8220).set);

var microtask = __webpack_require__(91842)();

var newPromiseCapabilityModule = __webpack_require__(4086);

var perform = __webpack_require__(58228);

var userAgent = __webpack_require__(851);

var promiseResolve = __webpack_require__(13507);

var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';

var empty = function empty() {
  /* empty */
};

var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);

    var FakePromise = (promise.constructor = {})[__webpack_require__(43336)('species')] = function (exec) {
      exec(empty, empty);
    }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // we can't detect it synchronously, so just check versions
    && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) {
    /* empty */
  }
}(); // helpers

var isThenable = function isThenable(it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function notify(promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;

    var run = function run(reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;

      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }

          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value); // may throw

            if (domain) {
              domain.exit();
              exited = true;
            }
          }

          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };

    while (chain.length > i) {
      run(chain[i++]);
    } // variable length - can't use forEach


    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};

var onUnhandled = function onUnhandled(promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;

    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({
            promise: promise,
            reason: value
          });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    }

    promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};

var isUnhandled = function isUnhandled(promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};

var onHandleUnhandled = function onHandleUnhandled(promise) {
  task.call(global, function () {
    var handler;

    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({
        promise: promise,
        reason: promise._v
      });
    }
  });
};

var $reject = function $reject(value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap

  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};

var $resolve = function $resolve(value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap

  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");

    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = {
          _w: promise,
          _d: false
        }; // wrap

        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({
      _w: promise,
      _d: false
    }, e); // wrap
  }
}; // constructor polyfill


if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);

    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  }; // eslint-disable-next-line no-unused-vars


  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions

    this._a = undefined; // <- checked in isUnhandled reactions

    this._s = 0; // <- state

    this._d = false; // <- done

    this._v = undefined; // <- value

    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

    this._n = false; // <- notify
  };

  Internal.prototype = __webpack_require__(97228)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;

      this._c.push(reaction);

      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function _catch(onRejected) {
      return this.then(undefined, onRejected);
    }
  });

  OwnPromiseCapability = function OwnPromiseCapability() {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Promise: $Promise
});

__webpack_require__(98094)($Promise, PROMISE);

__webpack_require__(4798)(PROMISE);

Wrapper = __webpack_require__(88544)[PROMISE]; // statics

$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(15508)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

/***/ }),

/***/ 31220:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(15913);

var aFunction = __webpack_require__(6819);

var anObject = __webpack_require__(56154);

var rApply = ((__webpack_require__(97381).Reflect) || {}).apply;
var fApply = Function.apply; // MS Edge argumentsList argument is optional

$export($export.S + $export.F * !__webpack_require__(55810)(function () {
  rApply(function () {
    /* empty */
  });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

/***/ }),

/***/ 59263:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(15913);

var create = __webpack_require__(64275);

var aFunction = __webpack_require__(6819);

var anObject = __webpack_require__(56154);

var isObject = __webpack_require__(7156);

var fails = __webpack_require__(55810);

var bind = __webpack_require__(98327);

var rConstruct = ((__webpack_require__(97381).Reflect) || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it

var NEW_TARGET_BUG = fails(function () {
  function F() {
    /* empty */
  }

  return !(rConstruct(function () {
    /* empty */
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {
    /* empty */
  });
});
$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args
  /* , newTarget */
  ) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();

        case 1:
          return new Target(args[0]);

        case 2:
          return new Target(args[0], args[1]);

        case 3:
          return new Target(args[0], args[1], args[2]);

        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      } // w/o altered newTarget, lot of arguments case


      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    } // with altered newTarget, not support built-in constructors


    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),

/***/ 27622:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(4835);

var $export = __webpack_require__(15913);

var anObject = __webpack_require__(56154);

var toPrimitive = __webpack_require__(48537); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false


$export($export.S + $export.F * __webpack_require__(55810)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, {
    value: 1
  }), 1, {
    value: 2
  });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);

    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ 59060:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(15913);

var gOPD = (__webpack_require__(23299).f);

var anObject = __webpack_require__(56154);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

/***/ }),

/***/ 20980:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 26.1.5 Reflect.enumerate(target)

var $export = __webpack_require__(15913);

var anObject = __webpack_require__(56154);

var Enumerate = function Enumerate(iterated) {
  this._t = anObject(iterated); // target

  this._i = 0; // next index

  var keys = this._k = []; // keys

  var key;

  for (key in iterated) {
    keys.push(key);
  }
};

__webpack_require__(8258)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;

  do {
    if (that._i >= keys.length) return {
      value: undefined,
      done: true
    };
  } while (!((key = keys[that._i++]) in that._t));

  return {
    value: key,
    done: false
  };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

/***/ }),

/***/ 18484:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(23299);

var $export = __webpack_require__(15913);

var anObject = __webpack_require__(56154);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

/***/ }),

/***/ 59869:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(15913);

var getProto = __webpack_require__(84153);

var anObject = __webpack_require__(56154);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

/***/ }),

/***/ 26175:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(23299);

var getPrototypeOf = __webpack_require__(84153);

var has = __webpack_require__(35389);

var $export = __webpack_require__(15913);

var isObject = __webpack_require__(7156);

var anObject = __webpack_require__(56154);

function get(target, propertyKey
/* , receiver */
) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {
  get: get
});

/***/ }),

/***/ 11285:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(15913);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

/***/ }),

/***/ 64854:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(15913);

var anObject = __webpack_require__(56154);

var $isExtensible = Object.isExtensible;
$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

/***/ }),

/***/ 66647:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(15913);

$export($export.S, 'Reflect', {
  ownKeys: __webpack_require__(82600)
});

/***/ }),

/***/ 97903:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(15913);

var anObject = __webpack_require__(56154);

var $preventExtensions = Object.preventExtensions;
$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);

    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ 43113:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(15913);

var setProto = __webpack_require__(66931);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);

    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ 5197:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(4835);

var gOPD = __webpack_require__(23299);

var getPrototypeOf = __webpack_require__(84153);

var has = __webpack_require__(35389);

var $export = __webpack_require__(15913);

var createDesc = __webpack_require__(86256);

var anObject = __webpack_require__(56154);

var isObject = __webpack_require__(7156);

function set(target, propertyKey, V
/* , receiver */
) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;

  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }

    ownDesc = createDesc(0);
  }

  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;

    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));

    return true;
  }

  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {
  set: set
});

/***/ }),

/***/ 12566:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(97381);

var inheritIfRequired = __webpack_require__(3654);

var dP = (__webpack_require__(4835).f);

var gOPN = (__webpack_require__(32982).f);

var isRegExp = __webpack_require__(41993);

var $flags = __webpack_require__(92188);

var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g; // "new" creates a new object, old webkit buggy here

var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(94926) && (!CORRECT_NEW || __webpack_require__(55810)(function () {
  re2[__webpack_require__(43336)('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
  };

  var proxy = function proxy(key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function get() {
        return Base[key];
      },
      set: function set(it) {
        Base[key] = it;
      }
    });
  };

  for (var keys = gOPN(Base), i = 0; keys.length > i;) {
    proxy(keys[i++]);
  }

  proto.constructor = $RegExp;
  $RegExp.prototype = proto;

  __webpack_require__(57278)(global, 'RegExp', $RegExp);
}

__webpack_require__(4798)('RegExp');

/***/ }),

/***/ 25997:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var regexpExec = __webpack_require__(56997);

__webpack_require__(15913)({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

/***/ }),

/***/ 57181:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(94926) && /./g.flags != 'g') (__webpack_require__(4835).f)(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(92188)
});

/***/ }),

/***/ 18682:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var anObject = __webpack_require__(56154);

var toLength = __webpack_require__(8315);

var advanceStringIndex = __webpack_require__(53763);

var regExpExec = __webpack_require__(24585); // @@match logic


__webpack_require__(28644)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [// `String.prototype.match` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.match
  function match(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, // `RegExp.prototype[@@match]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
  function (regexp) {
    var res = maybeCallNative($match, regexp, this);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    if (!rx.global) return regExpExec(rx, S);
    var fullUnicode = rx.unicode;
    rx.lastIndex = 0;
    var A = [];
    var n = 0;
    var result;

    while ((result = regExpExec(rx, S)) !== null) {
      var matchStr = String(result[0]);
      A[n] = matchStr;
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      n++;
    }

    return n === 0 ? null : A;
  }];
});

/***/ }),

/***/ 78514:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var anObject = __webpack_require__(56154);

var toObject = __webpack_require__(62515);

var toLength = __webpack_require__(8315);

var toInteger = __webpack_require__(73230);

var advanceStringIndex = __webpack_require__(53763);

var regExpExec = __webpack_require__(24585);

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function maybeToString(it) {
  return it === undefined ? it : String(it);
}; // @@replace logic


__webpack_require__(28644)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [// `String.prototype.replace` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.replace
  function replace(searchValue, replaceValue) {
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  }, // `RegExp.prototype[@@replace]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
  function (regexp, replaceValue) {
    var res = maybeCallNative($replace, regexp, this, replaceValue);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    var functionalReplace = typeof replaceValue === 'function';
    if (!functionalReplace) replaceValue = String(replaceValue);
    var global = rx.global;

    if (global) {
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
    }

    var results = [];

    while (true) {
      var result = regExpExec(rx, S);
      if (result === null) break;
      results.push(result);
      if (!global) break;
      var matchStr = String(result[0]);
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
    }

    var accumulatedResult = '';
    var nextSourcePosition = 0;

    for (var i = 0; i < results.length; i++) {
      result = results[i];
      var matched = String(result[0]);
      var position = max(min(toInteger(result.index), S.length), 0);
      var captures = []; // NOTE: This is equivalent to
      //   captures = result.slice(1).map(maybeToString)
      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

      for (var j = 1; j < result.length; j++) {
        captures.push(maybeToString(result[j]));
      }

      var namedCaptures = result.groups;

      if (functionalReplace) {
        var replacerArgs = [matched].concat(captures, position, S);
        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
        var replacement = String(replaceValue.apply(undefined, replacerArgs));
      } else {
        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
      }

      if (position >= nextSourcePosition) {
        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
        nextSourcePosition = position + matched.length;
      }
    }

    return accumulatedResult + S.slice(nextSourcePosition);
  }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }

    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;

      switch (ch.charAt(0)) {
        case '$':
          return '$';

        case '&':
          return matched;

        case '`':
          return str.slice(0, position);

        case "'":
          return str.slice(tailPos);

        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;

        default:
          // \d\d?
          var n = +ch;
          if (n === 0) return match;

          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }

          capture = captures[n - 1];
      }

      return capture === undefined ? '' : capture;
    });
  }
});

/***/ }),

/***/ 45105:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var anObject = __webpack_require__(56154);

var sameValue = __webpack_require__(94261);

var regExpExec = __webpack_require__(24585); // @@search logic


__webpack_require__(28644)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [// `String.prototype.search` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.search
  function search(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, // `RegExp.prototype[@@search]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
  function (regexp) {
    var res = maybeCallNative($search, regexp, this);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    var previousLastIndex = rx.lastIndex;
    if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
    var result = regExpExec(rx, S);
    if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
    return result === null ? -1 : result.index;
  }];
});

/***/ }),

/***/ 35325:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isRegExp = __webpack_require__(41993);

var anObject = __webpack_require__(56154);

var speciesConstructor = __webpack_require__(2035);

var advanceStringIndex = __webpack_require__(53763);

var toLength = __webpack_require__(8315);

var callRegExpExec = __webpack_require__(24585);

var regexpExec = __webpack_require__(56997);

var fails = __webpack_require__(55810);

var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

var SUPPORTS_Y = !fails(function () {
  RegExp(MAX_UINT32, 'y');
}); // @@split logic

__webpack_require__(28644)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;

  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function internalSplit(separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split

      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy

      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;

      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];

        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }

        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }

      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));

      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    }; // Chakra, V8

  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function internalSplit(separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [// `String.prototype.split` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.split
  function split(separator, limit) {
    var O = defined(this);
    var splitter = separator == undefined ? undefined : separator[SPLIT];
    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
  }, // `RegExp.prototype[@@split]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
  //
  // NOTE: This cannot be properly polyfilled in engines that don't support
  // the 'y' flag.
  function (regexp, limit) {
    var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    var C = speciesConstructor(rx, RegExp);
    var unicodeMatching = rx.unicode;
    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
    // simulate the 'y' flag.

    var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
    if (lim === 0) return [];
    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
    var p = 0;
    var q = 0;
    var A = [];

    while (q < S.length) {
      splitter.lastIndex = SUPPORTS_Y ? q : 0;
      var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
      var e;

      if (z === null || (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
        q = advanceStringIndex(S, q, unicodeMatching);
      } else {
        A.push(S.slice(p, q));
        if (A.length === lim) return A;

        for (var i = 1; i <= z.length - 1; i++) {
          A.push(z[i]);
          if (A.length === lim) return A;
        }

        q = p = e;
      }
    }

    A.push(S.slice(p));
    return A;
  }];
});

/***/ }),

/***/ 58359:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


__webpack_require__(57181);

var anObject = __webpack_require__(56154);

var $flags = __webpack_require__(92188);

var DESCRIPTORS = __webpack_require__(94926);

var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function define(fn) {
  __webpack_require__(57278)(RegExp.prototype, TO_STRING, fn, true);
}; // 21.2.5.14 RegExp.prototype.toString()


if (__webpack_require__(55810)(function () {
  return $toString.call({
    source: 'a',
    flags: 'b'
  }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  }); // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

/***/ }),

/***/ 23940:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var strong = __webpack_require__(54396);

var validate = __webpack_require__(68546);

var SET = 'Set'; // 23.2 Set Objects

module.exports = __webpack_require__(61966)(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),

/***/ 49718:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.2 String.prototype.anchor(name)

__webpack_require__(19927)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

/***/ }),

/***/ 13845:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.3 String.prototype.big()

__webpack_require__(19927)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

/***/ }),

/***/ 35803:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.4 String.prototype.blink()

__webpack_require__(19927)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

/***/ }),

/***/ 52222:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.5 String.prototype.bold()

__webpack_require__(19927)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

/***/ }),

/***/ 25281:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $at = __webpack_require__(53593)(false);

$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

/***/ }),

/***/ 83917:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])


var $export = __webpack_require__(15913);

var toLength = __webpack_require__(8315);

var context = __webpack_require__(62376);

var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];
$export($export.P + $export.F * __webpack_require__(43483)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString
  /* , endPosition = @length */
  ) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
  }
});

/***/ }),

/***/ 65036:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.6 String.prototype.fixed()

__webpack_require__(19927)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

/***/ }),

/***/ 16131:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.7 String.prototype.fontcolor(color)

__webpack_require__(19927)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

/***/ }),

/***/ 84110:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.8 String.prototype.fontsize(size)

__webpack_require__(19927)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

/***/ }),

/***/ 18577:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var toAbsoluteIndex = __webpack_require__(36241);

var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) {
    // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;

    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
    }

    return res.join('');
  }
});

/***/ }),

/***/ 95450:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)


var $export = __webpack_require__(15913);

var context = __webpack_require__(62376);

var INCLUDES = 'includes';
$export($export.P + $export.F * __webpack_require__(43483)(INCLUDES), 'String', {
  includes: function includes(searchString
  /* , position = 0 */
  ) {
    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 76235:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.9 String.prototype.italics()

__webpack_require__(19927)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

/***/ }),

/***/ 46575:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $at = __webpack_require__(53593)(true); // 21.1.3.27 String.prototype[@@iterator]()


__webpack_require__(64873)(String, 'String', function (iterated) {
  this._t = String(iterated); // target

  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return {
    value: undefined,
    done: true
  };
  point = $at(O, index);
  this._i += point.length;
  return {
    value: point,
    done: false
  };
});

/***/ }),

/***/ 26495:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.10 String.prototype.link(url)

__webpack_require__(19927)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

/***/ }),

/***/ 77906:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var toIObject = __webpack_require__(98499);

var toLength = __webpack_require__(8315);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;

    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    }

    return res.join('');
  }
});

/***/ }),

/***/ 89449:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(51924)
});

/***/ }),

/***/ 24162:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.11 String.prototype.small()

__webpack_require__(19927)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

/***/ }),

/***/ 41616:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])


var $export = __webpack_require__(15913);

var toLength = __webpack_require__(8315);

var context = __webpack_require__(62376);

var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];
$export($export.P + $export.F * __webpack_require__(43483)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString
  /* , position = 0 */
  ) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
  }
});

/***/ }),

/***/ 45297:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.12 String.prototype.strike()

__webpack_require__(19927)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

/***/ }),

/***/ 71466:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.13 String.prototype.sub()

__webpack_require__(19927)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

/***/ }),

/***/ 12581:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // B.2.3.14 String.prototype.sup()

__webpack_require__(19927)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

/***/ }),

/***/ 78587:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // 21.1.3.25 String.prototype.trim()

__webpack_require__(30618)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

/***/ }),

/***/ 62403:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // ECMAScript 6 symbols shim

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var global = __webpack_require__(97381);

var has = __webpack_require__(35389);

var DESCRIPTORS = __webpack_require__(94926);

var $export = __webpack_require__(15913);

var redefine = __webpack_require__(57278);

var META = (__webpack_require__(93763).KEY);

var $fails = __webpack_require__(55810);

var shared = __webpack_require__(83192);

var setToStringTag = __webpack_require__(98094);

var uid = __webpack_require__(97936);

var wks = __webpack_require__(43336);

var wksExt = __webpack_require__(99078);

var wksDefine = __webpack_require__(45721);

var enumKeys = __webpack_require__(58727);

var isArray = __webpack_require__(1320);

var anObject = __webpack_require__(56154);

var isObject = __webpack_require__(7156);

var toObject = __webpack_require__(62515);

var toIObject = __webpack_require__(98499);

var toPrimitive = __webpack_require__(48537);

var createDesc = __webpack_require__(86256);

var _create = __webpack_require__(64275);

var gOPNExt = __webpack_require__(3136);

var $GOPD = __webpack_require__(23299);

var $GOPS = __webpack_require__(65421);

var $DP = __webpack_require__(4835);

var $keys = __webpack_require__(39924);

var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;

var _stringify = $JSON && $JSON.stringify;

var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function get() {
      return dP(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
  return _typeof(it) == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);

  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, {
        enumerable: createDesc(0, false)
      });
    }

    return setSymbolDesc(it, key, D);
  }

  return dP(it, key, D);
};

var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;

  while (l > i) {
    $defineProperty(it, key = keys[i++], P[key]);
  }

  return it;
};

var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};

var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};

var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }

  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }

  return result;
}; // 19.4.1.1 Symbol([description])


if (!USE_NATIVE) {
  $Symbol = function _Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };

    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: $set
    });
    return wrap(tag);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  (__webpack_require__(32982).f) = gOPNExt.f = $getOwnPropertyNames;
  (__webpack_require__(4616).f) = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(74219)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Symbol: $Symbol
});

for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  wks(es6Symbols[j++]);
}

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
  wksDefine(wellKnownSymbols[k++]);
}

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});
$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
}); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443

var FAILS_ON_PRIMITIVES = $fails(function () {
  $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
}); // 24.3.2 JSON.stringify(value [, replacer [, space]])

$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols

  return _stringify([S]) != '[null]' || _stringify({
    a: S
  }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

    if (!isArray(replacer)) replacer = function replacer(key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
}); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(78012)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

setToStringTag(global.JSON, 'JSON', true);

/***/ }),

/***/ 37195:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var $typed = __webpack_require__(39161);

var buffer = __webpack_require__(69782);

var anObject = __webpack_require__(56154);

var toAbsoluteIndex = __webpack_require__(36241);

var toLength = __webpack_require__(8315);

var isObject = __webpack_require__(7156);

var ArrayBuffer = (__webpack_require__(97381).ArrayBuffer);

var speciesConstructor = __webpack_require__(2035);

var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';
$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
  ArrayBuffer: $ArrayBuffer
});
$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});
$export($export.P + $export.U + $export.F * __webpack_require__(55810)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix

    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;

    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    }

    return result;
  }
});

__webpack_require__(4798)(ARRAY_BUFFER);

/***/ }),

/***/ 95345:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

$export($export.G + $export.W + $export.F * !(__webpack_require__(39161).ABV), {
  DataView: (__webpack_require__(69782).DataView)
});

/***/ }),

/***/ 88824:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 16472:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 16921:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 14797:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 26670:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 81123:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 83255:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 57736:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 94457:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20431)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

/***/ }),

/***/ 3491:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(97381);

var each = __webpack_require__(23970)(0);

var redefine = __webpack_require__(57278);

var meta = __webpack_require__(93763);

var assign = __webpack_require__(78559);

var weak = __webpack_require__(74495);

var isObject = __webpack_require__(7156);

var validate = __webpack_require__(68546);

var NATIVE_WEAK_MAP = __webpack_require__(68546);

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function wrapper(get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
}; // 23.3 WeakMap Objects

var $WeakMap = module.exports = __webpack_require__(61966)(WEAK_MAP, wrapper, methods, weak, true, true); // IE11 WeakMap frozen keys fix


if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();

        var result = this._f[key](a, b);

        return key == 'set' ? this : result; // store all the rest on native weakmap
      }

      return method.call(this, a, b);
    });
  });
}

/***/ }),

/***/ 56332:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var weak = __webpack_require__(74495);

var validate = __webpack_require__(68546);

var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects

__webpack_require__(61966)(WEAK_SET, function (get) {
  return function WeakSet() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

/***/ }),

/***/ 16032:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

var $export = __webpack_require__(15913);

var flattenIntoArray = __webpack_require__(43120);

var toObject = __webpack_require__(62515);

var toLength = __webpack_require__(8315);

var aFunction = __webpack_require__(6819);

var arraySpeciesCreate = __webpack_require__(65486);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn
  /* , thisArg */
  ) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(84339)('flatMap');

/***/ }),

/***/ 60732:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

var $export = __webpack_require__(15913);

var flattenIntoArray = __webpack_require__(43120);

var toObject = __webpack_require__(62515);

var toLength = __webpack_require__(8315);

var toInteger = __webpack_require__(73230);

var arraySpeciesCreate = __webpack_require__(65486);

$export($export.P, 'Array', {
  flatten: function flatten()
  /* depthArg = 1 */
  {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(84339)('flatten');

/***/ }),

/***/ 22963:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/tc39/Array.prototype.includes

var $export = __webpack_require__(15913);

var $includes = __webpack_require__(24687)(true);

$export($export.P, 'Array', {
  includes: function includes(el
  /* , fromIndex = 0 */
  ) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(84339)('includes');

/***/ }),

/***/ 16321:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(15913);

var microtask = __webpack_require__(91842)();

var process = (__webpack_require__(97381).process);

var isNode = __webpack_require__(93679)(process) == 'process';
$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

/***/ }),

/***/ 77469:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(15913);

var cof = __webpack_require__(93679);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

/***/ }),

/***/ 76426:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(15913);

$export($export.G, {
  global: __webpack_require__(97381)
});

/***/ }),

/***/ 43591:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(87598)('Map');

/***/ }),

/***/ 49992:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(65329)('Map');

/***/ }),

/***/ 68455:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(15913);

$export($export.P + $export.R, 'Map', {
  toJSON: __webpack_require__(11872)('Map')
});

/***/ }),

/***/ 4097:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

/***/ }),

/***/ 75813:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  DEG_PER_RAD: Math.PI / 180
});

/***/ }),

/***/ 7245:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(15913);

var RAD_PER_DEG = 180 / Math.PI;
$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

/***/ }),

/***/ 56756:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(15913);

var scale = __webpack_require__(88124);

var fround = __webpack_require__(161);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

/***/ }),

/***/ 48392:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

/***/ }),

/***/ 33735:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

/***/ }),

/***/ 21111:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

/***/ }),

/***/ 5508:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  RAD_PER_DEG: 180 / Math.PI
});

/***/ }),

/***/ 48422:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(15913);

var DEG_PER_RAD = Math.PI / 180;
$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

/***/ }),

/***/ 71818:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  scale: __webpack_require__(88124)
});

/***/ }),

/***/ 37371:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  signbit: function signbit(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
  }
});

/***/ }),

/***/ 67883:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(15913);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

/***/ }),

/***/ 86792:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var toObject = __webpack_require__(62515);

var aFunction = __webpack_require__(6819);

var $defineProperty = __webpack_require__(4835); // B.2.2.2 Object.prototype.__defineGetter__(P, getter)


__webpack_require__(94926) && $export($export.P + __webpack_require__(38249), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, {
      get: aFunction(getter),
      enumerable: true,
      configurable: true
    });
  }
});

/***/ }),

/***/ 10088:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var toObject = __webpack_require__(62515);

var aFunction = __webpack_require__(6819);

var $defineProperty = __webpack_require__(4835); // B.2.2.3 Object.prototype.__defineSetter__(P, setter)


__webpack_require__(94926) && $export($export.P + __webpack_require__(38249), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, {
      set: aFunction(setter),
      enumerable: true,
      configurable: true
    });
  }
});

/***/ }),

/***/ 38217:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(15913);

var $entries = __webpack_require__(38941)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

/***/ }),

/***/ 19168:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(15913);

var ownKeys = __webpack_require__(82600);

var toIObject = __webpack_require__(98499);

var gOPD = __webpack_require__(23299);

var createProperty = __webpack_require__(91348);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;

    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }

    return result;
  }
});

/***/ }),

/***/ 22095:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var toObject = __webpack_require__(62515);

var toPrimitive = __webpack_require__(48537);

var getPrototypeOf = __webpack_require__(84153);

var getOwnPropertyDescriptor = (__webpack_require__(23299).f); // B.2.2.4 Object.prototype.__lookupGetter__(P)


__webpack_require__(94926) && $export($export.P + __webpack_require__(38249), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;

    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

/***/ }),

/***/ 82889:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $export = __webpack_require__(15913);

var toObject = __webpack_require__(62515);

var toPrimitive = __webpack_require__(48537);

var getPrototypeOf = __webpack_require__(84153);

var getOwnPropertyDescriptor = (__webpack_require__(23299).f); // B.2.2.5 Object.prototype.__lookupSetter__(P)


__webpack_require__(94926) && $export($export.P + __webpack_require__(38249), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;

    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

/***/ }),

/***/ 56351:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(15913);

var $values = __webpack_require__(38941)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

/***/ }),

/***/ 65613:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/zenparsing/es-observable

var $export = __webpack_require__(15913);

var global = __webpack_require__(97381);

var core = __webpack_require__(88544);

var microtask = __webpack_require__(91842)();

var OBSERVABLE = __webpack_require__(43336)('observable');

var aFunction = __webpack_require__(6819);

var anObject = __webpack_require__(56154);

var anInstance = __webpack_require__(12702);

var redefineAll = __webpack_require__(97228);

var hide = __webpack_require__(78012);

var forOf = __webpack_require__(72734);

var RETURN = forOf.RETURN;

var getMethod = function getMethod(fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function cleanupSubscription(subscription) {
  var cleanup = subscription._c;

  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function subscriptionClosed(subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function closeSubscription(subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function Subscription(observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);

  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;

    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function cleanup() {
        subscription.unsubscribe();
      };else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  }

  if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() {
    closeSubscription(this);
  }
});

var SubscriptionObserver = function SubscriptionObserver(subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;

    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;

      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;

    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    }

    cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;

    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;

      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      }

      cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function next(value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});
redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);

    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }

    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          }

          observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) {
      items[i] = arguments[i++];
    }

    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          }

          observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  }
});
hide($Observable.prototype, OBSERVABLE, function () {
  return this;
});
$export($export.G, {
  Observable: $Observable
});

__webpack_require__(4798)('Observable');

/***/ }),

/***/ 78088:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// https://github.com/tc39/proposal-promise-finally


var $export = __webpack_require__(15913);

var core = __webpack_require__(88544);

var global = __webpack_require__(97381);

var speciesConstructor = __webpack_require__(2035);

var promiseResolve = __webpack_require__(13507);

$export($export.P + $export.R, 'Promise', {
  'finally': function _finally(onFinally) {
    var C = speciesConstructor(this, core.Promise || global.Promise);
    var isFunction = typeof onFinally == 'function';
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  }
});

/***/ }),

/***/ 75414:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/tc39/proposal-promise-try

var $export = __webpack_require__(15913);

var newPromiseCapability = __webpack_require__(4086);

var perform = __webpack_require__(58228);

$export($export.S, 'Promise', {
  'try': function _try(callbackfn) {
    var promiseCapability = newPromiseCapability.f(this);
    var result = perform(callbackfn);
    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
    return promiseCapability.promise;
  }
});

/***/ }),

/***/ 42812:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;
metadata.exp({
  defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
  }
});

/***/ }),

/***/ 92835:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;
metadata.exp({
  deleteMetadata: function deleteMetadata(metadataKey, target
  /* , targetKey */
  ) {
    var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
    var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
    if (metadataMap.size) return true;
    var targetMetadata = store.get(target);
    targetMetadata['delete'](targetKey);
    return !!targetMetadata.size || store['delete'](target);
  }
});

/***/ }),

/***/ 30710:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var Set = __webpack_require__(23940);

var from = __webpack_require__(35273);

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var getPrototypeOf = __webpack_require__(84153);

var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({
  getMetadataKeys: function getMetadataKeys(target
  /* , targetKey */
  ) {
    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  }
});

/***/ }),

/***/ 47415:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var getPrototypeOf = __webpack_require__(84153);

var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({
  getMetadata: function getMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ 10060:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;
metadata.exp({
  getOwnMetadataKeys: function getOwnMetadataKeys(target
  /* , targetKey */
  ) {
    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  }
});

/***/ }),

/***/ 93666:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;
metadata.exp({
  getOwnMetadata: function getOwnMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ 57216:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var getPrototypeOf = __webpack_require__(84153);

var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({
  hasMetadata: function hasMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ 63470:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;
metadata.exp({
  hasOwnMetadata: function hasOwnMetadata(metadataKey, target
  /* , targetKey */
  ) {
    return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  }
});

/***/ }),

/***/ 42161:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $metadata = __webpack_require__(98953);

var anObject = __webpack_require__(56154);

var aFunction = __webpack_require__(6819);

var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;
$metadata.exp({
  metadata: function metadata(metadataKey, metadataValue) {
    return function decorator(target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
    };
  }
});

/***/ }),

/***/ 24919:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(87598)('Set');

/***/ }),

/***/ 73798:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(65329)('Set');

/***/ }),

/***/ 30188:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(15913);

$export($export.P + $export.R, 'Set', {
  toJSON: __webpack_require__(11872)('Set')
});

/***/ }),

/***/ 86696:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/mathiasbynens/String.prototype.at

var $export = __webpack_require__(15913);

var $at = __webpack_require__(53593)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

/***/ }),

/***/ 47593:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://tc39.github.io/String.prototype.matchAll/

var $export = __webpack_require__(15913);

var defined = __webpack_require__(80408);

var toLength = __webpack_require__(8315);

var isRegExp = __webpack_require__(41993);

var getFlags = __webpack_require__(92188);

var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(8258)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);

  return {
    value: match,
    done: match === null
  };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

/***/ }),

/***/ 12123:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__(15913);

var $pad = __webpack_require__(91925);

var userAgent = __webpack_require__(851); // https://github.com/zloirock/core-js/issues/280


var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength
  /* , fillString = ' ' */
  ) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

/***/ }),

/***/ 29391:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__(15913);

var $pad = __webpack_require__(91925);

var userAgent = __webpack_require__(851); // https://github.com/zloirock/core-js/issues/280


var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength
  /* , fillString = ' ' */
  ) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

/***/ }),

/***/ 56541:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__(30618)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

/***/ }),

/***/ 81767:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__(30618)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

/***/ }),

/***/ 54870:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(45721)('asyncIterator');

/***/ }),

/***/ 37937:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(45721)('observable');

/***/ }),

/***/ 53884:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(15913);

$export($export.S, 'System', {
  global: __webpack_require__(97381)
});

/***/ }),

/***/ 52177:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(87598)('WeakMap');

/***/ }),

/***/ 89737:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(65329)('WeakMap');

/***/ }),

/***/ 38791:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(87598)('WeakSet');

/***/ }),

/***/ 35704:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(65329)('WeakSet');

/***/ }),

/***/ 51094:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $iterators = __webpack_require__(54806);

var getKeys = __webpack_require__(39924);

var redefine = __webpack_require__(57278);

var global = __webpack_require__(97381);

var hide = __webpack_require__(78012);

var Iterators = __webpack_require__(5301);

var wks = __webpack_require__(43336);

var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;
var DOMIterables = {
  CSSRuleList: true,
  // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true,
  // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true,
  // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;

  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) {
      if (!proto[key]) redefine(proto, key, $iterators[key], true);
    }
  }
}

/***/ }),

/***/ 81605:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $export = __webpack_require__(15913);

var $task = __webpack_require__(8220);

$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

/***/ }),

/***/ 42113:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(97381);

var $export = __webpack_require__(15913);

var userAgent = __webpack_require__(851);

var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

var wrap = function wrap(set) {
  return function (fn, time
  /* , ...args */
  ) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};

$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

/***/ }),

/***/ 22234:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(62403);

__webpack_require__(83290);

__webpack_require__(3690);

__webpack_require__(8424);

__webpack_require__(42357);

__webpack_require__(86667);

__webpack_require__(22506);

__webpack_require__(86022);

__webpack_require__(50754);

__webpack_require__(27571);

__webpack_require__(36527);

__webpack_require__(69219);

__webpack_require__(93270);

__webpack_require__(34919);

__webpack_require__(85331);

__webpack_require__(92456);

__webpack_require__(98490);

__webpack_require__(34554);

__webpack_require__(10161);

__webpack_require__(66042);

__webpack_require__(30015);

__webpack_require__(317);

__webpack_require__(53271);

__webpack_require__(40440);

__webpack_require__(81077);

__webpack_require__(50820);

__webpack_require__(31914);

__webpack_require__(44117);

__webpack_require__(59619);

__webpack_require__(95849);

__webpack_require__(94750);

__webpack_require__(41550);

__webpack_require__(73529);

__webpack_require__(42791);

__webpack_require__(66831);

__webpack_require__(84717);

__webpack_require__(77292);

__webpack_require__(21840);

__webpack_require__(3255);

__webpack_require__(65728);

__webpack_require__(96255);

__webpack_require__(82834);

__webpack_require__(64489);

__webpack_require__(50575);

__webpack_require__(61369);

__webpack_require__(2751);

__webpack_require__(89617);

__webpack_require__(33656);

__webpack_require__(61850);

__webpack_require__(55424);

__webpack_require__(230);

__webpack_require__(48471);

__webpack_require__(18577);

__webpack_require__(77906);

__webpack_require__(78587);

__webpack_require__(46575);

__webpack_require__(25281);

__webpack_require__(83917);

__webpack_require__(95450);

__webpack_require__(89449);

__webpack_require__(41616);

__webpack_require__(49718);

__webpack_require__(13845);

__webpack_require__(35803);

__webpack_require__(52222);

__webpack_require__(65036);

__webpack_require__(16131);

__webpack_require__(84110);

__webpack_require__(76235);

__webpack_require__(26495);

__webpack_require__(24162);

__webpack_require__(45297);

__webpack_require__(71466);

__webpack_require__(12581);

__webpack_require__(28384);

__webpack_require__(52334);

__webpack_require__(59701);

__webpack_require__(51325);

__webpack_require__(73233);

__webpack_require__(41621);

__webpack_require__(38671);

__webpack_require__(6705);

__webpack_require__(99437);

__webpack_require__(67263);

__webpack_require__(90919);

__webpack_require__(20791);

__webpack_require__(60633);

__webpack_require__(19355);

__webpack_require__(9253);

__webpack_require__(59892);

__webpack_require__(79121);

__webpack_require__(18738);

__webpack_require__(24751);

__webpack_require__(49822);

__webpack_require__(44611);

__webpack_require__(9217);

__webpack_require__(44138);

__webpack_require__(60109);

__webpack_require__(33821);

__webpack_require__(54806);

__webpack_require__(12566);

__webpack_require__(25997);

__webpack_require__(58359);

__webpack_require__(57181);

__webpack_require__(18682);

__webpack_require__(78514);

__webpack_require__(45105);

__webpack_require__(35325);

__webpack_require__(70829);

__webpack_require__(58969);

__webpack_require__(23940);

__webpack_require__(3491);

__webpack_require__(56332);

__webpack_require__(37195);

__webpack_require__(95345);

__webpack_require__(26670);

__webpack_require__(57736);

__webpack_require__(94457);

__webpack_require__(16921);

__webpack_require__(81123);

__webpack_require__(14797);

__webpack_require__(83255);

__webpack_require__(88824);

__webpack_require__(16472);

__webpack_require__(31220);

__webpack_require__(59263);

__webpack_require__(27622);

__webpack_require__(59060);

__webpack_require__(20980);

__webpack_require__(26175);

__webpack_require__(18484);

__webpack_require__(59869);

__webpack_require__(11285);

__webpack_require__(64854);

__webpack_require__(66647);

__webpack_require__(97903);

__webpack_require__(5197);

__webpack_require__(43113);

__webpack_require__(22963);

__webpack_require__(16032);

__webpack_require__(60732);

__webpack_require__(86696);

__webpack_require__(29391);

__webpack_require__(12123);

__webpack_require__(56541);

__webpack_require__(81767);

__webpack_require__(47593);

__webpack_require__(54870);

__webpack_require__(37937);

__webpack_require__(19168);

__webpack_require__(56351);

__webpack_require__(38217);

__webpack_require__(86792);

__webpack_require__(10088);

__webpack_require__(22095);

__webpack_require__(82889);

__webpack_require__(68455);

__webpack_require__(30188);

__webpack_require__(49992);

__webpack_require__(73798);

__webpack_require__(89737);

__webpack_require__(35704);

__webpack_require__(43591);

__webpack_require__(24919);

__webpack_require__(52177);

__webpack_require__(38791);

__webpack_require__(76426);

__webpack_require__(53884);

__webpack_require__(77469);

__webpack_require__(4097);

__webpack_require__(75813);

__webpack_require__(7245);

__webpack_require__(56756);

__webpack_require__(48392);

__webpack_require__(21111);

__webpack_require__(33735);

__webpack_require__(5508);

__webpack_require__(48422);

__webpack_require__(71818);

__webpack_require__(67883);

__webpack_require__(37371);

__webpack_require__(78088);

__webpack_require__(75414);

__webpack_require__(42812);

__webpack_require__(92835);

__webpack_require__(47415);

__webpack_require__(30710);

__webpack_require__(93666);

__webpack_require__(10060);

__webpack_require__(57216);

__webpack_require__(63470);

__webpack_require__(42161);

__webpack_require__(16321);

__webpack_require__(65613);

__webpack_require__(42113);

__webpack_require__(81605);

__webpack_require__(51094);

module.exports = __webpack_require__(88544);

/***/ }),

/***/ 99796:
/***/ ((module, exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(85271);
/* provided dependency */ var process = __webpack_require__(19142);
/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

exports.destroy = function () {
  var warned = false;
  return function () {
    if (!warned) {
      warned = true;
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
  };
}();
/**
 * Colors.
 */


exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */


exports.log = console.debug || console.log || function () {};
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__(94701)(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};

/***/ }),

/***/ 94701:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(85271);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug["default"] = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(67937);
  createDebug.destroy = destroy;
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;
    var enableOverride = null;
    var namespacesCache;
    var enabledCache;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return '%';
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.useColors = createDebug.useColors();
    debug.color = createDebug.selectColor(namespace);
    debug.extend = extend;
    debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    Object.defineProperty(debug, 'enabled', {
      enumerable: true,
      configurable: false,
      get: function get() {
        if (enableOverride !== null) {
          return enableOverride;
        }

        if (namespacesCache !== createDebug.namespaces) {
          namespacesCache = createDebug.namespaces;
          enabledCache = createDebug.enabled(namespace);
        }

        return enabledCache;
      },
      set: function set(v) {
        enableOverride = v;
      }
    }); // Env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    return debug;
  }

  function extend(namespace, delimiter) {
    var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.namespaces = namespaces;
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
      return '-' + namespace;
    }))).join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }
  /**
  * XXX DO NOT USE. This is a temporary stub function.
  * XXX It WILL be removed in the next major release.
  */


  function destroy() {
    console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

/***/ }),

/***/ 64347:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var keys = __webpack_require__(98204);

var hasSymbols = typeof Symbol === 'function' && _typeof(Symbol('foo')) === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {
  var obj = {};

  try {
    origDefineProperty(obj, 'x', {
      enumerable: false,
      value: obj
    }); // eslint-disable-next-line no-unused-vars, no-restricted-syntax

    for (var _ in obj) {
      // jscs:ignore disallowUnusedVariables
      return false;
    }

    return obj.x === obj;
  } catch (e) {
    /* this is IE 8. */
    return false;
  }
};

var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function defineProperty(object, name, value, predicate) {
  if (name in object && (!isFunction(predicate) || !predicate())) {
    return;
  }

  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value;
  }
};

var defineProperties = function defineProperties(object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);

  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }

  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};

defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

/***/ }),

/***/ 43117:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.attributeNames = exports.elementNames = void 0;
exports.elementNames = new Map([["altglyph", "altGlyph"], ["altglyphdef", "altGlyphDef"], ["altglyphitem", "altGlyphItem"], ["animatecolor", "animateColor"], ["animatemotion", "animateMotion"], ["animatetransform", "animateTransform"], ["clippath", "clipPath"], ["feblend", "feBlend"], ["fecolormatrix", "feColorMatrix"], ["fecomponenttransfer", "feComponentTransfer"], ["fecomposite", "feComposite"], ["feconvolvematrix", "feConvolveMatrix"], ["fediffuselighting", "feDiffuseLighting"], ["fedisplacementmap", "feDisplacementMap"], ["fedistantlight", "feDistantLight"], ["fedropshadow", "feDropShadow"], ["feflood", "feFlood"], ["fefunca", "feFuncA"], ["fefuncb", "feFuncB"], ["fefuncg", "feFuncG"], ["fefuncr", "feFuncR"], ["fegaussianblur", "feGaussianBlur"], ["feimage", "feImage"], ["femerge", "feMerge"], ["femergenode", "feMergeNode"], ["femorphology", "feMorphology"], ["feoffset", "feOffset"], ["fepointlight", "fePointLight"], ["fespecularlighting", "feSpecularLighting"], ["fespotlight", "feSpotLight"], ["fetile", "feTile"], ["feturbulence", "feTurbulence"], ["foreignobject", "foreignObject"], ["glyphref", "glyphRef"], ["lineargradient", "linearGradient"], ["radialgradient", "radialGradient"], ["textpath", "textPath"]]);
exports.attributeNames = new Map([["definitionurl", "definitionURL"], ["attributename", "attributeName"], ["attributetype", "attributeType"], ["basefrequency", "baseFrequency"], ["baseprofile", "baseProfile"], ["calcmode", "calcMode"], ["clippathunits", "clipPathUnits"], ["diffuseconstant", "diffuseConstant"], ["edgemode", "edgeMode"], ["filterunits", "filterUnits"], ["glyphref", "glyphRef"], ["gradienttransform", "gradientTransform"], ["gradientunits", "gradientUnits"], ["kernelmatrix", "kernelMatrix"], ["kernelunitlength", "kernelUnitLength"], ["keypoints", "keyPoints"], ["keysplines", "keySplines"], ["keytimes", "keyTimes"], ["lengthadjust", "lengthAdjust"], ["limitingconeangle", "limitingConeAngle"], ["markerheight", "markerHeight"], ["markerunits", "markerUnits"], ["markerwidth", "markerWidth"], ["maskcontentunits", "maskContentUnits"], ["maskunits", "maskUnits"], ["numoctaves", "numOctaves"], ["pathlength", "pathLength"], ["patterncontentunits", "patternContentUnits"], ["patterntransform", "patternTransform"], ["patternunits", "patternUnits"], ["pointsatx", "pointsAtX"], ["pointsaty", "pointsAtY"], ["pointsatz", "pointsAtZ"], ["preservealpha", "preserveAlpha"], ["preserveaspectratio", "preserveAspectRatio"], ["primitiveunits", "primitiveUnits"], ["refx", "refX"], ["refy", "refY"], ["repeatcount", "repeatCount"], ["repeatdur", "repeatDur"], ["requiredextensions", "requiredExtensions"], ["requiredfeatures", "requiredFeatures"], ["specularconstant", "specularConstant"], ["specularexponent", "specularExponent"], ["spreadmethod", "spreadMethod"], ["startoffset", "startOffset"], ["stddeviation", "stdDeviation"], ["stitchtiles", "stitchTiles"], ["surfacescale", "surfaceScale"], ["systemlanguage", "systemLanguage"], ["tablevalues", "tableValues"], ["targetx", "targetX"], ["targety", "targetY"], ["textlength", "textLength"], ["viewbox", "viewBox"], ["viewtarget", "viewTarget"], ["xchannelselector", "xChannelSelector"], ["ychannelselector", "yChannelSelector"], ["zoomandpan", "zoomAndPan"]]);

/***/ }),

/***/ 61671:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/*
 * Module dependencies
 */

var ElementType = __importStar(__webpack_require__(77304));

var entities_1 = __webpack_require__(67531);
/*
 * Mixed-case SVG and MathML tags & attributes
 * recognized by the HTML parser, see
 * https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
 */


var foreignNames_1 = __webpack_require__(43117);

var unencodedElements = new Set(["style", "script", "xmp", "iframe", "noembed", "noframes", "plaintext", "noscript"]);
/**
 * Format attributes
 */

function formatAttributes(attributes, opts) {
  if (!attributes) return;
  return Object.keys(attributes).map(function (key) {
    var _a, _b;

    var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";

    if (opts.xmlMode === "foreign") {
      /* Fix up mixed-case attribute names */
      key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
    }

    if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
      return key;
    }

    return key + "=\"" + (opts.decodeEntities ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + "\"";
  }).join(" ");
}
/**
 * Self-enclosing tags
 */


var singleTag = new Set(["area", "base", "basefont", "br", "col", "command", "embed", "frame", "hr", "img", "input", "isindex", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
/**
 * Renders a DOM node or an array of DOM nodes to a string.
 *
 * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
 *
 * @param node Node to be rendered.
 * @param options Changes serialization behavior
 */

function render(node, options) {
  if (options === void 0) {
    options = {};
  } // TODO: This is a bit hacky.


  var nodes = Array.isArray(node) || node.cheerio ? node : [node];
  var output = "";

  for (var i = 0; i < nodes.length; i++) {
    output += renderNode(nodes[i], options);
  }

  return output;
}

exports["default"] = render;

function renderNode(node, options) {
  switch (node.type) {
    case "root":
      return render(node.children, options);

    case ElementType.Directive:
      return renderDirective(node);

    case ElementType.Comment:
      return renderComment(node);

    case ElementType.CDATA:
      return renderCdata(node);

    default:
      return ElementType.isTag(node) ? renderTag(node, options) : renderText(node, options);
  }
}

var foreignModeIntegrationPoints = new Set(["mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title"]);
var foreignElements = new Set(["svg", "math"]);

function renderTag(elem, opts) {
  var _a; // Handle SVG / MathML in HTML


  if (opts.xmlMode === "foreign") {
    /* Fix up mixed-case element names */
    elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
    /* Exit foreign mode at integration points */

    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
      opts = __assign(__assign({}, opts), {
        xmlMode: false
      });
    }
  }

  if (!opts.xmlMode && foreignElements.has(elem.name)) {
    opts = __assign(__assign({}, opts), {
      xmlMode: "foreign"
    });
  }

  var tag = "<" + elem.name;
  var attribs = formatAttributes(elem.attribs, opts);

  if (attribs) {
    tag += " " + attribs;
  }

  if (elem.children.length === 0 && (opts.xmlMode ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
  opts.selfClosingTags !== false : // User explicitly asked for self-closing tags, even in HTML mode
  opts.selfClosingTags && singleTag.has(elem.name))) {
    if (!opts.xmlMode) tag += " ";
    tag += "/>";
  } else {
    tag += ">";

    if (elem.children.length > 0) {
      tag += render(elem.children, opts);
    }

    if (opts.xmlMode || !singleTag.has(elem.name)) {
      tag += "</" + elem.name + ">";
    }
  }

  return tag;
}

function renderDirective(elem) {
  return "<" + elem.data + ">";
}

function renderText(elem, opts) {
  var data = elem.data || ""; // If entities weren't decoded, no need to encode them back

  if (opts.decodeEntities && !(elem.parent && unencodedElements.has(elem.parent.name))) {
    data = entities_1.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return "<![CDATA[" + elem.children[0].data + "]]>";
}

function renderComment(elem) {
  return "<!--" + elem.data + "-->";
}

/***/ }),

/***/ 77304:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
/** Types of elements found in htmlparser2's DOM */

var ElementType;

(function (ElementType) {
  /** Type for the root element of a document */
  ElementType["Root"] = "root";
  /** Type for Text */

  ElementType["Text"] = "text";
  /** Type for <? ... ?> */

  ElementType["Directive"] = "directive";
  /** Type for <!-- ... --> */

  ElementType["Comment"] = "comment";
  /** Type for <script> tags */

  ElementType["Script"] = "script";
  /** Type for <style> tags */

  ElementType["Style"] = "style";
  /** Type for Any tag */

  ElementType["Tag"] = "tag";
  /** Type for <![CDATA[ ... ]]> */

  ElementType["CDATA"] = "cdata";
  /** Type for <!doctype ...> */

  ElementType["Doctype"] = "doctype";
})(ElementType = exports.ElementType || (exports.ElementType = {}));
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */


function isTag(elem) {
  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}

exports.isTag = isTag; // Exports for backwards compatibility

/** Type for the root element of a document */

exports.Root = ElementType.Root;
/** Type for Text */

exports.Text = ElementType.Text;
/** Type for <? ... ?> */

exports.Directive = ElementType.Directive;
/** Type for <!-- ... --> */

exports.Comment = ElementType.Comment;
/** Type for <script> tags */

exports.Script = ElementType.Script;
/** Type for <style> tags */

exports.Style = ElementType.Style;
/** Type for Any tag */

exports.Tag = ElementType.Tag;
/** Type for <![CDATA[ ... ]]> */

exports.CDATA = ElementType.CDATA;
/** Type for <!doctype ...> */

exports.Doctype = ElementType.Doctype;

/***/ }),

/***/ 71363:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DomHandler = void 0;

var node_1 = __webpack_require__(25653);

__exportStar(__webpack_require__(25653), exports);

var reWhitespace = /\s+/g; // Default options

var defaultOpts = {
  normalizeWhitespace: false,
  withStartIndices: false,
  withEndIndices: false
};

var DomHandler =
/** @class */
function () {
  /**
   * @param callback Called once parsing has completed.
   * @param options Settings for the handler.
   * @param elementCB Callback whenever a tag is closed.
   */
  function DomHandler(callback, options, elementCB) {
    /** The constructed DOM */
    this.dom = [];
    /** Indicated whether parsing has been completed. */

    this._done = false;
    /** Stack of open tags. */

    this._tagStack = [];
    /** A data node that is still being written to. */

    this._lastNode = null;
    /** Reference to the parser instance. Used for location information. */

    this._parser = null; // Make it possible to skip arguments, for backwards-compatibility

    if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts;
    }

    if (_typeof(callback) === "object") {
      options = callback;
      callback = undefined;
    }

    this._callback = callback !== null && callback !== void 0 ? callback : null;
    this._options = options !== null && options !== void 0 ? options : defaultOpts;
    this._elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
  }

  DomHandler.prototype.onparserinit = function (parser) {
    this._parser = parser;
  }; // Resets the handler back to starting state


  DomHandler.prototype.onreset = function () {
    var _a;

    this.dom = [];
    this._done = false;
    this._tagStack = [];
    this._lastNode = null;
    this._parser = (_a = this._parser) !== null && _a !== void 0 ? _a : null;
  }; // Signals the handler that parsing is done


  DomHandler.prototype.onend = function () {
    if (this._done) return;
    this._done = true;
    this._parser = null;
    this.handleCallback(null);
  };

  DomHandler.prototype.onerror = function (error) {
    this.handleCallback(error);
  };

  DomHandler.prototype.onclosetag = function () {
    this._lastNode = null;

    var elem = this._tagStack.pop();

    if (!elem || !this._parser) {
      return;
    }

    if (this._options.withEndIndices) {
      elem.endIndex = this._parser.endIndex;
    }

    if (this._elementCB) this._elementCB(elem);
  };

  DomHandler.prototype.onopentag = function (name, attribs) {
    var element = new node_1.Element(name, attribs);
    this.addNode(element);

    this._tagStack.push(element);
  };

  DomHandler.prototype.ontext = function (data) {
    var normalize = this._options.normalizeWhitespace;
    var _lastNode = this._lastNode;

    if (_lastNode && _lastNode.type === "text"
    /* Text */
    ) {
        if (normalize) {
          _lastNode.data = (_lastNode.data + data).replace(reWhitespace, " ");
        } else {
          _lastNode.data += data;
        }
      } else {
      if (normalize) {
        data = data.replace(reWhitespace, " ");
      }

      var node = new node_1.Text(data);
      this.addNode(node);
      this._lastNode = node;
    }
  };

  DomHandler.prototype.oncomment = function (data) {
    if (this._lastNode && this._lastNode.type === "comment"
    /* Comment */
    ) {
        this._lastNode.data += data;
        return;
      }

    var node = new node_1.Comment(data);
    this.addNode(node);
    this._lastNode = node;
  };

  DomHandler.prototype.oncommentend = function () {
    this._lastNode = null;
  };

  DomHandler.prototype.oncdatastart = function () {
    var text = new node_1.Text("");
    var node = new node_1.NodeWithChildren("cdata"
    /* CDATA */
    , [text]);
    this.addNode(node);
    text.parent = node;
    this._lastNode = text;
  };

  DomHandler.prototype.oncdataend = function () {
    this._lastNode = null;
  };

  DomHandler.prototype.onprocessinginstruction = function (name, data) {
    var node = new node_1.ProcessingInstruction(name, data);
    this.addNode(node);
  };

  DomHandler.prototype.handleCallback = function (error) {
    if (typeof this._callback === "function") {
      this._callback(error, this.dom);
    } else if (error) {
      throw error;
    }
  };

  DomHandler.prototype.addNode = function (node) {
    var parent = this._tagStack[this._tagStack.length - 1];
    var siblings = parent ? parent.children : this.dom;
    var previousSibling = siblings[siblings.length - 1];

    if (this._parser) {
      if (this._options.withStartIndices) {
        node.startIndex = this._parser.startIndex;
      }

      if (this._options.withEndIndices) {
        node.endIndex = this._parser.endIndex;
      }
    }

    siblings.push(node);

    if (previousSibling) {
      node.prev = previousSibling;
      previousSibling.next = node;
    }

    if (parent) {
      node.parent = parent;
    }

    this._lastNode = null;
  };

  DomHandler.prototype.addDataNode = function (node) {
    this.addNode(node);
    this._lastNode = node;
  };

  return DomHandler;
}();

exports.DomHandler = DomHandler;
exports["default"] = DomHandler;

/***/ }),

/***/ 25653:
/***/ (function(__unused_webpack_module, exports) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cloneNode = exports.Element = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
var nodeTypes = new Map([["tag"
/* Tag */
, 1], ["script"
/* Script */
, 1], ["style"
/* Style */
, 1], ["directive"
/* Directive */
, 1], ["text"
/* Text */
, 3], ["cdata"
/* CDATA */
, 4], ["comment"
/* Comment */
, 8]]);
/**
 * This object will be used as the prototype for Nodes when creating a
 * DOM-Level-1-compliant structure.
 */

var Node =
/** @class */
function () {
  /**
   *
   * @param type The type of the node.
   */
  function Node(type) {
    this.type = type;
    /** Parent of the node */

    this.parent = null;
    /** Previous sibling */

    this.prev = null;
    /** Next sibling */

    this.next = null;
    /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */

    this.startIndex = null;
    /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */

    this.endIndex = null;
  }

  Object.defineProperty(Node.prototype, "nodeType", {
    // Read-only aliases
    get: function get() {
      var _a;

      return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "parentNode", {
    // Read-write aliases for properties
    get: function get() {
      return this.parent;
    },
    set: function set(parent) {
      this.parent = parent;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "previousSibling", {
    get: function get() {
      return this.prev;
    },
    set: function set(prev) {
      this.prev = prev;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "nextSibling", {
    get: function get() {
      return this.next;
    },
    set: function set(next) {
      this.next = next;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Clone this node, and optionally its children.
   *
   * @param recursive Clone child nodes as well.
   * @returns A clone of the node.
   */

  Node.prototype.cloneNode = function (recursive) {
    if (recursive === void 0) {
      recursive = false;
    }

    return cloneNode(this, recursive);
  };

  return Node;
}();

exports.Node = Node;

var DataNode =
/** @class */
function (_super) {
  __extends(DataNode, _super);
  /**
   * @param type The type of the node
   * @param data The content of the data node
   */


  function DataNode(type, data) {
    var _this = _super.call(this, type) || this;

    _this.data = data;
    return _this;
  }

  Object.defineProperty(DataNode.prototype, "nodeValue", {
    get: function get() {
      return this.data;
    },
    set: function set(data) {
      this.data = data;
    },
    enumerable: false,
    configurable: true
  });
  return DataNode;
}(Node);

exports.DataNode = DataNode;

var Text =
/** @class */
function (_super) {
  __extends(Text, _super);

  function Text(data) {
    return _super.call(this, "text"
    /* Text */
    , data) || this;
  }

  return Text;
}(DataNode);

exports.Text = Text;

var Comment =
/** @class */
function (_super) {
  __extends(Comment, _super);

  function Comment(data) {
    return _super.call(this, "comment"
    /* Comment */
    , data) || this;
  }

  return Comment;
}(DataNode);

exports.Comment = Comment;

var ProcessingInstruction =
/** @class */
function (_super) {
  __extends(ProcessingInstruction, _super);

  function ProcessingInstruction(name, data) {
    var _this = _super.call(this, "directive"
    /* Directive */
    , data) || this;

    _this.name = name;
    return _this;
  }

  return ProcessingInstruction;
}(DataNode);

exports.ProcessingInstruction = ProcessingInstruction;

var NodeWithChildren =
/** @class */
function (_super) {
  __extends(NodeWithChildren, _super);
  /**
   *
   * @param type Type of the node.
   * @param children Children of the node. Only certain node types can have children.
   */


  function NodeWithChildren(type, children) {
    var _this = _super.call(this, type) || this;

    _this.children = children;
    return _this;
  }

  Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
    // Aliases
    get: function get() {
      var _a;

      return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
    get: function get() {
      return this.children.length > 0 ? this.children[this.children.length - 1] : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
    get: function get() {
      return this.children;
    },
    set: function set(children) {
      this.children = children;
    },
    enumerable: false,
    configurable: true
  });
  return NodeWithChildren;
}(Node);

exports.NodeWithChildren = NodeWithChildren;

var Element =
/** @class */
function (_super) {
  __extends(Element, _super);
  /**
   * @param name Name of the tag, eg. `div`, `span`.
   * @param attribs Object mapping attribute names to attribute values.
   * @param children Children of the node.
   */


  function Element(name, attribs, children) {
    if (children === void 0) {
      children = [];
    }

    var _this = _super.call(this, name === "script" ? "script"
    /* Script */
    : name === "style" ? "style"
    /* Style */
    : "tag"
    /* Tag */
    , children) || this;

    _this.name = name;
    _this.attribs = attribs;
    _this.attribs = attribs;
    return _this;
  }

  Object.defineProperty(Element.prototype, "tagName", {
    // DOM Level 1 aliases
    get: function get() {
      return this.name;
    },
    set: function set(name) {
      this.name = name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Element.prototype, "attributes", {
    get: function get() {
      var _this = this;

      return Object.keys(this.attribs).map(function (name) {
        return {
          name: name,
          value: _this.attribs[name]
        };
      });
    },
    enumerable: false,
    configurable: true
  });
  return Element;
}(NodeWithChildren);

exports.Element = Element;
/**
 * Clone a node, and optionally its children.
 *
 * @param recursive Clone child nodes as well.
 * @returns A clone of the node.
 */

function cloneNode(node, recursive) {
  if (recursive === void 0) {
    recursive = false;
  }

  switch (node.type) {
    case "text"
    /* Text */
    :
      return new Text(node.data);

    case "directive"
    /* Directive */
    :
      {
        var instr = node;
        return new ProcessingInstruction(instr.name, instr.data);
      }

    case "comment"
    /* Comment */
    :
      return new Comment(node.data);

    case "tag"
    /* Tag */
    :
    case "script"
    /* Script */
    :
    case "style"
    /* Style */
    :
      {
        var elem = node;
        var children = recursive ? cloneChildren(elem.children) : [];
        var clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);
        children.forEach(function (child) {
          return child.parent = clone_1;
        });
        return clone_1;
      }

    case "cdata"
    /* CDATA */
    :
      {
        var cdata = node;
        var children = recursive ? cloneChildren(cdata.children) : [];
        var clone_2 = new NodeWithChildren("cdata"
        /* CDATA */
        , children);
        children.forEach(function (child) {
          return child.parent = clone_2;
        });
        return clone_2;
      }

    case "doctype"
    /* Doctype */
    :
      {
        // This type isn't used yet.
        throw new Error("Not implemented yet: ElementType.Doctype case");
      }
  }
}

exports.cloneNode = cloneNode;

function cloneChildren(childs) {
  var children = childs.map(function (child) {
    return cloneNode(child, true);
  });

  for (var i = 1; i < children.length; i++) {
    children[i].prev = children[i - 1];
    children[i - 1].next = children[i];
  }

  return children;
}

/***/ }),

/***/ 43625:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getFeed = void 0;

var stringify_1 = __webpack_require__(33633);

var legacy_1 = __webpack_require__(77344);
/**
 * Get the feed object from the root of a DOM tree.
 *
 * @param doc - The DOM to to extract the feed from.
 * @returns The feed.
 */


function getFeed(doc) {
  var feedRoot = getOneElement(isValidFeed, doc);
  return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}

exports.getFeed = getFeed;
/**
 * Parse an Atom feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */

function getAtomFeed(feedRoot) {
  var _a;

  var childs = feedRoot.children;
  var feed = {
    type: "atom",
    items: (0, legacy_1.getElementsByTagName)("entry", childs).map(function (item) {
      var _a;

      var children = item.children;
      var entry = {
        media: getMediaElements(children)
      };
      addConditionally(entry, "id", "id", children);
      addConditionally(entry, "title", "title", children);
      var href = (_a = getOneElement("link", children)) === null || _a === void 0 ? void 0 : _a.attribs.href;

      if (href) {
        entry.link = href;
      }

      var description = fetch("summary", children) || fetch("content", children);

      if (description) {
        entry.description = description;
      }

      var pubDate = fetch("updated", children);

      if (pubDate) {
        entry.pubDate = new Date(pubDate);
      }

      return entry;
    })
  };
  addConditionally(feed, "id", "id", childs);
  addConditionally(feed, "title", "title", childs);
  var href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs.href;

  if (href) {
    feed.link = href;
  }

  addConditionally(feed, "description", "subtitle", childs);
  var updated = fetch("updated", childs);

  if (updated) {
    feed.updated = new Date(updated);
  }

  addConditionally(feed, "author", "email", childs, true);
  return feed;
}
/**
 * Parse a RSS feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */


function getRssFeed(feedRoot) {
  var _a, _b;

  var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
  var feed = {
    type: feedRoot.name.substr(0, 3),
    id: "",
    items: (0, legacy_1.getElementsByTagName)("item", feedRoot.children).map(function (item) {
      var children = item.children;
      var entry = {
        media: getMediaElements(children)
      };
      addConditionally(entry, "id", "guid", children);
      addConditionally(entry, "title", "title", children);
      addConditionally(entry, "link", "link", children);
      addConditionally(entry, "description", "description", children);
      var pubDate = fetch("pubDate", children);
      if (pubDate) entry.pubDate = new Date(pubDate);
      return entry;
    })
  };
  addConditionally(feed, "title", "title", childs);
  addConditionally(feed, "link", "link", childs);
  addConditionally(feed, "description", "description", childs);
  var updated = fetch("lastBuildDate", childs);

  if (updated) {
    feed.updated = new Date(updated);
  }

  addConditionally(feed, "author", "managingEditor", childs, true);
  return feed;
}

var MEDIA_KEYS_STRING = ["url", "type", "lang"];
var MEDIA_KEYS_INT = ["fileSize", "bitrate", "framerate", "samplingrate", "channels", "duration", "height", "width"];
/**
 * Get all media elements of a feed item.
 *
 * @param where Nodes to search in.
 * @returns Media elements.
 */

function getMediaElements(where) {
  return (0, legacy_1.getElementsByTagName)("media:content", where).map(function (elem) {
    var attribs = elem.attribs;
    var media = {
      medium: attribs.medium,
      isDefault: !!attribs.isDefault
    };

    for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
      var attrib = MEDIA_KEYS_STRING_1[_i];

      if (attribs[attrib]) {
        media[attrib] = attribs[attrib];
      }
    }

    for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
      var attrib = MEDIA_KEYS_INT_1[_a];

      if (attribs[attrib]) {
        media[attrib] = parseInt(attribs[attrib], 10);
      }
    }

    if (attribs.expression) {
      media.expression = attribs.expression;
    }

    return media;
  });
}
/**
 * Get one element by tag name.
 *
 * @param tagName Tag name to look for
 * @param node Node to search in
 * @returns The element or null
 */


function getOneElement(tagName, node) {
  return (0, legacy_1.getElementsByTagName)(tagName, node, true, 1)[0];
}
/**
 * Get the text content of an element with a certain tag name.
 *
 * @param tagName Tag name to look for.
 * @param where  Node to search in.
 * @param recurse Whether to recurse into child nodes.
 * @returns The text content of the element.
 */


function fetch(tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }

  return (0, stringify_1.textContent)((0, legacy_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
/**
 * Adds a property to an object if it has a value.
 *
 * @param obj Object to be extended
 * @param prop Property name
 * @param tagName Tag name that contains the conditionally added property
 * @param where Element to search for the property
 * @param recurse Whether to recurse into child nodes.
 */


function addConditionally(obj, prop, tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }

  var val = fetch(tagName, where, recurse);
  if (val) obj[prop] = val;
}
/**
 * Checks if an element is a feed root node.
 *
 * @param value The name of the element to check.
 * @returns Whether an element is a feed root node.
 */


function isValidFeed(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
}

/***/ }),

/***/ 33757:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;

var domhandler_1 = __webpack_require__(78794);
/**
 * Given an array of nodes, remove any member that is contained by another.
 *
 * @param nodes Nodes to filter.
 * @returns Remaining nodes that aren't subtrees of each other.
 */


function removeSubsets(nodes) {
  var idx = nodes.length;
  /*
   * Check if each node (or one of its ancestors) is already contained in the
   * array.
   */

  while (--idx >= 0) {
    var node = nodes[idx];
    /*
     * Remove the node if it is not unique.
     * We are going through the array from the end, so we only
     * have to check nodes that preceed the node under consideration in the array.
     */

    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }

    for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }

  return nodes;
}

exports.removeSubsets = removeSubsets;
/**
 * Compare the position of one node against another node in any other document.
 * The return value is a bitmask with the following values:
 *
 * Document order:
 * > There is an ordering, document order, defined on all the nodes in the
 * > document corresponding to the order in which the first character of the
 * > XML representation of each node occurs in the XML representation of the
 * > document after expansion of general entities. Thus, the document element
 * > node will be the first node. Element nodes occur before their children.
 * > Thus, document order orders element nodes in order of the occurrence of
 * > their start-tag in the XML (after expansion of entities). The attribute
 * > nodes of an element occur after the element and before its children. The
 * > relative order of attribute nodes is implementation-dependent./
 *
 * Source:
 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
 *
 * @param nodeA The first node to use in the comparison
 * @param nodeB The second node to use in the comparison
 * @returns A bitmask describing the input nodes' relative position.
 *
 * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
 * a description of these values.
 */

function compareDocumentPosition(nodeA, nodeB) {
  var aParents = [];
  var bParents = [];

  if (nodeA === nodeB) {
    return 0;
  }

  var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;

  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }

  current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;

  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }

  var maxIdx = Math.min(aParents.length, bParents.length);
  var idx = 0;

  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }

  if (idx === 0) {
    return 1
    /* DISCONNECTED */
    ;
  }

  var sharedParent = aParents[idx - 1];
  var siblings = sharedParent.children;
  var aSibling = aParents[idx];
  var bSibling = bParents[idx];

  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return 4
      /* FOLLOWING */
      | 16
      /* CONTAINED_BY */
      ;
    }

    return 4
    /* FOLLOWING */
    ;
  }

  if (sharedParent === nodeA) {
    return 2
    /* PRECEDING */
    | 8
    /* CONTAINS */
    ;
  }

  return 2
  /* PRECEDING */
  ;
}

exports.compareDocumentPosition = compareDocumentPosition;
/**
 * Sort an array of nodes based on their relative position in the document and
 * remove any duplicate nodes. If the array contains nodes that do not belong
 * to the same document, sort order is unspecified.
 *
 * @param nodes Array of DOM nodes.
 * @returns Collection of unique nodes, sorted in document order.
 */

function uniqueSort(nodes) {
  nodes = nodes.filter(function (node, i, arr) {
    return !arr.includes(node, i + 1);
  });
  nodes.sort(function (a, b) {
    var relative = compareDocumentPosition(a, b);

    if (relative & 2
    /* PRECEDING */
    ) {
        return -1;
      } else if (relative & 4
    /* FOLLOWING */
    ) {
        return 1;
      }

    return 0;
  });
  return nodes;
}

exports.uniqueSort = uniqueSort;

/***/ }),

/***/ 45511:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;

__exportStar(__webpack_require__(33633), exports);

__exportStar(__webpack_require__(6530), exports);

__exportStar(__webpack_require__(41833), exports);

__exportStar(__webpack_require__(47062), exports);

__exportStar(__webpack_require__(77344), exports);

__exportStar(__webpack_require__(33757), exports);

__exportStar(__webpack_require__(43625), exports);
/** @deprecated Use these methods from `domhandler` directly. */


var domhandler_1 = __webpack_require__(78794);

Object.defineProperty(exports, "isTag", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.isTag;
  }
}));
Object.defineProperty(exports, "isCDATA", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.isCDATA;
  }
}));
Object.defineProperty(exports, "isText", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.isText;
  }
}));
Object.defineProperty(exports, "isComment", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.isComment;
  }
}));
Object.defineProperty(exports, "isDocument", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.isDocument;
  }
}));
Object.defineProperty(exports, "hasChildren", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.hasChildren;
  }
}));

/***/ }),

/***/ 77344:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;

var domhandler_1 = __webpack_require__(78794);

var querying_1 = __webpack_require__(47062);

var Checks = {
  tag_name: function tag_name(name) {
    if (typeof name === "function") {
      return function (elem) {
        return (0, domhandler_1.isTag)(elem) && name(elem.name);
      };
    } else if (name === "*") {
      return domhandler_1.isTag;
    }

    return function (elem) {
      return (0, domhandler_1.isTag)(elem) && elem.name === name;
    };
  },
  tag_type: function tag_type(type) {
    if (typeof type === "function") {
      return function (elem) {
        return type(elem.type);
      };
    }

    return function (elem) {
      return elem.type === type;
    };
  },
  tag_contains: function tag_contains(data) {
    if (typeof data === "function") {
      return function (elem) {
        return (0, domhandler_1.isText)(elem) && data(elem.data);
      };
    }

    return function (elem) {
      return (0, domhandler_1.isText)(elem) && elem.data === data;
    };
  }
};
/**
 * @param attrib Attribute to check.
 * @param value Attribute value to look for.
 * @returns A function to check whether the a node has an attribute with a particular value.
 */

function getAttribCheck(attrib, value) {
  if (typeof value === "function") {
    return function (elem) {
      return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
    };
  }

  return function (elem) {
    return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
  };
}
/**
 * @param a First function to combine.
 * @param b Second function to combine.
 * @returns A function taking a node and returning `true` if either
 * of the input functions returns `true` for the node.
 */


function combineFuncs(a, b) {
  return function (elem) {
    return a(elem) || b(elem);
  };
}
/**
 * @param options An object describing nodes to look for.
 * @returns A function executing all checks in `options` and returning `true`
 * if any of them match a node.
 */


function compileTest(options) {
  var funcs = Object.keys(options).map(function (key) {
    var value = options[key];
    return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
/**
 * @param options An object describing nodes to look for.
 * @param node The element to test.
 * @returns Whether the element matches the description in `options`.
 */


function testElement(options, node) {
  var test = compileTest(options);
  return test ? test(node) : true;
}

exports.testElement = testElement;
/**
 * @param options An object describing nodes to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes that match `options`.
 */

function getElements(options, nodes, recurse, limit) {
  if (limit === void 0) {
    limit = Infinity;
  }

  var test = compileTest(options);
  return test ? (0, querying_1.filter)(test, nodes, recurse, limit) : [];
}

exports.getElements = getElements;
/**
 * @param id The unique ID attribute value to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @returns The node with the supplied ID.
 */

function getElementById(id, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }

  if (!Array.isArray(nodes)) nodes = [nodes];
  return (0, querying_1.findOne)(getAttribCheck("id", id), nodes, recurse);
}

exports.getElementById = getElementById;
/**
 * @param tagName Tag name to search for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `tagName`.
 */

function getElementsByTagName(tagName, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }

  if (limit === void 0) {
    limit = Infinity;
  }

  return (0, querying_1.filter)(Checks.tag_name(tagName), nodes, recurse, limit);
}

exports.getElementsByTagName = getElementsByTagName;
/**
 * @param type Element type to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `type`.
 */

function getElementsByTagType(type, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }

  if (limit === void 0) {
    limit = Infinity;
  }

  return (0, querying_1.filter)(Checks.tag_type(type), nodes, recurse, limit);
}

exports.getElementsByTagType = getElementsByTagType;

/***/ }),

/***/ 41833:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
/**
 * Remove an element from the dom
 *
 * @param elem The element to be removed
 */

function removeElement(elem) {
  if (elem.prev) elem.prev.next = elem.next;
  if (elem.next) elem.next.prev = elem.prev;

  if (elem.parent) {
    var childs = elem.parent.children;
    childs.splice(childs.lastIndexOf(elem), 1);
  }
}

exports.removeElement = removeElement;
/**
 * Replace an element in the dom
 *
 * @param elem The element to be replaced
 * @param replacement The element to be added
 */

function replaceElement(elem, replacement) {
  var prev = replacement.prev = elem.prev;

  if (prev) {
    prev.next = replacement;
  }

  var next = replacement.next = elem.next;

  if (next) {
    next.prev = replacement;
  }

  var parent = replacement.parent = elem.parent;

  if (parent) {
    var childs = parent.children;
    childs[childs.lastIndexOf(elem)] = replacement;
  }
}

exports.replaceElement = replaceElement;
/**
 * Append a child to an element.
 *
 * @param elem The element to append to.
 * @param child The element to be added as a child.
 */

function appendChild(elem, child) {
  removeElement(child);
  child.next = null;
  child.parent = elem;

  if (elem.children.push(child) > 1) {
    var sibling = elem.children[elem.children.length - 2];
    sibling.next = child;
    child.prev = sibling;
  } else {
    child.prev = null;
  }
}

exports.appendChild = appendChild;
/**
 * Append an element after another.
 *
 * @param elem The element to append after.
 * @param next The element be added.
 */

function append(elem, next) {
  removeElement(next);
  var parent = elem.parent;
  var currNext = elem.next;
  next.next = currNext;
  next.prev = elem;
  elem.next = next;
  next.parent = parent;

  if (currNext) {
    currNext.prev = next;

    if (parent) {
      var childs = parent.children;
      childs.splice(childs.lastIndexOf(currNext), 0, next);
    }
  } else if (parent) {
    parent.children.push(next);
  }
}

exports.append = append;
/**
 * Prepend a child to an element.
 *
 * @param elem The element to prepend before.
 * @param child The element to be added as a child.
 */

function prependChild(elem, child) {
  removeElement(child);
  child.parent = elem;
  child.prev = null;

  if (elem.children.unshift(child) !== 1) {
    var sibling = elem.children[1];
    sibling.prev = child;
    child.next = sibling;
  } else {
    child.next = null;
  }
}

exports.prependChild = prependChild;
/**
 * Prepend an element before another.
 *
 * @param elem The element to prepend before.
 * @param prev The element be added.
 */

function prepend(elem, prev) {
  removeElement(prev);
  var parent = elem.parent;

  if (parent) {
    var childs = parent.children;
    childs.splice(childs.indexOf(elem), 0, prev);
  }

  if (elem.prev) {
    elem.prev.next = prev;
  }

  prev.parent = parent;
  prev.prev = elem.prev;
  prev.next = elem;
  elem.prev = prev;
}

exports.prepend = prepend;

/***/ }),

/***/ 47062:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;

var domhandler_1 = __webpack_require__(78794);
/**
 * Search a node and its children for nodes passing a test function.
 *
 * @param test Function to test nodes on.
 * @param node Node to search. Will be included in the result set if it matches.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */


function filter(test, node, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }

  if (limit === void 0) {
    limit = Infinity;
  }

  if (!Array.isArray(node)) node = [node];
  return find(test, node, recurse, limit);
}

exports.filter = filter;
/**
 * Search an array of node and its children for nodes passing a test function.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */

function find(test, nodes, recurse, limit) {
  var result = [];

  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
    var elem = nodes_1[_i];

    if (test(elem)) {
      result.push(elem);
      if (--limit <= 0) break;
    }

    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
      var children = find(test, elem.children, recurse, limit);
      result.push.apply(result, children);
      limit -= children.length;
      if (limit <= 0) break;
    }
  }

  return result;
}

exports.find = find;
/**
 * Finds the first element inside of an array that matches a test function.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns The first node in the array that passes `test`.
 */

function findOneChild(test, nodes) {
  return nodes.find(test);
}

exports.findOneChild = findOneChild;
/**
 * Finds one element in a tree that passes a test.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @returns The first child node that passes `test`.
 */

function findOne(test, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }

  var elem = null;

  for (var i = 0; i < nodes.length && !elem; i++) {
    var checked = nodes[i];

    if (!(0, domhandler_1.isTag)(checked)) {
      continue;
    } else if (test(checked)) {
      elem = checked;
    } else if (recurse && checked.children.length > 0) {
      elem = findOne(test, checked.children);
    }
  }

  return elem;
}

exports.findOne = findOne;
/**
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns Whether a tree of nodes contains at least one node passing a test.
 */

function existsOne(test, nodes) {
  return nodes.some(function (checked) {
    return (0, domhandler_1.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
  });
}

exports.existsOne = existsOne;
/**
 * Search and array of nodes and its children for nodes passing a test function.
 *
 * Same as `find`, only with less options, leading to reduced complexity.
 *
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns All nodes passing `test`.
 */

function findAll(test, nodes) {
  var _a;

  var result = [];
  var stack = nodes.filter(domhandler_1.isTag);
  var elem;

  while (elem = stack.shift()) {
    var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);

    if (children && children.length > 0) {
      stack.unshift.apply(stack, children);
    }

    if (test(elem)) result.push(elem);
  }

  return result;
}

exports.findAll = findAll;

/***/ }),

/***/ 33633:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;

var domhandler_1 = __webpack_require__(78794);

var dom_serializer_1 = __importDefault(__webpack_require__(61671));

var domelementtype_1 = __webpack_require__(77304);
/**
 * @param node Node to get the outer HTML of.
 * @param options Options for serialization.
 * @deprecated Use the `dom-serializer` module directly.
 * @returns `node`'s outer HTML.
 */


function getOuterHTML(node, options) {
  return (0, dom_serializer_1["default"])(node, options);
}

exports.getOuterHTML = getOuterHTML;
/**
 * @param node Node to get the inner HTML of.
 * @param options Options for serialization.
 * @deprecated Use the `dom-serializer` module directly.
 * @returns `node`'s inner HTML.
 */

function getInnerHTML(node, options) {
  return (0, domhandler_1.hasChildren)(node) ? node.children.map(function (node) {
    return getOuterHTML(node, options);
  }).join("") : "";
}

exports.getInnerHTML = getInnerHTML;
/**
 * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.
 *
 * @deprecated Use `textContent` instead.
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 */

function getText(node) {
  if (Array.isArray(node)) return node.map(getText).join("");
  if ((0, domhandler_1.isTag)(node)) return node.name === "br" ? "\n" : getText(node.children);
  if ((0, domhandler_1.isCDATA)(node)) return getText(node.children);
  if ((0, domhandler_1.isText)(node)) return node.data;
  return "";
}

exports.getText = getText;
/**
 * Get a node's text content.
 *
 * @param node Node to get the text content of.
 * @returns `node`'s text content.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}
 */

function textContent(node) {
  if (Array.isArray(node)) return node.map(textContent).join("");

  if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {
    return textContent(node.children);
  }

  if ((0, domhandler_1.isText)(node)) return node.data;
  return "";
}

exports.textContent = textContent;
/**
 * Get a node's inner text.
 *
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}
 */

function innerText(node) {
  if (Array.isArray(node)) return node.map(innerText).join("");

  if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {
    return innerText(node.children);
  }

  if ((0, domhandler_1.isText)(node)) return node.data;
  return "";
}

exports.innerText = innerText;

/***/ }),

/***/ 6530:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;

var domhandler_1 = __webpack_require__(78794);

var emptyArray = [];
/**
 * Get a node's children.
 *
 * @param elem Node to get the children of.
 * @returns `elem`'s children, or an empty array.
 */

function getChildren(elem) {
  var _a;

  return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
}

exports.getChildren = getChildren;
/**
 * Get a node's parent.
 *
 * @param elem Node to get the parent of.
 * @returns `elem`'s parent node.
 */

function getParent(elem) {
  return elem.parent || null;
}

exports.getParent = getParent;
/**
 * Gets an elements siblings, including the element itself.
 *
 * Attempts to get the children through the element's parent first.
 * If we don't have a parent (the element is a root node),
 * we walk the element's `prev` & `next` to get all remaining nodes.
 *
 * @param elem Element to get the siblings of.
 * @returns `elem`'s siblings.
 */

function getSiblings(elem) {
  var _a, _b;

  var parent = getParent(elem);
  if (parent != null) return getChildren(parent);
  var siblings = [elem];
  var prev = elem.prev,
      next = elem.next;

  while (prev != null) {
    siblings.unshift(prev);
    _a = prev, prev = _a.prev;
  }

  while (next != null) {
    siblings.push(next);
    _b = next, next = _b.next;
  }

  return siblings;
}

exports.getSiblings = getSiblings;
/**
 * Gets an attribute from an element.
 *
 * @param elem Element to check.
 * @param name Attribute name to retrieve.
 * @returns The element's attribute value, or `undefined`.
 */

function getAttributeValue(elem, name) {
  var _a;

  return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}

exports.getAttributeValue = getAttributeValue;
/**
 * Checks whether an element has an attribute.
 *
 * @param elem Element to check.
 * @param name Attribute name to look for.
 * @returns Returns whether `elem` has the attribute `name`.
 */

function hasAttrib(elem, name) {
  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}

exports.hasAttrib = hasAttrib;
/**
 * Get the tag name of an element.
 *
 * @param elem The element to get the name for.
 * @returns The tag name of `elem`.
 */

function getName(elem) {
  return elem.name;
}

exports.getName = getName;
/**
 * Returns the next element sibling of a node.
 *
 * @param elem The element to get the next sibling of.
 * @returns `elem`'s next sibling that is a tag.
 */

function nextElementSibling(elem) {
  var _a;

  var next = elem.next;

  while (next !== null && !(0, domhandler_1.isTag)(next)) {
    _a = next, next = _a.next;
  }

  return next;
}

exports.nextElementSibling = nextElementSibling;
/**
 * Returns the previous element sibling of a node.
 *
 * @param elem The element to get the previous sibling of.
 * @returns `elem`'s previous sibling that is a tag.
 */

function prevElementSibling(elem) {
  var _a;

  var prev = elem.prev;

  while (prev !== null && !(0, domhandler_1.isTag)(prev)) {
    _a = prev, prev = _a.prev;
  }

  return prev;
}

exports.prevElementSibling = prevElementSibling;

/***/ }),

/***/ 78794:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DomHandler = void 0;

var domelementtype_1 = __webpack_require__(77304);

var node_1 = __webpack_require__(90218);

__exportStar(__webpack_require__(90218), exports);

var reWhitespace = /\s+/g; // Default options

var defaultOpts = {
  normalizeWhitespace: false,
  withStartIndices: false,
  withEndIndices: false,
  xmlMode: false
};

var DomHandler =
/** @class */
function () {
  /**
   * @param callback Called once parsing has completed.
   * @param options Settings for the handler.
   * @param elementCB Callback whenever a tag is closed.
   */
  function DomHandler(callback, options, elementCB) {
    /** The elements of the DOM */
    this.dom = [];
    /** The root element for the DOM */

    this.root = new node_1.Document(this.dom);
    /** Indicated whether parsing has been completed. */

    this.done = false;
    /** Stack of open tags. */

    this.tagStack = [this.root];
    /** A data node that is still being written to. */

    this.lastNode = null;
    /** Reference to the parser instance. Used for location information. */

    this.parser = null; // Make it possible to skip arguments, for backwards-compatibility

    if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts;
    }

    if (_typeof(callback) === "object") {
      options = callback;
      callback = undefined;
    }

    this.callback = callback !== null && callback !== void 0 ? callback : null;
    this.options = options !== null && options !== void 0 ? options : defaultOpts;
    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
  }

  DomHandler.prototype.onparserinit = function (parser) {
    this.parser = parser;
  }; // Resets the handler back to starting state


  DomHandler.prototype.onreset = function () {
    this.dom = [];
    this.root = new node_1.Document(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = null;
  }; // Signals the handler that parsing is done


  DomHandler.prototype.onend = function () {
    if (this.done) return;
    this.done = true;
    this.parser = null;
    this.handleCallback(null);
  };

  DomHandler.prototype.onerror = function (error) {
    this.handleCallback(error);
  };

  DomHandler.prototype.onclosetag = function () {
    this.lastNode = null;
    var elem = this.tagStack.pop();

    if (this.options.withEndIndices) {
      elem.endIndex = this.parser.endIndex;
    }

    if (this.elementCB) this.elementCB(elem);
  };

  DomHandler.prototype.onopentag = function (name, attribs) {
    var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;
    var element = new node_1.Element(name, attribs, undefined, type);
    this.addNode(element);
    this.tagStack.push(element);
  };

  DomHandler.prototype.ontext = function (data) {
    var normalizeWhitespace = this.options.normalizeWhitespace;
    var lastNode = this.lastNode;

    if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
      if (normalizeWhitespace) {
        lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
      } else {
        lastNode.data += data;
      }

      if (this.options.withEndIndices) {
        lastNode.endIndex = this.parser.endIndex;
      }
    } else {
      if (normalizeWhitespace) {
        data = data.replace(reWhitespace, " ");
      }

      var node = new node_1.Text(data);
      this.addNode(node);
      this.lastNode = node;
    }
  };

  DomHandler.prototype.oncomment = function (data) {
    if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
      this.lastNode.data += data;
      return;
    }

    var node = new node_1.Comment(data);
    this.addNode(node);
    this.lastNode = node;
  };

  DomHandler.prototype.oncommentend = function () {
    this.lastNode = null;
  };

  DomHandler.prototype.oncdatastart = function () {
    var text = new node_1.Text("");
    var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [text]);
    this.addNode(node);
    text.parent = node;
    this.lastNode = text;
  };

  DomHandler.prototype.oncdataend = function () {
    this.lastNode = null;
  };

  DomHandler.prototype.onprocessinginstruction = function (name, data) {
    var node = new node_1.ProcessingInstruction(name, data);
    this.addNode(node);
  };

  DomHandler.prototype.handleCallback = function (error) {
    if (typeof this.callback === "function") {
      this.callback(error, this.dom);
    } else if (error) {
      throw error;
    }
  };

  DomHandler.prototype.addNode = function (node) {
    var parent = this.tagStack[this.tagStack.length - 1];
    var previousSibling = parent.children[parent.children.length - 1];

    if (this.options.withStartIndices) {
      node.startIndex = this.parser.startIndex;
    }

    if (this.options.withEndIndices) {
      node.endIndex = this.parser.endIndex;
    }

    parent.children.push(node);

    if (previousSibling) {
      node.prev = previousSibling;
      previousSibling.next = node;
    }

    node.parent = parent;
    this.lastNode = null;
  };

  return DomHandler;
}();

exports.DomHandler = DomHandler;
exports["default"] = DomHandler;

/***/ }),

/***/ 90218:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;

var domelementtype_1 = __webpack_require__(77304);

var nodeTypes = new Map([[domelementtype_1.ElementType.Tag, 1], [domelementtype_1.ElementType.Script, 1], [domelementtype_1.ElementType.Style, 1], [domelementtype_1.ElementType.Directive, 1], [domelementtype_1.ElementType.Text, 3], [domelementtype_1.ElementType.CDATA, 4], [domelementtype_1.ElementType.Comment, 8], [domelementtype_1.ElementType.Root, 9]]);
/**
 * This object will be used as the prototype for Nodes when creating a
 * DOM-Level-1-compliant structure.
 */

var Node =
/** @class */
function () {
  /**
   *
   * @param type The type of the node.
   */
  function Node(type) {
    this.type = type;
    /** Parent of the node */

    this.parent = null;
    /** Previous sibling */

    this.prev = null;
    /** Next sibling */

    this.next = null;
    /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */

    this.startIndex = null;
    /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */

    this.endIndex = null;
  }

  Object.defineProperty(Node.prototype, "nodeType", {
    // Read-only aliases

    /**
     * [DOM spec](https://dom.spec.whatwg.org/#dom-node-nodetype)-compatible
     * node {@link type}.
     */
    get: function get() {
      var _a;

      return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "parentNode", {
    // Read-write aliases for properties

    /**
     * Same as {@link parent}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get: function get() {
      return this.parent;
    },
    set: function set(parent) {
      this.parent = parent;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "previousSibling", {
    /**
     * Same as {@link prev}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get: function get() {
      return this.prev;
    },
    set: function set(prev) {
      this.prev = prev;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "nextSibling", {
    /**
     * Same as {@link next}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get: function get() {
      return this.next;
    },
    set: function set(next) {
      this.next = next;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Clone this node, and optionally its children.
   *
   * @param recursive Clone child nodes as well.
   * @returns A clone of the node.
   */

  Node.prototype.cloneNode = function (recursive) {
    if (recursive === void 0) {
      recursive = false;
    }

    return cloneNode(this, recursive);
  };

  return Node;
}();

exports.Node = Node;
/**
 * A node that contains some data.
 */

var DataNode =
/** @class */
function (_super) {
  __extends(DataNode, _super);
  /**
   * @param type The type of the node
   * @param data The content of the data node
   */


  function DataNode(type, data) {
    var _this = _super.call(this, type) || this;

    _this.data = data;
    return _this;
  }

  Object.defineProperty(DataNode.prototype, "nodeValue", {
    /**
     * Same as {@link data}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get: function get() {
      return this.data;
    },
    set: function set(data) {
      this.data = data;
    },
    enumerable: false,
    configurable: true
  });
  return DataNode;
}(Node);

exports.DataNode = DataNode;
/**
 * Text within the document.
 */

var Text =
/** @class */
function (_super) {
  __extends(Text, _super);

  function Text(data) {
    return _super.call(this, domelementtype_1.ElementType.Text, data) || this;
  }

  return Text;
}(DataNode);

exports.Text = Text;
/**
 * Comments within the document.
 */

var Comment =
/** @class */
function (_super) {
  __extends(Comment, _super);

  function Comment(data) {
    return _super.call(this, domelementtype_1.ElementType.Comment, data) || this;
  }

  return Comment;
}(DataNode);

exports.Comment = Comment;
/**
 * Processing instructions, including doc types.
 */

var ProcessingInstruction =
/** @class */
function (_super) {
  __extends(ProcessingInstruction, _super);

  function ProcessingInstruction(name, data) {
    var _this = _super.call(this, domelementtype_1.ElementType.Directive, data) || this;

    _this.name = name;
    return _this;
  }

  return ProcessingInstruction;
}(DataNode);

exports.ProcessingInstruction = ProcessingInstruction;
/**
 * A `Node` that can have children.
 */

var NodeWithChildren =
/** @class */
function (_super) {
  __extends(NodeWithChildren, _super);
  /**
   * @param type Type of the node.
   * @param children Children of the node. Only certain node types can have children.
   */


  function NodeWithChildren(type, children) {
    var _this = _super.call(this, type) || this;

    _this.children = children;
    return _this;
  }

  Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
    // Aliases

    /** First child of the node. */
    get: function get() {
      var _a;

      return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
    /** Last child of the node. */
    get: function get() {
      return this.children.length > 0 ? this.children[this.children.length - 1] : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
    /**
     * Same as {@link children}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get: function get() {
      return this.children;
    },
    set: function set(children) {
      this.children = children;
    },
    enumerable: false,
    configurable: true
  });
  return NodeWithChildren;
}(Node);

exports.NodeWithChildren = NodeWithChildren;
/**
 * The root node of the document.
 */

var Document =
/** @class */
function (_super) {
  __extends(Document, _super);

  function Document(children) {
    return _super.call(this, domelementtype_1.ElementType.Root, children) || this;
  }

  return Document;
}(NodeWithChildren);

exports.Document = Document;
/**
 * An element within the DOM.
 */

var Element =
/** @class */
function (_super) {
  __extends(Element, _super);
  /**
   * @param name Name of the tag, eg. `div`, `span`.
   * @param attribs Object mapping attribute names to attribute values.
   * @param children Children of the node.
   */


  function Element(name, attribs, children, type) {
    if (children === void 0) {
      children = [];
    }

    if (type === void 0) {
      type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
    }

    var _this = _super.call(this, type, children) || this;

    _this.name = name;
    _this.attribs = attribs;
    return _this;
  }

  Object.defineProperty(Element.prototype, "tagName", {
    // DOM Level 1 aliases

    /**
     * Same as {@link name}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get: function get() {
      return this.name;
    },
    set: function set(name) {
      this.name = name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Element.prototype, "attributes", {
    get: function get() {
      var _this = this;

      return Object.keys(this.attribs).map(function (name) {
        var _a, _b;

        return {
          name: name,
          value: _this.attribs[name],
          namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
          prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
        };
      });
    },
    enumerable: false,
    configurable: true
  });
  return Element;
}(NodeWithChildren);

exports.Element = Element;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `Element`, `false` otherwise.
 */

function isTag(node) {
  return (0, domelementtype_1.isTag)(node);
}

exports.isTag = isTag;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `CDATA`, `false` otherwise.
 */

function isCDATA(node) {
  return node.type === domelementtype_1.ElementType.CDATA;
}

exports.isCDATA = isCDATA;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Text`, `false` otherwise.
 */

function isText(node) {
  return node.type === domelementtype_1.ElementType.Text;
}

exports.isText = isText;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Comment`, `false` otherwise.
 */

function isComment(node) {
  return node.type === domelementtype_1.ElementType.Comment;
}

exports.isComment = isComment;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */

function isDirective(node) {
  return node.type === domelementtype_1.ElementType.Directive;
}

exports.isDirective = isDirective;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */

function isDocument(node) {
  return node.type === domelementtype_1.ElementType.Root;
}

exports.isDocument = isDocument;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.
 */

function hasChildren(node) {
  return Object.prototype.hasOwnProperty.call(node, "children");
}

exports.hasChildren = hasChildren;
/**
 * Clone a node, and optionally its children.
 *
 * @param recursive Clone child nodes as well.
 * @returns A clone of the node.
 */

function cloneNode(node, recursive) {
  if (recursive === void 0) {
    recursive = false;
  }

  var result;

  if (isText(node)) {
    result = new Text(node.data);
  } else if (isComment(node)) {
    result = new Comment(node.data);
  } else if (isTag(node)) {
    var children = recursive ? cloneChildren(node.children) : [];
    var clone_1 = new Element(node.name, __assign({}, node.attribs), children);
    children.forEach(function (child) {
      return child.parent = clone_1;
    });

    if (node.namespace != null) {
      clone_1.namespace = node.namespace;
    }

    if (node["x-attribsNamespace"]) {
      clone_1["x-attribsNamespace"] = __assign({}, node["x-attribsNamespace"]);
    }

    if (node["x-attribsPrefix"]) {
      clone_1["x-attribsPrefix"] = __assign({}, node["x-attribsPrefix"]);
    }

    result = clone_1;
  } else if (isCDATA(node)) {
    var children = recursive ? cloneChildren(node.children) : [];
    var clone_2 = new NodeWithChildren(domelementtype_1.ElementType.CDATA, children);
    children.forEach(function (child) {
      return child.parent = clone_2;
    });
    result = clone_2;
  } else if (isDocument(node)) {
    var children = recursive ? cloneChildren(node.children) : [];
    var clone_3 = new Document(children);
    children.forEach(function (child) {
      return child.parent = clone_3;
    });

    if (node["x-mode"]) {
      clone_3["x-mode"] = node["x-mode"];
    }

    result = clone_3;
  } else if (isDirective(node)) {
    var instruction = new ProcessingInstruction(node.name, node.data);

    if (node["x-name"] != null) {
      instruction["x-name"] = node["x-name"];
      instruction["x-publicId"] = node["x-publicId"];
      instruction["x-systemId"] = node["x-systemId"];
    }

    result = instruction;
  } else {
    throw new Error("Not implemented yet: ".concat(node.type));
  }

  result.startIndex = node.startIndex;
  result.endIndex = node.endIndex;

  if (node.sourceCodeLocation != null) {
    result.sourceCodeLocation = node.sourceCodeLocation;
  }

  return result;
}

exports.cloneNode = cloneNode;

function cloneChildren(childs) {
  var children = childs.map(function (child) {
    return cloneNode(child, true);
  });

  for (var i = 1; i < children.length; i++) {
    children[i].prev = children[i - 1];
    children[i - 1].next = children[i];
  }

  return children;
}

/***/ }),

/***/ 36347:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;

var entities_json_1 = __importDefault(__webpack_require__(59323));

var legacy_json_1 = __importDefault(__webpack_require__(29591));

var xml_json_1 = __importDefault(__webpack_require__(2586));

var decode_codepoint_1 = __importDefault(__webpack_require__(28271));

exports.decodeXML = getStrictDecoder(xml_json_1["default"]);
exports.decodeHTMLStrict = getStrictDecoder(entities_json_1["default"]);

function getStrictDecoder(map) {
  var keys = Object.keys(map).join("|");
  var replace = getReplacer(map);
  keys += "|#[xX][\\da-fA-F]+|#\\d+";
  var re = new RegExp("&(?:" + keys + ");", "g");
  return function (str) {
    return String(str).replace(re, replace);
  };
}

var sorter = function sorter(a, b) {
  return a < b ? 1 : -1;
};

exports.decodeHTML = function () {
  var legacy = Object.keys(legacy_json_1["default"]).sort(sorter);
  var keys = Object.keys(entities_json_1["default"]).sort(sorter);

  for (var i = 0, j = 0; i < keys.length; i++) {
    if (legacy[j] === keys[i]) {
      keys[i] += ";?";
      j++;
    } else {
      keys[i] += ";";
    }
  }

  var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
  var replace = getReplacer(entities_json_1["default"]);

  function replacer(str) {
    if (str.substr(-1) !== ";") str += ";";
    return replace(str);
  } // TODO consider creating a merged map


  return function (str) {
    return String(str).replace(re, replacer);
  };
}();

function getReplacer(map) {
  return function replace(str) {
    if (str.charAt(1) === "#") {
      var secondChar = str.charAt(2);

      if (secondChar === "X" || secondChar === "x") {
        return decode_codepoint_1["default"](parseInt(str.substr(3), 16));
      }

      return decode_codepoint_1["default"](parseInt(str.substr(2), 10));
    }

    return map[str.slice(1, -1)];
  };
}

/***/ }),

/***/ 28271:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var decode_json_1 = __importDefault(__webpack_require__(33600)); // Modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119


function decodeCodePoint(codePoint) {
  if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
    return "\uFFFD";
  }

  if (codePoint in decode_json_1["default"]) {
    codePoint = decode_json_1["default"][codePoint];
  }

  var output = "";

  if (codePoint > 0xffff) {
    codePoint -= 0x10000;
    output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
    codePoint = 0xdc00 | codePoint & 0x3ff;
  }

  output += String.fromCharCode(codePoint);
  return output;
}

exports["default"] = decodeCodePoint;

/***/ }),

/***/ 43393:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.escape = exports.encodeHTML = exports.encodeXML = void 0;

var xml_json_1 = __importDefault(__webpack_require__(2586));

var inverseXML = getInverseObj(xml_json_1["default"]);
var xmlReplacer = getInverseReplacer(inverseXML);
exports.encodeXML = getInverse(inverseXML, xmlReplacer);

var entities_json_1 = __importDefault(__webpack_require__(59323));

var inverseHTML = getInverseObj(entities_json_1["default"]);
var htmlReplacer = getInverseReplacer(inverseHTML);
exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj) {
  return Object.keys(obj).sort().reduce(function (inverse, name) {
    inverse[obj[name]] = "&" + name + ";";
    return inverse;
  }, {});
}

function getInverseReplacer(inverse) {
  var single = [];
  var multiple = [];

  for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
    var k = _a[_i];

    if (k.length === 1) {
      // Add value to single array
      single.push("\\" + k);
    } else {
      // Add value to multiple array
      multiple.push(k);
    }
  } // Add ranges to single characters.


  single.sort();

  for (var start = 0; start < single.length - 1; start++) {
    // Find the end of a run of characters
    var end = start;

    while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
      end += 1;
    }

    var count = 1 + end - start; // We want to replace at least three characters

    if (count < 3) continue;
    single.splice(start, count, single[start] + "-" + single[end]);
  }

  multiple.unshift("[" + single.join("") + "]");
  return new RegExp(multiple.join("|"), "g");
}

var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;

function singleCharReplacer(c) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  return "&#x" + c.codePointAt(0).toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re) {
  return function (data) {
    return data.replace(re, function (name) {
      return inverse[name];
    }).replace(reNonASCII, singleCharReplacer);
  };
}

var reXmlChars = getInverseReplacer(inverseXML);

function escape(data) {
  return data.replace(reXmlChars, singleCharReplacer).replace(reNonASCII, singleCharReplacer);
}

exports.escape = escape;

/***/ }),

/***/ 67531:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escape = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;

var decode_1 = __webpack_require__(36347);

var encode_1 = __webpack_require__(43393);
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 */


function decode(data, level) {
  return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
}

exports.decode = decode;
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 */

function decodeStrict(data, level) {
  return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
}

exports.decodeStrict = decodeStrict;
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
 */

function encode(data, level) {
  return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
}

exports.encode = encode;

var encode_2 = __webpack_require__(43393);

Object.defineProperty(exports, "encodeXML", ({
  enumerable: true,
  get: function get() {
    return encode_2.encodeXML;
  }
}));
Object.defineProperty(exports, "encodeHTML", ({
  enumerable: true,
  get: function get() {
    return encode_2.encodeHTML;
  }
}));
Object.defineProperty(exports, "escape", ({
  enumerable: true,
  get: function get() {
    return encode_2.escape;
  }
})); // Legacy aliases

Object.defineProperty(exports, "encodeHTML4", ({
  enumerable: true,
  get: function get() {
    return encode_2.encodeHTML;
  }
}));
Object.defineProperty(exports, "encodeHTML5", ({
  enumerable: true,
  get: function get() {
    return encode_2.encodeHTML;
  }
}));

var decode_2 = __webpack_require__(36347);

Object.defineProperty(exports, "decodeXML", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeXML;
  }
}));
Object.defineProperty(exports, "decodeHTML", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeHTML;
  }
}));
Object.defineProperty(exports, "decodeHTMLStrict", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeHTMLStrict;
  }
})); // Legacy aliases

Object.defineProperty(exports, "decodeHTML4", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeHTML;
  }
}));
Object.defineProperty(exports, "decodeHTML5", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeHTML;
  }
}));
Object.defineProperty(exports, "decodeHTML4Strict", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeHTMLStrict;
  }
}));
Object.defineProperty(exports, "decodeHTML5Strict", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeHTMLStrict;
  }
}));
Object.defineProperty(exports, "decodeXMLStrict", ({
  enumerable: true,
  get: function get() {
    return decode_2.decodeXML;
  }
}));

/***/ }),

/***/ 34093:
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */


function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);

  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];

    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));

    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }

  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};

/***/ }),

/***/ 38291:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(85271);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var R = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter;
module.exports.once = once; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function get() {
    return defaultMaxListeners;
  },
  set: function set(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) {
    args.push(arguments[i]);
  }

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      ReflectApply(listeners[i], this, args);
    }
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) {
    copy[i] = arr[i];
  }

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) {
    list[index] = list[index + 1];
  }

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }

      resolve([].slice.call(arguments));
    }

    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });

    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }

      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + _typeof(emitter));
  }
}

/***/ }),

/***/ 95696:
/***/ ((module) => {

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach(obj, fn, ctx) {
  if (toString.call(fn) !== '[object Function]') {
    throw new TypeError('iterator must be a function');
  }

  var l = obj.length;

  if (l === +l) {
    for (var i = 0; i < l; i++) {
      fn.call(ctx, obj[i], i, obj);
    }
  } else {
    for (var k in obj) {
      if (hasOwn.call(obj, k)) {
        fn.call(ctx, obj[k], k, obj);
      }
    }
  }
};

/***/ }),

/***/ 83161:
/***/ ((module) => {

"use strict";

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
  var target = this;

  if (typeof target !== 'function' || toStr.call(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }

  var args = slice.call(arguments, 1);
  var bound;

  var binder = function binder() {
    if (this instanceof bound) {
      var result = target.apply(this, args.concat(slice.call(arguments)));

      if (Object(result) === result) {
        return result;
      }

      return this;
    } else {
      return target.apply(that, args.concat(slice.call(arguments)));
    }
  };

  var boundLength = Math.max(0, target.length - args.length);
  var boundArgs = [];

  for (var i = 0; i < boundLength; i++) {
    boundArgs.push('$' + i);
  }

  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

  if (target.prototype) {
    var Empty = function Empty() {};

    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }

  return bound;
};

/***/ }),

/***/ 3767:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(83161);

module.exports = Function.prototype.bind || implementation;

/***/ }),

/***/ 57701:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError; // eslint-disable-next-line consistent-return

var getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
  try {
    return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  } catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;

if ($gOPD) {
  try {
    $gOPD({}, '');
  } catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
  }
}

var throwTypeError = function throwTypeError() {
  throw new $TypeError();
};

var ThrowTypeError = $gOPD ? function () {
  try {
    // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    arguments.callee; // IE 8 does not throw here

    return throwTypeError;
  } catch (calleeThrows) {
    try {
      // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
      return $gOPD(arguments, 'callee').get;
    } catch (gOPDthrows) {
      return throwTypeError;
    }
  }
}() : throwTypeError;

var hasSymbols = __webpack_require__(58489)();

var getProto = Object.getPrototypeOf || function (x) {
  return x.__proto__;
}; // eslint-disable-line no-proto


var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
var INTRINSICS = {
  '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
  '%Array%': Array,
  '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
  '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
  '%AsyncFromSyncIteratorPrototype%': undefined,
  '%AsyncFunction%': needsEval,
  '%AsyncGenerator%': needsEval,
  '%AsyncGeneratorFunction%': needsEval,
  '%AsyncIteratorPrototype%': needsEval,
  '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
  '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
  '%Boolean%': Boolean,
  '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
  '%Date%': Date,
  '%decodeURI%': decodeURI,
  '%decodeURIComponent%': decodeURIComponent,
  '%encodeURI%': encodeURI,
  '%encodeURIComponent%': encodeURIComponent,
  '%Error%': Error,
  '%eval%': eval,
  // eslint-disable-line no-eval
  '%EvalError%': EvalError,
  '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
  '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
  '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
  '%Function%': $Function,
  '%GeneratorFunction%': needsEval,
  '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
  '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
  '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
  '%isFinite%': isFinite,
  '%isNaN%': isNaN,
  '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
  '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === 'object' ? JSON : undefined,
  '%Map%': typeof Map === 'undefined' ? undefined : Map,
  '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
  '%Math%': Math,
  '%Number%': Number,
  '%Object%': Object,
  '%parseFloat%': parseFloat,
  '%parseInt%': parseInt,
  '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
  '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
  '%RangeError%': RangeError,
  '%ReferenceError%': ReferenceError,
  '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
  '%RegExp%': RegExp,
  '%Set%': typeof Set === 'undefined' ? undefined : Set,
  '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
  '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
  '%String%': String,
  '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
  '%Symbol%': hasSymbols ? Symbol : undefined,
  '%SyntaxError%': $SyntaxError,
  '%ThrowTypeError%': ThrowTypeError,
  '%TypedArray%': TypedArray,
  '%TypeError%': $TypeError,
  '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
  '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
  '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
  '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
  '%URIError%': URIError,
  '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
  '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
  '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
  var value;

  if (name === '%AsyncFunction%') {
    value = getEvalledConstructor('async function () {}');
  } else if (name === '%GeneratorFunction%') {
    value = getEvalledConstructor('function* () {}');
  } else if (name === '%AsyncGeneratorFunction%') {
    value = getEvalledConstructor('async function* () {}');
  } else if (name === '%AsyncGenerator%') {
    var fn = doEval('%AsyncGeneratorFunction%');

    if (fn) {
      value = fn.prototype;
    }
  } else if (name === '%AsyncIteratorPrototype%') {
    var gen = doEval('%AsyncGenerator%');

    if (gen) {
      value = getProto(gen.prototype);
    }
  }

  INTRINSICS[name] = value;
  return value;
};

var LEGACY_ALIASES = {
  '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  '%ArrayPrototype%': ['Array', 'prototype'],
  '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  '%ArrayProto_values%': ['Array', 'prototype', 'values'],
  '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  '%BooleanPrototype%': ['Boolean', 'prototype'],
  '%DataViewPrototype%': ['DataView', 'prototype'],
  '%DatePrototype%': ['Date', 'prototype'],
  '%ErrorPrototype%': ['Error', 'prototype'],
  '%EvalErrorPrototype%': ['EvalError', 'prototype'],
  '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  '%FunctionPrototype%': ['Function', 'prototype'],
  '%Generator%': ['GeneratorFunction', 'prototype'],
  '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  '%JSONParse%': ['JSON', 'parse'],
  '%JSONStringify%': ['JSON', 'stringify'],
  '%MapPrototype%': ['Map', 'prototype'],
  '%NumberPrototype%': ['Number', 'prototype'],
  '%ObjectPrototype%': ['Object', 'prototype'],
  '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  '%PromisePrototype%': ['Promise', 'prototype'],
  '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  '%Promise_all%': ['Promise', 'all'],
  '%Promise_reject%': ['Promise', 'reject'],
  '%Promise_resolve%': ['Promise', 'resolve'],
  '%RangeErrorPrototype%': ['RangeError', 'prototype'],
  '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  '%RegExpPrototype%': ['RegExp', 'prototype'],
  '%SetPrototype%': ['Set', 'prototype'],
  '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  '%StringPrototype%': ['String', 'prototype'],
  '%SymbolPrototype%': ['Symbol', 'prototype'],
  '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  '%TypeErrorPrototype%': ['TypeError', 'prototype'],
  '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  '%URIErrorPrototype%': ['URIError', 'prototype'],
  '%WeakMapPrototype%': ['WeakMap', 'prototype'],
  '%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(3767);

var hasOwn = __webpack_require__(51888);

var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g;
/** Used to match backslashes in property paths. */

var stringToPath = function stringToPath(string) {
  var first = $strSlice(string, 0, 1);
  var last = $strSlice(string, -1);

  if (first === '%' && last !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
  } else if (last === '%' && first !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
  }

  var result = [];
  $replace(string, rePropName, function (match, number, quote, subString) {
    result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  });
  return result;
};
/* end adaptation */


var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  var intrinsicName = name;
  var alias;

  if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
    alias = LEGACY_ALIASES[intrinsicName];
    intrinsicName = '%' + alias[0] + '%';
  }

  if (hasOwn(INTRINSICS, intrinsicName)) {
    var value = INTRINSICS[intrinsicName];

    if (value === needsEval) {
      value = doEval(intrinsicName);
    }

    if (typeof value === 'undefined' && !allowMissing) {
      throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    }

    return {
      alias: alias,
      name: intrinsicName,
      value: value
    };
  }

  throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
  if (typeof name !== 'string' || name.length === 0) {
    throw new $TypeError('intrinsic name must be a non-empty string');
  }

  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    throw new $TypeError('"allowMissing" argument must be a boolean');
  }

  var parts = stringToPath(name);
  var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
  var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  var intrinsicRealName = intrinsic.name;
  var value = intrinsic.value;
  var skipFurtherCaching = false;
  var alias = intrinsic.alias;

  if (alias) {
    intrinsicBaseName = alias[0];
    $spliceApply(parts, $concat([0, 1], alias));
  }

  for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    var part = parts[i];
    var first = $strSlice(part, 0, 1);
    var last = $strSlice(part, -1);

    if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
      throw new $SyntaxError('property names with quotes must have matching quotes');
    }

    if (part === 'constructor' || !isOwn) {
      skipFurtherCaching = true;
    }

    intrinsicBaseName += '.' + part;
    intrinsicRealName = '%' + intrinsicBaseName + '%';

    if (hasOwn(INTRINSICS, intrinsicRealName)) {
      value = INTRINSICS[intrinsicRealName];
    } else if (value != null) {
      if (!(part in value)) {
        if (!allowMissing) {
          throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
        }

        return void undefined;
      }

      if ($gOPD && i + 1 >= parts.length) {
        var desc = $gOPD(value, part);
        isOwn = !!desc; // By convention, when a data property is converted to an accessor
        // property to emulate a data property that does not suffer from
        // the override mistake, that accessor's getter is marked with
        // an `originalValue` property. Here, when we detect this, we
        // uphold the illusion by pretending to see that original data
        // property, i.e., returning the value rather than the getter
        // itself.

        if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
          value = desc.get;
        } else {
          value = value[part];
        }
      } else {
        isOwn = hasOwn(value, part);
        value = value[part];
      }

      if (isOwn && !skipFurtherCaching) {
        INTRINSICS[intrinsicRealName] = value;
      }
    }
  }

  return value;
};

/***/ }),

/***/ 58489:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var origSymbol = typeof Symbol !== 'undefined' && Symbol;

var hasSymbolSham = __webpack_require__(47027);

module.exports = function hasNativeSymbols() {
  if (typeof origSymbol !== 'function') {
    return false;
  }

  if (typeof Symbol !== 'function') {
    return false;
  }

  if (_typeof(origSymbol('foo')) !== 'symbol') {
    return false;
  }

  if (_typeof(Symbol('bar')) !== 'symbol') {
    return false;
  }

  return hasSymbolSham();
};

/***/ }),

/***/ 47027:
/***/ ((module) => {

"use strict";

/* eslint complexity: [2, 18], max-statements: [2, 33] */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function hasSymbols() {
  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
    return false;
  }

  if (_typeof(Symbol.iterator) === 'symbol') {
    return true;
  }

  var obj = {};
  var sym = Symbol('test');
  var symObj = Object(sym);

  if (typeof sym === 'string') {
    return false;
  }

  if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
    return false;
  }

  if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
    return false;
  } // temp disabled per https://github.com/ljharb/object.assign/issues/17
  // if (sym instanceof Symbol) { return false; }
  // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  // if (!(symObj instanceof Symbol)) { return false; }
  // if (typeof Symbol.prototype.toString !== 'function') { return false; }
  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


  var symVal = 42;
  obj[sym] = symVal;

  for (sym in obj) {
    return false;
  } // eslint-disable-line no-restricted-syntax, no-unreachable-loop


  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
    return false;
  }

  if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
    return false;
  }

  var syms = Object.getOwnPropertySymbols(obj);

  if (syms.length !== 1 || syms[0] !== sym) {
    return false;
  }

  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
    return false;
  }

  if (typeof Object.getOwnPropertyDescriptor === 'function') {
    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

    if (descriptor.value !== symVal || descriptor.enumerable !== true) {
      return false;
    }
  }

  return true;
};

/***/ }),

/***/ 11191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(47027);

module.exports = function hasToStringTagShams() {
  return hasSymbols() && !!Symbol.toStringTag;
};

/***/ }),

/***/ 51888:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(3767);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

/***/ }),

/***/ 90802:
/***/ ((module) => {

var HierarchyClosure = function () {
  /** create a hierarchy object
   * This object keeps track of direct children and parents as well as transitive children and parents.
   */
  function makeHierarchy() {
    var roots = {};
    var parents = {};
    var children = {};
    var holders = {};
    return {
      add: function add(parent, child) {
        if ( // test if this is a novel entry.
        parent in children && children[parent].indexOf(child) !== -1) {
          return;
        }

        var target = parent in holders ? getNode(parent) : roots[parent] = getNode(parent); // add new parents to roots.

        var value = getNode(child);
        target[child] = value;
        delete roots[child]; // // maintain hierarchy (direct and confusing)
        // children[parent] = children[parent].concat(child, children[child])
        // children[child].forEach(c => parents[c] = parents[c].concat(parent, parents[parent]))
        // parents[child] = parents[child].concat(parent, parents[parent])
        // parents[parent].forEach(p => children[p] = children[p].concat(child, children[child]))
        // maintain hierarchy (generic and confusing)

        updateClosure(children, parents, child, parent);
        updateClosure(parents, children, parent, child);

        function updateClosure(container, members, near, far) {
          container[far] = container[far].filter(function (e) {
            return (
              /* e !== near && */
              container[near].indexOf(e) === -1
            );
          }).concat(container[near].indexOf(near) === -1 ? [near] : [], container[near]);
          container[near].forEach(function (n) {
            return members[n] = members[n].filter(function (e) {
              return e !== far && members[far].indexOf(e) === -1;
            }).concat(members[far].indexOf(far) === -1 ? [far] : [], members[far]);
          });
        }

        function getNode(node) {
          if (!(node in holders)) {
            parents[node] = [];
            children[node] = [];
            holders[node] = {};
          }

          return holders[node];
        }
      },
      roots: roots,
      parents: parents,
      children: children
    };
  }

  function depthFirst(n, f, p) {
    return Object.keys(n).reduce(function (ret, k) {
      return ret.concat(depthFirst(n[k], f, k), p ? f(k, p) : []); // outer invocation can have null parent
    }, []);
  }

  return {
    create: makeHierarchy,
    depthFirst: depthFirst
  };
}();
/* istanbul ignore next */


if (true) {
  module.exports = HierarchyClosure;
}

/***/ }),

/***/ 72369:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseFeed = exports.FeedHandler = void 0;

var domhandler_1 = __importDefault(__webpack_require__(71363));

var DomUtils = __importStar(__webpack_require__(45511));

var Parser_1 = __webpack_require__(48168);

var FeedItemMediaMedium;

(function (FeedItemMediaMedium) {
  FeedItemMediaMedium[FeedItemMediaMedium["image"] = 0] = "image";
  FeedItemMediaMedium[FeedItemMediaMedium["audio"] = 1] = "audio";
  FeedItemMediaMedium[FeedItemMediaMedium["video"] = 2] = "video";
  FeedItemMediaMedium[FeedItemMediaMedium["document"] = 3] = "document";
  FeedItemMediaMedium[FeedItemMediaMedium["executable"] = 4] = "executable";
})(FeedItemMediaMedium || (FeedItemMediaMedium = {}));

var FeedItemMediaExpression;

(function (FeedItemMediaExpression) {
  FeedItemMediaExpression[FeedItemMediaExpression["sample"] = 0] = "sample";
  FeedItemMediaExpression[FeedItemMediaExpression["full"] = 1] = "full";
  FeedItemMediaExpression[FeedItemMediaExpression["nonstop"] = 2] = "nonstop";
})(FeedItemMediaExpression || (FeedItemMediaExpression = {})); // TODO: Consume data as it is coming in


var FeedHandler =
/** @class */
function (_super) {
  __extends(FeedHandler, _super);
  /**
   *
   * @param callback
   * @param options
   */


  function FeedHandler(callback, options) {
    var _this = this;

    if (_typeof(callback) === "object") {
      callback = undefined;
      options = callback;
    }

    _this = _super.call(this, callback, options) || this;
    return _this;
  }

  FeedHandler.prototype.onend = function () {
    var _a, _b;

    var feed = {};
    var feedRoot = getOneElement(isValidFeed, this.dom);

    if (feedRoot) {
      if (feedRoot.name === "feed") {
        var childs = feedRoot.children;
        feed.type = "atom";
        addConditionally(feed, "id", "id", childs);
        addConditionally(feed, "title", "title", childs);
        var href = getAttribute("href", getOneElement("link", childs));

        if (href) {
          feed.link = href;
        }

        addConditionally(feed, "description", "subtitle", childs);
        var updated = fetch("updated", childs);

        if (updated) {
          feed.updated = new Date(updated);
        }

        addConditionally(feed, "author", "email", childs, true);
        feed.items = getElements("entry", childs).map(function (item) {
          var entry = {};
          var children = item.children;
          addConditionally(entry, "id", "id", children);
          addConditionally(entry, "title", "title", children);
          var href = getAttribute("href", getOneElement("link", children));

          if (href) {
            entry.link = href;
          }

          var description = fetch("summary", children) || fetch("content", children);

          if (description) {
            entry.description = description;
          }

          var pubDate = fetch("updated", children);

          if (pubDate) {
            entry.pubDate = new Date(pubDate);
          }

          entry.media = getMediaElements(children);
          return entry;
        });
      } else {
        var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
        feed.type = feedRoot.name.substr(0, 3);
        feed.id = "";
        addConditionally(feed, "title", "title", childs);
        addConditionally(feed, "link", "link", childs);
        addConditionally(feed, "description", "description", childs);
        var updated = fetch("lastBuildDate", childs);

        if (updated) {
          feed.updated = new Date(updated);
        }

        addConditionally(feed, "author", "managingEditor", childs, true);
        feed.items = getElements("item", feedRoot.children).map(function (item) {
          var entry = {};
          var children = item.children;
          addConditionally(entry, "id", "guid", children);
          addConditionally(entry, "title", "title", children);
          addConditionally(entry, "link", "link", children);
          addConditionally(entry, "description", "description", children);
          var pubDate = fetch("pubDate", children);
          if (pubDate) entry.pubDate = new Date(pubDate);
          entry.media = getMediaElements(children);
          return entry;
        });
      }
    }

    this.feed = feed;
    this.handleCallback(feedRoot ? null : Error("couldn't find root of feed"));
  };

  return FeedHandler;
}(domhandler_1["default"]);

exports.FeedHandler = FeedHandler;

function getMediaElements(where) {
  return getElements("media:content", where).map(function (elem) {
    var media = {
      medium: elem.attribs.medium,
      isDefault: !!elem.attribs.isDefault
    };

    if (elem.attribs.url) {
      media.url = elem.attribs.url;
    }

    if (elem.attribs.fileSize) {
      media.fileSize = parseInt(elem.attribs.fileSize, 10);
    }

    if (elem.attribs.type) {
      media.type = elem.attribs.type;
    }

    if (elem.attribs.expression) {
      media.expression = elem.attribs.expression;
    }

    if (elem.attribs.bitrate) {
      media.bitrate = parseInt(elem.attribs.bitrate, 10);
    }

    if (elem.attribs.framerate) {
      media.framerate = parseInt(elem.attribs.framerate, 10);
    }

    if (elem.attribs.samplingrate) {
      media.samplingrate = parseInt(elem.attribs.samplingrate, 10);
    }

    if (elem.attribs.channels) {
      media.channels = parseInt(elem.attribs.channels, 10);
    }

    if (elem.attribs.duration) {
      media.duration = parseInt(elem.attribs.duration, 10);
    }

    if (elem.attribs.height) {
      media.height = parseInt(elem.attribs.height, 10);
    }

    if (elem.attribs.width) {
      media.width = parseInt(elem.attribs.width, 10);
    }

    if (elem.attribs.lang) {
      media.lang = elem.attribs.lang;
    }

    return media;
  });
}

function getElements(tagName, where) {
  return DomUtils.getElementsByTagName(tagName, where, true);
}

function getOneElement(tagName, node) {
  return DomUtils.getElementsByTagName(tagName, node, true, 1)[0];
}

function fetch(tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }

  return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();
}

function getAttribute(name, elem) {
  if (!elem) {
    return null;
  }

  var attribs = elem.attribs;
  return attribs[name];
}

function addConditionally(obj, prop, what, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }

  var tmp = fetch(what, where, recurse);
  if (tmp) obj[prop] = tmp;
}

function isValidFeed(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
}

var defaultOptions = {
  xmlMode: true
};
/**
 * Parse a feed.
 *
 * @param feed The feed that should be parsed, as a string.
 * @param options Optionally, options for parsing. When using this option, you probably want to set `xmlMode` to `true`.
 */

function parseFeed(feed, options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  var handler = new FeedHandler(options);
  new Parser_1.Parser(handler, options).end(feed);
  return handler.feed;
}

exports.parseFeed = parseFeed;

/***/ }),

/***/ 48168:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Parser = void 0;

var Tokenizer_1 = __importDefault(__webpack_require__(76506));

var formTags = new Set(["input", "option", "optgroup", "select", "button", "datalist", "textarea"]);
var pTag = new Set(["p"]);
var openImpliesClose = {
  tr: new Set(["tr", "th", "td"]),
  th: new Set(["th"]),
  td: new Set(["thead", "th", "td"]),
  body: new Set(["head", "link", "script"]),
  li: new Set(["li"]),
  p: pTag,
  h1: pTag,
  h2: pTag,
  h3: pTag,
  h4: pTag,
  h5: pTag,
  h6: pTag,
  select: formTags,
  input: formTags,
  output: formTags,
  button: formTags,
  datalist: formTags,
  textarea: formTags,
  option: new Set(["option"]),
  optgroup: new Set(["optgroup", "option"]),
  dd: new Set(["dt", "dd"]),
  dt: new Set(["dt", "dd"]),
  address: pTag,
  article: pTag,
  aside: pTag,
  blockquote: pTag,
  details: pTag,
  div: pTag,
  dl: pTag,
  fieldset: pTag,
  figcaption: pTag,
  figure: pTag,
  footer: pTag,
  form: pTag,
  header: pTag,
  hr: pTag,
  main: pTag,
  nav: pTag,
  ol: pTag,
  pre: pTag,
  section: pTag,
  table: pTag,
  ul: pTag,
  rt: new Set(["rt", "rp"]),
  rp: new Set(["rt", "rp"]),
  tbody: new Set(["thead", "tbody"]),
  tfoot: new Set(["thead", "tbody"])
};
var voidElements = new Set(["area", "base", "basefont", "br", "col", "command", "embed", "frame", "hr", "img", "input", "isindex", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
var foreignContextElements = new Set(["math", "svg"]);
var htmlIntegrationElements = new Set(["mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title"]);
var reNameEnd = /\s|\//;

var Parser =
/** @class */
function () {
  function Parser(cbs, options) {
    if (options === void 0) {
      options = {};
    }

    var _a, _b, _c, _d, _e;
    /** The start index of the last event. */


    this.startIndex = 0;
    /** The end index of the last event. */

    this.endIndex = null;
    this.tagname = "";
    this.attribname = "";
    this.attribvalue = "";
    this.attribs = null;
    this.stack = [];
    this.foreignContext = [];
    this.options = options;
    this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
    this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
    this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
    this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1["default"])(this.options, this);
    (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
  }

  Parser.prototype.updatePosition = function (initialOffset) {
    if (this.endIndex === null) {
      if (this.tokenizer.sectionStart <= initialOffset) {
        this.startIndex = 0;
      } else {
        this.startIndex = this.tokenizer.sectionStart - initialOffset;
      }
    } else {
      this.startIndex = this.endIndex + 1;
    }

    this.endIndex = this.tokenizer.getAbsoluteIndex();
  }; // Tokenizer event handlers


  Parser.prototype.ontext = function (data) {
    var _a, _b;

    this.updatePosition(1);
    this.endIndex--;
    (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
  };

  Parser.prototype.onopentagname = function (name) {
    var _a, _b;

    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }

    this.tagname = name;

    if (!this.options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
      var el = void 0;

      while (this.stack.length > 0 && openImpliesClose[name].has(el = this.stack[this.stack.length - 1])) {
        this.onclosetag(el);
      }
    }

    if (this.options.xmlMode || !voidElements.has(name)) {
      this.stack.push(name);

      if (foreignContextElements.has(name)) {
        this.foreignContext.push(true);
      } else if (htmlIntegrationElements.has(name)) {
        this.foreignContext.push(false);
      }
    }

    (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);
    if (this.cbs.onopentag) this.attribs = {};
  };

  Parser.prototype.onopentagend = function () {
    var _a, _b;

    this.updatePosition(1);

    if (this.attribs) {
      (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs);
      this.attribs = null;
    }

    if (!this.options.xmlMode && this.cbs.onclosetag && voidElements.has(this.tagname)) {
      this.cbs.onclosetag(this.tagname);
    }

    this.tagname = "";
  };

  Parser.prototype.onclosetag = function (name) {
    this.updatePosition(1);

    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }

    if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
      this.foreignContext.pop();
    }

    if (this.stack.length && (this.options.xmlMode || !voidElements.has(name))) {
      var pos = this.stack.lastIndexOf(name);

      if (pos !== -1) {
        if (this.cbs.onclosetag) {
          pos = this.stack.length - pos;

          while (pos--) {
            // We know the stack has sufficient elements.
            this.cbs.onclosetag(this.stack.pop());
          }
        } else this.stack.length = pos;
      } else if (name === "p" && !this.options.xmlMode) {
        this.onopentagname(name);
        this.closeCurrentTag();
      }
    } else if (!this.options.xmlMode && (name === "br" || name === "p")) {
      this.onopentagname(name);
      this.closeCurrentTag();
    }
  };

  Parser.prototype.onselfclosingtag = function () {
    if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
      this.closeCurrentTag();
    } else {
      this.onopentagend();
    }
  };

  Parser.prototype.closeCurrentTag = function () {
    var _a, _b;

    var name = this.tagname;
    this.onopentagend();
    /*
     * Self-closing tags will be on the top of the stack
     * (cheaper check than in onclosetag)
     */

    if (this.stack[this.stack.length - 1] === name) {
      (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name);
      this.stack.pop();
    }
  };

  Parser.prototype.onattribname = function (name) {
    if (this.lowerCaseAttributeNames) {
      name = name.toLowerCase();
    }

    this.attribname = name;
  };

  Parser.prototype.onattribdata = function (value) {
    this.attribvalue += value;
  };

  Parser.prototype.onattribend = function (quote) {
    var _a, _b;

    (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);

    if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
      this.attribs[this.attribname] = this.attribvalue;
    }

    this.attribname = "";
    this.attribvalue = "";
  };

  Parser.prototype.getInstructionName = function (value) {
    var idx = value.search(reNameEnd);
    var name = idx < 0 ? value : value.substr(0, idx);

    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }

    return name;
  };

  Parser.prototype.ondeclaration = function (value) {
    if (this.cbs.onprocessinginstruction) {
      var name_1 = this.getInstructionName(value);
      this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
    }
  };

  Parser.prototype.onprocessinginstruction = function (value) {
    if (this.cbs.onprocessinginstruction) {
      var name_2 = this.getInstructionName(value);
      this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
    }
  };

  Parser.prototype.oncomment = function (value) {
    var _a, _b, _c, _d;

    this.updatePosition(4);
    (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
  };

  Parser.prototype.oncdata = function (value) {
    var _a, _b, _c, _d, _e, _f;

    this.updatePosition(1);

    if (this.options.xmlMode || this.options.recognizeCDATA) {
      (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
      (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
      (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
    } else {
      this.oncomment("[CDATA[" + value + "]]");
    }
  };

  Parser.prototype.onerror = function (err) {
    var _a, _b;

    (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };

  Parser.prototype.onend = function () {
    var _a, _b;

    if (this.cbs.onclosetag) {
      for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i])) {
        ;
      }
    }

    (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  /**
   * Resets the parser to a blank state, ready to parse a new HTML document
   */


  Parser.prototype.reset = function () {
    var _a, _b, _c, _d;

    (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
    this.tokenizer.reset();
    this.tagname = "";
    this.attribname = "";
    this.attribs = null;
    this.stack = [];
    (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
  };
  /**
   * Parses a complete document and pushes it to the handler.
   *
   * @param data Document to parse.
   */


  Parser.prototype.parseComplete = function (data) {
    this.reset();
    this.end(data);
  };
  /**
   * Parses a chunk of data and calls the corresponding callbacks.
   *
   * @param chunk Chunk to parse.
   */


  Parser.prototype.write = function (chunk) {
    this.tokenizer.write(chunk);
  };
  /**
   * Parses the end of the buffer and clears the stack, calls onend.
   *
   * @param chunk Optional final chunk to parse.
   */


  Parser.prototype.end = function (chunk) {
    this.tokenizer.end(chunk);
  };
  /**
   * Pauses parsing. The parser won't emit events until `resume` is called.
   */


  Parser.prototype.pause = function () {
    this.tokenizer.pause();
  };
  /**
   * Resumes parsing after `pause` was called.
   */


  Parser.prototype.resume = function () {
    this.tokenizer.resume();
  };
  /**
   * Alias of `write`, for backwards compatibility.
   *
   * @param chunk Chunk to parse.
   * @deprecated
   */


  Parser.prototype.parseChunk = function (chunk) {
    this.write(chunk);
  };
  /**
   * Alias of `end`, for backwards compatibility.
   *
   * @param chunk Optional final chunk to parse.
   * @deprecated
   */


  Parser.prototype.done = function (chunk) {
    this.end(chunk);
  };

  return Parser;
}();

exports.Parser = Parser;

/***/ }),

/***/ 76506:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var decode_codepoint_1 = __importDefault(__webpack_require__(28271));

var entities_json_1 = __importDefault(__webpack_require__(59323));

var legacy_json_1 = __importDefault(__webpack_require__(29591));

var xml_json_1 = __importDefault(__webpack_require__(2586));

function whitespace(c) {
  return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function isASCIIAlpha(c) {
  return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
}

function ifElseState(upper, SUCCESS, FAILURE) {
  var lower = upper.toLowerCase();

  if (upper === lower) {
    return function (t, c) {
      if (c === lower) {
        t._state = SUCCESS;
      } else {
        t._state = FAILURE;
        t._index--;
      }
    };
  }

  return function (t, c) {
    if (c === lower || c === upper) {
      t._state = SUCCESS;
    } else {
      t._state = FAILURE;
      t._index--;
    }
  };
}

function consumeSpecialNameChar(upper, NEXT_STATE) {
  var lower = upper.toLowerCase();
  return function (t, c) {
    if (c === lower || c === upper) {
      t._state = NEXT_STATE;
    } else {
      t._state = 3
      /* InTagName */
      ;
      t._index--; // Consume the token again
    }
  };
}

var stateBeforeCdata1 = ifElseState("C", 24
/* BeforeCdata2 */
, 16
/* InDeclaration */
);
var stateBeforeCdata2 = ifElseState("D", 25
/* BeforeCdata3 */
, 16
/* InDeclaration */
);
var stateBeforeCdata3 = ifElseState("A", 26
/* BeforeCdata4 */
, 16
/* InDeclaration */
);
var stateBeforeCdata4 = ifElseState("T", 27
/* BeforeCdata5 */
, 16
/* InDeclaration */
);
var stateBeforeCdata5 = ifElseState("A", 28
/* BeforeCdata6 */
, 16
/* InDeclaration */
);
var stateBeforeScript1 = consumeSpecialNameChar("R", 35
/* BeforeScript2 */
);
var stateBeforeScript2 = consumeSpecialNameChar("I", 36
/* BeforeScript3 */
);
var stateBeforeScript3 = consumeSpecialNameChar("P", 37
/* BeforeScript4 */
);
var stateBeforeScript4 = consumeSpecialNameChar("T", 38
/* BeforeScript5 */
);
var stateAfterScript1 = ifElseState("R", 40
/* AfterScript2 */
, 1
/* Text */
);
var stateAfterScript2 = ifElseState("I", 41
/* AfterScript3 */
, 1
/* Text */
);
var stateAfterScript3 = ifElseState("P", 42
/* AfterScript4 */
, 1
/* Text */
);
var stateAfterScript4 = ifElseState("T", 43
/* AfterScript5 */
, 1
/* Text */
);
var stateBeforeStyle1 = consumeSpecialNameChar("Y", 45
/* BeforeStyle2 */
);
var stateBeforeStyle2 = consumeSpecialNameChar("L", 46
/* BeforeStyle3 */
);
var stateBeforeStyle3 = consumeSpecialNameChar("E", 47
/* BeforeStyle4 */
);
var stateAfterStyle1 = ifElseState("Y", 49
/* AfterStyle2 */
, 1
/* Text */
);
var stateAfterStyle2 = ifElseState("L", 50
/* AfterStyle3 */
, 1
/* Text */
);
var stateAfterStyle3 = ifElseState("E", 51
/* AfterStyle4 */
, 1
/* Text */
);
var stateBeforeSpecialT = consumeSpecialNameChar("I", 54
/* BeforeTitle1 */
);
var stateBeforeTitle1 = consumeSpecialNameChar("T", 55
/* BeforeTitle2 */
);
var stateBeforeTitle2 = consumeSpecialNameChar("L", 56
/* BeforeTitle3 */
);
var stateBeforeTitle3 = consumeSpecialNameChar("E", 57
/* BeforeTitle4 */
);
var stateAfterSpecialTEnd = ifElseState("I", 58
/* AfterTitle1 */
, 1
/* Text */
);
var stateAfterTitle1 = ifElseState("T", 59
/* AfterTitle2 */
, 1
/* Text */
);
var stateAfterTitle2 = ifElseState("L", 60
/* AfterTitle3 */
, 1
/* Text */
);
var stateAfterTitle3 = ifElseState("E", 61
/* AfterTitle4 */
, 1
/* Text */
);
var stateBeforeEntity = ifElseState("#", 63
/* BeforeNumericEntity */
, 64
/* InNamedEntity */
);
var stateBeforeNumericEntity = ifElseState("X", 66
/* InHexEntity */
, 65
/* InNumericEntity */
);

var Tokenizer =
/** @class */
function () {
  function Tokenizer(options, cbs) {
    var _a;
    /** The current state the tokenizer is in. */


    this._state = 1
    /* Text */
    ;
    /** The read buffer. */

    this.buffer = "";
    /** The beginning of the section that is currently being read. */

    this.sectionStart = 0;
    /** The index within the buffer that we are currently looking at. */

    this._index = 0;
    /**
     * Data that has already been processed will be removed from the buffer occasionally.
     * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.
     */

    this.bufferOffset = 0;
    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */

    this.baseState = 1
    /* Text */
    ;
    /** For special parsing behavior inside of script and style tags. */

    this.special = 1
    /* None */
    ;
    /** Indicates whether the tokenizer has been paused. */

    this.running = true;
    /** Indicates whether the tokenizer has finished running / `.end` has been called. */

    this.ended = false;
    this.cbs = cbs;
    this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);
    this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;
  }

  Tokenizer.prototype.reset = function () {
    this._state = 1
    /* Text */
    ;
    this.buffer = "";
    this.sectionStart = 0;
    this._index = 0;
    this.bufferOffset = 0;
    this.baseState = 1
    /* Text */
    ;
    this.special = 1
    /* None */
    ;
    this.running = true;
    this.ended = false;
  };

  Tokenizer.prototype.write = function (chunk) {
    if (this.ended) this.cbs.onerror(Error(".write() after done!"));
    this.buffer += chunk;
    this.parse();
  };

  Tokenizer.prototype.end = function (chunk) {
    if (this.ended) this.cbs.onerror(Error(".end() after done!"));
    if (chunk) this.write(chunk);
    this.ended = true;
    if (this.running) this.finish();
  };

  Tokenizer.prototype.pause = function () {
    this.running = false;
  };

  Tokenizer.prototype.resume = function () {
    this.running = true;

    if (this._index < this.buffer.length) {
      this.parse();
    }

    if (this.ended) {
      this.finish();
    }
  };
  /**
   * The current index within all of the written data.
   */


  Tokenizer.prototype.getAbsoluteIndex = function () {
    return this.bufferOffset + this._index;
  };

  Tokenizer.prototype.stateText = function (c) {
    if (c === "<") {
      if (this._index > this.sectionStart) {
        this.cbs.ontext(this.getSection());
      }

      this._state = 2
      /* BeforeTagName */
      ;
      this.sectionStart = this._index;
    } else if (this.decodeEntities && c === "&" && (this.special === 1
    /* None */
    || this.special === 4
    /* Title */
    )) {
      if (this._index > this.sectionStart) {
        this.cbs.ontext(this.getSection());
      }

      this.baseState = 1
      /* Text */
      ;
      this._state = 62
      /* BeforeEntity */
      ;
      this.sectionStart = this._index;
    }
  };

  Tokenizer.prototype.stateBeforeTagName = function (c) {
    if (c === "/") {
      this._state = 5
      /* BeforeClosingTagName */
      ;
    } else if (c === "<") {
      this.cbs.ontext(this.getSection());
      this.sectionStart = this._index;
    } else if (c === ">" || this.special !== 1
    /* None */
    || whitespace(c)) {
      this._state = 1
      /* Text */
      ;
    } else if (c === "!") {
      this._state = 15
      /* BeforeDeclaration */
      ;
      this.sectionStart = this._index + 1;
    } else if (c === "?") {
      this._state = 17
      /* InProcessingInstruction */
      ;
      this.sectionStart = this._index + 1;
    } else if (!isASCIIAlpha(c)) {
      this._state = 1
      /* Text */
      ;
    } else {
      this._state = !this.xmlMode && (c === "s" || c === "S") ? 32
      /* BeforeSpecialS */
      : !this.xmlMode && (c === "t" || c === "T") ? 52
      /* BeforeSpecialT */
      : 3
      /* InTagName */
      ;
      this.sectionStart = this._index;
    }
  };

  Tokenizer.prototype.stateInTagName = function (c) {
    if (c === "/" || c === ">" || whitespace(c)) {
      this.emitToken("onopentagname");
      this._state = 8
      /* BeforeAttributeName */
      ;
      this._index--;
    }
  };

  Tokenizer.prototype.stateBeforeClosingTagName = function (c) {
    if (whitespace(c)) {// Ignore
    } else if (c === ">") {
      this._state = 1
      /* Text */
      ;
    } else if (this.special !== 1
    /* None */
    ) {
        if (c === "s" || c === "S") {
          this._state = 33
          /* BeforeSpecialSEnd */
          ;
        } else if (c === "t" || c === "T") {
          this._state = 53
          /* BeforeSpecialTEnd */
          ;
        } else {
          this._state = 1
          /* Text */
          ;
          this._index--;
        }
      } else if (!isASCIIAlpha(c)) {
      this._state = 20
      /* InSpecialComment */
      ;
      this.sectionStart = this._index;
    } else {
      this._state = 6
      /* InClosingTagName */
      ;
      this.sectionStart = this._index;
    }
  };

  Tokenizer.prototype.stateInClosingTagName = function (c) {
    if (c === ">" || whitespace(c)) {
      this.emitToken("onclosetag");
      this._state = 7
      /* AfterClosingTagName */
      ;
      this._index--;
    }
  };

  Tokenizer.prototype.stateAfterClosingTagName = function (c) {
    // Skip everything until ">"
    if (c === ">") {
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
    }
  };

  Tokenizer.prototype.stateBeforeAttributeName = function (c) {
    if (c === ">") {
      this.cbs.onopentagend();
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
    } else if (c === "/") {
      this._state = 4
      /* InSelfClosingTag */
      ;
    } else if (!whitespace(c)) {
      this._state = 9
      /* InAttributeName */
      ;
      this.sectionStart = this._index;
    }
  };

  Tokenizer.prototype.stateInSelfClosingTag = function (c) {
    if (c === ">") {
      this.cbs.onselfclosingtag();
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
      this.special = 1
      /* None */
      ; // Reset special state, in case of self-closing special tags
    } else if (!whitespace(c)) {
      this._state = 8
      /* BeforeAttributeName */
      ;
      this._index--;
    }
  };

  Tokenizer.prototype.stateInAttributeName = function (c) {
    if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
      this.cbs.onattribname(this.getSection());
      this.sectionStart = -1;
      this._state = 10
      /* AfterAttributeName */
      ;
      this._index--;
    }
  };

  Tokenizer.prototype.stateAfterAttributeName = function (c) {
    if (c === "=") {
      this._state = 11
      /* BeforeAttributeValue */
      ;
    } else if (c === "/" || c === ">") {
      this.cbs.onattribend(undefined);
      this._state = 8
      /* BeforeAttributeName */
      ;
      this._index--;
    } else if (!whitespace(c)) {
      this.cbs.onattribend(undefined);
      this._state = 9
      /* InAttributeName */
      ;
      this.sectionStart = this._index;
    }
  };

  Tokenizer.prototype.stateBeforeAttributeValue = function (c) {
    if (c === '"') {
      this._state = 12
      /* InAttributeValueDq */
      ;
      this.sectionStart = this._index + 1;
    } else if (c === "'") {
      this._state = 13
      /* InAttributeValueSq */
      ;
      this.sectionStart = this._index + 1;
    } else if (!whitespace(c)) {
      this._state = 14
      /* InAttributeValueNq */
      ;
      this.sectionStart = this._index;
      this._index--; // Reconsume token
    }
  };

  Tokenizer.prototype.handleInAttributeValue = function (c, quote) {
    if (c === quote) {
      this.emitToken("onattribdata");
      this.cbs.onattribend(quote);
      this._state = 8
      /* BeforeAttributeName */
      ;
    } else if (this.decodeEntities && c === "&") {
      this.emitToken("onattribdata");
      this.baseState = this._state;
      this._state = 62
      /* BeforeEntity */
      ;
      this.sectionStart = this._index;
    }
  };

  Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {
    this.handleInAttributeValue(c, '"');
  };

  Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {
    this.handleInAttributeValue(c, "'");
  };

  Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {
    if (whitespace(c) || c === ">") {
      this.emitToken("onattribdata");
      this.cbs.onattribend(null);
      this._state = 8
      /* BeforeAttributeName */
      ;
      this._index--;
    } else if (this.decodeEntities && c === "&") {
      this.emitToken("onattribdata");
      this.baseState = this._state;
      this._state = 62
      /* BeforeEntity */
      ;
      this.sectionStart = this._index;
    }
  };

  Tokenizer.prototype.stateBeforeDeclaration = function (c) {
    this._state = c === "[" ? 23
    /* BeforeCdata1 */
    : c === "-" ? 18
    /* BeforeComment */
    : 16
    /* InDeclaration */
    ;
  };

  Tokenizer.prototype.stateInDeclaration = function (c) {
    if (c === ">") {
      this.cbs.ondeclaration(this.getSection());
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
    }
  };

  Tokenizer.prototype.stateInProcessingInstruction = function (c) {
    if (c === ">") {
      this.cbs.onprocessinginstruction(this.getSection());
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
    }
  };

  Tokenizer.prototype.stateBeforeComment = function (c) {
    if (c === "-") {
      this._state = 19
      /* InComment */
      ;
      this.sectionStart = this._index + 1;
    } else {
      this._state = 16
      /* InDeclaration */
      ;
    }
  };

  Tokenizer.prototype.stateInComment = function (c) {
    if (c === "-") this._state = 21
    /* AfterComment1 */
    ;
  };

  Tokenizer.prototype.stateInSpecialComment = function (c) {
    if (c === ">") {
      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
    }
  };

  Tokenizer.prototype.stateAfterComment1 = function (c) {
    if (c === "-") {
      this._state = 22
      /* AfterComment2 */
      ;
    } else {
      this._state = 19
      /* InComment */
      ;
    }
  };

  Tokenizer.prototype.stateAfterComment2 = function (c) {
    if (c === ">") {
      // Remove 2 trailing chars
      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
    } else if (c !== "-") {
      this._state = 19
      /* InComment */
      ;
    } // Else: stay in AFTER_COMMENT_2 (`--->`)

  };

  Tokenizer.prototype.stateBeforeCdata6 = function (c) {
    if (c === "[") {
      this._state = 29
      /* InCdata */
      ;
      this.sectionStart = this._index + 1;
    } else {
      this._state = 16
      /* InDeclaration */
      ;
      this._index--;
    }
  };

  Tokenizer.prototype.stateInCdata = function (c) {
    if (c === "]") this._state = 30
    /* AfterCdata1 */
    ;
  };

  Tokenizer.prototype.stateAfterCdata1 = function (c) {
    if (c === "]") this._state = 31
    /* AfterCdata2 */
    ;else this._state = 29
    /* InCdata */
    ;
  };

  Tokenizer.prototype.stateAfterCdata2 = function (c) {
    if (c === ">") {
      // Remove 2 trailing chars
      this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));
      this._state = 1
      /* Text */
      ;
      this.sectionStart = this._index + 1;
    } else if (c !== "]") {
      this._state = 29
      /* InCdata */
      ;
    } // Else: stay in AFTER_CDATA_2 (`]]]>`)

  };

  Tokenizer.prototype.stateBeforeSpecialS = function (c) {
    if (c === "c" || c === "C") {
      this._state = 34
      /* BeforeScript1 */
      ;
    } else if (c === "t" || c === "T") {
      this._state = 44
      /* BeforeStyle1 */
      ;
    } else {
      this._state = 3
      /* InTagName */
      ;
      this._index--; // Consume the token again
    }
  };

  Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {
    if (this.special === 2
    /* Script */
    && (c === "c" || c === "C")) {
      this._state = 39
      /* AfterScript1 */
      ;
    } else if (this.special === 3
    /* Style */
    && (c === "t" || c === "T")) {
      this._state = 48
      /* AfterStyle1 */
      ;
    } else this._state = 1
    /* Text */
    ;
  };

  Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {
    if (c === "/" || c === ">" || whitespace(c)) {
      this.special = special;
    }

    this._state = 3
    /* InTagName */
    ;
    this._index--; // Consume the token again
  };

  Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {
    if (c === ">" || whitespace(c)) {
      this.special = 1
      /* None */
      ;
      this._state = 6
      /* InClosingTagName */
      ;
      this.sectionStart = this._index - sectionStartOffset;
      this._index--; // Reconsume the token
    } else this._state = 1
    /* Text */
    ;
  }; // For entities terminated with a semicolon


  Tokenizer.prototype.parseFixedEntity = function (map) {
    if (map === void 0) {
      map = this.xmlMode ? xml_json_1["default"] : entities_json_1["default"];
    } // Offset = 1


    if (this.sectionStart + 1 < this._index) {
      var entity = this.buffer.substring(this.sectionStart + 1, this._index);

      if (Object.prototype.hasOwnProperty.call(map, entity)) {
        this.emitPartial(map[entity]);
        this.sectionStart = this._index + 1;
      }
    }
  }; // Parses legacy entities (without trailing semicolon)


  Tokenizer.prototype.parseLegacyEntity = function () {
    var start = this.sectionStart + 1; // The max length of legacy entities is 6

    var limit = Math.min(this._index - start, 6);

    while (limit >= 2) {
      // The min length of legacy entities is 2
      var entity = this.buffer.substr(start, limit);

      if (Object.prototype.hasOwnProperty.call(legacy_json_1["default"], entity)) {
        this.emitPartial(legacy_json_1["default"][entity]);
        this.sectionStart += limit + 1;
        return;
      }

      limit--;
    }
  };

  Tokenizer.prototype.stateInNamedEntity = function (c) {
    if (c === ";") {
      this.parseFixedEntity(); // Retry as legacy entity if entity wasn't parsed

      if (this.baseState === 1
      /* Text */
      && this.sectionStart + 1 < this._index && !this.xmlMode) {
        this.parseLegacyEntity();
      }

      this._state = this.baseState;
    } else if ((c < "0" || c > "9") && !isASCIIAlpha(c)) {
      if (this.xmlMode || this.sectionStart + 1 === this._index) {// Ignore
      } else if (this.baseState !== 1
      /* Text */
      ) {
          if (c !== "=") {
            // Parse as legacy entity, without allowing additional characters.
            this.parseFixedEntity(legacy_json_1["default"]);
          }
        } else {
        this.parseLegacyEntity();
      }

      this._state = this.baseState;
      this._index--;
    }
  };

  Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {
    var sectionStart = this.sectionStart + offset;

    if (sectionStart !== this._index) {
      // Parse entity
      var entity = this.buffer.substring(sectionStart, this._index);
      var parsed = parseInt(entity, base);
      this.emitPartial(decode_codepoint_1["default"](parsed));
      this.sectionStart = strict ? this._index + 1 : this._index;
    }

    this._state = this.baseState;
  };

  Tokenizer.prototype.stateInNumericEntity = function (c) {
    if (c === ";") {
      this.decodeNumericEntity(2, 10, true);
    } else if (c < "0" || c > "9") {
      if (!this.xmlMode) {
        this.decodeNumericEntity(2, 10, false);
      } else {
        this._state = this.baseState;
      }

      this._index--;
    }
  };

  Tokenizer.prototype.stateInHexEntity = function (c) {
    if (c === ";") {
      this.decodeNumericEntity(3, 16, true);
    } else if ((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")) {
      if (!this.xmlMode) {
        this.decodeNumericEntity(3, 16, false);
      } else {
        this._state = this.baseState;
      }

      this._index--;
    }
  };

  Tokenizer.prototype.cleanup = function () {
    if (this.sectionStart < 0) {
      this.buffer = "";
      this.bufferOffset += this._index;
      this._index = 0;
    } else if (this.running) {
      if (this._state === 1
      /* Text */
      ) {
          if (this.sectionStart !== this._index) {
            this.cbs.ontext(this.buffer.substr(this.sectionStart));
          }

          this.buffer = "";
          this.bufferOffset += this._index;
          this._index = 0;
        } else if (this.sectionStart === this._index) {
        // The section just started
        this.buffer = "";
        this.bufferOffset += this._index;
        this._index = 0;
      } else {
        // Remove everything unnecessary
        this.buffer = this.buffer.substr(this.sectionStart);
        this._index -= this.sectionStart;
        this.bufferOffset += this.sectionStart;
      }

      this.sectionStart = 0;
    }
  };
  /**
   * Iterates through the buffer, calling the function corresponding to the current state.
   *
   * States that are more likely to be hit are higher up, as a performance improvement.
   */


  Tokenizer.prototype.parse = function () {
    while (this._index < this.buffer.length && this.running) {
      var c = this.buffer.charAt(this._index);

      if (this._state === 1
      /* Text */
      ) {
          this.stateText(c);
        } else if (this._state === 12
      /* InAttributeValueDq */
      ) {
          this.stateInAttributeValueDoubleQuotes(c);
        } else if (this._state === 9
      /* InAttributeName */
      ) {
          this.stateInAttributeName(c);
        } else if (this._state === 19
      /* InComment */
      ) {
          this.stateInComment(c);
        } else if (this._state === 20
      /* InSpecialComment */
      ) {
          this.stateInSpecialComment(c);
        } else if (this._state === 8
      /* BeforeAttributeName */
      ) {
          this.stateBeforeAttributeName(c);
        } else if (this._state === 3
      /* InTagName */
      ) {
          this.stateInTagName(c);
        } else if (this._state === 6
      /* InClosingTagName */
      ) {
          this.stateInClosingTagName(c);
        } else if (this._state === 2
      /* BeforeTagName */
      ) {
          this.stateBeforeTagName(c);
        } else if (this._state === 10
      /* AfterAttributeName */
      ) {
          this.stateAfterAttributeName(c);
        } else if (this._state === 13
      /* InAttributeValueSq */
      ) {
          this.stateInAttributeValueSingleQuotes(c);
        } else if (this._state === 11
      /* BeforeAttributeValue */
      ) {
          this.stateBeforeAttributeValue(c);
        } else if (this._state === 5
      /* BeforeClosingTagName */
      ) {
          this.stateBeforeClosingTagName(c);
        } else if (this._state === 7
      /* AfterClosingTagName */
      ) {
          this.stateAfterClosingTagName(c);
        } else if (this._state === 32
      /* BeforeSpecialS */
      ) {
          this.stateBeforeSpecialS(c);
        } else if (this._state === 21
      /* AfterComment1 */
      ) {
          this.stateAfterComment1(c);
        } else if (this._state === 14
      /* InAttributeValueNq */
      ) {
          this.stateInAttributeValueNoQuotes(c);
        } else if (this._state === 4
      /* InSelfClosingTag */
      ) {
          this.stateInSelfClosingTag(c);
        } else if (this._state === 16
      /* InDeclaration */
      ) {
          this.stateInDeclaration(c);
        } else if (this._state === 15
      /* BeforeDeclaration */
      ) {
          this.stateBeforeDeclaration(c);
        } else if (this._state === 22
      /* AfterComment2 */
      ) {
          this.stateAfterComment2(c);
        } else if (this._state === 18
      /* BeforeComment */
      ) {
          this.stateBeforeComment(c);
        } else if (this._state === 33
      /* BeforeSpecialSEnd */
      ) {
          this.stateBeforeSpecialSEnd(c);
        } else if (this._state === 53
      /* BeforeSpecialTEnd */
      ) {
          stateAfterSpecialTEnd(this, c);
        } else if (this._state === 39
      /* AfterScript1 */
      ) {
          stateAfterScript1(this, c);
        } else if (this._state === 40
      /* AfterScript2 */
      ) {
          stateAfterScript2(this, c);
        } else if (this._state === 41
      /* AfterScript3 */
      ) {
          stateAfterScript3(this, c);
        } else if (this._state === 34
      /* BeforeScript1 */
      ) {
          stateBeforeScript1(this, c);
        } else if (this._state === 35
      /* BeforeScript2 */
      ) {
          stateBeforeScript2(this, c);
        } else if (this._state === 36
      /* BeforeScript3 */
      ) {
          stateBeforeScript3(this, c);
        } else if (this._state === 37
      /* BeforeScript4 */
      ) {
          stateBeforeScript4(this, c);
        } else if (this._state === 38
      /* BeforeScript5 */
      ) {
          this.stateBeforeSpecialLast(c, 2
          /* Script */
          );
        } else if (this._state === 42
      /* AfterScript4 */
      ) {
          stateAfterScript4(this, c);
        } else if (this._state === 43
      /* AfterScript5 */
      ) {
          this.stateAfterSpecialLast(c, 6);
        } else if (this._state === 44
      /* BeforeStyle1 */
      ) {
          stateBeforeStyle1(this, c);
        } else if (this._state === 29
      /* InCdata */
      ) {
          this.stateInCdata(c);
        } else if (this._state === 45
      /* BeforeStyle2 */
      ) {
          stateBeforeStyle2(this, c);
        } else if (this._state === 46
      /* BeforeStyle3 */
      ) {
          stateBeforeStyle3(this, c);
        } else if (this._state === 47
      /* BeforeStyle4 */
      ) {
          this.stateBeforeSpecialLast(c, 3
          /* Style */
          );
        } else if (this._state === 48
      /* AfterStyle1 */
      ) {
          stateAfterStyle1(this, c);
        } else if (this._state === 49
      /* AfterStyle2 */
      ) {
          stateAfterStyle2(this, c);
        } else if (this._state === 50
      /* AfterStyle3 */
      ) {
          stateAfterStyle3(this, c);
        } else if (this._state === 51
      /* AfterStyle4 */
      ) {
          this.stateAfterSpecialLast(c, 5);
        } else if (this._state === 52
      /* BeforeSpecialT */
      ) {
          stateBeforeSpecialT(this, c);
        } else if (this._state === 54
      /* BeforeTitle1 */
      ) {
          stateBeforeTitle1(this, c);
        } else if (this._state === 55
      /* BeforeTitle2 */
      ) {
          stateBeforeTitle2(this, c);
        } else if (this._state === 56
      /* BeforeTitle3 */
      ) {
          stateBeforeTitle3(this, c);
        } else if (this._state === 57
      /* BeforeTitle4 */
      ) {
          this.stateBeforeSpecialLast(c, 4
          /* Title */
          );
        } else if (this._state === 58
      /* AfterTitle1 */
      ) {
          stateAfterTitle1(this, c);
        } else if (this._state === 59
      /* AfterTitle2 */
      ) {
          stateAfterTitle2(this, c);
        } else if (this._state === 60
      /* AfterTitle3 */
      ) {
          stateAfterTitle3(this, c);
        } else if (this._state === 61
      /* AfterTitle4 */
      ) {
          this.stateAfterSpecialLast(c, 5);
        } else if (this._state === 17
      /* InProcessingInstruction */
      ) {
          this.stateInProcessingInstruction(c);
        } else if (this._state === 64
      /* InNamedEntity */
      ) {
          this.stateInNamedEntity(c);
        } else if (this._state === 23
      /* BeforeCdata1 */
      ) {
          stateBeforeCdata1(this, c);
        } else if (this._state === 62
      /* BeforeEntity */
      ) {
          stateBeforeEntity(this, c);
        } else if (this._state === 24
      /* BeforeCdata2 */
      ) {
          stateBeforeCdata2(this, c);
        } else if (this._state === 25
      /* BeforeCdata3 */
      ) {
          stateBeforeCdata3(this, c);
        } else if (this._state === 30
      /* AfterCdata1 */
      ) {
          this.stateAfterCdata1(c);
        } else if (this._state === 31
      /* AfterCdata2 */
      ) {
          this.stateAfterCdata2(c);
        } else if (this._state === 26
      /* BeforeCdata4 */
      ) {
          stateBeforeCdata4(this, c);
        } else if (this._state === 27
      /* BeforeCdata5 */
      ) {
          stateBeforeCdata5(this, c);
        } else if (this._state === 28
      /* BeforeCdata6 */
      ) {
          this.stateBeforeCdata6(c);
        } else if (this._state === 66
      /* InHexEntity */
      ) {
          this.stateInHexEntity(c);
        } else if (this._state === 65
      /* InNumericEntity */
      ) {
          this.stateInNumericEntity(c); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        } else if (this._state === 63
      /* BeforeNumericEntity */
      ) {
          stateBeforeNumericEntity(this, c);
        } else {
        this.cbs.onerror(Error("unknown _state"), this._state);
      }

      this._index++;
    }

    this.cleanup();
  };

  Tokenizer.prototype.finish = function () {
    // If there is remaining data, emit it in a reasonable way
    if (this.sectionStart < this._index) {
      this.handleTrailingData();
    }

    this.cbs.onend();
  };

  Tokenizer.prototype.handleTrailingData = function () {
    var data = this.buffer.substr(this.sectionStart);

    if (this._state === 29
    /* InCdata */
    || this._state === 30
    /* AfterCdata1 */
    || this._state === 31
    /* AfterCdata2 */
    ) {
        this.cbs.oncdata(data);
      } else if (this._state === 19
    /* InComment */
    || this._state === 21
    /* AfterComment1 */
    || this._state === 22
    /* AfterComment2 */
    ) {
        this.cbs.oncomment(data);
      } else if (this._state === 64
    /* InNamedEntity */
    && !this.xmlMode) {
      this.parseLegacyEntity();

      if (this.sectionStart < this._index) {
        this._state = this.baseState;
        this.handleTrailingData();
      }
    } else if (this._state === 65
    /* InNumericEntity */
    && !this.xmlMode) {
      this.decodeNumericEntity(2, 10, false);

      if (this.sectionStart < this._index) {
        this._state = this.baseState;
        this.handleTrailingData();
      }
    } else if (this._state === 66
    /* InHexEntity */
    && !this.xmlMode) {
      this.decodeNumericEntity(3, 16, false);

      if (this.sectionStart < this._index) {
        this._state = this.baseState;
        this.handleTrailingData();
      }
    } else if (this._state !== 3
    /* InTagName */
    && this._state !== 8
    /* BeforeAttributeName */
    && this._state !== 11
    /* BeforeAttributeValue */
    && this._state !== 10
    /* AfterAttributeName */
    && this._state !== 9
    /* InAttributeName */
    && this._state !== 13
    /* InAttributeValueSq */
    && this._state !== 12
    /* InAttributeValueDq */
    && this._state !== 14
    /* InAttributeValueNq */
    && this._state !== 6
    /* InClosingTagName */
    ) {
        this.cbs.ontext(data);
      }
    /*
     * Else, ignore remaining data
     * TODO add a way to remove current tag
     */

  };

  Tokenizer.prototype.getSection = function () {
    return this.buffer.substring(this.sectionStart, this._index);
  };

  Tokenizer.prototype.emitToken = function (name) {
    this.cbs[name](this.getSection());
    this.sectionStart = -1;
  };

  Tokenizer.prototype.emitPartial = function (value) {
    if (this.baseState !== 1
    /* Text */
    ) {
        this.cbs.onattribdata(value); // TODO implement the new event
      } else {
      this.cbs.ontext(value);
    }
  };

  return Tokenizer;
}();

exports["default"] = Tokenizer;

/***/ }),

/***/ 96124:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.DomHandler = exports.Parser = void 0;

var Parser_1 = __webpack_require__(48168);

Object.defineProperty(exports, "Parser", ({
  enumerable: true,
  get: function get() {
    return Parser_1.Parser;
  }
}));

var domhandler_1 = __webpack_require__(71363);

Object.defineProperty(exports, "DomHandler", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.DomHandler;
  }
}));
Object.defineProperty(exports, "DefaultHandler", ({
  enumerable: true,
  get: function get() {
    return domhandler_1.DomHandler;
  }
})); // Helper methods

/**
 * Parses data, returns the resulting DOM.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 */

function parseDOM(data, options) {
  var handler = new domhandler_1.DomHandler(void 0, options);
  new Parser_1.Parser(handler, options).end(data);
  return handler.dom;
}

exports.parseDOM = parseDOM;
/**
 * Creates a parser instance, with an attached DOM handler.
 *
 * @param cb A callback that will be called once parsing has been completed.
 * @param options Optional options for the parser and DOM builder.
 * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
 */

function createDomStream(cb, options, elementCb) {
  var handler = new domhandler_1.DomHandler(cb, options, elementCb);
  return new Parser_1.Parser(handler, options);
}

exports.createDomStream = createDomStream;

var Tokenizer_1 = __webpack_require__(76506);

Object.defineProperty(exports, "Tokenizer", ({
  enumerable: true,
  get: function get() {
    return __importDefault(Tokenizer_1)["default"];
  }
}));

var ElementType = __importStar(__webpack_require__(77304));

exports.ElementType = ElementType;
/*
 * All of the following exports exist for backwards-compatibility.
 * They should probably be removed eventually.
 */

__exportStar(__webpack_require__(72369), exports);

exports.DomUtils = __importStar(__webpack_require__(45511));

var FeedHandler_1 = __webpack_require__(72369);

Object.defineProperty(exports, "RssHandler", ({
  enumerable: true,
  get: function get() {
    return FeedHandler_1.FeedHandler;
  }
}));

/***/ }),

/***/ 83226:
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ 41736:
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

/***/ }),

/***/ 69446:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var hasToStringTag = __webpack_require__(11191)();

var callBound = __webpack_require__(80593);

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
  if (hasToStringTag && value && _typeof(value) === 'object' && Symbol.toStringTag in value) {
    return false;
  }

  return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
  if (isStandardArguments(value)) {
    return true;
  }

  return value !== null && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && $toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = function () {
  return isStandardArguments(arguments);
}();

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

/***/ }),

/***/ 14477:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;

var hasToStringTag = __webpack_require__(11191)();

var getProto = Object.getPrototypeOf;

var getGeneratorFunc = function getGeneratorFunc() {
  // eslint-disable-line consistent-return
  if (!hasToStringTag) {
    return false;
  }

  try {
    return Function('return function*() {}')();
  } catch (e) {}
};

var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
  if (typeof fn !== 'function') {
    return false;
  }

  if (isFnRegex.test(fnToStr.call(fn))) {
    return true;
  }

  if (!hasToStringTag) {
    var str = toStr.call(fn);
    return str === '[object GeneratorFunction]';
  }

  if (!getProto) {
    return false;
  }

  if (typeof GeneratorFunction === 'undefined') {
    var generatorFunc = getGeneratorFunc();
    GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
  }

  return getProto(fn) === GeneratorFunction;
};

/***/ }),

/***/ 58903:
/***/ ((module) => {

"use strict";

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
  return value !== value;
};

/***/ }),

/***/ 43054:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(24373);

var define = __webpack_require__(64347);

var implementation = __webpack_require__(58903);

var getPolyfill = __webpack_require__(77713);

var shim = __webpack_require__(53373);

var polyfill = callBind(getPolyfill(), Number);
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});
module.exports = polyfill;

/***/ }),

/***/ 77713:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(58903);

module.exports = function getPolyfill() {
  if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
    return Number.isNaN;
  }

  return implementation;
};

/***/ }),

/***/ 53373:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(64347);

var getPolyfill = __webpack_require__(77713);
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */


module.exports = function shimNumberIsNaN() {
  var polyfill = getPolyfill();
  define(Number, {
    isNaN: polyfill
  }, {
    isNaN: function testIsNaN() {
      return Number.isNaN !== polyfill;
    }
  });
  return polyfill;
};

/***/ }),

/***/ 28915:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var forEach = __webpack_require__(95696);

var availableTypedArrays = __webpack_require__(43604);

var callBound = __webpack_require__(80593);

var $toString = callBound('Object.prototype.toString');

var hasToStringTag = __webpack_require__(11191)();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
  for (var i = 0; i < array.length; i += 1) {
    if (array[i] === value) {
      return i;
    }
  }

  return -1;
};

var $slice = callBound('String.prototype.slice');
var toStrTags = {};

var gOPD = __webpack_require__(72681);

var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

if (hasToStringTag && gOPD && getPrototypeOf) {
  forEach(typedArrays, function (typedArray) {
    var arr = new g[typedArray]();

    if (Symbol.toStringTag in arr) {
      var proto = getPrototypeOf(arr);
      var descriptor = gOPD(proto, Symbol.toStringTag);

      if (!descriptor) {
        var superProto = getPrototypeOf(proto);
        descriptor = gOPD(superProto, Symbol.toStringTag);
      }

      toStrTags[typedArray] = descriptor.get;
    }
  });
}

var tryTypedArrays = function tryAllTypedArrays(value) {
  var anyTrue = false;
  forEach(toStrTags, function (getter, typedArray) {
    if (!anyTrue) {
      try {
        anyTrue = getter.call(value) === typedArray;
      } catch (e) {
        /**/
      }
    }
  });
  return anyTrue;
};

module.exports = function isTypedArray(value) {
  if (!value || _typeof(value) !== 'object') {
    return false;
  }

  if (!hasToStringTag || !(Symbol.toStringTag in value)) {
    var tag = $slice($toString(value), 8, -1);
    return $indexOf(typedArrays, tag) > -1;
  }

  if (!gOPD) {
    return false;
  }

  return tryTypedArrays(value);
};

/***/ }),

/***/ 15773:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(4319),
    _isArray = _require.isArray,
    _isObject = _require.isObject,
    _isString = _require.isString;

var _require2 = __webpack_require__(88336),
    _asArray = _require2.asArray;

var _require3 = __webpack_require__(41528),
    prependBase = _require3.prependBase;

var JsonLdError = __webpack_require__(3275);

var ResolvedContext = __webpack_require__(96972);

var MAX_CONTEXT_URLS = 10;

module.exports = /*#__PURE__*/function () {
  /**
   * Creates a ContextResolver.
   *
   * @param sharedCache a shared LRU cache with `get` and `set` APIs.
   */
  function ContextResolver(_ref) {
    var sharedCache = _ref.sharedCache;

    _classCallCheck(this, ContextResolver);

    this.perOpCache = new Map();
    this.sharedCache = sharedCache;
  }

  _createClass(ContextResolver, [{
    key: "resolve",
    value: function () {
      var _resolve = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {
        var activeCtx, context, documentLoader, base, _ref2$cycles, cycles, allResolved, _iterator, _step, ctx, _resolved, key, resolved;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                activeCtx = _ref2.activeCtx, context = _ref2.context, documentLoader = _ref2.documentLoader, base = _ref2.base, _ref2$cycles = _ref2.cycles, cycles = _ref2$cycles === void 0 ? new Set() : _ref2$cycles;

                // process `@context`
                if (context && _isObject(context) && context['@context']) {
                  context = context['@context'];
                } // context is one or more contexts


                context = _asArray(context); // resolve each context in the array

                allResolved = [];
                _iterator = _createForOfIteratorHelper(context);
                _context.prev = 5;

                _iterator.s();

              case 7:
                if ((_step = _iterator.n()).done) {
                  _context.next = 27;
                  break;
                }

                ctx = _step.value;

                if (!_isString(ctx)) {
                  _context.next = 17;
                  break;
                }

                // see if `ctx` has been resolved before...
                _resolved = this._get(ctx);

                if (_resolved) {
                  _context.next = 15;
                  break;
                }

                _context.next = 14;
                return this._resolveRemoteContext({
                  activeCtx: activeCtx,
                  url: ctx,
                  documentLoader: documentLoader,
                  base: base,
                  cycles: cycles
                });

              case 14:
                _resolved = _context.sent;

              case 15:
                // add to output and continue
                if (_isArray(_resolved)) {
                  allResolved.push.apply(allResolved, _toConsumableArray(_resolved));
                } else {
                  allResolved.push(_resolved);
                }

                return _context.abrupt("continue", 25);

              case 17:
                if (!(ctx === null)) {
                  _context.next = 20;
                  break;
                }

                // handle `null` context, nothing to cache
                allResolved.push(new ResolvedContext({
                  document: null
                }));
                return _context.abrupt("continue", 25);

              case 20:
                if (!_isObject(ctx)) {
                  _throwInvalidLocalContext(context);
                } // context is an object, get/create `ResolvedContext` for it


                key = JSON.stringify(ctx);
                resolved = this._get(key);

                if (!resolved) {
                  // create a new static `ResolvedContext` and cache it
                  resolved = new ResolvedContext({
                    document: ctx
                  });

                  this._cacheResolvedContext({
                    key: key,
                    resolved: resolved,
                    tag: 'static'
                  });
                }

                allResolved.push(resolved);

              case 25:
                _context.next = 7;
                break;

              case 27:
                _context.next = 32;
                break;

              case 29:
                _context.prev = 29;
                _context.t0 = _context["catch"](5);

                _iterator.e(_context.t0);

              case 32:
                _context.prev = 32;

                _iterator.f();

                return _context.finish(32);

              case 35:
                return _context.abrupt("return", allResolved);

              case 36:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[5, 29, 32, 35]]);
      }));

      function resolve(_x) {
        return _resolve.apply(this, arguments);
      }

      return resolve;
    }()
  }, {
    key: "_get",
    value: function _get(key) {
      // get key from per operation cache; no `tag` is used with this cache so
      // any retrieved context will always be the same during a single operation
      var resolved = this.perOpCache.get(key);

      if (!resolved) {
        // see if the shared cache has a `static` entry for this URL
        var tagMap = this.sharedCache.get(key);

        if (tagMap) {
          resolved = tagMap.get('static');

          if (resolved) {
            this.perOpCache.set(key, resolved);
          }
        }
      }

      return resolved;
    }
  }, {
    key: "_cacheResolvedContext",
    value: function _cacheResolvedContext(_ref3) {
      var key = _ref3.key,
          resolved = _ref3.resolved,
          tag = _ref3.tag;
      this.perOpCache.set(key, resolved);

      if (tag !== undefined) {
        var tagMap = this.sharedCache.get(key);

        if (!tagMap) {
          tagMap = new Map();
          this.sharedCache.set(key, tagMap);
        }

        tagMap.set(tag, resolved);
      }

      return resolved;
    }
  }, {
    key: "_resolveRemoteContext",
    value: function () {
      var _resolveRemoteContext2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref4) {
        var activeCtx, url, documentLoader, base, cycles, _yield$this$_fetchCon, context, remoteDoc, resolved;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                activeCtx = _ref4.activeCtx, url = _ref4.url, documentLoader = _ref4.documentLoader, base = _ref4.base, cycles = _ref4.cycles;
                // resolve relative URL and fetch context
                url = prependBase(base, url);
                _context2.next = 4;
                return this._fetchContext({
                  activeCtx: activeCtx,
                  url: url,
                  documentLoader: documentLoader,
                  cycles: cycles
                });

              case 4:
                _yield$this$_fetchCon = _context2.sent;
                context = _yield$this$_fetchCon.context;
                remoteDoc = _yield$this$_fetchCon.remoteDoc;
                // update base according to remote document and resolve any relative URLs
                base = remoteDoc.documentUrl || url;

                _resolveContextUrls({
                  context: context,
                  base: base
                }); // resolve, cache, and return context


                _context2.next = 11;
                return this.resolve({
                  activeCtx: activeCtx,
                  context: context,
                  documentLoader: documentLoader,
                  base: base,
                  cycles: cycles
                });

              case 11:
                resolved = _context2.sent;

                this._cacheResolvedContext({
                  key: url,
                  resolved: resolved,
                  tag: remoteDoc.tag
                });

                return _context2.abrupt("return", resolved);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _resolveRemoteContext(_x2) {
        return _resolveRemoteContext2.apply(this, arguments);
      }

      return _resolveRemoteContext;
    }()
  }, {
    key: "_fetchContext",
    value: function () {
      var _fetchContext2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5) {
        var activeCtx, url, documentLoader, cycles, context, remoteDoc;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                activeCtx = _ref5.activeCtx, url = _ref5.url, documentLoader = _ref5.documentLoader, cycles = _ref5.cycles;

                if (!(cycles.size > MAX_CONTEXT_URLS)) {
                  _context3.next = 3;
                  break;
                }

                throw new JsonLdError('Maximum number of @context URLs exceeded.', 'jsonld.ContextUrlError', {
                  code: activeCtx.processingMode === 'json-ld-1.0' ? 'loading remote context failed' : 'context overflow',
                  max: MAX_CONTEXT_URLS
                });

              case 3:
                if (!cycles.has(url)) {
                  _context3.next = 5;
                  break;
                }

                throw new JsonLdError('Cyclical @context URLs detected.', 'jsonld.ContextUrlError', {
                  code: activeCtx.processingMode === 'json-ld-1.0' ? 'recursive context inclusion' : 'context overflow',
                  url: url
                });

              case 5:
                // track cycles
                cycles.add(url);
                _context3.prev = 6;
                _context3.next = 9;
                return documentLoader(url);

              case 9:
                remoteDoc = _context3.sent;
                context = remoteDoc.document || null; // parse string context as JSON

                if (_isString(context)) {
                  context = JSON.parse(context);
                }

                _context3.next = 17;
                break;

              case 14:
                _context3.prev = 14;
                _context3.t0 = _context3["catch"](6);
                throw new JsonLdError('Dereferencing a URL did not result in a valid JSON-LD object. ' + 'Possible causes are an inaccessible URL perhaps due to ' + 'a same-origin policy (ensure the server uses CORS if you are ' + 'using client-side JavaScript), too many redirects, a ' + 'non-JSON response, or more than one HTTP Link Header was ' + 'provided for a remote context.', 'jsonld.InvalidUrl', {
                  code: 'loading remote context failed',
                  url: url,
                  cause: _context3.t0
                });

              case 17:
                if (_isObject(context)) {
                  _context3.next = 19;
                  break;
                }

                throw new JsonLdError('Dereferencing a URL did not result in a JSON object. The ' + 'response was valid JSON, but it was not a JSON object.', 'jsonld.InvalidUrl', {
                  code: 'invalid remote context',
                  url: url
                });

              case 19:
                // use empty context if no @context key is present
                if (!('@context' in context)) {
                  context = {
                    '@context': {}
                  };
                } else {
                  context = {
                    '@context': context['@context']
                  };
                } // append @context URL to context if given


                if (remoteDoc.contextUrl) {
                  if (!_isArray(context['@context'])) {
                    context['@context'] = [context['@context']];
                  }

                  context['@context'].push(remoteDoc.contextUrl);
                }

                return _context3.abrupt("return", {
                  context: context,
                  remoteDoc: remoteDoc
                });

              case 22:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[6, 14]]);
      }));

      function _fetchContext(_x3) {
        return _fetchContext2.apply(this, arguments);
      }

      return _fetchContext;
    }()
  }]);

  return ContextResolver;
}();

function _throwInvalidLocalContext(ctx) {
  throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {
    code: 'invalid local context',
    context: ctx
  });
}
/**
 * Resolve all relative `@context` URLs in the given context by inline
 * replacing them with absolute URLs.
 *
 * @param context the context.
 * @param base the base IRI to use to resolve relative IRIs.
 */


function _resolveContextUrls(_ref6) {
  var context = _ref6.context,
      base = _ref6.base;

  if (!context) {
    return;
  }

  var ctx = context['@context'];

  if (_isString(ctx)) {
    context['@context'] = prependBase(base, ctx);
    return;
  }

  if (_isArray(ctx)) {
    for (var i = 0; i < ctx.length; ++i) {
      var element = ctx[i];

      if (_isString(element)) {
        ctx[i] = prependBase(base, element);
        continue;
      }

      if (_isObject(element)) {
        _resolveContextUrls({
          context: {
            '@context': element
          },
          base: base
        });
      }
    }

    return;
  }

  if (!_isObject(ctx)) {
    // no @context URLs can be found in non-object
    return;
  } // ctx is an object, resolve any context URLs in terms


  for (var term in ctx) {
    _resolveContextUrls({
      context: ctx[term],
      base: base
    });
  }
}

/***/ }),

/***/ 3275:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

module.exports = /*#__PURE__*/function (_Error) {
  _inherits(JsonLdError, _Error);

  var _super = _createSuper(JsonLdError);

  /**
   * Creates a JSON-LD Error.
   *
   * @param msg the error message.
   * @param type the error type.
   * @param details the error details.
   */
  function JsonLdError() {
    var _this;

    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'An unspecified JSON-LD error occurred.';
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'jsonld.Error';
    var details = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, JsonLdError);

    _this = _super.call(this, message);
    _this.name = name;
    _this.message = message;
    _this.details = details;
    return _this;
  }

  return JsonLdError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

/***/ }),

/***/ 82304:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = function (jsonld) {
  var JsonLdProcessor = /*#__PURE__*/function () {
    function JsonLdProcessor() {
      _classCallCheck(this, JsonLdProcessor);
    }

    _createClass(JsonLdProcessor, [{
      key: "toString",
      value: function toString() {
        return '[object JsonLdProcessor]';
      }
    }]);

    return JsonLdProcessor;
  }();

  Object.defineProperty(JsonLdProcessor, 'prototype', {
    writable: false,
    enumerable: false
  });
  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
    writable: true,
    enumerable: false,
    configurable: true,
    value: JsonLdProcessor
  }); // The Web IDL test harness will check the number of parameters defined in
  // the functions below. The number of parameters must exactly match the
  // required (non-optional) parameters of the JsonLdProcessor interface as
  // defined here:
  // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface

  JsonLdProcessor.compact = function (input, ctx) {
    if (arguments.length < 2) {
      return Promise.reject(new TypeError('Could not compact, too few arguments.'));
    }

    return jsonld.compact(input, ctx);
  };

  JsonLdProcessor.expand = function (input) {
    if (arguments.length < 1) {
      return Promise.reject(new TypeError('Could not expand, too few arguments.'));
    }

    return jsonld.expand(input);
  };

  JsonLdProcessor.flatten = function (input) {
    if (arguments.length < 1) {
      return Promise.reject(new TypeError('Could not flatten, too few arguments.'));
    }

    return jsonld.flatten(input);
  };

  return JsonLdProcessor;
};

/***/ }),

/***/ 37153:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
 // TODO: move `NQuads` to its own package

module.exports = __webpack_require__(59145).NQuads;

/***/ }),

/***/ 48624:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  /**
   * Creates a simple queue for requesting documents.
   */
  function RequestQueue() {
    _classCallCheck(this, RequestQueue);

    this._requests = {};
  }

  _createClass(RequestQueue, [{
    key: "wrapLoader",
    value: function wrapLoader(loader) {
      var self = this;
      self._loader = loader;
      return function ()
      /* url */
      {
        return self.add.apply(self, arguments);
      };
    }
  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
        var promise;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                promise = this._requests[url];

                if (!promise) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", Promise.resolve(promise));

              case 3:
                // queue URL and load it
                promise = this._requests[url] = this._loader(url);
                _context.prev = 4;
                _context.next = 7;
                return promise;

              case 7:
                return _context.abrupt("return", _context.sent);

              case 8:
                _context.prev = 8;
                delete this._requests[url];
                return _context.finish(8);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4,, 8, 11]]);
      }));

      function add(_x) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }]);

  return RequestQueue;
}();

/***/ }),

/***/ 96972:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LRU = __webpack_require__(76875);

var MAX_ACTIVE_CONTEXTS = 10;

module.exports = /*#__PURE__*/function () {
  /**
   * Creates a ResolvedContext.
   *
   * @param document the context document.
   */
  function ResolvedContext(_ref) {
    var document = _ref.document;

    _classCallCheck(this, ResolvedContext);

    this.document = document; // TODO: enable customization of processed context cache
    // TODO: limit based on size of processed contexts vs. number of them

    this.cache = new LRU({
      max: MAX_ACTIVE_CONTEXTS
    });
  }

  _createClass(ResolvedContext, [{
    key: "getProcessed",
    value: function getProcessed(activeCtx) {
      return this.cache.get(activeCtx);
    }
  }, {
    key: "setProcessed",
    value: function setProcessed(activeCtx, processedCtx) {
      this.cache.set(activeCtx, processedCtx);
    }
  }]);

  return ResolvedContext;
}();

/***/ }),

/***/ 23639:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var JsonLdError = __webpack_require__(3275);

var _require = __webpack_require__(4319),
    _isArray = _require.isArray,
    _isObject = _require.isObject,
    _isString = _require.isString,
    _isUndefined = _require.isUndefined;

var _require2 = __webpack_require__(61431),
    _isList = _require2.isList,
    _isValue = _require2.isValue,
    _isGraph = _require2.isGraph,
    _isSimpleGraph = _require2.isSimpleGraph,
    _isSubjectReference = _require2.isSubjectReference;

var _require3 = __webpack_require__(15866),
    _expandIri = _require3.expandIri,
    _getContextValue = _require3.getContextValue,
    _isKeyword = _require3.isKeyword,
    _processContext = _require3.process,
    _processingMode = _require3.processingMode;

var _require4 = __webpack_require__(41528),
    _removeBase = _require4.removeBase,
    _prependBase = _require4.prependBase;

var _require5 = __webpack_require__(88336),
    _addValue = _require5.addValue,
    _asArray = _require5.asArray,
    _compareShortestLeast = _require5.compareShortestLeast;

var api = {};
module.exports = api;
/**
 * Recursively compacts an element using the given active context. All values
 * must be in expanded form before this method is called.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the compacted property associated with the element
 *          to compact, null for none.
 * @param element the element to compact.
 * @param options the compaction options.
 * @param compactionMap the compaction map to use.
 *
 * @return a promise that resolves to the compacted value.
 */

api.compact = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref) {
    var activeCtx, _ref$activeProperty, activeProperty, element, _ref$options, options, _ref$compactionMap, compactionMap, rval, i, compacted, container, ctx, _ret;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            activeCtx = _ref.activeCtx, _ref$activeProperty = _ref.activeProperty, activeProperty = _ref$activeProperty === void 0 ? null : _ref$activeProperty, element = _ref.element, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, _ref$compactionMap = _ref.compactionMap, compactionMap = _ref$compactionMap === void 0 ? function () {
              return undefined;
            } : _ref$compactionMap;

            if (!_isArray(element)) {
              _context2.next = 20;
              break;
            }

            rval = [];
            i = 0;

          case 4:
            if (!(i < element.length)) {
              _context2.next = 18;
              break;
            }

            _context2.next = 7;
            return api.compact({
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              element: element[i],
              options: options,
              compactionMap: compactionMap
            });

          case 7:
            compacted = _context2.sent;

            if (!(compacted === null)) {
              _context2.next = 14;
              break;
            }

            _context2.next = 11;
            return compactionMap({
              unmappedValue: element[i],
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              parent: element,
              index: i,
              options: options
            });

          case 11:
            compacted = _context2.sent;

            if (!(compacted === undefined)) {
              _context2.next = 14;
              break;
            }

            return _context2.abrupt("continue", 15);

          case 14:
            rval.push(compacted);

          case 15:
            ++i;
            _context2.next = 4;
            break;

          case 18:
            if (options.compactArrays && rval.length === 1) {
              // use single element if no container is specified
              container = _getContextValue(activeCtx, activeProperty, '@container') || [];

              if (container.length === 0) {
                rval = rval[0];
              }
            }

            return _context2.abrupt("return", rval);

          case 20:
            // use any scoped context on activeProperty
            ctx = _getContextValue(activeCtx, activeProperty, '@context');

            if (_isUndefined(ctx)) {
              _context2.next = 25;
              break;
            }

            _context2.next = 24;
            return _processContext({
              activeCtx: activeCtx,
              localCtx: ctx,
              propagate: true,
              overrideProtected: true,
              options: options
            });

          case 24:
            activeCtx = _context2.sent;

          case 25:
            if (!_isObject(element)) {
              _context2.next = 30;
              break;
            }

            return _context2.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var linked, _i, _rval, _container, insideReverse, rval, inputCtx, propertyScopedCtx, types, typeContext, _iterator, _step, type, compactedType, _ctx, keys, _iterator2, _step2, expandedProperty, expandedValue, compactedValue, alias, _compactedValue, _alias, _container2, typeAsSet, isArray, _compactedValue2, compactedProperty, value, _container3, useArray, _alias2, _compactedValue3, _container4, _alias3, _alias4, itemActiveProperty, nestProperty, nestResult, _iterator3, _step3, expandedItem, _itemActiveProperty, _nestProperty, _nestResult, _container5, isGraph, isList, inner, compactedItem, mapObject, key, _mapObject, _key, indexKey, containerKey, others, _asArray2, _asArray3, idKey, typeKey, _types, _asArray4, _asArray5, _isArray2;

              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!(options.link && '@id' in element && options.link.hasOwnProperty(element['@id']))) {
                        _context.next = 9;
                        break;
                      }

                      // check for a linked element to reuse
                      linked = options.link[element['@id']];
                      _i = 0;

                    case 3:
                      if (!(_i < linked.length)) {
                        _context.next = 9;
                        break;
                      }

                      if (!(linked[_i].expanded === element)) {
                        _context.next = 6;
                        break;
                      }

                      return _context.abrupt("return", {
                        v: linked[_i].compacted
                      });

                    case 6:
                      ++_i;
                      _context.next = 3;
                      break;

                    case 9:
                      if (!(_isValue(element) || _isSubjectReference(element))) {
                        _context.next = 13;
                        break;
                      }

                      _rval = api.compactValue({
                        activeCtx: activeCtx,
                        activeProperty: activeProperty,
                        value: element,
                        options: options
                      });

                      if (options.link && _isSubjectReference(element)) {
                        // store linked element
                        if (!options.link.hasOwnProperty(element['@id'])) {
                          options.link[element['@id']] = [];
                        }

                        options.link[element['@id']].push({
                          expanded: element,
                          compacted: _rval
                        });
                      }

                      return _context.abrupt("return", {
                        v: _rval
                      });

                    case 13:
                      if (!_isList(element)) {
                        _context.next = 17;
                        break;
                      }

                      _container = _getContextValue(activeCtx, activeProperty, '@container') || [];

                      if (!_container.includes('@list')) {
                        _context.next = 17;
                        break;
                      }

                      return _context.abrupt("return", {
                        v: api.compact({
                          activeCtx: activeCtx,
                          activeProperty: activeProperty,
                          element: element['@list'],
                          options: options,
                          compactionMap: compactionMap
                        })
                      });

                    case 17:
                      // FIXME: avoid misuse of active property as an expanded property?
                      insideReverse = activeProperty === '@reverse';
                      rval = {}; // original context before applying property-scoped and local contexts

                      inputCtx = activeCtx; // revert to previous context, if there is one,
                      // and element is not a value object or a node reference

                      if (!_isValue(element) && !_isSubjectReference(element)) {
                        activeCtx = activeCtx.revertToPreviousContext();
                      } // apply property-scoped context after reverting term-scoped context


                      propertyScopedCtx = _getContextValue(inputCtx, activeProperty, '@context');

                      if (_isUndefined(propertyScopedCtx)) {
                        _context.next = 26;
                        break;
                      }

                      _context.next = 25;
                      return _processContext({
                        activeCtx: activeCtx,
                        localCtx: propertyScopedCtx,
                        propagate: true,
                        overrideProtected: true,
                        options: options
                      });

                    case 25:
                      activeCtx = _context.sent;

                    case 26:
                      if (options.link && '@id' in element) {
                        // store linked element
                        if (!options.link.hasOwnProperty(element['@id'])) {
                          options.link[element['@id']] = [];
                        }

                        options.link[element['@id']].push({
                          expanded: element,
                          compacted: rval
                        });
                      } // apply any context defined on an alias of @type
                      // if key is @type and any compacted value is a term having a local
                      // context, overlay that context


                      types = element['@type'] || [];

                      if (types.length > 1) {
                        types = Array.from(types).sort();
                      } // find all type-scoped contexts based on current context, prior to
                      // updating it


                      typeContext = activeCtx;
                      _iterator = _createForOfIteratorHelper(types);
                      _context.prev = 31;

                      _iterator.s();

                    case 33:
                      if ((_step = _iterator.n()).done) {
                        _context.next = 43;
                        break;
                      }

                      type = _step.value;
                      compactedType = api.compactIri({
                        activeCtx: typeContext,
                        iri: type,
                        relativeTo: {
                          vocab: true
                        }
                      }); // Use any type-scoped context defined on this value

                      _ctx = _getContextValue(inputCtx, compactedType, '@context');

                      if (_isUndefined(_ctx)) {
                        _context.next = 41;
                        break;
                      }

                      _context.next = 40;
                      return _processContext({
                        activeCtx: activeCtx,
                        localCtx: _ctx,
                        options: options,
                        propagate: false
                      });

                    case 40:
                      activeCtx = _context.sent;

                    case 41:
                      _context.next = 33;
                      break;

                    case 43:
                      _context.next = 48;
                      break;

                    case 45:
                      _context.prev = 45;
                      _context.t0 = _context["catch"](31);

                      _iterator.e(_context.t0);

                    case 48:
                      _context.prev = 48;

                      _iterator.f();

                      return _context.finish(48);

                    case 51:
                      // process element keys in order
                      keys = Object.keys(element).sort();
                      _iterator2 = _createForOfIteratorHelper(keys);
                      _context.prev = 53;

                      _iterator2.s();

                    case 55:
                      if ((_step2 = _iterator2.n()).done) {
                        _context.next = 211;
                        break;
                      }

                      expandedProperty = _step2.value;
                      expandedValue = element[expandedProperty]; // compact @id

                      if (!(expandedProperty === '@id')) {
                        _context.next = 64;
                        break;
                      }

                      compactedValue = _asArray(expandedValue).map(function (expandedIri) {
                        return api.compactIri({
                          activeCtx: activeCtx,
                          iri: expandedIri,
                          relativeTo: {
                            vocab: false
                          },
                          base: options.base
                        });
                      });

                      if (compactedValue.length === 1) {
                        compactedValue = compactedValue[0];
                      } // use keyword alias and add value


                      alias = api.compactIri({
                        activeCtx: activeCtx,
                        iri: '@id',
                        relativeTo: {
                          vocab: true
                        }
                      });
                      rval[alias] = compactedValue;
                      return _context.abrupt("continue", 209);

                    case 64:
                      if (!(expandedProperty === '@type')) {
                        _context.next = 73;
                        break;
                      }

                      // resolve type values against previous context
                      _compactedValue = _asArray(expandedValue).map(function (expandedIri) {
                        return api.compactIri({
                          activeCtx: inputCtx,
                          iri: expandedIri,
                          relativeTo: {
                            vocab: true
                          }
                        });
                      });

                      if (_compactedValue.length === 1) {
                        _compactedValue = _compactedValue[0];
                      } // use keyword alias and add value


                      _alias = api.compactIri({
                        activeCtx: activeCtx,
                        iri: '@type',
                        relativeTo: {
                          vocab: true
                        }
                      });
                      _container2 = _getContextValue(activeCtx, _alias, '@container') || []; // treat as array for @type if @container includes @set

                      typeAsSet = _container2.includes('@set') && _processingMode(activeCtx, 1.1);
                      isArray = typeAsSet || _isArray(_compactedValue) && expandedValue.length === 0;

                      _addValue(rval, _alias, _compactedValue, {
                        propertyIsArray: isArray
                      });

                      return _context.abrupt("continue", 209);

                    case 73:
                      if (!(expandedProperty === '@reverse')) {
                        _context.next = 80;
                        break;
                      }

                      _context.next = 76;
                      return api.compact({
                        activeCtx: activeCtx,
                        activeProperty: '@reverse',
                        element: expandedValue,
                        options: options,
                        compactionMap: compactionMap
                      });

                    case 76:
                      _compactedValue2 = _context.sent;

                      // handle double-reversed properties
                      for (compactedProperty in _compactedValue2) {
                        if (activeCtx.mappings.has(compactedProperty) && activeCtx.mappings.get(compactedProperty).reverse) {
                          value = _compactedValue2[compactedProperty];
                          _container3 = _getContextValue(activeCtx, compactedProperty, '@container') || [];
                          useArray = _container3.includes('@set') || !options.compactArrays;

                          _addValue(rval, compactedProperty, value, {
                            propertyIsArray: useArray
                          });

                          delete _compactedValue2[compactedProperty];
                        }
                      }

                      if (Object.keys(_compactedValue2).length > 0) {
                        // use keyword alias and add value
                        _alias2 = api.compactIri({
                          activeCtx: activeCtx,
                          iri: expandedProperty,
                          relativeTo: {
                            vocab: true
                          }
                        });

                        _addValue(rval, _alias2, _compactedValue2);
                      }

                      return _context.abrupt("continue", 209);

                    case 80:
                      if (!(expandedProperty === '@preserve')) {
                        _context.next = 86;
                        break;
                      }

                      _context.next = 83;
                      return api.compact({
                        activeCtx: activeCtx,
                        activeProperty: activeProperty,
                        element: expandedValue,
                        options: options,
                        compactionMap: compactionMap
                      });

                    case 83:
                      _compactedValue3 = _context.sent;

                      if (!(_isArray(_compactedValue3) && _compactedValue3.length === 0)) {
                        _addValue(rval, expandedProperty, _compactedValue3);
                      }

                      return _context.abrupt("continue", 209);

                    case 86:
                      if (!(expandedProperty === '@index')) {
                        _context.next = 93;
                        break;
                      }

                      // drop @index if inside an @index container
                      _container4 = _getContextValue(activeCtx, activeProperty, '@container') || [];

                      if (!_container4.includes('@index')) {
                        _context.next = 90;
                        break;
                      }

                      return _context.abrupt("continue", 209);

                    case 90:
                      // use keyword alias and add value
                      _alias3 = api.compactIri({
                        activeCtx: activeCtx,
                        iri: expandedProperty,
                        relativeTo: {
                          vocab: true
                        }
                      });

                      _addValue(rval, _alias3, expandedValue);

                      return _context.abrupt("continue", 209);

                    case 93:
                      if (!(expandedProperty !== '@graph' && expandedProperty !== '@list' && expandedProperty !== '@included' && _isKeyword(expandedProperty))) {
                        _context.next = 97;
                        break;
                      }

                      // use keyword alias and add value as is
                      _alias4 = api.compactIri({
                        activeCtx: activeCtx,
                        iri: expandedProperty,
                        relativeTo: {
                          vocab: true
                        }
                      });

                      _addValue(rval, _alias4, expandedValue);

                      return _context.abrupt("continue", 209);

                    case 97:
                      if (_isArray(expandedValue)) {
                        _context.next = 99;
                        break;
                      }

                      throw new JsonLdError('JSON-LD expansion error; expanded value must be an array.', 'jsonld.SyntaxError');

                    case 99:
                      // preserve empty arrays
                      if (expandedValue.length === 0) {
                        itemActiveProperty = api.compactIri({
                          activeCtx: activeCtx,
                          iri: expandedProperty,
                          value: expandedValue,
                          relativeTo: {
                            vocab: true
                          },
                          reverse: insideReverse
                        });
                        nestProperty = activeCtx.mappings.has(itemActiveProperty) ? activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
                        nestResult = rval;

                        if (nestProperty) {
                          _checkNestProperty(activeCtx, nestProperty, options);

                          if (!_isObject(rval[nestProperty])) {
                            rval[nestProperty] = {};
                          }

                          nestResult = rval[nestProperty];
                        }

                        _addValue(nestResult, itemActiveProperty, expandedValue, {
                          propertyIsArray: true
                        });
                      } // recusively process array values


                      _iterator3 = _createForOfIteratorHelper(expandedValue);
                      _context.prev = 101;

                      _iterator3.s();

                    case 103:
                      if ((_step3 = _iterator3.n()).done) {
                        _context.next = 201;
                        break;
                      }

                      expandedItem = _step3.value;
                      // compact property and get container type
                      _itemActiveProperty = api.compactIri({
                        activeCtx: activeCtx,
                        iri: expandedProperty,
                        value: expandedItem,
                        relativeTo: {
                          vocab: true
                        },
                        reverse: insideReverse
                      }); // if itemActiveProperty is a @nest property, add values to nestResult,
                      // otherwise rval

                      _nestProperty = activeCtx.mappings.has(_itemActiveProperty) ? activeCtx.mappings.get(_itemActiveProperty)['@nest'] : null;
                      _nestResult = rval;

                      if (_nestProperty) {
                        _checkNestProperty(activeCtx, _nestProperty, options);

                        if (!_isObject(rval[_nestProperty])) {
                          rval[_nestProperty] = {};
                        }

                        _nestResult = rval[_nestProperty];
                      }

                      _container5 = _getContextValue(activeCtx, _itemActiveProperty, '@container') || []; // get simple @graph or @list value if appropriate

                      isGraph = _isGraph(expandedItem);
                      isList = _isList(expandedItem);
                      inner = void 0;

                      if (isList) {
                        inner = expandedItem['@list'];
                      } else if (isGraph) {
                        inner = expandedItem['@graph'];
                      } // recursively compact expanded item


                      _context.next = 116;
                      return api.compact({
                        activeCtx: activeCtx,
                        activeProperty: _itemActiveProperty,
                        element: isList || isGraph ? inner : expandedItem,
                        options: options,
                        compactionMap: compactionMap
                      });

                    case 116:
                      compactedItem = _context.sent;

                      if (!isList) {
                        _context.next = 126;
                        break;
                      }

                      // ensure @list value is an array
                      if (!_isArray(compactedItem)) {
                        compactedItem = [compactedItem];
                      }

                      if (_container5.includes('@list')) {
                        _context.next = 124;
                        break;
                      }

                      // wrap using @list alias
                      compactedItem = _defineProperty({}, api.compactIri({
                        activeCtx: activeCtx,
                        iri: '@list',
                        relativeTo: {
                          vocab: true
                        }
                      }), compactedItem); // include @index from expanded @list, if any

                      if ('@index' in expandedItem) {
                        compactedItem[api.compactIri({
                          activeCtx: activeCtx,
                          iri: '@index',
                          relativeTo: {
                            vocab: true
                          }
                        })] = expandedItem['@index'];
                      }

                      _context.next = 126;
                      break;

                    case 124:
                      _addValue(_nestResult, _itemActiveProperty, compactedItem, {
                        valueIsArray: true,
                        allowDuplicate: true
                      });

                      return _context.abrupt("continue", 199);

                    case 126:
                      if (!isGraph) {
                        _context.next = 130;
                        break;
                      }

                      if (_container5.includes('@graph') && (_container5.includes('@id') || _container5.includes('@index') && _isSimpleGraph(expandedItem))) {
                        // get or create the map object
                        mapObject = void 0;

                        if (_nestResult.hasOwnProperty(_itemActiveProperty)) {
                          mapObject = _nestResult[_itemActiveProperty];
                        } else {
                          _nestResult[_itemActiveProperty] = mapObject = {};
                        } // index on @id or @index or alias of @none


                        key = (_container5.includes('@id') ? expandedItem['@id'] : expandedItem['@index']) || api.compactIri({
                          activeCtx: activeCtx,
                          iri: '@none',
                          relativeTo: {
                            vocab: true
                          }
                        }); // add compactedItem to map, using value of `@id` or a new blank
                        // node identifier

                        _addValue(mapObject, key, compactedItem, {
                          propertyIsArray: !options.compactArrays || _container5.includes('@set')
                        });
                      } else if (_container5.includes('@graph') && _isSimpleGraph(expandedItem)) {
                        // container includes @graph but not @id or @index and value is a
                        // simple graph object add compact value
                        // if compactedItem contains multiple values, it is wrapped in
                        // `@included`
                        if (_isArray(compactedItem) && compactedItem.length > 1) {
                          compactedItem = {
                            '@included': compactedItem
                          };
                        }

                        _addValue(_nestResult, _itemActiveProperty, compactedItem, {
                          propertyIsArray: !options.compactArrays || _container5.includes('@set')
                        });
                      } else {
                        // wrap using @graph alias, remove array if only one item and
                        // compactArrays not set
                        if (_isArray(compactedItem) && compactedItem.length === 1 && options.compactArrays) {
                          compactedItem = compactedItem[0];
                        }

                        compactedItem = _defineProperty({}, api.compactIri({
                          activeCtx: activeCtx,
                          iri: '@graph',
                          relativeTo: {
                            vocab: true
                          }
                        }), compactedItem); // include @id from expanded graph, if any

                        if ('@id' in expandedItem) {
                          compactedItem[api.compactIri({
                            activeCtx: activeCtx,
                            iri: '@id',
                            relativeTo: {
                              vocab: true
                            }
                          })] = expandedItem['@id'];
                        } // include @index from expanded graph, if any


                        if ('@index' in expandedItem) {
                          compactedItem[api.compactIri({
                            activeCtx: activeCtx,
                            iri: '@index',
                            relativeTo: {
                              vocab: true
                            }
                          })] = expandedItem['@index'];
                        }

                        _addValue(_nestResult, _itemActiveProperty, compactedItem, {
                          propertyIsArray: !options.compactArrays || _container5.includes('@set')
                        });
                      }

                      _context.next = 199;
                      break;

                    case 130:
                      if (!(_container5.includes('@language') || _container5.includes('@index') || _container5.includes('@id') || _container5.includes('@type'))) {
                        _context.next = 197;
                        break;
                      }

                      // handle language and index maps
                      // get or create the map object
                      _mapObject = void 0;

                      if (_nestResult.hasOwnProperty(_itemActiveProperty)) {
                        _mapObject = _nestResult[_itemActiveProperty];
                      } else {
                        _nestResult[_itemActiveProperty] = _mapObject = {};
                      }

                      _key = void 0;

                      if (!_container5.includes('@language')) {
                        _context.next = 139;
                        break;
                      }

                      // if container is a language map, simplify compacted value to
                      // a simple string
                      if (_isValue(compactedItem)) {
                        compactedItem = compactedItem['@value'];
                      }

                      _key = expandedItem['@language'];
                      _context.next = 193;
                      break;

                    case 139:
                      if (!_container5.includes('@index')) {
                        _context.next = 167;
                        break;
                      }

                      indexKey = _getContextValue(activeCtx, _itemActiveProperty, '@index') || '@index';
                      containerKey = api.compactIri({
                        activeCtx: activeCtx,
                        iri: indexKey,
                        relativeTo: {
                          vocab: true
                        }
                      });

                      if (!(indexKey === '@index')) {
                        _context.next = 147;
                        break;
                      }

                      _key = expandedItem['@index'];
                      delete compactedItem[containerKey];
                      _context.next = 165;
                      break;

                    case 147:
                      others = void 0;
                      _asArray2 = _asArray(compactedItem[indexKey] || []);
                      _asArray3 = _toArray(_asArray2);
                      _key = _asArray3[0];
                      others = _asArray3.slice(1);

                      if (_isString(_key)) {
                        _context.next = 156;
                        break;
                      }

                      // Will use @none if it isn't a string.
                      _key = null;
                      _context.next = 165;
                      break;

                    case 156:
                      _context.t1 = others.length;
                      _context.next = _context.t1 === 0 ? 159 : _context.t1 === 1 ? 161 : 163;
                      break;

                    case 159:
                      delete compactedItem[indexKey];
                      return _context.abrupt("break", 165);

                    case 161:
                      compactedItem[indexKey] = others[0];
                      return _context.abrupt("break", 165);

                    case 163:
                      compactedItem[indexKey] = others;
                      return _context.abrupt("break", 165);

                    case 165:
                      _context.next = 193;
                      break;

                    case 167:
                      if (!_container5.includes('@id')) {
                        _context.next = 173;
                        break;
                      }

                      idKey = api.compactIri({
                        activeCtx: activeCtx,
                        iri: '@id',
                        relativeTo: {
                          vocab: true
                        }
                      });
                      _key = compactedItem[idKey];
                      delete compactedItem[idKey];
                      _context.next = 193;
                      break;

                    case 173:
                      if (!_container5.includes('@type')) {
                        _context.next = 193;
                        break;
                      }

                      typeKey = api.compactIri({
                        activeCtx: activeCtx,
                        iri: '@type',
                        relativeTo: {
                          vocab: true
                        }
                      });
                      _types = void 0;
                      _asArray4 = _asArray(compactedItem[typeKey] || []);
                      _asArray5 = _toArray(_asArray4);
                      _key = _asArray5[0];
                      _types = _asArray5.slice(1);
                      _context.t2 = _types.length;
                      _context.next = _context.t2 === 0 ? 183 : _context.t2 === 1 ? 185 : 187;
                      break;

                    case 183:
                      delete compactedItem[typeKey];
                      return _context.abrupt("break", 189);

                    case 185:
                      compactedItem[typeKey] = _types[0];
                      return _context.abrupt("break", 189);

                    case 187:
                      compactedItem[typeKey] = _types;
                      return _context.abrupt("break", 189);

                    case 189:
                      if (!(Object.keys(compactedItem).length === 1 && '@id' in expandedItem)) {
                        _context.next = 193;
                        break;
                      }

                      _context.next = 192;
                      return api.compact({
                        activeCtx: activeCtx,
                        activeProperty: _itemActiveProperty,
                        element: {
                          '@id': expandedItem['@id']
                        },
                        options: options,
                        compactionMap: compactionMap
                      });

                    case 192:
                      compactedItem = _context.sent;

                    case 193:
                      // if compacting this value which has no key, index on @none
                      if (!_key) {
                        _key = api.compactIri({
                          activeCtx: activeCtx,
                          iri: '@none',
                          relativeTo: {
                            vocab: true
                          }
                        });
                      } // add compact value to map object using key from expanded value
                      // based on the container type


                      _addValue(_mapObject, _key, compactedItem, {
                        propertyIsArray: _container5.includes('@set')
                      });

                      _context.next = 199;
                      break;

                    case 197:
                      // use an array if: compactArrays flag is false,
                      // @container is @set or @list , value is an empty
                      // array, or key is @graph
                      _isArray2 = !options.compactArrays || _container5.includes('@set') || _container5.includes('@list') || _isArray(compactedItem) && compactedItem.length === 0 || expandedProperty === '@list' || expandedProperty === '@graph'; // add compact value

                      _addValue(_nestResult, _itemActiveProperty, compactedItem, {
                        propertyIsArray: _isArray2
                      });

                    case 199:
                      _context.next = 103;
                      break;

                    case 201:
                      _context.next = 206;
                      break;

                    case 203:
                      _context.prev = 203;
                      _context.t3 = _context["catch"](101);

                      _iterator3.e(_context.t3);

                    case 206:
                      _context.prev = 206;

                      _iterator3.f();

                      return _context.finish(206);

                    case 209:
                      _context.next = 55;
                      break;

                    case 211:
                      _context.next = 216;
                      break;

                    case 213:
                      _context.prev = 213;
                      _context.t4 = _context["catch"](53);

                      _iterator2.e(_context.t4);

                    case 216:
                      _context.prev = 216;

                      _iterator2.f();

                      return _context.finish(216);

                    case 219:
                      return _context.abrupt("return", {
                        v: rval
                      });

                    case 220:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, null, [[31, 45, 48, 51], [53, 213, 216, 219], [101, 203, 206, 209]]);
            })(), "t0", 27);

          case 27:
            _ret = _context2.t0;

            if (!(_typeof(_ret) === "object")) {
              _context2.next = 30;
              break;
            }

            return _context2.abrupt("return", _ret.v);

          case 30:
            return _context2.abrupt("return", element);

          case 31:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Compacts an IRI or keyword into a term or prefix if it can be. If the
 * IRI has an associated value it may be passed.
 *
 * @param activeCtx the active context to use.
 * @param iri the IRI to compact.
 * @param value the value to check or null.
 * @param relativeTo options for how to compact IRIs:
 *          vocab: true to split after @vocab, false not to.
 * @param reverse true if a reverse property is being compacted, false if not.
 * @param base the absolute URL to use for compacting document-relative IRIs.
 *
 * @return the compacted term, prefix, keyword alias, or the original IRI.
 */


api.compactIri = function (_ref3) {
  var activeCtx = _ref3.activeCtx,
      iri = _ref3.iri,
      _ref3$value = _ref3.value,
      value = _ref3$value === void 0 ? null : _ref3$value,
      _ref3$relativeTo = _ref3.relativeTo,
      relativeTo = _ref3$relativeTo === void 0 ? {
    vocab: false
  } : _ref3$relativeTo,
      _ref3$reverse = _ref3.reverse,
      reverse = _ref3$reverse === void 0 ? false : _ref3$reverse,
      _ref3$base = _ref3.base,
      base = _ref3$base === void 0 ? null : _ref3$base;

  // can't compact null
  if (iri === null) {
    return iri;
  } // if context is from a property term scoped context composed with a
  // type-scoped context, then use the previous context instead


  if (activeCtx.isPropertyTermScoped && activeCtx.previousContext) {
    activeCtx = activeCtx.previousContext;
  }

  var inverseCtx = activeCtx.getInverse(); // if term is a keyword, it may be compacted to a simple alias

  if (_isKeyword(iri) && iri in inverseCtx && '@none' in inverseCtx[iri] && '@type' in inverseCtx[iri]['@none'] && '@none' in inverseCtx[iri]['@none']['@type']) {
    return inverseCtx[iri]['@none']['@type']['@none'];
  } // use inverse context to pick a term if iri is relative to vocab


  if (relativeTo.vocab && iri in inverseCtx) {
    var defaultLanguage = activeCtx['@language'] || '@none'; // prefer @index if available in value

    var containers = [];

    if (_isObject(value) && '@index' in value && !('@graph' in value)) {
      containers.push('@index', '@index@set');
    } // if value is a preserve object, use its value


    if (_isObject(value) && '@preserve' in value) {
      value = value['@preserve'][0];
    } // prefer most specific container including @graph, prefering @set
    // variations


    if (_isGraph(value)) {
      // favor indexmap if the graph is indexed
      if ('@index' in value) {
        containers.push('@graph@index', '@graph@index@set', '@index', '@index@set');
      } // favor idmap if the graph is has an @id


      if ('@id' in value) {
        containers.push('@graph@id', '@graph@id@set');
      }

      containers.push('@graph', '@graph@set', '@set'); // allow indexmap if the graph is not indexed

      if (!('@index' in value)) {
        containers.push('@graph@index', '@graph@index@set', '@index', '@index@set');
      } // allow idmap if the graph does not have an @id


      if (!('@id' in value)) {
        containers.push('@graph@id', '@graph@id@set');
      }
    } else if (_isObject(value) && !_isValue(value)) {
      containers.push('@id', '@id@set', '@type', '@set@type');
    } // defaults for term selection based on type/language


    var typeOrLanguage = '@language';
    var typeOrLanguageValue = '@null';

    if (reverse) {
      typeOrLanguage = '@type';
      typeOrLanguageValue = '@reverse';
      containers.push('@set');
    } else if (_isList(value)) {
      // choose the most specific term that works for all elements in @list
      // only select @list containers if @index is NOT in value
      if (!('@index' in value)) {
        containers.push('@list');
      }

      var list = value['@list'];

      if (list.length === 0) {
        // any empty list can be matched against any term that uses the
        // @list container regardless of @type or @language
        typeOrLanguage = '@any';
        typeOrLanguageValue = '@none';
      } else {
        var commonLanguage = list.length === 0 ? defaultLanguage : null;
        var commonType = null;

        for (var i = 0; i < list.length; ++i) {
          var item = list[i];
          var itemLanguage = '@none';
          var itemType = '@none';

          if (_isValue(item)) {
            if ('@direction' in item) {
              var lang = (item['@language'] || '').toLowerCase();
              var dir = item['@direction'];
              itemLanguage = "".concat(lang, "_").concat(dir);
            } else if ('@language' in item) {
              itemLanguage = item['@language'].toLowerCase();
            } else if ('@type' in item) {
              itemType = item['@type'];
            } else {
              // plain literal
              itemLanguage = '@null';
            }
          } else {
            itemType = '@id';
          }

          if (commonLanguage === null) {
            commonLanguage = itemLanguage;
          } else if (itemLanguage !== commonLanguage && _isValue(item)) {
            commonLanguage = '@none';
          }

          if (commonType === null) {
            commonType = itemType;
          } else if (itemType !== commonType) {
            commonType = '@none';
          } // there are different languages and types in the list, so choose
          // the most generic term, no need to keep iterating the list


          if (commonLanguage === '@none' && commonType === '@none') {
            break;
          }
        }

        commonLanguage = commonLanguage || '@none';
        commonType = commonType || '@none';

        if (commonType !== '@none') {
          typeOrLanguage = '@type';
          typeOrLanguageValue = commonType;
        } else {
          typeOrLanguageValue = commonLanguage;
        }
      }
    } else {
      if (_isValue(value)) {
        if ('@language' in value && !('@index' in value)) {
          containers.push('@language', '@language@set');
          typeOrLanguageValue = value['@language'];
          var _dir = value['@direction'];

          if (_dir) {
            typeOrLanguageValue = "".concat(typeOrLanguageValue, "_").concat(_dir);
          }
        } else if ('@direction' in value && !('@index' in value)) {
          typeOrLanguageValue = "_".concat(value['@direction']);
        } else if ('@type' in value) {
          typeOrLanguage = '@type';
          typeOrLanguageValue = value['@type'];
        }
      } else {
        typeOrLanguage = '@type';
        typeOrLanguageValue = '@id';
      }

      containers.push('@set');
    } // do term selection


    containers.push('@none'); // an index map can be used to index values using @none, so add as a low
    // priority

    if (_isObject(value) && !('@index' in value)) {
      // allow indexing even if no @index present
      containers.push('@index', '@index@set');
    } // values without type or language can use @language map


    if (_isValue(value) && Object.keys(value).length === 1) {
      // allow indexing even if no @index present
      containers.push('@language', '@language@set');
    }

    var term = _selectTerm(activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);

    if (term !== null) {
      return term;
    }
  } // no term match, use @vocab if available


  if (relativeTo.vocab) {
    if ('@vocab' in activeCtx) {
      // determine if vocab is a prefix of the iri
      var vocab = activeCtx['@vocab'];

      if (iri.indexOf(vocab) === 0 && iri !== vocab) {
        // use suffix as relative iri if it is not a term in the active context
        var suffix = iri.substr(vocab.length);

        if (!activeCtx.mappings.has(suffix)) {
          return suffix;
        }
      }
    }
  } // no term or @vocab match, check for possible CURIEs


  var choice = null; // TODO: make FastCurieMap a class with a method to do this lookup

  var partialMatches = [];
  var iriMap = activeCtx.fastCurieMap; // check for partial matches of against `iri`, which means look until
  // iri.length - 1, not full length

  var maxPartialLength = iri.length - 1;

  for (var _i2 = 0; _i2 < maxPartialLength && iri[_i2] in iriMap; ++_i2) {
    iriMap = iriMap[iri[_i2]];

    if ('' in iriMap) {
      partialMatches.push(iriMap[''][0]);
    }
  } // check partial matches in reverse order to prefer longest ones first


  for (var _i3 = partialMatches.length - 1; _i3 >= 0; --_i3) {
    var entry = partialMatches[_i3];
    var terms = entry.terms;

    var _iterator4 = _createForOfIteratorHelper(terms),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _term = _step4.value;
        // a CURIE is usable if:
        // 1. it has no mapping, OR
        // 2. value is null, which means we're not compacting an @value, AND
        //   the mapping matches the IRI
        var curie = _term + ':' + iri.substr(entry.iri.length);
        var isUsableCurie = activeCtx.mappings.get(_term)._prefix && (!activeCtx.mappings.has(curie) || value === null && activeCtx.mappings.get(curie)['@id'] === iri); // select curie if it is shorter or the same length but lexicographically
        // less than the current choice

        if (isUsableCurie && (choice === null || _compareShortestLeast(curie, choice) < 0)) {
          choice = curie;
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  } // return chosen curie


  if (choice !== null) {
    return choice;
  } // If iri could be confused with a compact IRI using a term in this context,
  // signal an error


  var _iterator5 = _createForOfIteratorHelper(activeCtx.mappings),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _step5$value = _slicedToArray(_step5.value, 2),
          _term2 = _step5$value[0],
          td = _step5$value[1];

      if (td && td._prefix && iri.startsWith(_term2 + ':')) {
        throw new JsonLdError("Absolute IRI \"".concat(iri, "\" confused with prefix \"").concat(_term2, "\"."), 'jsonld.SyntaxError', {
          code: 'IRI confused with prefix',
          context: activeCtx
        });
      }
    } // compact IRI relative to base

  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  if (!relativeTo.vocab) {
    if ('@base' in activeCtx) {
      if (!activeCtx['@base']) {
        // The None case preserves rval as potentially relative
        return iri;
      } else {
        return _removeBase(_prependBase(base, activeCtx['@base']), iri);
      }
    } else {
      return _removeBase(base, iri);
    }
  } // return IRI as is


  return iri;
};
/**
 * Performs value compaction on an object with '@value' or '@id' as the only
 * property.
 *
 * @param activeCtx the active context.
 * @param activeProperty the active property that points to the value.
 * @param value the value to compact.
 * @param {Object} [options] - processing options.
 *
 * @return the compaction result.
 */


api.compactValue = function (_ref4) {
  var activeCtx = _ref4.activeCtx,
      activeProperty = _ref4.activeProperty,
      value = _ref4.value,
      options = _ref4.options;

  // value is a @value
  if (_isValue(value)) {
    // get context rules
    var _type = _getContextValue(activeCtx, activeProperty, '@type');

    var language = _getContextValue(activeCtx, activeProperty, '@language');

    var direction = _getContextValue(activeCtx, activeProperty, '@direction');

    var container = _getContextValue(activeCtx, activeProperty, '@container') || []; // whether or not the value has an @index that must be preserved

    var preserveIndex = '@index' in value && !container.includes('@index'); // if there's no @index to preserve ...

    if (!preserveIndex && _type !== '@none') {
      // matching @type or @language specified in context, compact value
      if (value['@type'] === _type) {
        return value['@value'];
      }

      if ('@language' in value && value['@language'] === language && '@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }

      if ('@language' in value && value['@language'] === language) {
        return value['@value'];
      }

      if ('@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }
    } // return just the value of @value if all are true:
    // 1. @value is the only key or @index isn't being preserved
    // 2. there is no default language or @value is not a string or
    //   the key has a mapping with a null @language


    var keyCount = Object.keys(value).length;
    var isValueOnlyKey = keyCount === 1 || keyCount === 2 && '@index' in value && !preserveIndex;
    var hasDefaultLanguage = ('@language' in activeCtx);

    var isValueString = _isString(value['@value']);

    var hasNullMapping = activeCtx.mappings.has(activeProperty) && activeCtx.mappings.get(activeProperty)['@language'] === null;

    if (isValueOnlyKey && _type !== '@none' && (!hasDefaultLanguage || !isValueString || hasNullMapping)) {
      return value['@value'];
    }

    var rval = {}; // preserve @index

    if (preserveIndex) {
      rval[api.compactIri({
        activeCtx: activeCtx,
        iri: '@index',
        relativeTo: {
          vocab: true
        }
      })] = value['@index'];
    }

    if ('@type' in value) {
      // compact @type IRI
      rval[api.compactIri({
        activeCtx: activeCtx,
        iri: '@type',
        relativeTo: {
          vocab: true
        }
      })] = api.compactIri({
        activeCtx: activeCtx,
        iri: value['@type'],
        relativeTo: {
          vocab: true
        }
      });
    } else if ('@language' in value) {
      // alias @language
      rval[api.compactIri({
        activeCtx: activeCtx,
        iri: '@language',
        relativeTo: {
          vocab: true
        }
      })] = value['@language'];
    }

    if ('@direction' in value) {
      // alias @direction
      rval[api.compactIri({
        activeCtx: activeCtx,
        iri: '@direction',
        relativeTo: {
          vocab: true
        }
      })] = value['@direction'];
    } // alias @value


    rval[api.compactIri({
      activeCtx: activeCtx,
      iri: '@value',
      relativeTo: {
        vocab: true
      }
    })] = value['@value'];
    return rval;
  } // value is a subject reference


  var expandedProperty = _expandIri(activeCtx, activeProperty, {
    vocab: true
  }, options);

  var type = _getContextValue(activeCtx, activeProperty, '@type');

  var compacted = api.compactIri({
    activeCtx: activeCtx,
    iri: value['@id'],
    relativeTo: {
      vocab: type === '@vocab'
    },
    base: options.base
  }); // compact to scalar

  if (type === '@id' || type === '@vocab' || expandedProperty === '@graph') {
    return compacted;
  }

  return _defineProperty({}, api.compactIri({
    activeCtx: activeCtx,
    iri: '@id',
    relativeTo: {
      vocab: true
    }
  }), compacted);
};
/**
 * Picks the preferred compaction term from the given inverse context entry.
 *
 * @param activeCtx the active context.
 * @param iri the IRI to pick the term for.
 * @param value the value to pick the term for.
 * @param containers the preferred containers.
 * @param typeOrLanguage either '@type' or '@language'.
 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
 *
 * @return the preferred term.
 */


function _selectTerm(activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
  if (typeOrLanguageValue === null) {
    typeOrLanguageValue = '@null';
  } // preferences for the value of @type or @language


  var prefs = []; // determine prefs for @id based on whether or not value compacts to a term

  if ((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') && _isObject(value) && '@id' in value) {
    // prefer @reverse first
    if (typeOrLanguageValue === '@reverse') {
      prefs.push('@reverse');
    } // try to compact value to a term


    var term = api.compactIri({
      activeCtx: activeCtx,
      iri: value['@id'],
      relativeTo: {
        vocab: true
      }
    });

    if (activeCtx.mappings.has(term) && activeCtx.mappings.get(term) && activeCtx.mappings.get(term)['@id'] === value['@id']) {
      // prefer @vocab
      prefs.push.apply(prefs, ['@vocab', '@id']);
    } else {
      // prefer @id
      prefs.push.apply(prefs, ['@id', '@vocab']);
    }
  } else {
    prefs.push(typeOrLanguageValue); // consider direction only

    var langDir = prefs.find(function (el) {
      return el.includes('_');
    });

    if (langDir) {
      // consider _dir portion
      prefs.push(langDir.replace(/^[^_]+_/, '_'));
    }
  }

  prefs.push('@none');
  var containerMap = activeCtx.inverse[iri];

  var _iterator6 = _createForOfIteratorHelper(containers),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var container = _step6.value;

      // if container not available in the map, continue
      if (!(container in containerMap)) {
        continue;
      }

      var typeOrLanguageValueMap = containerMap[container][typeOrLanguage];

      var _iterator7 = _createForOfIteratorHelper(prefs),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var pref = _step7.value;

          // if type/language option not available in the map, continue
          if (!(pref in typeOrLanguageValueMap)) {
            continue;
          } // select term


          return typeOrLanguageValueMap[pref];
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return null;
}
/**
 * The value of `@nest` in the term definition must either be `@nest`, or a term
 * which resolves to `@nest`.
 *
 * @param activeCtx the active context.
 * @param nestProperty a term in the active context or `@nest`.
 * @param {Object} [options] - processing options.
 */


function _checkNestProperty(activeCtx, nestProperty, options) {
  if (_expandIri(activeCtx, nestProperty, {
    vocab: true
  }, options) !== '@nest') {
    throw new JsonLdError('JSON-LD compact error; nested property must have an @nest value ' + 'resolving to @nest.', 'jsonld.SyntaxError', {
      code: 'invalid @nest value'
    });
  }
}

/***/ }),

/***/ 17668:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
var XSD = 'http://www.w3.org/2001/XMLSchema#';
module.exports = {
  // TODO: Deprecated and will be removed later. Use LINK_HEADER_CONTEXT.
  LINK_HEADER_REL: 'http://www.w3.org/ns/json-ld#context',
  LINK_HEADER_CONTEXT: 'http://www.w3.org/ns/json-ld#context',
  RDF: RDF,
  RDF_LIST: RDF + 'List',
  RDF_FIRST: RDF + 'first',
  RDF_REST: RDF + 'rest',
  RDF_NIL: RDF + 'nil',
  RDF_TYPE: RDF + 'type',
  RDF_PLAIN_LITERAL: RDF + 'PlainLiteral',
  RDF_XML_LITERAL: RDF + 'XMLLiteral',
  RDF_JSON_LITERAL: RDF + 'JSON',
  RDF_OBJECT: RDF + 'object',
  RDF_LANGSTRING: RDF + 'langString',
  XSD: XSD,
  XSD_BOOLEAN: XSD + 'boolean',
  XSD_DOUBLE: XSD + 'double',
  XSD_INTEGER: XSD + 'integer',
  XSD_STRING: XSD + 'string'
};

/***/ }),

/***/ 15866:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(85271);
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var util = __webpack_require__(88336);

var JsonLdError = __webpack_require__(3275);

var _require = __webpack_require__(4319),
    _isArray = _require.isArray,
    _isObject = _require.isObject,
    _isString = _require.isString,
    _isUndefined = _require.isUndefined;

var _require2 = __webpack_require__(41528),
    _isAbsoluteIri = _require2.isAbsolute,
    _isRelativeIri = _require2.isRelative,
    prependBase = _require2.prependBase;

var _require3 = __webpack_require__(88336),
    _asArray = _require3.asArray,
    _compareShortestLeast = _require3.compareShortestLeast;

var INITIAL_CONTEXT_CACHE = new Map();
var INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;
var KEYWORD_PATTERN = /^@[a-zA-Z]+$/;
var api = {};
module.exports = api;
/**
 * Processes a local context and returns a new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param options the context processing options.
 * @param propagate `true` if `false`, retains any previously defined term,
 *   which can be rolled back when the descending into a new node object.
 * @param overrideProtected `false` allows protected terms to be modified.
 *
 * @return a Promise that resolves to the new active context.
 */

api.process = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var activeCtx, localCtx, options, _ref$propagate, propagate, _ref$overrideProtecte, overrideProtected, _ref$cycles, cycles, ctxs, resolved, rval, _iterator, _step, resolvedContext, ctx, protectedMode, _processed, oldActiveCtx, _i, _Object$entries, _Object$entries$_i, term, _protected, processed, defined, base, value, _value, _value2, _value3, _value4, resolvedImport, processedImport, importCtx, key, _key, keyCtx, process, url;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            activeCtx = _ref.activeCtx, localCtx = _ref.localCtx, options = _ref.options, _ref$propagate = _ref.propagate, propagate = _ref$propagate === void 0 ? true : _ref$propagate, _ref$overrideProtecte = _ref.overrideProtected, overrideProtected = _ref$overrideProtecte === void 0 ? false : _ref$overrideProtecte, _ref$cycles = _ref.cycles, cycles = _ref$cycles === void 0 ? new Set() : _ref$cycles;

            // normalize local context to an array of @context objects
            if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) {
              localCtx = localCtx['@context'];
            }

            ctxs = _asArray(localCtx); // no contexts in array, return current active context w/o changes

            if (!(ctxs.length === 0)) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", activeCtx);

          case 5:
            _context.next = 7;
            return options.contextResolver.resolve({
              activeCtx: activeCtx,
              context: localCtx,
              documentLoader: options.documentLoader,
              base: options.base
            });

          case 7:
            resolved = _context.sent;

            // override propagate if first resolved context has `@propagate`
            if (_isObject(resolved[0].document) && typeof resolved[0].document['@propagate'] === 'boolean') {
              // retrieve early, error checking done later
              propagate = resolved[0].document['@propagate'];
            } // process each context in order, update active context
            // on each iteration to ensure proper caching


            rval = activeCtx; // track the previous context
            // if not propagating, make sure rval has a previous context

            if (!propagate && !rval.previousContext) {
              // clone `rval` context before updating
              rval = rval.clone();
              rval.previousContext = activeCtx;
            }

            _iterator = _createForOfIteratorHelper(resolved);
            _context.prev = 12;

            _iterator.s();

          case 14:
            if ((_step = _iterator.n()).done) {
              _context.next = 164;
              break;
            }

            resolvedContext = _step.value;
            ctx = resolvedContext.document; // update active context to one computed from last iteration

            activeCtx = rval; // reset to initial context

            if (!(ctx === null)) {
              _context.next = 40;
              break;
            }

            if (!(!overrideProtected && Object.keys(activeCtx["protected"]).length !== 0)) {
              _context.next = 38;
              break;
            }

            protectedMode = options && options.protectedMode || 'error';

            if (!(protectedMode === 'error')) {
              _context.next = 25;
              break;
            }

            throw new JsonLdError('Tried to nullify a context with protected terms outside of ' + 'a term definition.', 'jsonld.SyntaxError', {
              code: 'invalid context nullification'
            });

          case 25:
            if (!(protectedMode === 'warn')) {
              _context.next = 37;
              break;
            }

            // FIXME: remove logging and use a handler
            console.warn('WARNING: invalid context nullification'); // get processed context from cache if available

            _processed = resolvedContext.getProcessed(activeCtx);

            if (!_processed) {
              _context.next = 31;
              break;
            }

            rval = activeCtx = _processed;
            return _context.abrupt("continue", 162);

          case 31:
            oldActiveCtx = activeCtx; // copy all protected term definitions to fresh initial context

            rval = activeCtx = api.getInitialContext(options).clone();

            for (_i = 0, _Object$entries = Object.entries(oldActiveCtx["protected"]); _i < _Object$entries.length; _i++) {
              _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), term = _Object$entries$_i[0], _protected = _Object$entries$_i[1];

              if (_protected) {
                activeCtx.mappings[term] = util.clone(oldActiveCtx.mappings[term]);
              }
            }

            activeCtx["protected"] = util.clone(oldActiveCtx["protected"]); // cache processed result

            resolvedContext.setProcessed(oldActiveCtx, rval);
            return _context.abrupt("continue", 162);

          case 37:
            throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {
              code: 'invalid protected mode',
              context: localCtx,
              protectedMode: protectedMode
            });

          case 38:
            rval = activeCtx = api.getInitialContext(options).clone();
            return _context.abrupt("continue", 162);

          case 40:
            // get processed context from cache if available
            processed = resolvedContext.getProcessed(activeCtx);

            if (!processed) {
              _context.next = 44;
              break;
            }

            rval = activeCtx = processed;
            return _context.abrupt("continue", 162);

          case 44:
            // dereference @context key if present
            if (_isObject(ctx) && '@context' in ctx) {
              ctx = ctx['@context'];
            } // context must be an object by now, all URLs retrieved before this call


            if (_isObject(ctx)) {
              _context.next = 47;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {
              code: 'invalid local context',
              context: ctx
            });

          case 47:
            // TODO: there is likely a `previousContext` cloning optimization that
            // could be applied here (no need to copy it under certain conditions)
            // clone context before updating it
            rval = rval.clone(); // define context mappings for keys in local context

            defined = new Map(); // handle @version

            if (!('@version' in ctx)) {
              _context.next = 57;
              break;
            }

            if (!(ctx['@version'] !== 1.1)) {
              _context.next = 52;
              break;
            }

            throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {
              code: 'invalid @version value',
              context: ctx
            });

          case 52:
            if (!(activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0')) {
              _context.next = 54;
              break;
            }

            throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {
              code: 'processing mode conflict',
              context: ctx
            });

          case 54:
            rval.processingMode = 'json-ld-1.1';
            rval['@version'] = ctx['@version'];
            defined.set('@version', true);

          case 57:
            // if not set explicitly, set processingMode to "json-ld-1.1"
            rval.processingMode = rval.processingMode || activeCtx.processingMode; // handle @base

            if (!('@base' in ctx)) {
              _context.next = 70;
              break;
            }

            base = ctx['@base'];

            if (!(base === null || _isAbsoluteIri(base))) {
              _context.next = 63;
              break;
            }

            _context.next = 68;
            break;

          case 63:
            if (!_isRelativeIri(base)) {
              _context.next = 67;
              break;
            }

            base = prependBase(rval['@base'], base);
            _context.next = 68;
            break;

          case 67:
            throw new JsonLdError('Invalid JSON-LD syntax; the value of "@base" in a ' + '@context must be an absolute IRI, a relative IRI, or null.', 'jsonld.SyntaxError', {
              code: 'invalid base IRI',
              context: ctx
            });

          case 68:
            rval['@base'] = base;
            defined.set('@base', true);

          case 70:
            if (!('@vocab' in ctx)) {
              _context.next = 86;
              break;
            }

            value = ctx['@vocab'];

            if (!(value === null)) {
              _context.next = 76;
              break;
            }

            delete rval['@vocab'];
            _context.next = 85;
            break;

          case 76:
            if (_isString(value)) {
              _context.next = 80;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; the value of "@vocab" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {
              code: 'invalid vocab mapping',
              context: ctx
            });

          case 80:
            if (!(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0))) {
              _context.next = 84;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; the value of "@vocab" in a ' + '@context must be an absolute IRI.', 'jsonld.SyntaxError', {
              code: 'invalid vocab mapping',
              context: ctx
            });

          case 84:
            rval['@vocab'] = _expandIri(rval, value, {
              vocab: true,
              base: true
            }, undefined, undefined, options);

          case 85:
            defined.set('@vocab', true);

          case 86:
            if (!('@language' in ctx)) {
              _context.next = 98;
              break;
            }

            _value = ctx['@language'];

            if (!(_value === null)) {
              _context.next = 92;
              break;
            }

            delete rval['@language'];
            _context.next = 97;
            break;

          case 92:
            if (_isString(_value)) {
              _context.next = 96;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; the value of "@language" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {
              code: 'invalid default language',
              context: ctx
            });

          case 96:
            rval['@language'] = _value.toLowerCase();

          case 97:
            defined.set('@language', true);

          case 98:
            if (!('@direction' in ctx)) {
              _context.next = 112;
              break;
            }

            _value2 = ctx['@direction'];

            if (!(activeCtx.processingMode === 'json-ld-1.0')) {
              _context.next = 102;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; @direction not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
              code: 'invalid context member',
              context: ctx
            });

          case 102:
            if (!(_value2 === null)) {
              _context.next = 106;
              break;
            }

            delete rval['@direction'];
            _context.next = 111;
            break;

          case 106:
            if (!(_value2 !== 'ltr' && _value2 !== 'rtl')) {
              _context.next = 110;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; the value of "@direction" in a ' + '@context must be null, "ltr", or "rtl".', 'jsonld.SyntaxError', {
              code: 'invalid base direction',
              context: ctx
            });

          case 110:
            rval['@direction'] = _value2;

          case 111:
            defined.set('@direction', true);

          case 112:
            if (!('@propagate' in ctx)) {
              _context.next = 119;
              break;
            }

            _value3 = ctx['@propagate'];

            if (!(activeCtx.processingMode === 'json-ld-1.0')) {
              _context.next = 116;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; @propagate not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
              code: 'invalid context entry',
              context: ctx
            });

          case 116:
            if (!(typeof _value3 !== 'boolean')) {
              _context.next = 118;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; @propagate value must be a boolean.', 'jsonld.SyntaxError', {
              code: 'invalid @propagate value',
              context: localCtx
            });

          case 118:
            defined.set('@propagate', true);

          case 119:
            if (!('@import' in ctx)) {
              _context.next = 141;
              break;
            }

            _value4 = ctx['@import'];

            if (!(activeCtx.processingMode === 'json-ld-1.0')) {
              _context.next = 123;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; @import not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
              code: 'invalid context entry',
              context: ctx
            });

          case 123:
            if (_isString(_value4)) {
              _context.next = 125;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; @import must be a string.', 'jsonld.SyntaxError', {
              code: 'invalid @import value',
              context: localCtx
            });

          case 125:
            _context.next = 127;
            return options.contextResolver.resolve({
              activeCtx: activeCtx,
              context: _value4,
              documentLoader: options.documentLoader,
              base: options.base
            });

          case 127:
            resolvedImport = _context.sent;

            if (!(resolvedImport.length !== 1)) {
              _context.next = 130;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; @import must reference a single context.', 'jsonld.SyntaxError', {
              code: 'invalid remote context',
              context: localCtx
            });

          case 130:
            processedImport = resolvedImport[0].getProcessed(activeCtx);

            if (!processedImport) {
              _context.next = 135;
              break;
            }

            // Note: if the same context were used in this active context
            // as a reference context, then processed_input might not
            // be a dict.
            ctx = processedImport;
            _context.next = 140;
            break;

          case 135:
            importCtx = resolvedImport[0].document;

            if (!('@import' in importCtx)) {
              _context.next = 138;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax: ' + 'imported context must not include @import.', 'jsonld.SyntaxError', {
              code: 'invalid context entry',
              context: localCtx
            });

          case 138:
            // merge ctx into importCtx and replace rval with the result
            for (key in importCtx) {
              if (!ctx.hasOwnProperty(key)) {
                ctx[key] = importCtx[key];
              }
            } // Note: this could potenially conflict if the import
            // were used in the same active context as a referenced
            // context and an import. In this case, we
            // could override the cached result, but seems unlikely.


            resolvedImport[0].setProcessed(activeCtx, ctx);

          case 140:
            defined.set('@import', true);

          case 141:
            // handle @protected; determine whether this sub-context is declaring
            // all its terms to be "protected" (exceptions can be made on a
            // per-definition basis)
            defined.set('@protected', ctx['@protected'] || false); // process all other keys

            _context.t0 = regeneratorRuntime.keys(ctx);

          case 143:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 161;
              break;
            }

            _key = _context.t1.value;
            api.createTermDefinition({
              activeCtx: rval,
              localCtx: ctx,
              term: _key,
              defined: defined,
              options: options,
              overrideProtected: overrideProtected
            });

            if (!(_isObject(ctx[_key]) && '@context' in ctx[_key])) {
              _context.next = 159;
              break;
            }

            keyCtx = ctx[_key]['@context'];
            process = true;

            if (_isString(keyCtx)) {
              url = prependBase(options.base, keyCtx); // track processed contexts to avoid scoped context recursion

              if (cycles.has(url)) {
                process = false;
              } else {
                cycles.add(url);
              }
            } // parse context to validate


            if (!process) {
              _context.next = 159;
              break;
            }

            _context.prev = 151;
            _context.next = 154;
            return api.process({
              activeCtx: rval.clone(),
              localCtx: ctx[_key]['@context'],
              overrideProtected: true,
              options: options,
              cycles: cycles
            });

          case 154:
            _context.next = 159;
            break;

          case 156:
            _context.prev = 156;
            _context.t2 = _context["catch"](151);
            throw new JsonLdError('Invalid JSON-LD syntax; invalid scoped context.', 'jsonld.SyntaxError', {
              code: 'invalid scoped context',
              context: ctx[_key]['@context'],
              term: _key
            });

          case 159:
            _context.next = 143;
            break;

          case 161:
            // cache processed result
            resolvedContext.setProcessed(activeCtx, rval);

          case 162:
            _context.next = 14;
            break;

          case 164:
            _context.next = 169;
            break;

          case 166:
            _context.prev = 166;
            _context.t3 = _context["catch"](12);

            _iterator.e(_context.t3);

          case 169:
            _context.prev = 169;

            _iterator.f();

            return _context.finish(169);

          case 172:
            return _context.abrupt("return", rval);

          case 173:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[12, 166, 169, 172], [151, 156]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Creates a term definition during context processing.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context being processed.
 * @param term the term in the local context to define the mapping for.
 * @param defined a map of defining/defined keys to detect cycles and prevent
 *          double definitions.
 * @param {Object} [options] - creation options.
 * @param {string} [options.protectedMode="error"] - "error" to throw error
 *   on `@protected` constraint violation, "warn" to allow violations and
 *   signal a warning.
 * @param overrideProtected `false` allows protected terms to be modified.
 */


api.createTermDefinition = function (_ref3) {
  var activeCtx = _ref3.activeCtx,
      localCtx = _ref3.localCtx,
      term = _ref3.term,
      defined = _ref3.defined,
      options = _ref3.options,
      _ref3$overrideProtect = _ref3.overrideProtected,
      overrideProtected = _ref3$overrideProtect === void 0 ? false : _ref3$overrideProtect;

  if (defined.has(term)) {
    // term already defined
    if (defined.get(term)) {
      return;
    } // cycle detected


    throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {
      code: 'cyclic IRI mapping',
      context: localCtx,
      term: term
    });
  } // now defining term


  defined.set(term, false); // get context term value

  var value;

  if (localCtx.hasOwnProperty(term)) {
    value = localCtx[term];
  }

  if (term === '@type' && _isObject(value) && (value['@container'] || '@set') === '@set' && api.processingMode(activeCtx, 1.1)) {
    var _validKeys = ['@container', '@id', '@protected'];
    var keys = Object.keys(value);

    if (keys.length === 0 || keys.some(function (k) {
      return !_validKeys.includes(k);
    })) {
      throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {
        code: 'keyword redefinition',
        context: localCtx,
        term: term
      });
    }
  } else if (api.isKeyword(term)) {
    throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {
      code: 'keyword redefinition',
      context: localCtx,
      term: term
    });
  } else if (term.match(KEYWORD_PATTERN)) {
    // FIXME: remove logging and use a handler
    console.warn('WARNING: terms beginning with "@" are reserved' + ' for future use and ignored', {
      term: term
    });
    return;
  } else if (term === '') {
    throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {
      code: 'invalid term definition',
      context: localCtx
    });
  } // keep reference to previous mapping for potential `@protected` check


  var previousMapping = activeCtx.mappings.get(term); // remove old mapping

  if (activeCtx.mappings.has(term)) {
    activeCtx.mappings["delete"](term);
  } // convert short-hand value to object w/@id


  var simpleTerm = false;

  if (_isString(value) || value === null) {
    simpleTerm = true;
    value = {
      '@id': value
    };
  }

  if (!_isObject(value)) {
    throw new JsonLdError('Invalid JSON-LD syntax; @context term values must be ' + 'strings or objects.', 'jsonld.SyntaxError', {
      code: 'invalid term definition',
      context: localCtx
    });
  } // create new mapping


  var mapping = {};
  activeCtx.mappings.set(term, mapping);
  mapping.reverse = false; // make sure term definition only has expected keywords

  var validKeys = ['@container', '@id', '@language', '@reverse', '@type']; // JSON-LD 1.1 support

  if (api.processingMode(activeCtx, 1.1)) {
    validKeys.push('@context', '@direction', '@index', '@nest', '@prefix', '@protected');
  }

  for (var kw in value) {
    if (!validKeys.includes(kw)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }
  } // always compute whether term has a colon as an optimization for
  // _compactIri


  var colon = term.indexOf(':');
  mapping._termHasColon = colon > 0;

  if ('@reverse' in value) {
    if ('@id' in value) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @id.', 'jsonld.SyntaxError', {
        code: 'invalid reverse property',
        context: localCtx
      });
    }

    if ('@nest' in value) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @nest.', 'jsonld.SyntaxError', {
        code: 'invalid reverse property',
        context: localCtx
      });
    }

    var reverse = value['@reverse'];

    if (!_isString(reverse)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {
        code: 'invalid IRI mapping',
        context: localCtx
      });
    }

    if (!api.isKeyword(reverse) && reverse.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' + ' for future use and ignored', {
        reverse: reverse
      });

      if (previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings["delete"](term);
      }

      return;
    } // expand and add @id mapping


    var _id = _expandIri(activeCtx, reverse, {
      vocab: true,
      base: false
    }, localCtx, defined, options);

    if (!_isAbsoluteIri(_id)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be an ' + 'absolute IRI or a blank node identifier.', 'jsonld.SyntaxError', {
        code: 'invalid IRI mapping',
        context: localCtx
      });
    }

    mapping['@id'] = _id;
    mapping.reverse = true;
  } else if ('@id' in value) {
    var _id2 = value['@id'];

    if (_id2 && !_isString(_id2)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an array ' + 'of strings or a string.', 'jsonld.SyntaxError', {
        code: 'invalid IRI mapping',
        context: localCtx
      });
    }

    if (_id2 === null) {
      // reserve a null term, which may be protected
      mapping['@id'] = null;
    } else if (!api.isKeyword(_id2) && _id2.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' + ' for future use and ignored', {
        id: _id2
      });

      if (previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings["delete"](term);
      }

      return;
    } else if (_id2 !== term) {
      // expand and add @id mapping
      _id2 = _expandIri(activeCtx, _id2, {
        vocab: true,
        base: false
      }, localCtx, defined, options);

      if (!_isAbsoluteIri(_id2) && !api.isKeyword(_id2)) {
        throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an ' + 'absolute IRI, a blank node identifier, or a keyword.', 'jsonld.SyntaxError', {
          code: 'invalid IRI mapping',
          context: localCtx
        });
      } // if term has the form of an IRI it must map the same


      if (term.match(/(?::[^:])|\//)) {
        var termDefined = new Map(defined).set(term, true);

        var termIri = _expandIri(activeCtx, term, {
          vocab: true,
          base: false
        }, localCtx, termDefined, options);

        if (termIri !== _id2) {
          throw new JsonLdError('Invalid JSON-LD syntax; term in form of IRI must ' + 'expand to definition.', 'jsonld.SyntaxError', {
            code: 'invalid IRI mapping',
            context: localCtx
          });
        }
      }

      mapping['@id'] = _id2; // indicate if this term may be used as a compact IRI prefix

      mapping._prefix = simpleTerm && !mapping._termHasColon && _id2.match(/[:\/\?#\[\]@]$/);
    }
  }

  if (!('@id' in mapping)) {
    // see if the term has a prefix
    if (mapping._termHasColon) {
      var prefix = term.substr(0, colon);

      if (localCtx.hasOwnProperty(prefix)) {
        // define parent prefix
        api.createTermDefinition({
          activeCtx: activeCtx,
          localCtx: localCtx,
          term: prefix,
          defined: defined,
          options: options
        });
      }

      if (activeCtx.mappings.has(prefix)) {
        // set @id based on prefix parent
        var suffix = term.substr(colon + 1);
        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;
      } else {
        // term is an absolute IRI
        mapping['@id'] = term;
      }
    } else if (term === '@type') {
      // Special case, were we've previously determined that container is @set
      mapping['@id'] = term;
    } else {
      // non-IRIs *must* define @ids if @vocab is not available
      if (!('@vocab' in activeCtx)) {
        throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {
          code: 'invalid IRI mapping',
          context: localCtx,
          term: term
        });
      } // prepend vocab to term


      mapping['@id'] = activeCtx['@vocab'] + term;
    }
  } // Handle term protection


  if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {
    activeCtx["protected"][term] = true;
    mapping["protected"] = true;
  } // IRI mapping now defined


  defined.set(term, true);

  if ('@type' in value) {
    var type = value['@type'];

    if (!_isString(type)) {
      throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {
        code: 'invalid type mapping',
        context: localCtx
      });
    }

    if (type === '@json' || type === '@none') {
      if (api.processingMode(activeCtx, 1.0)) {
        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must not be ' + "\"".concat(type, "\" in JSON-LD 1.0 mode."), 'jsonld.SyntaxError', {
          code: 'invalid type mapping',
          context: localCtx
        });
      }
    } else if (type !== '@id' && type !== '@vocab') {
      // expand @type to full IRI
      type = _expandIri(activeCtx, type, {
        vocab: true,
        base: false
      }, localCtx, defined, options);

      if (!_isAbsoluteIri(type)) {
        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an ' + 'absolute IRI.', 'jsonld.SyntaxError', {
          code: 'invalid type mapping',
          context: localCtx
        });
      }

      if (type.indexOf('_:') === 0) {
        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an IRI, ' + 'not a blank node identifier.', 'jsonld.SyntaxError', {
          code: 'invalid type mapping',
          context: localCtx
        });
      }
    } // add @type to mapping


    mapping['@type'] = type;
  }

  if ('@container' in value) {
    // normalize container to an array form
    var container = _isString(value['@container']) ? [value['@container']] : value['@container'] || [];
    var validContainers = ['@list', '@set', '@index', '@language'];
    var isValid = true;
    var hasSet = container.includes('@set'); // JSON-LD 1.1 support

    if (api.processingMode(activeCtx, 1.1)) {
      validContainers.push('@graph', '@id', '@type'); // check container length

      if (container.includes('@list')) {
        if (container.length !== 1) {
          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @list must ' + 'have no other values', 'jsonld.SyntaxError', {
            code: 'invalid container mapping',
            context: localCtx
          });
        }
      } else if (container.includes('@graph')) {
        if (container.some(function (key) {
          return key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set';
        })) {
          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @graph must ' + 'have no other values other than @id, @index, and @set', 'jsonld.SyntaxError', {
            code: 'invalid container mapping',
            context: localCtx
          });
        }
      } else {
        // otherwise, container may also include @set
        isValid &= container.length <= (hasSet ? 2 : 1);
      }

      if (container.includes('@type')) {
        // If mapping does not have an @type,
        // set it to @id
        mapping['@type'] = mapping['@type'] || '@id'; // type mapping must be either @id or @vocab

        if (!['@id', '@vocab'].includes(mapping['@type'])) {
          throw new JsonLdError('Invalid JSON-LD syntax; container: @type requires @type to be ' + '@id or @vocab.', 'jsonld.SyntaxError', {
            code: 'invalid type mapping',
            context: localCtx
          });
        }
      }
    } else {
      // in JSON-LD 1.0, container must not be an array (it must be a string,
      // which is one of the validContainers)
      isValid &= !_isArray(value['@container']); // check container length

      isValid &= container.length <= 1;
    } // check against valid containers


    isValid &= container.every(function (c) {
      return validContainers.includes(c);
    }); // @set not allowed with @list

    isValid &= !(hasSet && container.includes('@list'));

    if (!isValid) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value must be ' + 'one of the following: ' + validContainers.join(', '), 'jsonld.SyntaxError', {
        code: 'invalid container mapping',
        context: localCtx
      });
    }

    if (mapping.reverse && !container.every(function (c) {
      return ['@index', '@set'].includes(c);
    })) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value for a @reverse ' + 'type definition must be @index or @set.', 'jsonld.SyntaxError', {
        code: 'invalid reverse property',
        context: localCtx
      });
    } // add @container to mapping


    mapping['@container'] = container;
  } // property indexing


  if ('@index' in value) {
    if (!('@container' in value) || !mapping['@container'].includes('@index')) {
      throw new JsonLdError('Invalid JSON-LD syntax; @index without @index in @container: ' + "\"".concat(value['@index'], "\" on term \"").concat(term, "\"."), 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    if (!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {
      throw new JsonLdError('Invalid JSON-LD syntax; @index must expand to an IRI: ' + "\"".concat(value['@index'], "\" on term \"").concat(term, "\"."), 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    mapping['@index'] = value['@index'];
  } // scoped contexts


  if ('@context' in value) {
    mapping['@context'] = value['@context'];
  }

  if ('@language' in value && !('@type' in value)) {
    var language = value['@language'];

    if (language !== null && !_isString(language)) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @language value must be ' + 'a string or null.', 'jsonld.SyntaxError', {
        code: 'invalid language mapping',
        context: localCtx
      });
    } // add @language to mapping


    if (language !== null) {
      language = language.toLowerCase();
    }

    mapping['@language'] = language;
  } // term may be used as a prefix


  if ('@prefix' in value) {
    if (term.match(/:|\//)) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    if (api.isKeyword(mapping['@id'])) {
      throw new JsonLdError('Invalid JSON-LD syntax; keywords may not be used as prefixes', 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    if (typeof value['@prefix'] === 'boolean') {
      mapping._prefix = value['@prefix'] === true;
    } else {
      throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {
        code: 'invalid @prefix value',
        context: localCtx
      });
    }
  }

  if ('@direction' in value) {
    var direction = value['@direction'];

    if (direction !== null && direction !== 'ltr' && direction !== 'rtl') {
      throw new JsonLdError('Invalid JSON-LD syntax; @direction value must be ' + 'null, "ltr", or "rtl".', 'jsonld.SyntaxError', {
        code: 'invalid base direction',
        context: localCtx
      });
    }

    mapping['@direction'] = direction;
  }

  if ('@nest' in value) {
    var nest = value['@nest'];

    if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @nest value must be ' + 'a string which is not a keyword other than @nest.', 'jsonld.SyntaxError', {
        code: 'invalid @nest value',
        context: localCtx
      });
    }

    mapping['@nest'] = nest;
  } // disallow aliasing @context and @preserve


  var id = mapping['@id'];

  if (id === '@context' || id === '@preserve') {
    throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {
      code: 'invalid keyword alias',
      context: localCtx
    });
  } // Check for overriding protected terms


  if (previousMapping && previousMapping["protected"] && !overrideProtected) {
    // force new term to continue to be protected and see if the mappings would
    // be equal
    activeCtx["protected"][term] = true;
    mapping["protected"] = true;

    if (!_deepCompare(previousMapping, mapping)) {
      var protectedMode = options && options.protectedMode || 'error';

      if (protectedMode === 'error') {
        throw new JsonLdError("Invalid JSON-LD syntax; tried to redefine \"".concat(term, "\" which is a ") + 'protected term.', 'jsonld.SyntaxError', {
          code: 'protected term redefinition',
          context: localCtx,
          term: term
        });
      } else if (protectedMode === 'warn') {
        // FIXME: remove logging and use a handler
        console.warn('WARNING: protected term redefinition', {
          term: term
        });
        return;
      }

      throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {
        code: 'invalid protected mode',
        context: localCtx,
        term: term,
        protectedMode: protectedMode
      });
    }
  }
};
/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */


api.expandIri = function (activeCtx, value, relativeTo, options) {
  return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);
};
/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param localCtx the local context being processed (only given if called
 *          during context processing).
 * @param defined a map for tracking cycles in context definitions (only given
 *          if called during context processing).
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */


function _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {
  // already expanded
  if (value === null || !_isString(value) || api.isKeyword(value)) {
    return value;
  } // ignore non-keyword things that look like a keyword


  if (value.match(KEYWORD_PATTERN)) {
    return null;
  } // define term dependency if not defined


  if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) {
    api.createTermDefinition({
      activeCtx: activeCtx,
      localCtx: localCtx,
      term: value,
      defined: defined,
      options: options
    });
  }

  relativeTo = relativeTo || {};

  if (relativeTo.vocab) {
    var mapping = activeCtx.mappings.get(value); // value is explicitly ignored with a null mapping

    if (mapping === null) {
      return null;
    }

    if (_isObject(mapping) && '@id' in mapping) {
      // value is a term
      return mapping['@id'];
    }
  } // split value into prefix:suffix


  var colon = value.indexOf(':');

  if (colon > 0) {
    var prefix = value.substr(0, colon);
    var suffix = value.substr(colon + 1); // do not expand blank nodes (prefix of '_') or already-absolute
    // IRIs (suffix of '//')

    if (prefix === '_' || suffix.indexOf('//') === 0) {
      return value;
    } // prefix dependency not defined, define it


    if (localCtx && localCtx.hasOwnProperty(prefix)) {
      api.createTermDefinition({
        activeCtx: activeCtx,
        localCtx: localCtx,
        term: prefix,
        defined: defined,
        options: options
      });
    } // use mapping if prefix is defined


    var _mapping = activeCtx.mappings.get(prefix);

    if (_mapping && _mapping._prefix) {
      return _mapping['@id'] + suffix;
    } // already absolute IRI


    if (_isAbsoluteIri(value)) {
      return value;
    }
  } // prepend vocab


  if (relativeTo.vocab && '@vocab' in activeCtx) {
    return activeCtx['@vocab'] + value;
  } // prepend base


  if (relativeTo.base && '@base' in activeCtx) {
    if (activeCtx['@base']) {
      // The null case preserves value as potentially relative
      return prependBase(prependBase(options.base, activeCtx['@base']), value);
    }
  } else if (relativeTo.base) {
    return prependBase(options.base, value);
  }

  return value;
}
/**
 * Gets the initial context.
 *
 * @param options the options to use:
 *          [base] the document base IRI.
 *
 * @return the initial context.
 */


api.getInitialContext = function (options) {
  var key = JSON.stringify({
    processingMode: options.processingMode
  });
  var cached = INITIAL_CONTEXT_CACHE.get(key);

  if (cached) {
    return cached;
  }

  var initialContext = {
    processingMode: options.processingMode,
    mappings: new Map(),
    inverse: null,
    getInverse: _createInverseContext,
    clone: _cloneActiveContext,
    revertToPreviousContext: _revertToPreviousContext,
    "protected": {}
  }; // TODO: consider using LRU cache instead

  if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {
    // clear whole cache -- assumes scenario where the cache fills means
    // the cache isn't being used very efficiently anyway
    INITIAL_CONTEXT_CACHE.clear();
  }

  INITIAL_CONTEXT_CACHE.set(key, initialContext);
  return initialContext;
  /**
   * Generates an inverse context for use in the compaction algorithm, if
   * not already generated for the given active context.
   *
   * @return the inverse context.
   */

  function _createInverseContext() {
    var activeCtx = this; // lazily create inverse

    if (activeCtx.inverse) {
      return activeCtx.inverse;
    }

    var inverse = activeCtx.inverse = {}; // variables for building fast CURIE map

    var fastCurieMap = activeCtx.fastCurieMap = {};
    var irisToTerms = {}; // handle default language

    var defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase(); // handle default direction

    var defaultDirection = activeCtx['@direction']; // create term selections for each mapping in the context, ordered by
    // shortest and then lexicographically least

    var mappings = activeCtx.mappings;

    var terms = _toConsumableArray(mappings.keys()).sort(_compareShortestLeast);

    var _iterator2 = _createForOfIteratorHelper(terms),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var term = _step2.value;
        var mapping = mappings.get(term);

        if (mapping === null) {
          continue;
        }

        var container = mapping['@container'] || '@none';
        container = [].concat(container).sort().join('');

        if (mapping['@id'] === null) {
          continue;
        } // iterate over every IRI in the mapping


        var ids = _asArray(mapping['@id']);

        var _iterator3 = _createForOfIteratorHelper(ids),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var iri = _step3.value;
            var entry = inverse[iri];
            var isKeyword = api.isKeyword(iri);

            if (!entry) {
              // initialize entry
              inverse[iri] = entry = {};

              if (!isKeyword && !mapping._termHasColon) {
                // init IRI to term map and fast CURIE prefixes
                irisToTerms[iri] = [term];
                var fastCurieEntry = {
                  iri: iri,
                  terms: irisToTerms[iri]
                };

                if (iri[0] in fastCurieMap) {
                  fastCurieMap[iri[0]].push(fastCurieEntry);
                } else {
                  fastCurieMap[iri[0]] = [fastCurieEntry];
                }
              }
            } else if (!isKeyword && !mapping._termHasColon) {
              // add IRI to term match
              irisToTerms[iri].push(term);
            } // add new entry


            if (!entry[container]) {
              entry[container] = {
                '@language': {},
                '@type': {},
                '@any': {}
              };
            }

            entry = entry[container];

            _addPreferredTerm(term, entry['@any'], '@none');

            if (mapping.reverse) {
              // term is preferred for values using @reverse
              _addPreferredTerm(term, entry['@type'], '@reverse');
            } else if (mapping['@type'] === '@none') {
              _addPreferredTerm(term, entry['@any'], '@none');

              _addPreferredTerm(term, entry['@language'], '@none');

              _addPreferredTerm(term, entry['@type'], '@none');
            } else if ('@type' in mapping) {
              // term is preferred for values using specific type
              _addPreferredTerm(term, entry['@type'], mapping['@type']);
            } else if ('@language' in mapping && '@direction' in mapping) {
              // term is preferred for values using specific language and direction
              var language = mapping['@language'];
              var direction = mapping['@direction'];

              if (language && direction) {
                _addPreferredTerm(term, entry['@language'], "".concat(language, "_").concat(direction).toLowerCase());
              } else if (language) {
                _addPreferredTerm(term, entry['@language'], language.toLowerCase());
              } else if (direction) {
                _addPreferredTerm(term, entry['@language'], "_".concat(direction));
              } else {
                _addPreferredTerm(term, entry['@language'], '@null');
              }
            } else if ('@language' in mapping) {
              _addPreferredTerm(term, entry['@language'], (mapping['@language'] || '@null').toLowerCase());
            } else if ('@direction' in mapping) {
              if (mapping['@direction']) {
                _addPreferredTerm(term, entry['@language'], "_".concat(mapping['@direction']));
              } else {
                _addPreferredTerm(term, entry['@language'], '@none');
              }
            } else if (defaultDirection) {
              _addPreferredTerm(term, entry['@language'], "_".concat(defaultDirection));

              _addPreferredTerm(term, entry['@language'], '@none');

              _addPreferredTerm(term, entry['@type'], '@none');
            } else {
              // add entries for no type and no language
              _addPreferredTerm(term, entry['@language'], defaultLanguage);

              _addPreferredTerm(term, entry['@language'], '@none');

              _addPreferredTerm(term, entry['@type'], '@none');
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      } // build fast CURIE map

    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    for (var _key2 in fastCurieMap) {
      _buildIriMap(fastCurieMap, _key2, 1);
    }

    return inverse;
  }
  /**
   * Runs a recursive algorithm to build a lookup map for quickly finding
   * potential CURIEs.
   *
   * @param iriMap the map to build.
   * @param key the current key in the map to work on.
   * @param idx the index into the IRI to compare.
   */


  function _buildIriMap(iriMap, key, idx) {
    var entries = iriMap[key];
    var next = iriMap[key] = {};
    var iri;
    var letter;

    var _iterator4 = _createForOfIteratorHelper(entries),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var entry = _step4.value;
        iri = entry.iri;

        if (idx >= iri.length) {
          letter = '';
        } else {
          letter = iri[idx];
        }

        if (letter in next) {
          next[letter].push(entry);
        } else {
          next[letter] = [entry];
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    for (var _key3 in next) {
      if (_key3 === '') {
        continue;
      }

      _buildIriMap(next, _key3, idx + 1);
    }
  }
  /**
   * Adds the term for the given entry if not already added.
   *
   * @param term the term to add.
   * @param entry the inverse context typeOrLanguage entry to add to.
   * @param typeOrLanguageValue the key in the entry to add to.
   */


  function _addPreferredTerm(term, entry, typeOrLanguageValue) {
    if (!entry.hasOwnProperty(typeOrLanguageValue)) {
      entry[typeOrLanguageValue] = term;
    }
  }
  /**
   * Clones an active context, creating a child active context.
   *
   * @return a clone (child) of the active context.
   */


  function _cloneActiveContext() {
    var child = {};
    child.mappings = util.clone(this.mappings);
    child.clone = this.clone;
    child.inverse = null;
    child.getInverse = this.getInverse;
    child["protected"] = util.clone(this["protected"]);

    if (this.previousContext) {
      child.previousContext = this.previousContext.clone();
    }

    child.revertToPreviousContext = this.revertToPreviousContext;

    if ('@base' in this) {
      child['@base'] = this['@base'];
    }

    if ('@language' in this) {
      child['@language'] = this['@language'];
    }

    if ('@vocab' in this) {
      child['@vocab'] = this['@vocab'];
    }

    return child;
  }
  /**
   * Reverts any type-scoped context in this active context to the previous
   * context.
   */


  function _revertToPreviousContext() {
    if (!this.previousContext) {
      return this;
    }

    return this.previousContext.clone();
  }
};
/**
 * Gets the value for the given active context key and type, null if none is
 * set or undefined if none is set and type is '@context'.
 *
 * @param ctx the active context.
 * @param key the context key.
 * @param [type] the type of value to get (eg: '@id', '@type'), if not
 *          specified gets the entire entry for a key, null if not found.
 *
 * @return the value, null, or undefined.
 */


api.getContextValue = function (ctx, key, type) {
  // invalid key
  if (key === null) {
    if (type === '@context') {
      return undefined;
    }

    return null;
  } // get specific entry information


  if (ctx.mappings.has(key)) {
    var entry = ctx.mappings.get(key);

    if (_isUndefined(type)) {
      // return whole entry
      return entry;
    }

    if (entry.hasOwnProperty(type)) {
      // return entry value for type
      return entry[type];
    }
  } // get default language


  if (type === '@language' && type in ctx) {
    return ctx[type];
  } // get default direction


  if (type === '@direction' && type in ctx) {
    return ctx[type];
  }

  if (type === '@context') {
    return undefined;
  }

  return null;
};
/**
 * Processing Mode check.
 *
 * @param activeCtx the current active context.
 * @param version the string or numeric version to check.
 *
 * @return boolean.
 */


api.processingMode = function (activeCtx, version) {
  if (version.toString() >= '1.1') {
    return !activeCtx.processingMode || activeCtx.processingMode >= 'json-ld-' + version.toString();
  } else {
    return activeCtx.processingMode === 'json-ld-1.0';
  }
};
/**
 * Returns whether or not the given value is a keyword.
 *
 * @param v the value to check.
 *
 * @return true if the value is a keyword, false if not.
 */


api.isKeyword = function (v) {
  if (!_isString(v) || v[0] !== '@') {
    return false;
  }

  switch (v) {
    case '@base':
    case '@container':
    case '@context':
    case '@default':
    case '@direction':
    case '@embed':
    case '@explicit':
    case '@graph':
    case '@id':
    case '@included':
    case '@index':
    case '@json':
    case '@language':
    case '@list':
    case '@nest':
    case '@none':
    case '@omitDefault':
    case '@prefix':
    case '@preserve':
    case '@protected':
    case '@requireAll':
    case '@reverse':
    case '@set':
    case '@type':
    case '@value':
    case '@version':
    case '@vocab':
      return true;
  }

  return false;
};

function _deepCompare(x1, x2) {
  // compare `null` or primitive types directly
  if (!(x1 && _typeof(x1) === 'object') || !(x2 && _typeof(x2) === 'object')) {
    return x1 === x2;
  } // x1 and x2 are objects (also potentially arrays)


  var x1Array = Array.isArray(x1);

  if (x1Array !== Array.isArray(x2)) {
    return false;
  }

  if (x1Array) {
    if (x1.length !== x2.length) {
      return false;
    }

    for (var i = 0; i < x1.length; ++i) {
      if (!_deepCompare(x1[i], x2[i])) {
        return false;
      }
    }

    return true;
  } // x1 and x2 are non-array objects


  var k1s = Object.keys(x1);
  var k2s = Object.keys(x2);

  if (k1s.length !== k2s.length) {
    return false;
  }

  for (var k1 in x1) {
    var v1 = x1[k1];
    var v2 = x2[k1]; // special case: `@container` can be in any order

    if (k1 === '@container') {
      if (Array.isArray(v1) && Array.isArray(v2)) {
        v1 = v1.slice().sort();
        v2 = v2.slice().sort();
      }
    }

    if (!_deepCompare(v1, v2)) {
      return false;
    }
  }

  return true;
}

/***/ }),

/***/ 83626:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(88336),
    parseLinkHeader = _require.parseLinkHeader,
    buildHeaders = _require.buildHeaders;

var _require2 = __webpack_require__(17668),
    LINK_HEADER_CONTEXT = _require2.LINK_HEADER_CONTEXT;

var JsonLdError = __webpack_require__(3275);

var RequestQueue = __webpack_require__(48624);

var _require3 = __webpack_require__(41528),
    prependBase = _require3.prependBase;

var REGEX_LINK_HEADER = /(^|(\r\n))link:/i;
/**
 * Creates a built-in XMLHttpRequest document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          headers: an object (map) of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *          [xhr]: the XMLHttpRequest API to use.
 *
 * @return the XMLHttpRequest document loader.
 */

module.exports = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    headers: {}
  },
      secure = _ref.secure,
      _ref$headers = _ref.headers,
      headers = _ref$headers === void 0 ? {} : _ref$headers,
      xhr = _ref.xhr;

  headers = buildHeaders(headers);
  var queue = new RequestQueue();
  return queue.wrapLoader(loader);

  function loader(_x) {
    return _loader.apply(this, arguments);
  }

  function _loader() {
    _loader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
      var req, doc, alternate, contentType, linkHeader, linkHeaders, linkedContext;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0)) {
                _context.next = 2;
                break;
              }

              throw new JsonLdError('URL could not be dereferenced; only "http" and "https" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {
                code: 'loading document failed',
                url: url
              });

            case 2:
              if (!(secure && url.indexOf('https') !== 0)) {
                _context.next = 4;
                break;
              }

              throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\'s scheme is not "https".', 'jsonld.InvalidUrl', {
                code: 'loading document failed',
                url: url
              });

            case 4:
              _context.prev = 4;
              _context.next = 7;
              return _get(xhr, url, headers);

            case 7:
              req = _context.sent;
              _context.next = 13;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](4);
              throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {
                code: 'loading document failed',
                url: url,
                cause: _context.t0
              });

            case 13:
              if (!(req.status >= 400)) {
                _context.next = 15;
                break;
              }

              throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {
                code: 'loading document failed',
                url: url,
                httpStatusCode: req.status
              });

            case 15:
              doc = {
                contextUrl: null,
                documentUrl: url,
                document: req.response
              };
              alternate = null; // handle Link Header (avoid unsafe header warning by existence testing)

              contentType = req.getResponseHeader('Content-Type');

              if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {
                linkHeader = req.getResponseHeader('Link');
              }

              if (!(linkHeader && contentType !== 'application/ld+json')) {
                _context.next = 30;
                break;
              }

              // only 1 related link header permitted
              linkHeaders = parseLinkHeader(linkHeader);
              linkedContext = linkHeaders[LINK_HEADER_CONTEXT];

              if (!Array.isArray(linkedContext)) {
                _context.next = 24;
                break;
              }

              throw new JsonLdError('URL could not be dereferenced, it has more than one ' + 'associated HTTP Link Header.', 'jsonld.InvalidUrl', {
                code: 'multiple context link headers',
                url: url
              });

            case 24:
              if (linkedContext) {
                doc.contextUrl = linkedContext.target;
              } // "alternate" link header is a redirect


              alternate = linkHeaders['alternate'];

              if (!(alternate && alternate.type == 'application/ld+json' && !(contentType || '').match(/^application\/(\w*\+)?json$/))) {
                _context.next = 30;
                break;
              }

              _context.next = 29;
              return loader(prependBase(url, alternate.target));

            case 29:
              doc = _context.sent;

            case 30:
              return _context.abrupt("return", doc);

            case 31:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 10]]);
    }));
    return _loader.apply(this, arguments);
  }
};

function _get(xhr, url, headers) {
  xhr = xhr || XMLHttpRequest;
  var req = new xhr();
  return new Promise(function (resolve, reject) {
    req.onload = function () {
      return resolve(req);
    };

    req.onerror = function (err) {
      return reject(err);
    };

    req.open('GET', url, true);

    for (var k in headers) {
      req.setRequestHeader(k, headers[k]);
    }

    req.send();
  });
}

/***/ }),

/***/ 73558:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(85271);
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var JsonLdError = __webpack_require__(3275);

var _require = __webpack_require__(4319),
    _isArray = _require.isArray,
    _isObject = _require.isObject,
    _isEmptyObject = _require.isEmptyObject,
    _isString = _require.isString,
    _isUndefined = _require.isUndefined;

var _require2 = __webpack_require__(61431),
    _isList = _require2.isList,
    _isValue = _require2.isValue,
    _isGraph = _require2.isGraph,
    _isSubject = _require2.isSubject;

var _require3 = __webpack_require__(15866),
    _expandIri = _require3.expandIri,
    _getContextValue = _require3.getContextValue,
    _isKeyword = _require3.isKeyword,
    _processContext = _require3.process,
    _processingMode = _require3.processingMode;

var _require4 = __webpack_require__(41528),
    _isAbsoluteIri = _require4.isAbsolute;

var _require5 = __webpack_require__(88336),
    _addValue = _require5.addValue,
    _asArray = _require5.asArray,
    _getValues = _require5.getValues,
    _validateTypeValue = _require5.validateTypeValue;

var api = {};
module.exports = api;
var REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
/**
 * Recursively expands an element using the given context. Any context in
 * the element will be removed. All context URLs must have been retrieved
 * before calling this method.
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element, null for none.
 * @param element the element to expand.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param insideIndex true if the element is inside an index container,
 *          false if not.
 * @param typeScopedContext an optional type-scoped active context for
 *          expanding values of nodes that were expressed according to
 *          a type-scoped context.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 *
 * @return a Promise that resolves to the expanded value.
 */

api.expand = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var activeCtx, _ref$activeProperty, activeProperty, element, _ref$options, options, _ref$insideList, insideList, _ref$insideIndex, insideIndex, _ref$typeScopedContex, typeScopedContext, _ref$expansionMap, expansionMap, mapped, _rval, container, i, e, expandedActiveProperty, propertyScopedCtx, keys, mustRevert, _iterator, _step, key, expandedProperty, typeKey, _iterator2, _step2, _key, _expandedProperty, value, _types, _iterator3, _step3, type, ctx, rval, count, validCount, values, types, _mapped, _mapped2, _mapped3;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            activeCtx = _ref.activeCtx, _ref$activeProperty = _ref.activeProperty, activeProperty = _ref$activeProperty === void 0 ? null : _ref$activeProperty, element = _ref.element, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, _ref$insideList = _ref.insideList, insideList = _ref$insideList === void 0 ? false : _ref$insideList, _ref$insideIndex = _ref.insideIndex, insideIndex = _ref$insideIndex === void 0 ? false : _ref$insideIndex, _ref$typeScopedContex = _ref.typeScopedContext, typeScopedContext = _ref$typeScopedContex === void 0 ? null : _ref$typeScopedContex, _ref$expansionMap = _ref.expansionMap, expansionMap = _ref$expansionMap === void 0 ? function () {
              return undefined;
            } : _ref$expansionMap;

            if (!(element === null || element === undefined)) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", null);

          case 3:
            // disable framing if activeProperty is @default
            if (activeProperty === '@default') {
              options = Object.assign({}, options, {
                isFrame: false
              });
            }

            if (!(!_isArray(element) && !_isObject(element))) {
              _context.next = 13;
              break;
            }

            if (!(!insideList && (activeProperty === null || _expandIri(activeCtx, activeProperty, {
              vocab: true
            }, options) === '@graph'))) {
              _context.next = 12;
              break;
            }

            _context.next = 8;
            return expansionMap({
              unmappedValue: element,
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              options: options,
              insideList: insideList
            });

          case 8:
            mapped = _context.sent;

            if (!(mapped === undefined)) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return", null);

          case 11:
            return _context.abrupt("return", mapped);

          case 12:
            return _context.abrupt("return", _expandValue({
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              value: element,
              options: options
            }));

          case 13:
            if (!_isArray(element)) {
              _context.next = 34;
              break;
            }

            _rval = [];
            container = _getContextValue(activeCtx, activeProperty, '@container') || [];
            insideList = insideList || container.includes('@list');
            i = 0;

          case 18:
            if (!(i < element.length)) {
              _context.next = 33;
              break;
            }

            _context.next = 21;
            return api.expand({
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              element: element[i],
              options: options,
              expansionMap: expansionMap,
              insideIndex: insideIndex,
              typeScopedContext: typeScopedContext
            });

          case 21:
            e = _context.sent;

            if (insideList && _isArray(e)) {
              e = {
                '@list': e
              };
            }

            if (!(e === null)) {
              _context.next = 29;
              break;
            }

            _context.next = 26;
            return expansionMap({
              unmappedValue: element[i],
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              parent: element,
              index: i,
              options: options,
              expandedParent: _rval,
              insideList: insideList
            });

          case 26:
            e = _context.sent;

            if (!(e === undefined)) {
              _context.next = 29;
              break;
            }

            return _context.abrupt("continue", 30);

          case 29:
            if (_isArray(e)) {
              _rval = _rval.concat(e);
            } else {
              _rval.push(e);
            }

          case 30:
            ++i;
            _context.next = 18;
            break;

          case 33:
            return _context.abrupt("return", _rval);

          case 34:
            // recursively expand object:
            // first, expand the active property
            expandedActiveProperty = _expandIri(activeCtx, activeProperty, {
              vocab: true
            }, options); // Get any property-scoped context for activeProperty

            propertyScopedCtx = _getContextValue(activeCtx, activeProperty, '@context'); // second, determine if any type-scoped context should be reverted; it
            // should only be reverted when the following are all true:
            // 1. `element` is not a value or subject reference
            // 2. `insideIndex` is false

            typeScopedContext = typeScopedContext || (activeCtx.previousContext ? activeCtx : null);
            keys = Object.keys(element).sort();
            mustRevert = !insideIndex;

            if (!(mustRevert && typeScopedContext && keys.length <= 2 && !keys.includes('@context'))) {
              _context.next = 63;
              break;
            }

            _iterator = _createForOfIteratorHelper(keys);
            _context.prev = 41;

            _iterator.s();

          case 43:
            if ((_step = _iterator.n()).done) {
              _context.next = 55;
              break;
            }

            key = _step.value;
            expandedProperty = _expandIri(typeScopedContext, key, {
              vocab: true
            }, options);

            if (!(expandedProperty === '@value')) {
              _context.next = 50;
              break;
            }

            // value found, ensure type-scoped context is used to expand it
            mustRevert = false;
            activeCtx = typeScopedContext;
            return _context.abrupt("break", 55);

          case 50:
            if (!(expandedProperty === '@id' && keys.length === 1)) {
              _context.next = 53;
              break;
            }

            // subject reference found, do not revert
            mustRevert = false;
            return _context.abrupt("break", 55);

          case 53:
            _context.next = 43;
            break;

          case 55:
            _context.next = 60;
            break;

          case 57:
            _context.prev = 57;
            _context.t0 = _context["catch"](41);

            _iterator.e(_context.t0);

          case 60:
            _context.prev = 60;

            _iterator.f();

            return _context.finish(60);

          case 63:
            if (mustRevert) {
              // revert type scoped context
              activeCtx = activeCtx.revertToPreviousContext();
            } // apply property-scoped context after reverting term-scoped context


            if (_isUndefined(propertyScopedCtx)) {
              _context.next = 68;
              break;
            }

            _context.next = 67;
            return _processContext({
              activeCtx: activeCtx,
              localCtx: propertyScopedCtx,
              propagate: true,
              overrideProtected: true,
              options: options
            });

          case 67:
            activeCtx = _context.sent;

          case 68:
            if (!('@context' in element)) {
              _context.next = 72;
              break;
            }

            _context.next = 71;
            return _processContext({
              activeCtx: activeCtx,
              localCtx: element['@context'],
              options: options
            });

          case 71:
            activeCtx = _context.sent;

          case 72:
            // set the type-scoped context to the context on input, for use later
            typeScopedContext = activeCtx; // Remember the first key found expanding to @type

            typeKey = null; // look for scoped contexts on `@type`

            _iterator2 = _createForOfIteratorHelper(keys);
            _context.prev = 75;

            _iterator2.s();

          case 77:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 106;
              break;
            }

            _key = _step2.value;
            _expandedProperty = _expandIri(activeCtx, _key, {
              vocab: true
            }, options);

            if (!(_expandedProperty === '@type')) {
              _context.next = 104;
              break;
            }

            // set scoped contexts from @type
            // avoid sorting if possible
            typeKey = typeKey || _key;
            value = element[_key];
            _types = Array.isArray(value) ? value.length > 1 ? value.slice().sort() : value : [value];
            _iterator3 = _createForOfIteratorHelper(_types);
            _context.prev = 85;

            _iterator3.s();

          case 87:
            if ((_step3 = _iterator3.n()).done) {
              _context.next = 96;
              break;
            }

            type = _step3.value;
            ctx = _getContextValue(typeScopedContext, type, '@context');

            if (_isUndefined(ctx)) {
              _context.next = 94;
              break;
            }

            _context.next = 93;
            return _processContext({
              activeCtx: activeCtx,
              localCtx: ctx,
              options: options,
              propagate: false
            });

          case 93:
            activeCtx = _context.sent;

          case 94:
            _context.next = 87;
            break;

          case 96:
            _context.next = 101;
            break;

          case 98:
            _context.prev = 98;
            _context.t1 = _context["catch"](85);

            _iterator3.e(_context.t1);

          case 101:
            _context.prev = 101;

            _iterator3.f();

            return _context.finish(101);

          case 104:
            _context.next = 77;
            break;

          case 106:
            _context.next = 111;
            break;

          case 108:
            _context.prev = 108;
            _context.t2 = _context["catch"](75);

            _iterator2.e(_context.t2);

          case 111:
            _context.prev = 111;

            _iterator2.f();

            return _context.finish(111);

          case 114:
            // process each key and value in element, ignoring @nest content
            rval = {};
            _context.next = 117;
            return _expandObject({
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              expandedActiveProperty: expandedActiveProperty,
              element: element,
              expandedParent: rval,
              options: options,
              insideList: insideList,
              typeKey: typeKey,
              typeScopedContext: typeScopedContext,
              expansionMap: expansionMap
            });

          case 117:
            // get property count on expanded output
            keys = Object.keys(rval);
            count = keys.length;

            if (!('@value' in rval)) {
              _context.next = 149;
              break;
            }

            if (!('@type' in rval && ('@language' in rval || '@direction' in rval))) {
              _context.next = 122;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; an element containing "@value" may not ' + 'contain both "@type" and either "@language" or "@direction".', 'jsonld.SyntaxError', {
              code: 'invalid value object',
              element: rval
            });

          case 122:
            validCount = count - 1;

            if ('@type' in rval) {
              validCount -= 1;
            }

            if ('@index' in rval) {
              validCount -= 1;
            }

            if ('@language' in rval) {
              validCount -= 1;
            }

            if ('@direction' in rval) {
              validCount -= 1;
            }

            if (!(validCount !== 0)) {
              _context.next = 129;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; an element containing "@value" may only ' + 'have an "@index" property and either "@type" ' + 'or either or both "@language" or "@direction".', 'jsonld.SyntaxError', {
              code: 'invalid value object',
              element: rval
            });

          case 129:
            values = rval['@value'] === null ? [] : _asArray(rval['@value']);
            types = _getValues(rval, '@type'); // drop null @values unless custom mapped

            if (!(_processingMode(activeCtx, 1.1) && types.includes('@json') && types.length === 1)) {
              _context.next = 134;
              break;
            }

            _context.next = 147;
            break;

          case 134:
            if (!(values.length === 0)) {
              _context.next = 141;
              break;
            }

            _context.next = 137;
            return expansionMap({
              unmappedValue: rval,
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              element: element,
              options: options,
              insideList: insideList
            });

          case 137:
            _mapped = _context.sent;

            if (_mapped !== undefined) {
              rval = _mapped;
            } else {
              rval = null;
            }

            _context.next = 147;
            break;

          case 141:
            if (!(!values.every(function (v) {
              return _isString(v) || _isEmptyObject(v);
            }) && '@language' in rval)) {
              _context.next = 145;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; only strings may be language-tagged.', 'jsonld.SyntaxError', {
              code: 'invalid language-tagged value',
              element: rval
            });

          case 145:
            if (types.every(function (t) {
              return _isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) || _isEmptyObject(t);
            })) {
              _context.next = 147;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; an element containing "@value" and "@type" ' + 'must have an absolute IRI for the value of "@type".', 'jsonld.SyntaxError', {
              code: 'invalid typed value',
              element: rval
            });

          case 147:
            _context.next = 164;
            break;

          case 149:
            if (!('@type' in rval && !_isArray(rval['@type']))) {
              _context.next = 153;
              break;
            }

            // convert @type to an array
            rval['@type'] = [rval['@type']];
            _context.next = 164;
            break;

          case 153:
            if (!('@set' in rval || '@list' in rval)) {
              _context.next = 159;
              break;
            }

            if (!(count > 1 && !(count === 2 && '@index' in rval))) {
              _context.next = 156;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; if an element has the property "@set" ' + 'or "@list", then it can have at most one other property that is ' + '"@index".', 'jsonld.SyntaxError', {
              code: 'invalid set or list object',
              element: rval
            });

          case 156:
            // optimize away @set
            if ('@set' in rval) {
              rval = rval['@set'];
              keys = Object.keys(rval);
              count = keys.length;
            }

            _context.next = 164;
            break;

          case 159:
            if (!(count === 1 && '@language' in rval)) {
              _context.next = 164;
              break;
            }

            _context.next = 162;
            return expansionMap(rval, {
              unmappedValue: rval,
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              element: element,
              options: options,
              insideList: insideList
            });

          case 162:
            _mapped2 = _context.sent;

            if (_mapped2 !== undefined) {
              rval = _mapped2;
            } else {
              rval = null;
            }

          case 164:
            if (!(_isObject(rval) && !options.keepFreeFloatingNodes && !insideList && (activeProperty === null || expandedActiveProperty === '@graph'))) {
              _context.next = 170;
              break;
            }

            if (!(count === 0 || '@value' in rval || '@list' in rval || count === 1 && '@id' in rval)) {
              _context.next = 170;
              break;
            }

            _context.next = 168;
            return expansionMap({
              unmappedValue: rval,
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              element: element,
              options: options,
              insideList: insideList
            });

          case 168:
            _mapped3 = _context.sent;

            if (_mapped3 !== undefined) {
              rval = _mapped3;
            } else {
              rval = null;
            }

          case 170:
            return _context.abrupt("return", rval);

          case 171:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[41, 57, 60, 63], [75, 108, 111, 114], [85, 98, 101, 104]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Expand each key and value of element adding to result
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element.
 * @param expandedActiveProperty the expansion of activeProperty
 * @param element the element to expand.
 * @param expandedParent the expanded result into which to add values.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param typeKey first key found expanding to @type.
 * @param typeScopedContext the context before reverting.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 */


function _expandObject(_x2) {
  return _expandObject2.apply(this, arguments);
}
/**
 * Expands the given value by using the coercion and keyword rules in the
 * given context.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the active property the value is associated with.
 * @param value the value to expand.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */


function _expandObject2() {
  _expandObject2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {
    var activeCtx, activeProperty, expandedActiveProperty, element, expandedParent, _ref3$options, options, insideList, typeKey, typeScopedContext, expansionMap, keys, nests, unexpandedValue, isJsonType, _iterator6, _step6, _key2, value, expandedValue, expandedProperty, includedResult, _iterator8, _step8, lang, _iterator9, _step9, dir, property, reverseMap, _property, items, ii, item, termCtx, ctx, container, direction, asGraph, indexKey, propertyIndex, _asGraph, isList, nextActiveProperty, _reverseMap, _ii, _item, _i, _nests, key, nestedValues, _iterator7, _step7, nv;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            activeCtx = _ref3.activeCtx, activeProperty = _ref3.activeProperty, expandedActiveProperty = _ref3.expandedActiveProperty, element = _ref3.element, expandedParent = _ref3.expandedParent, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options, insideList = _ref3.insideList, typeKey = _ref3.typeKey, typeScopedContext = _ref3.typeScopedContext, expansionMap = _ref3.expansionMap;
            keys = Object.keys(element).sort();
            nests = [];
            // Figure out if this is the type for a JSON literal
            isJsonType = element[typeKey] && _expandIri(activeCtx, _isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey], {
              vocab: true
            }, options) === '@json';
            _iterator6 = _createForOfIteratorHelper(keys);
            _context2.prev = 5;

            _iterator6.s();

          case 7:
            if ((_step6 = _iterator6.n()).done) {
              _context2.next = 202;
              break;
            }

            _key2 = _step6.value;
            value = element[_key2];
            expandedValue = void 0; // skip @context

            if (!(_key2 === '@context')) {
              _context2.next = 13;
              break;
            }

            return _context2.abrupt("continue", 200);

          case 13:
            // expand property
            expandedProperty = _expandIri(activeCtx, _key2, {
              vocab: true
            }, options); // drop non-absolute IRI keys that aren't keywords unless custom mapped

            if (!(expandedProperty === null || !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty)))) {
              _context2.next = 18;
              break;
            }

            // TODO: use `await` to support async
            expandedProperty = expansionMap({
              unmappedProperty: _key2,
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              parent: element,
              options: options,
              insideList: insideList,
              value: value,
              expandedParent: expandedParent
            });

            if (!(expandedProperty === undefined)) {
              _context2.next = 18;
              break;
            }

            return _context2.abrupt("continue", 200);

          case 18:
            if (!_isKeyword(expandedProperty)) {
              _context2.next = 23;
              break;
            }

            if (!(expandedActiveProperty === '@reverse')) {
              _context2.next = 21;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' + 'property.', 'jsonld.SyntaxError', {
              code: 'invalid reverse property map',
              value: value
            });

          case 21:
            if (!(expandedProperty in expandedParent && expandedProperty !== '@included' && expandedProperty !== '@type')) {
              _context2.next = 23;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; colliding keywords detected.', 'jsonld.SyntaxError', {
              code: 'colliding keywords',
              keyword: expandedProperty
            });

          case 23:
            if (!(expandedProperty === '@id')) {
              _context2.next = 40;
              break;
            }

            if (_isString(value)) {
              _context2.next = 38;
              break;
            }

            if (options.isFrame) {
              _context2.next = 27;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@id" value must a string.', 'jsonld.SyntaxError', {
              code: 'invalid @id value',
              value: value
            });

          case 27:
            if (!_isObject(value)) {
              _context2.next = 32;
              break;
            }

            if (_isEmptyObject(value)) {
              _context2.next = 30;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@id" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {
              code: 'invalid @id value',
              value: value
            });

          case 30:
            _context2.next = 38;
            break;

          case 32:
            if (!_isArray(value)) {
              _context2.next = 37;
              break;
            }

            if (value.every(function (v) {
              return _isString(v);
            })) {
              _context2.next = 35;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@id" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {
              code: 'invalid @id value',
              value: value
            });

          case 35:
            _context2.next = 38;
            break;

          case 37:
            throw new JsonLdError('Invalid JSON-LD syntax; "@id" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {
              code: 'invalid @id value',
              value: value
            });

          case 38:
            _addValue(expandedParent, '@id', _asArray(value).map(function (v) {
              return _isString(v) ? _expandIri(activeCtx, v, {
                base: true
              }, options) : v;
            }), {
              propertyIsArray: options.isFrame
            });

            return _context2.abrupt("continue", 200);

          case 40:
            if (!(expandedProperty === '@type')) {
              _context2.next = 45;
              break;
            }

            // if framing, can be a default object, but need to expand
            // key to determine that
            if (_isObject(value)) {
              value = Object.fromEntries(Object.entries(value).map(function (_ref6) {
                var _ref7 = _slicedToArray(_ref6, 2),
                    k = _ref7[0],
                    v = _ref7[1];

                return [_expandIri(typeScopedContext, k, {
                  vocab: true
                }), _asArray(v).map(function (vv) {
                  return _expandIri(typeScopedContext, vv, {
                    base: true,
                    vocab: true
                  });
                })];
              }));
            }

            _validateTypeValue(value, options.isFrame);

            _addValue(expandedParent, '@type', _asArray(value).map(function (v) {
              return _isString(v) ? _expandIri(typeScopedContext, v, {
                base: true,
                vocab: true
              }, options) : v;
            }), {
              propertyIsArray: options.isFrame
            });

            return _context2.abrupt("continue", 200);

          case 45:
            if (!(expandedProperty === '@included' && _processingMode(activeCtx, 1.1))) {
              _context2.next = 55;
              break;
            }

            _context2.t0 = _asArray;
            _context2.next = 49;
            return api.expand({
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              element: value,
              options: options,
              expansionMap: expansionMap
            });

          case 49:
            _context2.t1 = _context2.sent;
            includedResult = (0, _context2.t0)(_context2.t1);

            if (includedResult.every(function (v) {
              return _isSubject(v);
            })) {
              _context2.next = 53;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; ' + 'values of @included must expand to node objects.', 'jsonld.SyntaxError', {
              code: 'invalid @included value',
              value: value
            });

          case 53:
            _addValue(expandedParent, '@included', includedResult, {
              propertyIsArray: true
            });

            return _context2.abrupt("continue", 200);

          case 55:
            if (!(expandedProperty === '@graph' && !(_isObject(value) || _isArray(value)))) {
              _context2.next = 57;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@graph" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {
              code: 'invalid @graph value',
              value: value
            });

          case 57:
            if (!(expandedProperty === '@value')) {
              _context2.next = 61;
              break;
            }

            // capture value for later
            // "colliding keywords" check prevents this from being set twice
            unexpandedValue = value;

            if (isJsonType && _processingMode(activeCtx, 1.1)) {
              // no coercion to array, and retain all values
              expandedParent['@value'] = value;
            } else {
              _addValue(expandedParent, '@value', value, {
                propertyIsArray: options.isFrame
              });
            }

            return _context2.abrupt("continue", 200);

          case 61:
            if (!(expandedProperty === '@language')) {
              _context2.next = 71;
              break;
            }

            if (!(value === null)) {
              _context2.next = 64;
              break;
            }

            return _context2.abrupt("continue", 200);

          case 64:
            if (!(!_isString(value) && !options.isFrame)) {
              _context2.next = 66;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@language" value must be a string.', 'jsonld.SyntaxError', {
              code: 'invalid language-tagged string',
              value: value
            });

          case 66:
            // ensure language value is lowercase
            value = _asArray(value).map(function (v) {
              return _isString(v) ? v.toLowerCase() : v;
            }); // ensure language tag matches BCP47

            _iterator8 = _createForOfIteratorHelper(value);

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                lang = _step8.value;

                if (_isString(lang) && !lang.match(REGEX_BCP47)) {
                  console.warn("@language must be valid BCP47: ".concat(lang));
                }
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }

            _addValue(expandedParent, '@language', value, {
              propertyIsArray: options.isFrame
            });

            return _context2.abrupt("continue", 200);

          case 71:
            if (!(expandedProperty === '@direction')) {
              _context2.next = 94;
              break;
            }

            if (!(!_isString(value) && !options.isFrame)) {
              _context2.next = 74;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@direction" value must be a string.', 'jsonld.SyntaxError', {
              code: 'invalid base direction',
              value: value
            });

          case 74:
            value = _asArray(value); // ensure direction is "ltr" or "rtl"

            _iterator9 = _createForOfIteratorHelper(value);
            _context2.prev = 76;

            _iterator9.s();

          case 78:
            if ((_step9 = _iterator9.n()).done) {
              _context2.next = 84;
              break;
            }

            dir = _step9.value;

            if (!(_isString(dir) && dir !== 'ltr' && dir !== 'rtl')) {
              _context2.next = 82;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@direction" must be "ltr" or "rtl".', 'jsonld.SyntaxError', {
              code: 'invalid base direction',
              value: value
            });

          case 82:
            _context2.next = 78;
            break;

          case 84:
            _context2.next = 89;
            break;

          case 86:
            _context2.prev = 86;
            _context2.t2 = _context2["catch"](76);

            _iterator9.e(_context2.t2);

          case 89:
            _context2.prev = 89;

            _iterator9.f();

            return _context2.finish(89);

          case 92:
            _addValue(expandedParent, '@direction', value, {
              propertyIsArray: options.isFrame
            });

            return _context2.abrupt("continue", 200);

          case 94:
            if (!(expandedProperty === '@index')) {
              _context2.next = 99;
              break;
            }

            if (_isString(value)) {
              _context2.next = 97;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@index" value must be a string.', 'jsonld.SyntaxError', {
              code: 'invalid @index value',
              value: value
            });

          case 97:
            _addValue(expandedParent, '@index', value);

            return _context2.abrupt("continue", 200);

          case 99:
            if (!(expandedProperty === '@reverse')) {
              _context2.next = 127;
              break;
            }

            if (_isObject(value)) {
              _context2.next = 102;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@reverse" value must be an object.', 'jsonld.SyntaxError', {
              code: 'invalid @reverse value',
              value: value
            });

          case 102:
            _context2.next = 104;
            return api.expand({
              activeCtx: activeCtx,
              activeProperty: '@reverse',
              element: value,
              options: options,
              expansionMap: expansionMap
            });

          case 104:
            expandedValue = _context2.sent;

            // properties double-reversed
            if ('@reverse' in expandedValue) {
              for (property in expandedValue['@reverse']) {
                _addValue(expandedParent, property, expandedValue['@reverse'][property], {
                  propertyIsArray: true
                });
              }
            } // FIXME: can this be merged with code below to simplify?
            // merge in all reversed properties


            reverseMap = expandedParent['@reverse'] || null;
            _context2.t3 = regeneratorRuntime.keys(expandedValue);

          case 108:
            if ((_context2.t4 = _context2.t3()).done) {
              _context2.next = 126;
              break;
            }

            _property = _context2.t4.value;

            if (!(_property === '@reverse')) {
              _context2.next = 112;
              break;
            }

            return _context2.abrupt("continue", 108);

          case 112:
            if (reverseMap === null) {
              reverseMap = expandedParent['@reverse'] = {};
            }

            _addValue(reverseMap, _property, [], {
              propertyIsArray: true
            });

            items = expandedValue[_property];
            ii = 0;

          case 116:
            if (!(ii < items.length)) {
              _context2.next = 124;
              break;
            }

            item = items[ii];

            if (!(_isValue(item) || _isList(item))) {
              _context2.next = 120;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@reverse" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {
              code: 'invalid reverse property value',
              value: expandedValue
            });

          case 120:
            _addValue(reverseMap, _property, item, {
              propertyIsArray: true
            });

          case 121:
            ++ii;
            _context2.next = 116;
            break;

          case 124:
            _context2.next = 108;
            break;

          case 126:
            return _context2.abrupt("continue", 200);

          case 127:
            if (!(expandedProperty === '@nest')) {
              _context2.next = 130;
              break;
            }

            nests.push(_key2);
            return _context2.abrupt("continue", 200);

          case 130:
            // use potential scoped context for key
            termCtx = activeCtx;
            ctx = _getContextValue(activeCtx, _key2, '@context');

            if (_isUndefined(ctx)) {
              _context2.next = 136;
              break;
            }

            _context2.next = 135;
            return _processContext({
              activeCtx: activeCtx,
              localCtx: ctx,
              propagate: true,
              overrideProtected: true,
              options: options
            });

          case 135:
            termCtx = _context2.sent;

          case 136:
            container = _getContextValue(termCtx, _key2, '@container') || [];

            if (!(container.includes('@language') && _isObject(value))) {
              _context2.next = 142;
              break;
            }

            direction = _getContextValue(termCtx, _key2, '@direction'); // handle language map container (skip if value is not an object)

            expandedValue = _expandLanguageMap(termCtx, value, direction, options);
            _context2.next = 180;
            break;

          case 142:
            if (!(container.includes('@index') && _isObject(value))) {
              _context2.next = 151;
              break;
            }

            // handle index container (skip if value is not an object)
            asGraph = container.includes('@graph');
            indexKey = _getContextValue(termCtx, _key2, '@index') || '@index';
            propertyIndex = indexKey !== '@index' && _expandIri(activeCtx, indexKey, {
              vocab: true
            }, options);
            _context2.next = 148;
            return _expandIndexMap({
              activeCtx: termCtx,
              options: options,
              activeProperty: _key2,
              value: value,
              expansionMap: expansionMap,
              asGraph: asGraph,
              indexKey: indexKey,
              propertyIndex: propertyIndex
            });

          case 148:
            expandedValue = _context2.sent;
            _context2.next = 180;
            break;

          case 151:
            if (!(container.includes('@id') && _isObject(value))) {
              _context2.next = 158;
              break;
            }

            // handle id container (skip if value is not an object)
            _asGraph = container.includes('@graph');
            _context2.next = 155;
            return _expandIndexMap({
              activeCtx: termCtx,
              options: options,
              activeProperty: _key2,
              value: value,
              expansionMap: expansionMap,
              asGraph: _asGraph,
              indexKey: '@id'
            });

          case 155:
            expandedValue = _context2.sent;
            _context2.next = 180;
            break;

          case 158:
            if (!(container.includes('@type') && _isObject(value))) {
              _context2.next = 164;
              break;
            }

            _context2.next = 161;
            return _expandIndexMap({
              // since container is `@type`, revert type scoped context when expanding
              activeCtx: termCtx.revertToPreviousContext(),
              options: options,
              activeProperty: _key2,
              value: value,
              expansionMap: expansionMap,
              asGraph: false,
              indexKey: '@type'
            });

          case 161:
            expandedValue = _context2.sent;
            _context2.next = 180;
            break;

          case 164:
            // recurse into @list or @set
            isList = expandedProperty === '@list';

            if (!(isList || expandedProperty === '@set')) {
              _context2.next = 173;
              break;
            }

            nextActiveProperty = activeProperty;

            if (isList && expandedActiveProperty === '@graph') {
              nextActiveProperty = null;
            }

            _context2.next = 170;
            return api.expand({
              activeCtx: termCtx,
              activeProperty: nextActiveProperty,
              element: value,
              options: options,
              insideList: isList,
              expansionMap: expansionMap
            });

          case 170:
            expandedValue = _context2.sent;
            _context2.next = 180;
            break;

          case 173:
            if (!(_getContextValue(activeCtx, _key2, '@type') === '@json')) {
              _context2.next = 177;
              break;
            }

            expandedValue = {
              '@type': '@json',
              '@value': value
            };
            _context2.next = 180;
            break;

          case 177:
            _context2.next = 179;
            return api.expand({
              activeCtx: termCtx,
              activeProperty: _key2,
              element: value,
              options: options,
              insideList: false,
              expansionMap: expansionMap
            });

          case 179:
            expandedValue = _context2.sent;

          case 180:
            if (!(expandedValue === null && expandedProperty !== '@value')) {
              _context2.next = 184;
              break;
            }

            // TODO: use `await` to support async
            expandedValue = expansionMap({
              unmappedValue: value,
              expandedProperty: expandedProperty,
              activeCtx: termCtx,
              activeProperty: activeProperty,
              parent: element,
              options: options,
              insideList: insideList,
              key: _key2,
              expandedParent: expandedParent
            });

            if (!(expandedValue === undefined)) {
              _context2.next = 184;
              break;
            }

            return _context2.abrupt("continue", 200);

          case 184:
            // convert expanded value to @list if container specifies it
            if (expandedProperty !== '@list' && !_isList(expandedValue) && container.includes('@list')) {
              // ensure expanded value in @list is an array
              expandedValue = {
                '@list': _asArray(expandedValue)
              };
            } // convert expanded value to @graph if container specifies it
            // and value is not, itself, a graph
            // index cases handled above


            if (container.includes('@graph') && !container.some(function (key) {
              return key === '@id' || key === '@index';
            })) {
              // ensure expanded values are arrays
              expandedValue = _asArray(expandedValue).map(function (v) {
                return {
                  '@graph': _asArray(v)
                };
              });
            } // FIXME: can this be merged with code above to simplify?
            // merge in reverse properties


            if (!(termCtx.mappings.has(_key2) && termCtx.mappings.get(_key2).reverse)) {
              _context2.next = 199;
              break;
            }

            _reverseMap = expandedParent['@reverse'] = expandedParent['@reverse'] || {};
            expandedValue = _asArray(expandedValue);
            _ii = 0;

          case 190:
            if (!(_ii < expandedValue.length)) {
              _context2.next = 198;
              break;
            }

            _item = expandedValue[_ii];

            if (!(_isValue(_item) || _isList(_item))) {
              _context2.next = 194;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@reverse" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {
              code: 'invalid reverse property value',
              value: expandedValue
            });

          case 194:
            _addValue(_reverseMap, expandedProperty, _item, {
              propertyIsArray: true
            });

          case 195:
            ++_ii;
            _context2.next = 190;
            break;

          case 198:
            return _context2.abrupt("continue", 200);

          case 199:
            // add value for property
            // special keywords handled above
            _addValue(expandedParent, expandedProperty, expandedValue, {
              propertyIsArray: true
            });

          case 200:
            _context2.next = 7;
            break;

          case 202:
            _context2.next = 207;
            break;

          case 204:
            _context2.prev = 204;
            _context2.t5 = _context2["catch"](5);

            _iterator6.e(_context2.t5);

          case 207:
            _context2.prev = 207;

            _iterator6.f();

            return _context2.finish(207);

          case 210:
            if (!('@value' in expandedParent)) {
              _context2.next = 216;
              break;
            }

            if (!(expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1))) {
              _context2.next = 214;
              break;
            }

            _context2.next = 216;
            break;

          case 214:
            if (!((_isObject(unexpandedValue) || _isArray(unexpandedValue)) && !options.isFrame)) {
              _context2.next = 216;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; "@value" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {
              code: 'invalid value object value',
              value: unexpandedValue
            });

          case 216:
            _i = 0, _nests = nests;

          case 217:
            if (!(_i < _nests.length)) {
              _context2.next = 242;
              break;
            }

            key = _nests[_i];
            nestedValues = _isArray(element[key]) ? element[key] : [element[key]];
            _iterator7 = _createForOfIteratorHelper(nestedValues);
            _context2.prev = 221;

            _iterator7.s();

          case 223:
            if ((_step7 = _iterator7.n()).done) {
              _context2.next = 231;
              break;
            }

            nv = _step7.value;

            if (!(!_isObject(nv) || Object.keys(nv).some(function (k) {
              return _expandIri(activeCtx, k, {
                vocab: true
              }, options) === '@value';
            }))) {
              _context2.next = 227;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; nested value must be a node object.', 'jsonld.SyntaxError', {
              code: 'invalid @nest value',
              value: nv
            });

          case 227:
            _context2.next = 229;
            return _expandObject({
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              expandedActiveProperty: expandedActiveProperty,
              element: nv,
              expandedParent: expandedParent,
              options: options,
              insideList: insideList,
              typeScopedContext: typeScopedContext,
              typeKey: typeKey,
              expansionMap: expansionMap
            });

          case 229:
            _context2.next = 223;
            break;

          case 231:
            _context2.next = 236;
            break;

          case 233:
            _context2.prev = 233;
            _context2.t6 = _context2["catch"](221);

            _iterator7.e(_context2.t6);

          case 236:
            _context2.prev = 236;

            _iterator7.f();

            return _context2.finish(236);

          case 239:
            _i++;
            _context2.next = 217;
            break;

          case 242:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[5, 204, 207, 210], [76, 86, 89, 92], [221, 233, 236, 239]]);
  }));
  return _expandObject2.apply(this, arguments);
}

function _expandValue(_ref4) {
  var activeCtx = _ref4.activeCtx,
      activeProperty = _ref4.activeProperty,
      value = _ref4.value,
      options = _ref4.options;

  // nothing to expand
  if (value === null || value === undefined) {
    return null;
  } // special-case expand @id and @type (skips '@id' expansion)


  var expandedProperty = _expandIri(activeCtx, activeProperty, {
    vocab: true
  }, options);

  if (expandedProperty === '@id') {
    return _expandIri(activeCtx, value, {
      base: true
    }, options);
  } else if (expandedProperty === '@type') {
    return _expandIri(activeCtx, value, {
      vocab: true,
      base: true
    }, options);
  } // get type definition from context


  var type = _getContextValue(activeCtx, activeProperty, '@type'); // do @id expansion (automatic for @graph)


  if ((type === '@id' || expandedProperty === '@graph') && _isString(value)) {
    return {
      '@id': _expandIri(activeCtx, value, {
        base: true
      }, options)
    };
  } // do @id expansion w/vocab


  if (type === '@vocab' && _isString(value)) {
    return {
      '@id': _expandIri(activeCtx, value, {
        vocab: true,
        base: true
      }, options)
    };
  } // do not expand keyword values


  if (_isKeyword(expandedProperty)) {
    return value;
  }

  var rval = {};

  if (type && !['@id', '@vocab', '@none'].includes(type)) {
    // other type
    rval['@type'] = type;
  } else if (_isString(value)) {
    // check for language tagging for strings
    var language = _getContextValue(activeCtx, activeProperty, '@language');

    if (language !== null) {
      rval['@language'] = language;
    }

    var direction = _getContextValue(activeCtx, activeProperty, '@direction');

    if (direction !== null) {
      rval['@direction'] = direction;
    }
  } // do conversion of values that aren't basic JSON types to strings


  if (!['boolean', 'number', 'string'].includes(_typeof(value))) {
    value = value.toString();
  }

  rval['@value'] = value;
  return rval;
}
/**
 * Expands a language map.
 *
 * @param activeCtx the active context to use.
 * @param languageMap the language map to expand.
 * @param direction the direction to apply to values.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded language map.
 */


function _expandLanguageMap(activeCtx, languageMap, direction, options) {
  var rval = [];
  var keys = Object.keys(languageMap).sort();

  var _iterator4 = _createForOfIteratorHelper(keys),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var key = _step4.value;

      var expandedKey = _expandIri(activeCtx, key, {
        vocab: true
      }, options);

      var val = languageMap[key];

      if (!_isArray(val)) {
        val = [val];
      }

      var _iterator5 = _createForOfIteratorHelper(val),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var item = _step5.value;

          if (item === null) {
            // null values are allowed (8.5) but ignored (3.1)
            continue;
          }

          if (!_isString(item)) {
            throw new JsonLdError('Invalid JSON-LD syntax; language map values must be strings.', 'jsonld.SyntaxError', {
              code: 'invalid language map value',
              languageMap: languageMap
            });
          }

          var _val = {
            '@value': item
          };

          if (expandedKey !== '@none') {
            _val['@language'] = key.toLowerCase();
          }

          if (direction) {
            _val['@direction'] = direction;
          }

          rval.push(_val);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return rval;
}

function _expandIndexMap(_x3) {
  return _expandIndexMap2.apply(this, arguments);
}

function _expandIndexMap2() {
  _expandIndexMap2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5) {
    var activeCtx, options, activeProperty, value, expansionMap, asGraph, indexKey, propertyIndex, rval, keys, isTypeIndex, _iterator10, _step10, key, ctx, val, expandedKey, _iterator11, _step11, item;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            activeCtx = _ref5.activeCtx, options = _ref5.options, activeProperty = _ref5.activeProperty, value = _ref5.value, expansionMap = _ref5.expansionMap, asGraph = _ref5.asGraph, indexKey = _ref5.indexKey, propertyIndex = _ref5.propertyIndex;
            rval = [];
            keys = Object.keys(value).sort();
            isTypeIndex = indexKey === '@type';
            _iterator10 = _createForOfIteratorHelper(keys);
            _context3.prev = 5;

            _iterator10.s();

          case 7:
            if ((_step10 = _iterator10.n()).done) {
              _context3.next = 51;
              break;
            }

            key = _step10.value;

            if (!isTypeIndex) {
              _context3.next = 15;
              break;
            }

            ctx = _getContextValue(activeCtx, key, '@context');

            if (_isUndefined(ctx)) {
              _context3.next = 15;
              break;
            }

            _context3.next = 14;
            return _processContext({
              activeCtx: activeCtx,
              localCtx: ctx,
              propagate: false,
              options: options
            });

          case 14:
            activeCtx = _context3.sent;

          case 15:
            val = value[key];

            if (!_isArray(val)) {
              val = [val];
            }

            _context3.next = 19;
            return api.expand({
              activeCtx: activeCtx,
              activeProperty: activeProperty,
              element: val,
              options: options,
              insideList: false,
              insideIndex: true,
              expansionMap: expansionMap
            });

          case 19:
            val = _context3.sent;
            // expand for @type, but also for @none
            expandedKey = void 0;

            if (propertyIndex) {
              if (key === '@none') {
                expandedKey = '@none';
              } else {
                expandedKey = _expandValue({
                  activeCtx: activeCtx,
                  activeProperty: indexKey,
                  value: key,
                  options: options
                });
              }
            } else {
              expandedKey = _expandIri(activeCtx, key, {
                vocab: true
              }, options);
            }

            if (indexKey === '@id') {
              // expand document relative
              key = _expandIri(activeCtx, key, {
                base: true
              }, options);
            } else if (isTypeIndex) {
              key = expandedKey;
            }

            _iterator11 = _createForOfIteratorHelper(val);
            _context3.prev = 24;

            _iterator11.s();

          case 26:
            if ((_step11 = _iterator11.n()).done) {
              _context3.next = 41;
              break;
            }

            item = _step11.value;

            // If this is also a @graph container, turn items into graphs
            if (asGraph && !_isGraph(item)) {
              item = {
                '@graph': [item]
              };
            }

            if (!(indexKey === '@type')) {
              _context3.next = 33;
              break;
            }

            if (expandedKey === '@none') {// ignore @none
            } else if (item['@type']) {
              item['@type'] = [key].concat(item['@type']);
            } else {
              item['@type'] = [key];
            }

            _context3.next = 38;
            break;

          case 33:
            if (!(_isValue(item) && !['@language', '@type', '@index'].includes(indexKey))) {
              _context3.next = 37;
              break;
            }

            throw new JsonLdError('Invalid JSON-LD syntax; Attempt to add illegal key to value ' + "object: \"".concat(indexKey, "\"."), 'jsonld.SyntaxError', {
              code: 'invalid value object',
              value: item
            });

          case 37:
            if (propertyIndex) {
              // index is a property to be expanded, and values interpreted for that
              // property
              if (expandedKey !== '@none') {
                // expand key as a value
                _addValue(item, propertyIndex, expandedKey, {
                  propertyIsArray: true,
                  prependValue: true
                });
              }
            } else if (expandedKey !== '@none' && !(indexKey in item)) {
              item[indexKey] = key;
            }

          case 38:
            rval.push(item);

          case 39:
            _context3.next = 26;
            break;

          case 41:
            _context3.next = 46;
            break;

          case 43:
            _context3.prev = 43;
            _context3.t0 = _context3["catch"](24);

            _iterator11.e(_context3.t0);

          case 46:
            _context3.prev = 46;

            _iterator11.f();

            return _context3.finish(46);

          case 49:
            _context3.next = 7;
            break;

          case 51:
            _context3.next = 56;
            break;

          case 53:
            _context3.prev = 53;
            _context3.t1 = _context3["catch"](5);

            _iterator10.e(_context3.t1);

          case 56:
            _context3.prev = 56;

            _iterator10.f();

            return _context3.finish(56);

          case 59:
            return _context3.abrupt("return", rval);

          case 60:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[5, 53, 56, 59], [24, 43, 46, 49]]);
  }));
  return _expandIndexMap2.apply(this, arguments);
}

/***/ }),

/***/ 73572:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


var _require = __webpack_require__(61431),
    _isSubjectReference = _require.isSubjectReference;

var _require2 = __webpack_require__(57823),
    _createMergedNodeMap = _require2.createMergedNodeMap;

var api = {};
module.exports = api;
/**
 * Performs JSON-LD flattening.
 *
 * @param input the expanded JSON-LD to flatten.
 *
 * @return the flattened output.
 */

api.flatten = function (input) {
  var defaultGraph = _createMergedNodeMap(input); // produce flattened output


  var flattened = [];
  var keys = Object.keys(defaultGraph).sort();

  for (var ki = 0; ki < keys.length; ++ki) {
    var node = defaultGraph[keys[ki]]; // only add full subjects to top-level

    if (!_isSubjectReference(node)) {
      flattened.push(node);
    }
  }

  return flattened;
};

/***/ }),

/***/ 64268:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = __webpack_require__(15866),
    isKeyword = _require.isKeyword;

var graphTypes = __webpack_require__(61431);

var types = __webpack_require__(4319);

var util = __webpack_require__(88336);

var url = __webpack_require__(41528);

var JsonLdError = __webpack_require__(3275);

var _require2 = __webpack_require__(57823),
    _createNodeMap = _require2.createNodeMap,
    _mergeNodeMapGraphs = _require2.mergeNodeMapGraphs;

var api = {};
module.exports = api;
/**
 * Performs JSON-LD `merged` framing.
 *
 * @param input the expanded JSON-LD to frame.
 * @param frame the expanded JSON-LD frame to use.
 * @param options the framing options.
 *
 * @return the framed output.
 */

api.frameMergedOrDefault = function (input, frame, options) {
  // create framing state
  var state = {
    options: options,
    embedded: false,
    graph: '@default',
    graphMap: {
      '@default': {}
    },
    subjectStack: [],
    link: {},
    bnodeMap: {}
  }; // produce a map of all graphs and name each bnode
  // FIXME: currently uses subjects from @merged graph only

  var issuer = new util.IdentifierIssuer('_:b');

  _createNodeMap(input, state.graphMap, '@default', issuer);

  if (options.merged) {
    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);
    state.graph = '@merged';
  }

  state.subjects = state.graphMap[state.graph]; // frame the subjects

  var framed = [];
  api.frame(state, Object.keys(state.subjects).sort(), frame, framed); // If pruning blank nodes, find those to prune

  if (options.pruneBlankNodeIdentifiers) {
    // remove all blank nodes appearing only once, done in compaction
    options.bnodesToClear = Object.keys(state.bnodeMap).filter(function (id) {
      return state.bnodeMap[id].length === 1;
    });
  } // remove @preserve from results


  options.link = {};
  return _cleanupPreserve(framed, options);
};
/**
 * Frames subjects according to the given frame.
 *
 * @param state the current framing state.
 * @param subjects the subjects to filter.
 * @param frame the frame.
 * @param parent the parent subject or top-level array.
 * @param property the parent property, initialized to null.
 */


api.frame = function (state, subjects, frame, parent) {
  var property = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  // validate the frame
  _validateFrame(frame);

  frame = frame[0]; // get flags for current frame

  var options = state.options;
  var flags = {
    embed: _getFrameFlag(frame, options, 'embed'),
    explicit: _getFrameFlag(frame, options, 'explicit'),
    requireAll: _getFrameFlag(frame, options, 'requireAll')
  }; // get link for current graph

  if (!state.link.hasOwnProperty(state.graph)) {
    state.link[state.graph] = {};
  }

  var link = state.link[state.graph]; // filter out subjects that match the frame

  var matches = _filterSubjects(state, subjects, frame, flags); // add matches to output


  var ids = Object.keys(matches).sort();

  var _iterator = _createForOfIteratorHelper(ids),
      _step;

  try {
    var _loop = function _loop() {
      var id = _step.value;
      var subject = matches[id];
      /* Note: In order to treat each top-level match as a compartmentalized
      result, clear the unique embedded subjects map when the property is null,
      which only occurs at the top-level. */

      if (property === null) {
        state.uniqueEmbeds = _defineProperty({}, state.graph, {});
      } else {
        state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};
      }

      if (flags.embed === '@link' && id in link) {
        // TODO: may want to also match an existing linked subject against
        // the current frame ... so different frames could produce different
        // subjects that are only shared in-memory when the frames are the same
        // add existing linked subject
        _addFrameOutput(parent, property, link[id]);

        return "continue";
      } // start output for subject


      var output = {
        '@id': id
      };

      if (id.indexOf('_:') === 0) {
        util.addValue(state.bnodeMap, id, output, {
          propertyIsArray: true
        });
      }

      link[id] = output; // validate @embed

      if ((flags.embed === '@first' || flags.embed === '@last') && state.is11) {
        throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {
          code: 'invalid @embed value',
          frame: frame
        });
      }

      if (!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
        // skip adding this node object to the top level, as it was
        // already included in another node object
        return "continue";
      } // if embed is @never or if a circular reference would be created by an
      // embed, the subject cannot be embedded, just add the reference;
      // note that a circular reference won't occur when the embed flag is
      // `@link` as the above check will short-circuit before reaching this point


      if (state.embedded && (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack))) {
        _addFrameOutput(parent, property, output);

        return "continue";
      } // if only the first (or once) should be embedded


      if (state.embedded && (flags.embed == '@first' || flags.embed == '@once') && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
        _addFrameOutput(parent, property, output);

        return "continue";
      } // if only the last match should be embedded


      if (flags.embed === '@last') {
        // remove any existing embed
        if (id in state.uniqueEmbeds[state.graph]) {
          _removeEmbed(state, id);
        }
      }

      state.uniqueEmbeds[state.graph][id] = {
        parent: parent,
        property: property
      }; // push matching subject onto stack to enable circular embed checks

      state.subjectStack.push({
        subject: subject,
        graph: state.graph
      }); // subject is also the name of a graph

      if (id in state.graphMap) {
        var recurse = false;
        var subframe = null;

        if (!('@graph' in frame)) {
          recurse = state.graph !== '@merged';
          subframe = {};
        } else {
          subframe = frame['@graph'][0];
          recurse = !(id === '@merged' || id === '@default');

          if (!types.isObject(subframe)) {
            subframe = {};
          }
        }

        if (recurse) {
          // recurse into graph
          api.frame(_objectSpread(_objectSpread({}, state), {}, {
            graph: id,
            embedded: false
          }), Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');
        }
      } // if frame has @included, recurse over its sub-frame


      if ('@included' in frame) {
        api.frame(_objectSpread(_objectSpread({}, state), {}, {
          embedded: false
        }), subjects, frame['@included'], output, '@included');
      } // iterate over subject properties


      var _iterator2 = _createForOfIteratorHelper(Object.keys(subject).sort()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var prop = _step2.value;

          // copy keywords to output
          if (isKeyword(prop)) {
            output[prop] = util.clone(subject[prop]);

            if (prop === '@type') {
              // count bnode values of @type
              var _iterator5 = _createForOfIteratorHelper(subject['@type']),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var type = _step5.value;

                  if (type.indexOf('_:') === 0) {
                    util.addValue(state.bnodeMap, type, output, {
                      propertyIsArray: true
                    });
                  }
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            }

            continue;
          } // explicit is on and property isn't in the frame, skip processing


          if (flags.explicit && !(prop in frame)) {
            continue;
          } // add objects


          var _iterator6 = _createForOfIteratorHelper(subject[prop]),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var o = _step6.value;

              var _subframe = prop in frame ? frame[prop] : _createImplicitFrame(flags); // recurse into list


              if (graphTypes.isList(o)) {
                var _subframe2 = frame[prop] && frame[prop][0] && frame[prop][0]['@list'] ? frame[prop][0]['@list'] : _createImplicitFrame(flags); // add empty list


                var list = {
                  '@list': []
                };

                _addFrameOutput(output, prop, list); // add list objects


                var src = o['@list'];

                var _iterator7 = _createForOfIteratorHelper(src),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var oo = _step7.value;

                    if (graphTypes.isSubjectReference(oo)) {
                      // recurse into subject reference
                      api.frame(_objectSpread(_objectSpread({}, state), {}, {
                        embedded: true
                      }), [oo['@id']], _subframe2, list, '@list');
                    } else {
                      // include other values automatically
                      _addFrameOutput(list, '@list', util.clone(oo));
                    }
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              } else if (graphTypes.isSubjectReference(o)) {
                // recurse into subject reference
                api.frame(_objectSpread(_objectSpread({}, state), {}, {
                  embedded: true
                }), [o['@id']], _subframe, output, prop);
              } else if (_valueMatch(_subframe[0], o)) {
                // include other values, if they match
                _addFrameOutput(output, prop, util.clone(o));
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        } // handle defaults

      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = _createForOfIteratorHelper(Object.keys(frame).sort()),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _prop = _step3.value;

          // skip keywords
          if (_prop === '@type') {
            if (!types.isObject(frame[_prop][0]) || !('@default' in frame[_prop][0])) {
              continue;
            } // allow through default types

          } else if (isKeyword(_prop)) {
            continue;
          } // if omit default is off, then include default values for properties
          // that appear in the next frame but are not in the matching subject


          var next = frame[_prop][0] || {};

          var omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');

          if (!omitDefaultOn && !(_prop in output)) {
            var preserve = '@null';

            if ('@default' in next) {
              preserve = util.clone(next['@default']);
            }

            if (!types.isArray(preserve)) {
              preserve = [preserve];
            }

            output[_prop] = [{
              '@preserve': preserve
            }];
          }
        } // if embed reverse values by finding nodes having this subject as a value
        // of the associated property

      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper(Object.keys(frame['@reverse'] || {}).sort()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var reverseProp = _step4.value;
          var _subframe3 = frame['@reverse'][reverseProp];

          for (var _i = 0, _Object$keys = Object.keys(state.subjects); _i < _Object$keys.length; _i++) {
            var _subject = _Object$keys[_i];
            var nodeValues = util.getValues(state.subjects[_subject], reverseProp);

            if (nodeValues.some(function (v) {
              return v['@id'] === id;
            })) {
              // node has property referencing this subject, recurse
              output['@reverse'] = output['@reverse'] || {};
              util.addValue(output['@reverse'], reverseProp, [], {
                propertyIsArray: true
              });
              api.frame(_objectSpread(_objectSpread({}, state), {}, {
                embedded: true
              }), [_subject], _subframe3, output['@reverse'][reverseProp], property);
            }
          }
        } // add output to parent

      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      _addFrameOutput(parent, property, output); // pop matching subject from circular ref-checking stack


      state.subjectStack.pop();
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
/**
 * Replace `@null` with `null`, removing it from arrays.
 *
 * @param input the framed, compacted output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */


api.cleanupNull = function (input, options) {
  // recurse through arrays
  if (types.isArray(input)) {
    var noNulls = input.map(function (v) {
      return api.cleanupNull(v, options);
    });
    return noNulls.filter(function (v) {
      return v;
    }); // removes nulls from array
  }

  if (input === '@null') {
    return null;
  }

  if (types.isObject(input)) {
    // handle in-memory linked nodes
    if ('@id' in input) {
      var id = input['@id'];

      if (options.link.hasOwnProperty(id)) {
        var idx = options.link[id].indexOf(input);

        if (idx !== -1) {
          // already visited
          return options.link[id][idx];
        } // prevent circular visitation


        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    }

    for (var key in input) {
      input[key] = api.cleanupNull(input[key], options);
    }
  }

  return input;
};
/**
 * Creates an implicit frame when recursing through subject matches. If
 * a frame doesn't have an explicit frame for a particular property, then
 * a wildcard child frame will be created that uses the same flags that the
 * parent frame used.
 *
 * @param flags the current framing flags.
 *
 * @return the implicit frame.
 */


function _createImplicitFrame(flags) {
  var frame = {};

  for (var key in flags) {
    if (flags[key] !== undefined) {
      frame['@' + key] = [flags[key]];
    }
  }

  return [frame];
}
/**
 * Checks the current subject stack to see if embedding the given subject
 * would cause a circular reference.
 *
 * @param subjectToEmbed the subject to embed.
 * @param graph the graph the subject to embed is in.
 * @param subjectStack the current stack of subjects.
 *
 * @return true if a circular reference would be created, false if not.
 */


function _createsCircularReference(subjectToEmbed, graph, subjectStack) {
  for (var i = subjectStack.length - 1; i >= 0; --i) {
    var subject = subjectStack[i];

    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {
      return true;
    }
  }

  return false;
}
/**
 * Gets the frame flag value for the given flag name.
 *
 * @param frame the frame.
 * @param options the framing options.
 * @param name the flag name.
 *
 * @return the flag value.
 */


function _getFrameFlag(frame, options, name) {
  var flag = '@' + name;
  var rval = flag in frame ? frame[flag][0] : options[name];

  if (name === 'embed') {
    // default is "@last"
    // backwards-compatibility support for "embed" maps:
    // true => "@last"
    // false => "@never"
    if (rval === true) {
      rval = '@once';
    } else if (rval === false) {
      rval = '@never';
    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link' && rval !== '@first' && rval !== '@last' && rval !== '@once') {
      throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {
        code: 'invalid @embed value',
        frame: frame
      });
    }
  }

  return rval;
}
/**
 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
 *
 * @param frame the frame to validate.
 */


function _validateFrame(frame) {
  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {
    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {
      frame: frame
    });
  }

  if ('@id' in frame[0]) {
    var _iterator8 = _createForOfIteratorHelper(util.asArray(frame[0]['@id'])),
        _step8;

    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var id = _step8.value;

        // @id must be wildcard or an IRI
        if (!(types.isObject(id) || url.isAbsolute(id)) || types.isString(id) && id.indexOf('_:') === 0) {
          throw new JsonLdError('Invalid JSON-LD syntax; invalid @id in frame.', 'jsonld.SyntaxError', {
            code: 'invalid frame',
            frame: frame
          });
        }
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
  }

  if ('@type' in frame[0]) {
    var _iterator9 = _createForOfIteratorHelper(util.asArray(frame[0]['@type'])),
        _step9;

    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var type = _step9.value;

        // @id must be wildcard or an IRI
        if (!(types.isObject(type) || url.isAbsolute(type)) || types.isString(type) && type.indexOf('_:') === 0) {
          throw new JsonLdError('Invalid JSON-LD syntax; invalid @type in frame.', 'jsonld.SyntaxError', {
            code: 'invalid frame',
            frame: frame
          });
        }
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
  }
}
/**
 * Returns a map of all of the subjects that match a parsed frame.
 *
 * @param state the current framing state.
 * @param subjects the set of subjects to filter.
 * @param frame the parsed frame.
 * @param flags the frame flags.
 *
 * @return all of the matched subjects.
 */


function _filterSubjects(state, subjects, frame, flags) {
  // filter subjects in @id order
  var rval = {};

  var _iterator10 = _createForOfIteratorHelper(subjects),
      _step10;

  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var id = _step10.value;
      var subject = state.graphMap[state.graph][id];

      if (_filterSubject(state, subject, frame, flags)) {
        rval[id] = subject;
      }
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }

  return rval;
}
/**
 * Returns true if the given subject matches the given frame.
 *
 * Matches either based on explicit type inclusion where the node has any
 * type listed in the frame. If the frame has empty types defined matches
 * nodes not having a @type. If the frame has a type of {} defined matches
 * nodes having any type defined.
 *
 * Otherwise, does duck typing, where the node must have all of the
 * properties defined in the frame.
 *
 * @param state the current framing state.
 * @param subject the subject to check.
 * @param frame the frame to check.
 * @param flags the frame flags.
 *
 * @return true if the subject matches, false if not.
 */


function _filterSubject(state, subject, frame, flags) {
  // check ducktype
  var wildcard = true;
  var matchesSome = false;

  for (var key in frame) {
    var matchThis = false;
    var nodeValues = util.getValues(subject, key);
    var isEmpty = util.getValues(frame, key).length === 0;

    if (key === '@id') {
      // match on no @id or any matching @id, including wildcard
      if (types.isEmptyObject(frame['@id'][0] || {})) {
        matchThis = true;
      } else if (frame['@id'].length >= 0) {
        matchThis = frame['@id'].includes(nodeValues[0]);
      }

      if (!flags.requireAll) {
        return matchThis;
      }
    } else if (key === '@type') {
      // check @type (object value means 'any' type,
      // fall through to ducktyping)
      wildcard = false;

      if (isEmpty) {
        if (nodeValues.length > 0) {
          // don't match on no @type
          return false;
        }

        matchThis = true;
      } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {
        // match on wildcard @type if there is a type
        matchThis = nodeValues.length > 0;
      } else {
        // match on a specific @type
        var _iterator11 = _createForOfIteratorHelper(frame['@type']),
            _step11;

        try {
          var _loop2 = function _loop2() {
            var type = _step11.value;

            if (types.isObject(type) && '@default' in type) {
              // match on default object
              matchThis = true;
            } else {
              matchThis = matchThis || nodeValues.some(function (tt) {
                return tt === type;
              });
            }
          };

          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            _loop2();
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }

      if (!flags.requireAll) {
        return matchThis;
      }
    } else if (isKeyword(key)) {
      continue;
    } else {
      var _ret2 = function () {
        // Force a copy of this frame entry so it can be manipulated
        var thisFrame = util.getValues(frame, key)[0];
        var hasDefault = false;

        if (thisFrame) {
          _validateFrame([thisFrame]);

          hasDefault = '@default' in thisFrame;
        } // no longer a wildcard pattern if frame has any non-keyword properties


        wildcard = false; // skip, but allow match if node has no value for property, and frame has
        // a default value

        if (nodeValues.length === 0 && hasDefault) {
          return "continue";
        } // if frame value is empty, don't match if subject has any value


        if (nodeValues.length > 0 && isEmpty) {
          return {
            v: false
          };
        }

        if (thisFrame === undefined) {
          // node does not match if values is not empty and the value of property
          // in frame is match none.
          if (nodeValues.length > 0) {
            return {
              v: false
            };
          }

          matchThis = true;
        } else {
          if (graphTypes.isList(thisFrame)) {
            var listValue = thisFrame['@list'][0];

            if (graphTypes.isList(nodeValues[0])) {
              var nodeListValues = nodeValues[0]['@list'];

              if (graphTypes.isValue(listValue)) {
                // match on any matching value
                matchThis = nodeListValues.some(function (lv) {
                  return _valueMatch(listValue, lv);
                });
              } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {
                matchThis = nodeListValues.some(function (lv) {
                  return _nodeMatch(state, listValue, lv, flags);
                });
              }
            }
          } else if (graphTypes.isValue(thisFrame)) {
            matchThis = nodeValues.some(function (nv) {
              return _valueMatch(thisFrame, nv);
            });
          } else if (graphTypes.isSubjectReference(thisFrame)) {
            matchThis = nodeValues.some(function (nv) {
              return _nodeMatch(state, thisFrame, nv, flags);
            });
          } else if (types.isObject(thisFrame)) {
            matchThis = nodeValues.length > 0;
          } else {
            matchThis = false;
          }
        }
      }();

      if (_ret2 === "continue") continue;
      if (_typeof(_ret2) === "object") return _ret2.v;
    } // all non-defaulted values must match if requireAll is set


    if (!matchThis && flags.requireAll) {
      return false;
    }

    matchesSome = matchesSome || matchThis;
  } // return true if wildcard or subject matches some properties


  return wildcard || matchesSome;
}
/**
 * Removes an existing embed.
 *
 * @param state the current framing state.
 * @param id the @id of the embed to remove.
 */


function _removeEmbed(state, id) {
  // get existing embed
  var embeds = state.uniqueEmbeds[state.graph];
  var embed = embeds[id];
  var parent = embed.parent;
  var property = embed.property; // create reference to replace embed

  var subject = {
    '@id': id
  }; // remove existing embed

  if (types.isArray(parent)) {
    // replace subject with reference
    for (var i = 0; i < parent.length; ++i) {
      if (util.compareValues(parent[i], subject)) {
        parent[i] = subject;
        break;
      }
    }
  } else {
    // replace subject with reference
    var useArray = types.isArray(parent[property]);
    util.removeValue(parent, property, subject, {
      propertyIsArray: useArray
    });
    util.addValue(parent, property, subject, {
      propertyIsArray: useArray
    });
  } // recursively remove dependent dangling embeds


  var removeDependents = function removeDependents(id) {
    // get embed keys as a separate array to enable deleting keys in map
    var ids = Object.keys(embeds);

    for (var _i2 = 0, _ids = ids; _i2 < _ids.length; _i2++) {
      var next = _ids[_i2];

      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {
        delete embeds[next];
        removeDependents(next);
      }
    }
  };

  removeDependents(id);
}
/**
 * Removes the @preserve keywords from expanded result of framing.
 *
 * @param input the framed, framed output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */


function _cleanupPreserve(input, options) {
  // recurse through arrays
  if (types.isArray(input)) {
    return input.map(function (value) {
      return _cleanupPreserve(value, options);
    });
  }

  if (types.isObject(input)) {
    // remove @preserve
    if ('@preserve' in input) {
      return input['@preserve'][0];
    } // skip @values


    if (graphTypes.isValue(input)) {
      return input;
    } // recurse through @lists


    if (graphTypes.isList(input)) {
      input['@list'] = _cleanupPreserve(input['@list'], options);
      return input;
    } // handle in-memory linked nodes


    if ('@id' in input) {
      var id = input['@id'];

      if (options.link.hasOwnProperty(id)) {
        var idx = options.link[id].indexOf(input);

        if (idx !== -1) {
          // already visited
          return options.link[id][idx];
        } // prevent circular visitation


        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    } // recurse through properties


    for (var prop in input) {
      // potentially remove the id, if it is an unreference bnode
      if (prop === '@id' && options.bnodesToClear.includes(input[prop])) {
        delete input['@id'];
        continue;
      }

      input[prop] = _cleanupPreserve(input[prop], options);
    }
  }

  return input;
}
/**
 * Adds framing output to the given parent.
 *
 * @param parent the parent to add to.
 * @param property the parent property.
 * @param output the output to add.
 */


function _addFrameOutput(parent, property, output) {
  if (types.isObject(parent)) {
    util.addValue(parent, property, output, {
      propertyIsArray: true
    });
  } else {
    parent.push(output);
  }
}
/**
 * Node matches if it is a node, and matches the pattern as a frame.
 *
 * @param state the current framing state.
 * @param pattern used to match value
 * @param value to check
 * @param flags the frame flags.
 */


function _nodeMatch(state, pattern, value, flags) {
  if (!('@id' in value)) {
    return false;
  }

  var nodeObject = state.subjects[value['@id']];
  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);
}
/**
 * Value matches if it is a value and matches the value pattern
 *
 * * `pattern` is empty
 * * @values are the same, or `pattern[@value]` is a wildcard, and
 * * @types are the same or `value[@type]` is not null
 *   and `pattern[@type]` is `{}`, or `value[@type]` is null
 *   and `pattern[@type]` is null or `[]`, and
 * * @languages are the same or `value[@language]` is not null
 *   and `pattern[@language]` is `{}`, or `value[@language]` is null
 *   and `pattern[@language]` is null or `[]`.
 *
 * @param pattern used to match value
 * @param value to check
 */


function _valueMatch(pattern, value) {
  var v1 = value['@value'];
  var t1 = value['@type'];
  var l1 = value['@language'];
  var v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];
  var t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];
  var l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];

  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {
    return true;
  }

  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {
    return false;
  }

  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {
    return false;
  }

  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {
    return false;
  }

  return true;
}

/***/ }),

/***/ 20416:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(85271);
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var JsonLdError = __webpack_require__(3275);

var graphTypes = __webpack_require__(61431);

var types = __webpack_require__(4319);

var util = __webpack_require__(88336); // constants


var _require = __webpack_require__(17668),
    RDF_LIST = _require.RDF_LIST,
    RDF_FIRST = _require.RDF_FIRST,
    RDF_REST = _require.RDF_REST,
    RDF_NIL = _require.RDF_NIL,
    RDF_TYPE = _require.RDF_TYPE,
    RDF_JSON_LITERAL = _require.RDF_JSON_LITERAL,
    XSD_BOOLEAN = _require.XSD_BOOLEAN,
    XSD_DOUBLE = _require.XSD_DOUBLE,
    XSD_INTEGER = _require.XSD_INTEGER,
    XSD_STRING = _require.XSD_STRING;

var REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
var api = {};
module.exports = api;
/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset the RDF dataset.
 * @param options the RDF serialization options.
 *
 * @return a Promise that resolves to the JSON-LD output.
 */

api.fromRDF = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dataset, _ref) {
    var _ref$useRdfType, useRdfType, _ref$useNativeTypes, useNativeTypes, _ref$rdfDirection, rdfDirection, defaultGraph, graphMap, referencedOnce, _iterator, _step, quad, _name, nodeMap, s, p, o, _node, objectIsNode, value, object, name, graphObject, nil, _iterator2, _step2, usage, node, property, head, list, listNodes, nodeKeyCount, _i, _listNodes, listNode, result, subjects, _iterator3, _step3, subject, _node2, graph, _graphObject, graphSubjects, _iterator4, _step4, graphSubject, _node3;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref$useRdfType = _ref.useRdfType, useRdfType = _ref$useRdfType === void 0 ? false : _ref$useRdfType, _ref$useNativeTypes = _ref.useNativeTypes, useNativeTypes = _ref$useNativeTypes === void 0 ? false : _ref$useNativeTypes, _ref$rdfDirection = _ref.rdfDirection, rdfDirection = _ref$rdfDirection === void 0 ? null : _ref$rdfDirection;
            defaultGraph = {};
            graphMap = {
              '@default': defaultGraph
            };
            referencedOnce = {};
            _iterator = _createForOfIteratorHelper(dataset);
            _context.prev = 5;

            _iterator.s();

          case 7:
            if ((_step = _iterator.n()).done) {
              _context.next = 28;
              break;
            }

            quad = _step.value;
            // TODO: change 'name' to 'graph'
            _name = quad.graph.termType === 'DefaultGraph' ? '@default' : quad.graph.value;

            if (!(_name in graphMap)) {
              graphMap[_name] = {};
            }

            if (_name !== '@default' && !(_name in defaultGraph)) {
              defaultGraph[_name] = {
                '@id': _name
              };
            }

            nodeMap = graphMap[_name]; // get subject, predicate, object

            s = quad.subject.value;
            p = quad.predicate.value;
            o = quad.object;

            if (!(s in nodeMap)) {
              nodeMap[s] = {
                '@id': s
              };
            }

            _node = nodeMap[s];
            objectIsNode = o.termType.endsWith('Node');

            if (objectIsNode && !(o.value in nodeMap)) {
              nodeMap[o.value] = {
                '@id': o.value
              };
            }

            if (!(p === RDF_TYPE && !useRdfType && objectIsNode)) {
              _context.next = 23;
              break;
            }

            util.addValue(_node, '@type', o.value, {
              propertyIsArray: true
            });
            return _context.abrupt("continue", 26);

          case 23:
            value = _RDFToObject(o, useNativeTypes, rdfDirection);
            util.addValue(_node, p, value, {
              propertyIsArray: true
            }); // object may be an RDF list/partial list node but we can't know easily
            // until all triples are read

            if (objectIsNode) {
              if (o.value === RDF_NIL) {
                // track rdf:nil uniquely per graph
                object = nodeMap[o.value];

                if (!('usages' in object)) {
                  object.usages = [];
                }

                object.usages.push({
                  node: _node,
                  property: p,
                  value: value
                });
              } else if (o.value in referencedOnce) {
                // object referenced more than once
                referencedOnce[o.value] = false;
              } else {
                // keep track of single reference
                referencedOnce[o.value] = {
                  node: _node,
                  property: p,
                  value: value
                };
              }
            }

          case 26:
            _context.next = 7;
            break;

          case 28:
            _context.next = 33;
            break;

          case 30:
            _context.prev = 30;
            _context.t0 = _context["catch"](5);

            _iterator.e(_context.t0);

          case 33:
            _context.prev = 33;

            _iterator.f();

            return _context.finish(33);

          case 36:
            _context.t1 = regeneratorRuntime.keys(graphMap);

          case 37:
            if ((_context.t2 = _context.t1()).done) {
              _context.next = 84;
              break;
            }

            name = _context.t2.value;
            graphObject = graphMap[name]; // no @lists to be converted, continue

            if (RDF_NIL in graphObject) {
              _context.next = 42;
              break;
            }

            return _context.abrupt("continue", 37);

          case 42:
            // iterate backwards through each RDF list
            nil = graphObject[RDF_NIL];

            if (nil.usages) {
              _context.next = 45;
              break;
            }

            return _context.abrupt("continue", 37);

          case 45:
            _iterator2 = _createForOfIteratorHelper(nil.usages);
            _context.prev = 46;

            _iterator2.s();

          case 48:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 73;
              break;
            }

            usage = _step2.value;
            node = usage.node;
            property = usage.property;
            head = usage.value;
            list = [];
            listNodes = []; // ensure node is a well-formed list node; it must:
            // 1. Be referenced only once.
            // 2. Have an array for rdf:first that has 1 item.
            // 3. Have an array for rdf:rest that has 1 item.
            // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
            //   optionally, @type where the value is rdf:List.

            nodeKeyCount = Object.keys(node).length;

          case 56:
            if (!(property === RDF_REST && types.isObject(referencedOnce[node['@id']]) && types.isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 && types.isArray(node[RDF_REST]) && node[RDF_REST].length === 1 && (nodeKeyCount === 3 || nodeKeyCount === 4 && types.isArray(node['@type']) && node['@type'].length === 1 && node['@type'][0] === RDF_LIST))) {
              _context.next = 68;
              break;
            }

            list.push(node[RDF_FIRST][0]);
            listNodes.push(node['@id']); // get next node, moving backwards through list

            usage = referencedOnce[node['@id']];
            node = usage.node;
            property = usage.property;
            head = usage.value;
            nodeKeyCount = Object.keys(node).length; // if node is not a blank node, then list head found

            if (graphTypes.isBlankNode(node)) {
              _context.next = 66;
              break;
            }

            return _context.abrupt("break", 68);

          case 66:
            _context.next = 56;
            break;

          case 68:
            // transform list into @list object
            delete head['@id'];
            head['@list'] = list.reverse();

            for (_i = 0, _listNodes = listNodes; _i < _listNodes.length; _i++) {
              listNode = _listNodes[_i];
              delete graphObject[listNode];
            }

          case 71:
            _context.next = 48;
            break;

          case 73:
            _context.next = 78;
            break;

          case 75:
            _context.prev = 75;
            _context.t3 = _context["catch"](46);

            _iterator2.e(_context.t3);

          case 78:
            _context.prev = 78;

            _iterator2.f();

            return _context.finish(78);

          case 81:
            delete nil.usages;
            _context.next = 37;
            break;

          case 84:
            result = [];
            subjects = Object.keys(defaultGraph).sort();
            _iterator3 = _createForOfIteratorHelper(subjects);

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                subject = _step3.value;
                _node2 = defaultGraph[subject];

                if (subject in graphMap) {
                  graph = _node2['@graph'] = [];
                  _graphObject = graphMap[subject];
                  graphSubjects = Object.keys(_graphObject).sort();
                  _iterator4 = _createForOfIteratorHelper(graphSubjects);

                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                      graphSubject = _step4.value;
                      _node3 = _graphObject[graphSubject]; // only add full subjects to top-level

                      if (!graphTypes.isSubjectReference(_node3)) {
                        graph.push(_node3);
                      }
                    }
                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }
                } // only add full subjects to top-level


                if (!graphTypes.isSubjectReference(_node2)) {
                  result.push(_node2);
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            return _context.abrupt("return", result);

          case 89:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[5, 30, 33, 36], [46, 75, 78, 81]]);
  }));

  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Converts an RDF triple object to a JSON-LD object.
 *
 * @param o the RDF triple object to convert.
 * @param useNativeTypes true to output native types, false not to.
 *
 * @return the JSON-LD object.
 */


function _RDFToObject(o, useNativeTypes, rdfDirection) {
  // convert NamedNode/BlankNode object to JSON-LD
  if (o.termType.endsWith('Node')) {
    return {
      '@id': o.value
    };
  } // convert literal to JSON-LD


  var rval = {
    '@value': o.value
  }; // add language

  if (o.language) {
    rval['@language'] = o.language;
  } else {
    var type = o.datatype.value;

    if (!type) {
      type = XSD_STRING;
    }

    if (type === RDF_JSON_LITERAL) {
      type = '@json';

      try {
        rval['@value'] = JSON.parse(rval['@value']);
      } catch (e) {
        throw new JsonLdError('JSON literal could not be parsed.', 'jsonld.InvalidJsonLiteral', {
          code: 'invalid JSON literal',
          value: rval['@value'],
          cause: e
        });
      }
    } // use native types for certain xsd types


    if (useNativeTypes) {
      if (type === XSD_BOOLEAN) {
        if (rval['@value'] === 'true') {
          rval['@value'] = true;
        } else if (rval['@value'] === 'false') {
          rval['@value'] = false;
        }
      } else if (types.isNumeric(rval['@value'])) {
        if (type === XSD_INTEGER) {
          var i = parseInt(rval['@value'], 10);

          if (i.toFixed(0) === rval['@value']) {
            rval['@value'] = i;
          }
        } else if (type === XSD_DOUBLE) {
          rval['@value'] = parseFloat(rval['@value']);
        }
      } // do not add native type


      if (![XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING].includes(type)) {
        rval['@type'] = type;
      }
    } else if (rdfDirection === 'i18n-datatype' && type.startsWith('https://www.w3.org/ns/i18n#')) {
      var _type$split = type.split(/[#_]/),
          _type$split2 = _slicedToArray(_type$split, 3),
          language = _type$split2[1],
          direction = _type$split2[2];

      if (language.length > 0) {
        rval['@language'] = language;

        if (!language.match(REGEX_BCP47)) {
          console.warn("@language must be valid BCP47: ".concat(language));
        }
      }

      rval['@direction'] = direction;
    } else if (type !== XSD_STRING) {
      rval['@type'] = type;
    }
  }

  return rval;
}

/***/ }),

/***/ 61431:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


var types = __webpack_require__(4319);

var api = {};
module.exports = api;
/**
 * Returns true if the given value is a subject with properties.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject with properties, false if not.
 */

api.isSubject = function (v) {
  // Note: A value is a subject if all of these hold true:
  // 1. It is an Object.
  // 2. It is not a @value, @set, or @list.
  // 3. It has more than 1 key OR any existing key is not @id.
  if (types.isObject(v) && !('@value' in v || '@set' in v || '@list' in v)) {
    var keyCount = Object.keys(v).length;
    return keyCount > 1 || !('@id' in v);
  }

  return false;
};
/**
 * Returns true if the given value is a subject reference.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject reference, false if not.
 */


api.isSubjectReference = function (v) {
  return (// Note: A value is a subject reference if all of these hold true:
    // 1. It is an Object.
    // 2. It has a single key: @id.
    types.isObject(v) && Object.keys(v).length === 1 && '@id' in v
  );
};
/**
 * Returns true if the given value is a @value.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @value, false if not.
 */


api.isValue = function (v) {
  return (// Note: A value is a @value if all of these hold true:
    // 1. It is an Object.
    // 2. It has the @value property.
    types.isObject(v) && '@value' in v
  );
};
/**
 * Returns true if the given value is a @list.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @list, false if not.
 */


api.isList = function (v) {
  return (// Note: A value is a @list if all of these hold true:
    // 1. It is an Object.
    // 2. It has the @list property.
    types.isObject(v) && '@list' in v
  );
};
/**
 * Returns true if the given value is a @graph.
 *
 * @return true if the value is a @graph, false if not.
 */


api.isGraph = function (v) {
  // Note: A value is a graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It may have '@id' or '@index'
  return types.isObject(v) && '@graph' in v && Object.keys(v).filter(function (key) {
    return key !== '@id' && key !== '@index';
  }).length === 1;
};
/**
 * Returns true if the given value is a simple @graph.
 *
 * @return true if the value is a simple @graph, false if not.
 */


api.isSimpleGraph = function (v) {
  // Note: A value is a simple graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It has only 1 key or 2 keys where one of them is `@index`.
  return api.isGraph(v) && !('@id' in v);
};
/**
 * Returns true if the given value is a blank node.
 *
 * @param v the value to check.
 *
 * @return true if the value is a blank node, false if not.
 */


api.isBlankNode = function (v) {
  // Note: A value is a blank node if all of these hold true:
  // 1. It is an Object.
  // 2. If it has an @id key its value begins with '_:'.
  // 3. It has no keys OR is not a @value, @set, or @list.
  if (types.isObject(v)) {
    if ('@id' in v) {
      return v['@id'].indexOf('_:') === 0;
    }

    return Object.keys(v).length === 0 || !('@value' in v || '@set' in v || '@list' in v);
  }

  return false;
};

/***/ }),

/***/ 64706:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2019 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var canonize = __webpack_require__(59145);

var platform = __webpack_require__(5599);

var util = __webpack_require__(88336);

var ContextResolver = __webpack_require__(15773);

var IdentifierIssuer = util.IdentifierIssuer;

var JsonLdError = __webpack_require__(3275);

var LRU = __webpack_require__(76875);

var NQuads = __webpack_require__(37153);

var _require = __webpack_require__(73558),
    _expand = _require.expand;

var _require2 = __webpack_require__(73572),
    _flatten = _require2.flatten;

var _require3 = __webpack_require__(20416),
    _fromRDF = _require3.fromRDF;

var _require4 = __webpack_require__(73766),
    _toRDF = _require4.toRDF;

var _require5 = __webpack_require__(64268),
    _frameMergedOrDefault = _require5.frameMergedOrDefault,
    _cleanupNull = _require5.cleanupNull;

var _require6 = __webpack_require__(4319),
    _isArray = _require6.isArray,
    _isObject = _require6.isObject,
    _isString = _require6.isString;

var _require7 = __webpack_require__(61431),
    _isSubjectReference = _require7.isSubjectReference;

var _require8 = __webpack_require__(15866),
    _expandIri = _require8.expandIri,
    _getInitialContext = _require8.getInitialContext,
    _processContext = _require8.process,
    _processingMode = _require8.processingMode;

var _require9 = __webpack_require__(23639),
    _compact = _require9.compact,
    _compactIri = _require9.compactIri;

var _require10 = __webpack_require__(57823),
    _createNodeMap = _require10.createNodeMap,
    _createMergedNodeMap = _require10.createMergedNodeMap,
    _mergeNodeMaps = _require10.mergeNodeMaps;
/* eslint-disable indent */
// attaches jsonld API to the given object


var wrapper = function wrapper(jsonld) {
  /** Registered RDF dataset parsers hashed by content-type. */
  var _rdfParsers = {}; // resolved context cache
  // TODO: consider basing max on context size rather than number

  var RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;

  var _resolvedContextCache = new LRU({
    max: RESOLVED_CONTEXT_CACHE_MAX_SIZE
  });
  /* Core API */

  /**
   * Performs JSON-LD compaction.
   *
   * @param input the JSON-LD input to compact.
   * @param ctx the context to compact with.
   * @param [options] options to use:
   *          [base] the base IRI to use.
   *          [compactArrays] true to compact arrays to single values when
   *            appropriate, false not to (default: true).
   *          [compactToRelative] true to compact IRIs to be relative to document
   *            base, false to keep absolute (default: true)
   *          [graph] true to always output a top-level graph (default: false).
   *          [expandContext] a context to expand with.
   *          [skipExpansion] true to assume the input is expanded and skip
   *            expansion, false not to, defaults to false.
   *          [documentLoader(url, options)] the document loader.
   *          [expansionMap(info)] a function that can be used to custom map
   *            unmappable values (or to throw an error when they are detected);
   *            if this function returns `undefined` then the default behavior
   *            will be used.
   *          [framing] true if compaction is occuring during a framing operation.
   *          [compactionMap(info)] a function that can be used to custom map
   *            unmappable values (or to throw an error when they are detected);
   *            if this function returns `undefined` then the default behavior
   *            will be used.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the compacted output.
   */


  jsonld.compact = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(input, ctx, options) {
      var expanded,
          activeCtx,
          compacted,
          tmp,
          i,
          hasContext,
          graphAlias,
          graph,
          _graph,
          key,
          _args = arguments;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(_args.length < 2)) {
                _context.next = 2;
                break;
              }

              throw new TypeError('Could not compact, too few arguments.');

            case 2:
              if (!(ctx === null)) {
                _context.next = 4;
                break;
              }

              throw new JsonLdError('The compaction context must not be null.', 'jsonld.CompactError', {
                code: 'invalid local context'
              });

            case 4:
              if (!(input === null)) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return", null);

            case 6:
              // set default options
              options = _setDefaults(options, {
                base: _isString(input) ? input : '',
                compactArrays: true,
                compactToRelative: true,
                graph: false,
                skipExpansion: false,
                link: false,
                issuer: new IdentifierIssuer('_:b'),
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              });

              if (options.link) {
                // force skip expansion when linking, "link" is not part of the public
                // API, it should only be called from framing
                options.skipExpansion = true;
              }

              if (!options.compactToRelative) {
                delete options.base;
              } // expand input


              if (!options.skipExpansion) {
                _context.next = 13;
                break;
              }

              expanded = input;
              _context.next = 16;
              break;

            case 13:
              _context.next = 15;
              return jsonld.expand(input, options);

            case 15:
              expanded = _context.sent;

            case 16:
              _context.next = 18;
              return jsonld.processContext(_getInitialContext(options), ctx, options);

            case 18:
              activeCtx = _context.sent;
              _context.next = 21;
              return _compact({
                activeCtx: activeCtx,
                element: expanded,
                options: options,
                compactionMap: options.compactionMap
              });

            case 21:
              compacted = _context.sent;

              // perform clean up
              if (options.compactArrays && !options.graph && _isArray(compacted)) {
                if (compacted.length === 1) {
                  // simplify to a single item
                  compacted = compacted[0];
                } else if (compacted.length === 0) {
                  // simplify to an empty object
                  compacted = {};
                }
              } else if (options.graph && _isObject(compacted)) {
                // always use array if graph option is on
                compacted = [compacted];
              } // follow @context key


              if (_isObject(ctx) && '@context' in ctx) {
                ctx = ctx['@context'];
              } // build output context


              ctx = util.clone(ctx);

              if (!_isArray(ctx)) {
                ctx = [ctx];
              } // remove empty contexts


              tmp = ctx;
              ctx = [];

              for (i = 0; i < tmp.length; ++i) {
                if (!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {
                  ctx.push(tmp[i]);
                }
              } // remove array if only one context


              hasContext = ctx.length > 0;

              if (ctx.length === 1) {
                ctx = ctx[0];
              } // add context and/or @graph


              if (_isArray(compacted)) {
                // use '@graph' keyword
                graphAlias = _compactIri({
                  activeCtx: activeCtx,
                  iri: '@graph',
                  relativeTo: {
                    vocab: true
                  }
                });
                graph = compacted;
                compacted = {};

                if (hasContext) {
                  compacted['@context'] = ctx;
                }

                compacted[graphAlias] = graph;
              } else if (_isObject(compacted) && hasContext) {
                // reorder keys so @context is first
                _graph = compacted;
                compacted = {
                  '@context': ctx
                };

                for (key in _graph) {
                  compacted[key] = _graph[key];
                }
              }

              return _context.abrupt("return", compacted);

            case 33:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Performs JSON-LD expansion.
   *
   * @param input the JSON-LD input to expand.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [keepFreeFloatingNodes] true to keep free-floating nodes,
   *            false not to, defaults to false.
   *          [documentLoader(url, options)] the document loader.
   *          [expansionMap(info)] a function that can be used to custom map
   *            unmappable values (or to throw an error when they are detected);
   *            if this function returns `undefined` then the default behavior
   *            will be used.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the expanded output.
   */


  jsonld.expand = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(input, options) {
      var toResolve,
          contextsToProcess,
          expandContext,
          defaultBase,
          remoteDoc,
          activeCtx,
          _i,
          _contextsToProcess,
          localCtx,
          expanded,
          _args2 = arguments;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_args2.length < 1)) {
                _context2.next = 2;
                break;
              }

              throw new TypeError('Could not expand, too few arguments.');

            case 2:
              // set default options
              options = _setDefaults(options, {
                keepFreeFloatingNodes: false,
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              });

              if (options.expansionMap === false) {
                options.expansionMap = undefined;
              } // build set of objects that may have @contexts to resolve


              toResolve = {}; // build set of contexts to process prior to expansion

              contextsToProcess = []; // if an `expandContext` has been given ensure it gets resolved

              if ('expandContext' in options) {
                expandContext = util.clone(options.expandContext);

                if (_isObject(expandContext) && '@context' in expandContext) {
                  toResolve.expandContext = expandContext;
                } else {
                  toResolve.expandContext = {
                    '@context': expandContext
                  };
                }

                contextsToProcess.push(toResolve.expandContext);
              } // if input is a string, attempt to dereference remote document


              if (_isString(input)) {
                _context2.next = 11;
                break;
              }

              // input is not a URL, do not need to retrieve it first
              toResolve.input = util.clone(input);
              _context2.next = 17;
              break;

            case 11:
              _context2.next = 13;
              return jsonld.get(input, options);

            case 13:
              remoteDoc = _context2.sent;
              defaultBase = remoteDoc.documentUrl;
              toResolve.input = remoteDoc.document;

              if (remoteDoc.contextUrl) {
                // context included in HTTP link header and must be resolved
                toResolve.remoteContext = {
                  '@context': remoteDoc.contextUrl
                };
                contextsToProcess.push(toResolve.remoteContext);
              }

            case 17:
              // set default base
              if (!('base' in options)) {
                options.base = defaultBase || '';
              } // process any additional contexts


              activeCtx = _getInitialContext(options);
              _i = 0, _contextsToProcess = contextsToProcess;

            case 20:
              if (!(_i < _contextsToProcess.length)) {
                _context2.next = 28;
                break;
              }

              localCtx = _contextsToProcess[_i];
              _context2.next = 24;
              return _processContext({
                activeCtx: activeCtx,
                localCtx: localCtx,
                options: options
              });

            case 24:
              activeCtx = _context2.sent;

            case 25:
              _i++;
              _context2.next = 20;
              break;

            case 28:
              _context2.next = 30;
              return _expand({
                activeCtx: activeCtx,
                element: toResolve.input,
                options: options,
                expansionMap: options.expansionMap
              });

            case 30:
              expanded = _context2.sent;

              // optimize away @graph with no other properties
              if (_isObject(expanded) && '@graph' in expanded && Object.keys(expanded).length === 1) {
                expanded = expanded['@graph'];
              } else if (expanded === null) {
                expanded = [];
              } // normalize to an array


              if (!_isArray(expanded)) {
                expanded = [expanded];
              }

              return _context2.abrupt("return", expanded);

            case 34:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Performs JSON-LD flattening.
   *
   * @param input the JSON-LD to flatten.
   * @param ctx the context to use to compact the flattened output, or null.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the flattened output.
   */


  jsonld.flatten = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(input, ctx, options) {
      var expanded,
          flattened,
          compacted,
          _args3 = arguments;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_args3.length < 1)) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", new TypeError('Could not flatten, too few arguments.'));

            case 2:
              if (typeof ctx === 'function') {
                ctx = null;
              } else {
                ctx = ctx || null;
              } // set default options


              options = _setDefaults(options, {
                base: _isString(input) ? input : '',
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              }); // expand input

              _context3.next = 6;
              return jsonld.expand(input, options);

            case 6:
              expanded = _context3.sent;
              // do flattening
              flattened = _flatten(expanded);

              if (!(ctx === null)) {
                _context3.next = 10;
                break;
              }

              return _context3.abrupt("return", flattened);

            case 10:
              // compact result (force @graph option to true, skip expansion)
              options.graph = true;
              options.skipExpansion = true;
              _context3.next = 14;
              return jsonld.compact(flattened, ctx, options);

            case 14:
              compacted = _context3.sent;
              return _context3.abrupt("return", compacted);

            case 16:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x6, _x7, _x8) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Performs JSON-LD framing.
   *
   * @param input the JSON-LD input to frame.
   * @param frame the JSON-LD frame to use.
   * @param [options] the framing options.
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
   *            (default: '@last').
   *          [explicit] default @explicit flag (default: false).
   *          [requireAll] default @requireAll flag (default: true).
   *          [omitDefault] default @omitDefault flag (default: false).
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the framed output.
   */


  jsonld.frame = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(input, frame, options) {
      var remoteDoc,
          ctx,
          frameContext,
          activeCtx,
          expanded,
          opts,
          expandedFrame,
          frameKeys,
          framed,
          compacted,
          _args4 = arguments;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(_args4.length < 2)) {
                _context4.next = 2;
                break;
              }

              throw new TypeError('Could not frame, too few arguments.');

            case 2:
              // set default options
              options = _setDefaults(options, {
                base: _isString(input) ? input : '',
                embed: '@once',
                explicit: false,
                requireAll: false,
                omitDefault: false,
                bnodesToClear: [],
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              }); // if frame is a string, attempt to dereference remote document

              if (!_isString(frame)) {
                _context4.next = 9;
                break;
              }

              _context4.next = 6;
              return jsonld.get(frame, options);

            case 6:
              remoteDoc = _context4.sent;
              frame = remoteDoc.document;

              if (remoteDoc.contextUrl) {
                // inject link header @context into frame
                ctx = frame['@context'];

                if (!ctx) {
                  ctx = remoteDoc.contextUrl;
                } else if (_isArray(ctx)) {
                  ctx.push(remoteDoc.contextUrl);
                } else {
                  ctx = [ctx, remoteDoc.contextUrl];
                }

                frame['@context'] = ctx;
              }

            case 9:
              frameContext = frame ? frame['@context'] || {} : {}; // process context

              _context4.next = 12;
              return jsonld.processContext(_getInitialContext(options), frameContext, options);

            case 12:
              activeCtx = _context4.sent;

              // mode specific defaults
              if (!options.hasOwnProperty('omitGraph')) {
                options.omitGraph = _processingMode(activeCtx, 1.1);
              }

              if (!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {
                options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);
              } // expand input


              _context4.next = 17;
              return jsonld.expand(input, options);

            case 17:
              expanded = _context4.sent;
              // expand frame
              opts = _objectSpread({}, options);
              opts.isFrame = true;
              opts.keepFreeFloatingNodes = true;
              _context4.next = 23;
              return jsonld.expand(frame, opts);

            case 23:
              expandedFrame = _context4.sent;
              // if the unexpanded frame includes a key expanding to @graph, frame the
              // default graph, otherwise, the merged graph
              frameKeys = Object.keys(frame).map(function (key) {
                return _expandIri(activeCtx, key, {
                  vocab: true
                });
              });
              opts.merged = !frameKeys.includes('@graph');
              opts.is11 = _processingMode(activeCtx, 1.1); // do framing

              framed = _frameMergedOrDefault(expanded, expandedFrame, opts);
              opts.graph = !options.omitGraph;
              opts.skipExpansion = true;
              opts.link = {};
              opts.framing = true;
              _context4.next = 34;
              return jsonld.compact(framed, frameContext, opts);

            case 34:
              compacted = _context4.sent;
              // replace @null with null, compacting arrays
              opts.link = {};
              compacted = _cleanupNull(compacted, opts);
              return _context4.abrupt("return", compacted);

            case 38:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x9, _x10, _x11) {
      return _ref4.apply(this, arguments);
    };
  }();
  /**
   * **Experimental**
   *
   * Links a JSON-LD document's nodes in memory.
   *
   * @param input the JSON-LD document to link.
   * @param [ctx] the JSON-LD context to apply.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the linked output.
   */


  jsonld.link = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(input, ctx, options) {
      var frame;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              // API matches running frame with a wildcard frame and embed: '@link'
              // get arguments
              frame = {};

              if (ctx) {
                frame['@context'] = ctx;
              }

              frame['@embed'] = '@link';
              return _context5.abrupt("return", jsonld.frame(input, frame, options));

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x12, _x13, _x14) {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Performs RDF dataset normalization on the given input. The input is JSON-LD
   * unless the 'inputFormat' option is used. The output is an RDF dataset
   * unless the 'format' option is used.
   *
   * @param input the input to normalize as JSON-LD or as a format specified by
   *          the 'inputFormat' option.
   * @param [options] the options to use:
   *          [algorithm] the normalization algorithm to use, `URDNA2015` or
   *            `URGNA2012` (default: `URDNA2015`).
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [skipExpansion] true to assume the input is expanded and skip
   *            expansion, false not to, defaults to false.
   *          [inputFormat] the format if input is not JSON-LD:
   *            'application/n-quads' for N-Quads.
   *          [format] the format if output is a string:
   *            'application/n-quads' for N-Quads.
   *          [documentLoader(url, options)] the document loader.
   *          [useNative] true to use a native canonize algorithm
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the normalized output.
   */


  jsonld.normalize = jsonld.canonize = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(input, options) {
      var parsedInput,
          opts,
          dataset,
          _args6 = arguments;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_args6.length < 1)) {
                _context6.next = 2;
                break;
              }

              throw new TypeError('Could not canonize, too few arguments.');

            case 2:
              // set default options
              options = _setDefaults(options, {
                base: _isString(input) ? input : '',
                algorithm: 'URDNA2015',
                skipExpansion: false,
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              });

              if (!('inputFormat' in options)) {
                _context6.next = 8;
                break;
              }

              if (!(options.inputFormat !== 'application/n-quads' && options.inputFormat !== 'application/nquads')) {
                _context6.next = 6;
                break;
              }

              throw new JsonLdError('Unknown canonicalization input format.', 'jsonld.CanonizeError');

            case 6:
              // TODO: `await` for async parsers
              parsedInput = NQuads.parse(input); // do canonicalization

              return _context6.abrupt("return", canonize.canonize(parsedInput, options));

            case 8:
              // convert to RDF dataset then do normalization
              opts = _objectSpread({}, options);
              delete opts.format;
              opts.produceGeneralizedRdf = false;
              _context6.next = 13;
              return jsonld.toRDF(input, opts);

            case 13:
              dataset = _context6.sent;
              return _context6.abrupt("return", canonize.canonize(dataset, options));

            case 15:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x15, _x16) {
      return _ref6.apply(this, arguments);
    };
  }();
  /**
   * Converts an RDF dataset to JSON-LD.
   *
   * @param dataset a serialized string of RDF in a format specified by the
   *          format option or an RDF dataset to convert.
   * @param [options] the options to use:
   *          [format] the format if dataset param must first be parsed:
   *            'application/n-quads' for N-Quads (default).
   *          [rdfParser] a custom RDF-parser to use to parse the dataset.
   *          [useRdfType] true to use rdf:type, false to use @type
   *            (default: false).
   *          [useNativeTypes] true to convert XSD types into native types
   *            (boolean, integer, double), false not to (default: false).
   *
   * @return a Promise that resolves to the JSON-LD document.
   */


  jsonld.fromRDF = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(dataset, options) {
      var _options,
          format,
          _options2,
          rdfParser,
          parsedDataset,
          _args7 = arguments;

      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!(_args7.length < 1)) {
                _context7.next = 2;
                break;
              }

              throw new TypeError('Could not convert from RDF, too few arguments.');

            case 2:
              // set default options
              options = _setDefaults(options, {
                format: _isString(dataset) ? 'application/n-quads' : undefined
              });
              _options = options, format = _options.format;
              _options2 = options, rdfParser = _options2.rdfParser; // handle special format

              if (!format) {
                _context7.next = 11;
                break;
              }

              // check supported formats
              rdfParser = rdfParser || _rdfParsers[format];

              if (rdfParser) {
                _context7.next = 9;
                break;
              }

              throw new JsonLdError('Unknown input format.', 'jsonld.UnknownFormat', {
                format: format
              });

            case 9:
              _context7.next = 12;
              break;

            case 11:
              // no-op parser, assume dataset already parsed
              rdfParser = function rdfParser() {
                return dataset;
              };

            case 12:
              _context7.next = 14;
              return rdfParser(dataset);

            case 14:
              parsedDataset = _context7.sent;
              return _context7.abrupt("return", _fromRDF(parsedDataset, options));

            case 16:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x17, _x18) {
      return _ref7.apply(this, arguments);
    };
  }();
  /**
   * Outputs the RDF dataset found in the given JSON-LD object.
   *
   * @param input the JSON-LD input.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [skipExpansion] true to assume the input is expanded and skip
   *            expansion, false not to, defaults to false.
   *          [format] the format to use to output a string:
   *            'application/n-quads' for N-Quads.
   *          [produceGeneralizedRdf] true to output generalized RDF, false
   *            to produce only standard RDF (default: false).
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the RDF dataset.
   */


  jsonld.toRDF = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(input, options) {
      var expanded,
          dataset,
          _args8 = arguments;
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (!(_args8.length < 1)) {
                _context8.next = 2;
                break;
              }

              throw new TypeError('Could not convert to RDF, too few arguments.');

            case 2:
              // set default options
              options = _setDefaults(options, {
                base: _isString(input) ? input : '',
                skipExpansion: false,
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              }); // TODO: support toRDF custom map?

              if (!options.skipExpansion) {
                _context8.next = 7;
                break;
              }

              expanded = input;
              _context8.next = 10;
              break;

            case 7:
              _context8.next = 9;
              return jsonld.expand(input, options);

            case 9:
              expanded = _context8.sent;

            case 10:
              // output RDF dataset
              dataset = _toRDF(expanded, options);

              if (!options.format) {
                _context8.next = 15;
                break;
              }

              if (!(options.format === 'application/n-quads' || options.format === 'application/nquads')) {
                _context8.next = 14;
                break;
              }

              return _context8.abrupt("return", NQuads.serialize(dataset));

            case 14:
              throw new JsonLdError('Unknown output format.', 'jsonld.UnknownFormat', {
                format: options.format
              });

            case 15:
              return _context8.abrupt("return", dataset);

            case 16:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    return function (_x19, _x20) {
      return _ref8.apply(this, arguments);
    };
  }();
  /**
   * **Experimental**
   *
   * Recursively flattens the nodes in the given JSON-LD input into a merged
   * map of node ID => node. All graphs will be merged into the default graph.
   *
   * @param input the JSON-LD input.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the merged node map.
   */


  jsonld.createNodeMap = /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(input, options) {
      var expanded,
          _args9 = arguments;
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (!(_args9.length < 1)) {
                _context9.next = 2;
                break;
              }

              throw new TypeError('Could not create node map, too few arguments.');

            case 2:
              // set default options
              options = _setDefaults(options, {
                base: _isString(input) ? input : '',
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              }); // expand input

              _context9.next = 5;
              return jsonld.expand(input, options);

            case 5:
              expanded = _context9.sent;
              return _context9.abrupt("return", _createMergedNodeMap(expanded, options));

            case 7:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x21, _x22) {
      return _ref9.apply(this, arguments);
    };
  }();
  /**
   * **Experimental**
   *
   * Merges two or more JSON-LD documents into a single flattened document.
   *
   * @param docs the JSON-LD documents to merge together.
   * @param ctx the context to use to compact the merged result, or null.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
   *          [mergeNodes] true to merge properties for nodes with the same ID,
   *            false to ignore new properties for nodes with the same ID once
   *            the ID has been defined; note that this may not prevent merging
   *            new properties where a node is in the `object` position
   *            (default: true).
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the merged output.
   */


  jsonld.merge = /*#__PURE__*/function () {
    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(docs, ctx, options) {
      var expanded,
          mergeNodes,
          issuer,
          graphs,
          i,
          doc,
          _graphs,
          graphName,
          _nodeMap,
          nodeMap,
          key,
          defaultGraph,
          flattened,
          keys,
          ki,
          node,
          compacted,
          _args10 = arguments;

      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (!(_args10.length < 1)) {
                _context10.next = 2;
                break;
              }

              throw new TypeError('Could not merge, too few arguments.');

            case 2:
              if (_isArray(docs)) {
                _context10.next = 4;
                break;
              }

              throw new TypeError('Could not merge, "docs" must be an array.');

            case 4:
              if (typeof ctx === 'function') {
                ctx = null;
              } else {
                ctx = ctx || null;
              } // set default options


              options = _setDefaults(options, {
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              }); // expand all documents

              _context10.next = 8;
              return Promise.all(docs.map(function (doc) {
                var opts = _objectSpread({}, options);

                return jsonld.expand(doc, opts);
              }));

            case 8:
              expanded = _context10.sent;
              mergeNodes = true;

              if ('mergeNodes' in options) {
                mergeNodes = options.mergeNodes;
              }

              issuer = options.issuer || new IdentifierIssuer('_:b');
              graphs = {
                '@default': {}
              };
              i = 0;

            case 14:
              if (!(i < expanded.length)) {
                _context10.next = 33;
                break;
              }

              // uniquely relabel blank nodes
              doc = util.relabelBlankNodes(expanded[i], {
                issuer: new IdentifierIssuer('_:b' + i + '-')
              }); // add nodes to the shared node map graphs if merging nodes, to a
              // separate graph set if not

              _graphs = mergeNodes || i === 0 ? graphs : {
                '@default': {}
              };

              _createNodeMap(doc, _graphs, '@default', issuer);

              if (!(_graphs !== graphs)) {
                _context10.next = 30;
                break;
              }

              _context10.t0 = regeneratorRuntime.keys(_graphs);

            case 20:
              if ((_context10.t1 = _context10.t0()).done) {
                _context10.next = 30;
                break;
              }

              graphName = _context10.t1.value;
              _nodeMap = _graphs[graphName];

              if (graphName in graphs) {
                _context10.next = 26;
                break;
              }

              graphs[graphName] = _nodeMap;
              return _context10.abrupt("continue", 20);

            case 26:
              nodeMap = graphs[graphName];

              for (key in _nodeMap) {
                if (!(key in nodeMap)) {
                  nodeMap[key] = _nodeMap[key];
                }
              }

              _context10.next = 20;
              break;

            case 30:
              ++i;
              _context10.next = 14;
              break;

            case 33:
              // add all non-default graphs to default graph
              defaultGraph = _mergeNodeMaps(graphs); // produce flattened output

              flattened = [];
              keys = Object.keys(defaultGraph).sort();

              for (ki = 0; ki < keys.length; ++ki) {
                node = defaultGraph[keys[ki]]; // only add full subjects to top-level

                if (!_isSubjectReference(node)) {
                  flattened.push(node);
                }
              }

              if (!(ctx === null)) {
                _context10.next = 39;
                break;
              }

              return _context10.abrupt("return", flattened);

            case 39:
              // compact result (force @graph option to true, skip expansion)
              options.graph = true;
              options.skipExpansion = true;
              _context10.next = 43;
              return jsonld.compact(flattened, ctx, options);

            case 43:
              compacted = _context10.sent;
              return _context10.abrupt("return", compacted);

            case 45:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x23, _x24, _x25) {
      return _ref10.apply(this, arguments);
    };
  }();
  /**
   * The default document loader for external documents.
   *
   * @param url the URL to load.
   *
   * @return a promise that resolves to the remote document.
   */


  Object.defineProperty(jsonld, 'documentLoader', {
    get: function get() {
      return jsonld._documentLoader;
    },
    set: function set(v) {
      return jsonld._documentLoader = v;
    }
  }); // default document loader not implemented

  jsonld.documentLoader = /*#__PURE__*/function () {
    var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(url) {
      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              throw new JsonLdError('Could not retrieve a JSON-LD document from the URL. URL ' + 'dereferencing not implemented.', 'jsonld.LoadDocumentError', {
                code: 'loading document failed',
                url: url
              });

            case 1:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x26) {
      return _ref11.apply(this, arguments);
    };
  }();
  /**
   * Gets a remote JSON-LD document using the default document loader or
   * one given in the passed options.
   *
   * @param url the URL to fetch.
   * @param [options] the options to use:
   *          [documentLoader] the document loader to use.
   *
   * @return a Promise that resolves to the retrieved remote document.
   */


  jsonld.get = /*#__PURE__*/function () {
    var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(url, options) {
      var load, remoteDoc;
      return regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              if (typeof options.documentLoader === 'function') {
                load = options.documentLoader;
              } else {
                load = jsonld.documentLoader;
              }

              _context12.next = 3;
              return load(url);

            case 3:
              remoteDoc = _context12.sent;
              _context12.prev = 4;

              if (remoteDoc.document) {
                _context12.next = 7;
                break;
              }

              throw new JsonLdError('No remote document found at the given URL.', 'jsonld.NullRemoteDocument');

            case 7:
              if (_isString(remoteDoc.document)) {
                remoteDoc.document = JSON.parse(remoteDoc.document);
              }

              _context12.next = 13;
              break;

            case 10:
              _context12.prev = 10;
              _context12.t0 = _context12["catch"](4);
              throw new JsonLdError('Could not retrieve a JSON-LD document from the URL.', 'jsonld.LoadDocumentError', {
                code: 'loading document failed',
                cause: _context12.t0,
                remoteDoc: remoteDoc
              });

            case 13:
              return _context12.abrupt("return", remoteDoc);

            case 14:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, null, [[4, 10]]);
    }));

    return function (_x27, _x28) {
      return _ref12.apply(this, arguments);
    };
  }();
  /**
   * Processes a local context, resolving any URLs as necessary, and returns a
   * new active context.
   *
   * @param activeCtx the current active context.
   * @param localCtx the local context to process.
   * @param [options] the options to use:
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the new active context.
   */


  jsonld.processContext = /*#__PURE__*/function () {
    var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(activeCtx, localCtx, options) {
      return regeneratorRuntime.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              // set default options
              options = _setDefaults(options, {
                base: '',
                contextResolver: new ContextResolver({
                  sharedCache: _resolvedContextCache
                })
              }); // return initial context early for null context

              if (!(localCtx === null)) {
                _context13.next = 3;
                break;
              }

              return _context13.abrupt("return", _getInitialContext(options));

            case 3:
              // get URLs in localCtx
              localCtx = util.clone(localCtx);

              if (!(_isObject(localCtx) && '@context' in localCtx)) {
                localCtx = {
                  '@context': localCtx
                };
              }

              return _context13.abrupt("return", _processContext({
                activeCtx: activeCtx,
                localCtx: localCtx,
                options: options
              }));

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    return function (_x29, _x30, _x31) {
      return _ref13.apply(this, arguments);
    };
  }(); // backwards compatibility


  jsonld.getContextValue = (__webpack_require__(15866).getContextValue);
  /**
   * Document loaders.
   */

  jsonld.documentLoaders = {};
  /**
   * Assigns the default document loader for external document URLs to a built-in
   * default. Supported types currently include: 'xhr' and 'node'.
   *
   * @param type the type to set.
   * @param [params] the parameters required to use the document loader.
   */

  jsonld.useDocumentLoader = function (type) {
    if (!(type in jsonld.documentLoaders)) {
      throw new JsonLdError('Unknown document loader type: "' + type + '"', 'jsonld.UnknownDocumentLoader', {
        type: type
      });
    } // set document loader


    jsonld.documentLoader = jsonld.documentLoaders[type].apply(jsonld, Array.prototype.slice.call(arguments, 1));
  };
  /**
   * Registers an RDF dataset parser by content-type, for use with
   * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,
   * a string of input. An RDF dataset parser can be synchronous or
   * asynchronous (by returning a promise).
   *
   * @param contentType the content-type for the parser.
   * @param parser(input) the parser function (takes a string as a parameter
   *          and either returns an RDF dataset or a Promise that resolves to one.
   */


  jsonld.registerRDFParser = function (contentType, parser) {
    _rdfParsers[contentType] = parser;
  };
  /**
   * Unregisters an RDF dataset parser by content-type.
   *
   * @param contentType the content-type for the parser.
   */


  jsonld.unregisterRDFParser = function (contentType) {
    delete _rdfParsers[contentType];
  }; // register the N-Quads RDF parser


  jsonld.registerRDFParser('application/n-quads', NQuads.parse);
  jsonld.registerRDFParser('application/nquads', NQuads.parse);
  /* URL API */

  jsonld.url = __webpack_require__(41528);
  /* Utility API */

  jsonld.util = util; // backwards compatibility

  Object.assign(jsonld, util); // reexpose API as jsonld.promises for backwards compatability

  jsonld.promises = jsonld; // backwards compatibility

  jsonld.RequestQueue = __webpack_require__(48624);
  /* WebIDL API */

  jsonld.JsonLdProcessor = __webpack_require__(82304)(jsonld);
  platform.setupGlobals(jsonld);
  platform.setupDocumentLoaders(jsonld);

  function _setDefaults(options, _ref14) {
    var _ref14$documentLoader = _ref14.documentLoader,
        documentLoader = _ref14$documentLoader === void 0 ? jsonld.documentLoader : _ref14$documentLoader,
        defaults = _objectWithoutProperties(_ref14, ["documentLoader"]);

    return Object.assign({}, {
      documentLoader: documentLoader
    }, defaults, options);
  } // end of jsonld API `wrapper` factory


  return jsonld;
}; // external APIs:
// used to generate a new jsonld API instance


var factory = function factory() {
  return wrapper(function () {
    return factory();
  });
}; // wrap the main jsonld API instance


wrapper(factory); // export API

module.exports = factory;

/***/ }),

/***/ 57823:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = __webpack_require__(15866),
    isKeyword = _require.isKeyword;

var graphTypes = __webpack_require__(61431);

var types = __webpack_require__(4319);

var util = __webpack_require__(88336);

var JsonLdError = __webpack_require__(3275);

var api = {};
module.exports = api;
/**
 * Creates a merged JSON-LD node map (node ID => node).
 *
 * @param input the expanded JSON-LD to create a node map of.
 * @param [options] the options to use:
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *
 * @return the node map.
 */

api.createMergedNodeMap = function (input, options) {
  options = options || {}; // produce a map of all subjects and name each bnode

  var issuer = options.issuer || new util.IdentifierIssuer('_:b');
  var graphs = {
    '@default': {}
  };
  api.createNodeMap(input, graphs, '@default', issuer); // add all non-default graphs to default graph

  return api.mergeNodeMaps(graphs);
};
/**
 * Recursively flattens the subjects in the given JSON-LD expanded input
 * into a node map.
 *
 * @param input the JSON-LD expanded input.
 * @param graphs a map of graph name to subject map.
 * @param graph the name of the current graph.
 * @param issuer the blank node identifier issuer.
 * @param name the name assigned to the current input if it is a bnode.
 * @param list the list to append to, null for none.
 */


api.createNodeMap = function (input, graphs, graph, issuer, name, list) {
  // recurse through array
  if (types.isArray(input)) {
    var _iterator = _createForOfIteratorHelper(input),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var node = _step.value;
        api.createNodeMap(node, graphs, graph, issuer, undefined, list);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return;
  } // add non-object to list


  if (!types.isObject(input)) {
    if (list) {
      list.push(input);
    }

    return;
  } // add values to list


  if (graphTypes.isValue(input)) {
    if ('@type' in input) {
      var type = input['@type']; // rename @type blank node

      if (type.indexOf('_:') === 0) {
        input['@type'] = type = issuer.getId(type);
      }
    }

    if (list) {
      list.push(input);
    }

    return;
  } else if (list && graphTypes.isList(input)) {
    var _list = [];
    api.createNodeMap(input['@list'], graphs, graph, issuer, name, _list);
    list.push({
      '@list': _list
    });
    return;
  } // Note: At this point, input must be a subject.
  // spec requires @type to be named first, so assign names early


  if ('@type' in input) {
    var _types = input['@type'];

    var _iterator2 = _createForOfIteratorHelper(_types),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _type = _step2.value;

        if (_type.indexOf('_:') === 0) {
          issuer.getId(_type);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } // get name for subject


  if (types.isUndefined(name)) {
    name = graphTypes.isBlankNode(input) ? issuer.getId(input['@id']) : input['@id'];
  } // add subject reference to list


  if (list) {
    list.push({
      '@id': name
    });
  } // create new subject or merge into existing one


  var subjects = graphs[graph];
  var subject = subjects[name] = subjects[name] || {};
  subject['@id'] = name;
  var properties = Object.keys(input).sort();

  var _iterator3 = _createForOfIteratorHelper(properties),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var property = _step3.value;

      // skip @id
      if (property === '@id') {
        continue;
      } // handle reverse properties


      if (property === '@reverse') {
        var referencedNode = {
          '@id': name
        };
        var reverseMap = input['@reverse'];

        for (var reverseProperty in reverseMap) {
          var items = reverseMap[reverseProperty];

          var _iterator4 = _createForOfIteratorHelper(items),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var item = _step4.value;
              var itemName = item['@id'];

              if (graphTypes.isBlankNode(item)) {
                itemName = issuer.getId(itemName);
              }

              api.createNodeMap(item, graphs, graph, issuer, itemName);
              util.addValue(subjects[itemName], reverseProperty, referencedNode, {
                propertyIsArray: true,
                allowDuplicate: false
              });
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }

        continue;
      } // recurse into graph


      if (property === '@graph') {
        // add graph subjects map entry
        if (!(name in graphs)) {
          graphs[name] = {};
        }

        api.createNodeMap(input[property], graphs, name, issuer);
        continue;
      } // recurse into included


      if (property === '@included') {
        api.createNodeMap(input[property], graphs, graph, issuer);
        continue;
      } // copy non-@type keywords


      if (property !== '@type' && isKeyword(property)) {
        if (property === '@index' && property in subject && (input[property] !== subject[property] || input[property]['@id'] !== subject[property]['@id'])) {
          throw new JsonLdError('Invalid JSON-LD syntax; conflicting @index property detected.', 'jsonld.SyntaxError', {
            code: 'conflicting indexes',
            subject: subject
          });
        }

        subject[property] = input[property];
        continue;
      } // iterate over objects


      var objects = input[property]; // if property is a bnode, assign it a new id

      if (property.indexOf('_:') === 0) {
        property = issuer.getId(property);
      } // ensure property is added for empty arrays


      if (objects.length === 0) {
        util.addValue(subject, property, [], {
          propertyIsArray: true
        });
        continue;
      }

      var _iterator5 = _createForOfIteratorHelper(objects),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var o = _step5.value;

          if (property === '@type') {
            // rename @type blank nodes
            o = o.indexOf('_:') === 0 ? issuer.getId(o) : o;
          } // handle embedded subject or subject reference


          if (graphTypes.isSubject(o) || graphTypes.isSubjectReference(o)) {
            // skip null @id
            if ('@id' in o && !o['@id']) {
              continue;
            } // relabel blank node @id


            var id = graphTypes.isBlankNode(o) ? issuer.getId(o['@id']) : o['@id']; // add reference and recurse

            util.addValue(subject, property, {
              '@id': id
            }, {
              propertyIsArray: true,
              allowDuplicate: false
            });
            api.createNodeMap(o, graphs, graph, issuer, id);
          } else if (graphTypes.isValue(o)) {
            util.addValue(subject, property, o, {
              propertyIsArray: true,
              allowDuplicate: false
            });
          } else if (graphTypes.isList(o)) {
            // handle @list
            var _list2 = [];
            api.createNodeMap(o['@list'], graphs, graph, issuer, name, _list2);
            o = {
              '@list': _list2
            };
            util.addValue(subject, property, o, {
              propertyIsArray: true,
              allowDuplicate: false
            });
          } else {
            // handle @value
            api.createNodeMap(o, graphs, graph, issuer, name);
            util.addValue(subject, property, o, {
              propertyIsArray: true,
              allowDuplicate: false
            });
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
};
/**
 * Merge separate named graphs into a single merged graph including
 * all nodes from the default graph and named graphs.
 *
 * @param graphs a map of graph name to subject map.
 *
 * @return the merged graph map.
 */


api.mergeNodeMapGraphs = function (graphs) {
  var merged = {};

  var _iterator6 = _createForOfIteratorHelper(Object.keys(graphs).sort()),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var name = _step6.value;

      var _iterator7 = _createForOfIteratorHelper(Object.keys(graphs[name]).sort()),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var id = _step7.value;
          var node = graphs[name][id];

          if (!(id in merged)) {
            merged[id] = {
              '@id': id
            };
          }

          var mergedNode = merged[id];

          var _iterator8 = _createForOfIteratorHelper(Object.keys(node).sort()),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var property = _step8.value;

              if (isKeyword(property) && property !== '@type') {
                // copy keywords
                mergedNode[property] = util.clone(node[property]);
              } else {
                // merge objects
                var _iterator9 = _createForOfIteratorHelper(node[property]),
                    _step9;

                try {
                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                    var value = _step9.value;
                    util.addValue(mergedNode, property, util.clone(value), {
                      propertyIsArray: true,
                      allowDuplicate: false
                    });
                  }
                } catch (err) {
                  _iterator9.e(err);
                } finally {
                  _iterator9.f();
                }
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return merged;
};

api.mergeNodeMaps = function (graphs) {
  // add all non-default graphs to default graph
  var defaultGraph = graphs['@default'];
  var graphNames = Object.keys(graphs).sort();

  var _iterator10 = _createForOfIteratorHelper(graphNames),
      _step10;

  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var graphName = _step10.value;

      if (graphName === '@default') {
        continue;
      }

      var nodeMap = graphs[graphName];
      var subject = defaultGraph[graphName];

      if (!subject) {
        defaultGraph[graphName] = subject = {
          '@id': graphName,
          '@graph': []
        };
      } else if (!('@graph' in subject)) {
        subject['@graph'] = [];
      }

      var graph = subject['@graph'];

      var _iterator11 = _createForOfIteratorHelper(Object.keys(nodeMap).sort()),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var id = _step11.value;
          var node = nodeMap[id]; // only add full subjects

          if (!graphTypes.isSubjectReference(node)) {
            graph.push(node);
          }
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }

  return defaultGraph;
};

/***/ }),

/***/ 5599:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.
 */


var xhrLoader = __webpack_require__(83626);

var api = {};
module.exports = api;
/**
 * Setup browser document loaders.
 *
 * @param jsonld the jsonld api.
 */

api.setupDocumentLoaders = function (jsonld) {
  if (typeof XMLHttpRequest !== 'undefined') {
    jsonld.documentLoaders.xhr = xhrLoader; // use xhr document loader by default

    jsonld.useDocumentLoader('xhr');
  }
};
/**
 * Setup browser globals.
 *
 * @param jsonld the jsonld api.
 */


api.setupGlobals = function (jsonld) {
  // setup browser global JsonLdProcessor
  if (typeof globalThis.JsonLdProcessor === 'undefined') {
    Object.defineProperty(globalThis, 'JsonLdProcessor', {
      writable: true,
      enumerable: false,
      configurable: true,
      value: jsonld.JsonLdProcessor
    });
  }
};

/***/ }),

/***/ 73766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = __webpack_require__(57823),
    createNodeMap = _require.createNodeMap;

var _require2 = __webpack_require__(15866),
    isKeyword = _require2.isKeyword;

var graphTypes = __webpack_require__(61431);

var jsonCanonicalize = __webpack_require__(49228);

var types = __webpack_require__(4319);

var util = __webpack_require__(88336);

var _require3 = __webpack_require__(17668),
    RDF_FIRST = _require3.RDF_FIRST,
    RDF_REST = _require3.RDF_REST,
    RDF_NIL = _require3.RDF_NIL,
    RDF_TYPE = _require3.RDF_TYPE,
    RDF_JSON_LITERAL = _require3.RDF_JSON_LITERAL,
    RDF_LANGSTRING = _require3.RDF_LANGSTRING,
    XSD_BOOLEAN = _require3.XSD_BOOLEAN,
    XSD_DOUBLE = _require3.XSD_DOUBLE,
    XSD_INTEGER = _require3.XSD_INTEGER,
    XSD_STRING = _require3.XSD_STRING;

var _require4 = __webpack_require__(41528),
    _isAbsoluteIri = _require4.isAbsolute;

var api = {};
module.exports = api;
/**
 * Outputs an RDF dataset for the expanded JSON-LD input.
 *
 * @param input the expanded JSON-LD input.
 * @param options the RDF serialization options.
 *
 * @return the RDF dataset.
 */

api.toRDF = function (input, options) {
  // create node map for default graph (and any named graphs)
  var issuer = new util.IdentifierIssuer('_:b');
  var nodeMap = {
    '@default': {}
  };
  createNodeMap(input, nodeMap, '@default', issuer);
  var dataset = [];
  var graphNames = Object.keys(nodeMap).sort();

  var _iterator = _createForOfIteratorHelper(graphNames),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var graphName = _step.value;
      var graphTerm = void 0;

      if (graphName === '@default') {
        graphTerm = {
          termType: 'DefaultGraph',
          value: ''
        };
      } else if (_isAbsoluteIri(graphName)) {
        if (graphName.startsWith('_:')) {
          graphTerm = {
            termType: 'BlankNode'
          };
        } else {
          graphTerm = {
            termType: 'NamedNode'
          };
        }

        graphTerm.value = graphName;
      } else {
        // skip relative IRIs (not valid RDF)
        continue;
      }

      _graphToRDF(dataset, nodeMap[graphName], graphTerm, issuer, options);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return dataset;
};
/**
 * Adds RDF quads for a particular graph to the given dataset.
 *
 * @param dataset the dataset to append RDF quads to.
 * @param graph the graph to create RDF quads for.
 * @param graphTerm the graph term for each quad.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param options the RDF serialization options.
 *
 * @return the array of RDF triples for the given graph.
 */


function _graphToRDF(dataset, graph, graphTerm, issuer, options) {
  var ids = Object.keys(graph).sort();

  var _iterator2 = _createForOfIteratorHelper(ids),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var id = _step2.value;
      var node = graph[id];
      var properties = Object.keys(node).sort();

      var _iterator3 = _createForOfIteratorHelper(properties),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var property = _step3.value;
          var items = node[property];

          if (property === '@type') {
            property = RDF_TYPE;
          } else if (isKeyword(property)) {
            continue;
          }

          var _iterator4 = _createForOfIteratorHelper(items),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var item = _step4.value;
              // RDF subject
              var subject = {
                termType: id.startsWith('_:') ? 'BlankNode' : 'NamedNode',
                value: id
              }; // skip relative IRI subjects (not valid RDF)

              if (!_isAbsoluteIri(id)) {
                continue;
              } // RDF predicate


              var predicate = {
                termType: property.startsWith('_:') ? 'BlankNode' : 'NamedNode',
                value: property
              }; // skip relative IRI predicates (not valid RDF)

              if (!_isAbsoluteIri(property)) {
                continue;
              } // skip blank node predicates unless producing generalized RDF


              if (predicate.termType === 'BlankNode' && !options.produceGeneralizedRdf) {
                continue;
              } // convert list, value or node object to triple


              var object = _objectToRDF(item, issuer, dataset, graphTerm, options.rdfDirection); // skip null objects (they are relative IRIs)


              if (object) {
                dataset.push({
                  subject: subject,
                  predicate: predicate,
                  object: object,
                  graph: graphTerm
                });
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
/**
 * Converts a @list value into linked list of blank node RDF quads
 * (an RDF collection).
 *
 * @param list the @list value.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the array of quads to append to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the head of the list.
 */


function _listToRDF(list, issuer, dataset, graphTerm, rdfDirection) {
  var first = {
    termType: 'NamedNode',
    value: RDF_FIRST
  };
  var rest = {
    termType: 'NamedNode',
    value: RDF_REST
  };
  var nil = {
    termType: 'NamedNode',
    value: RDF_NIL
  };
  var last = list.pop(); // Result is the head of the list

  var result = last ? {
    termType: 'BlankNode',
    value: issuer.getId()
  } : nil;
  var subject = result;

  var _iterator5 = _createForOfIteratorHelper(list),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var item = _step5.value;

      var _object = _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection);

      var next = {
        termType: 'BlankNode',
        value: issuer.getId()
      };
      dataset.push({
        subject: subject,
        predicate: first,
        object: _object,
        graph: graphTerm
      });
      dataset.push({
        subject: subject,
        predicate: rest,
        object: next,
        graph: graphTerm
      });
      subject = next;
    } // Tail of list

  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  if (last) {
    var object = _objectToRDF(last, issuer, dataset, graphTerm, rdfDirection);

    dataset.push({
      subject: subject,
      predicate: first,
      object: object,
      graph: graphTerm
    });
    dataset.push({
      subject: subject,
      predicate: rest,
      object: nil,
      graph: graphTerm
    });
  }

  return result;
}
/**
 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string,
 * node object to an RDF resource, or adds a list.
 *
 * @param item the JSON-LD value or node object.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the dataset to append RDF quads to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the RDF literal or RDF resource.
 */


function _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection) {
  var object = {}; // convert value object to RDF

  if (graphTypes.isValue(item)) {
    object.termType = 'Literal';
    object.value = undefined;
    object.datatype = {
      termType: 'NamedNode'
    };
    var value = item['@value'];
    var datatype = item['@type'] || null; // convert to XSD/JSON datatypes as appropriate

    if (datatype === '@json') {
      object.value = jsonCanonicalize(value);
      object.datatype.value = RDF_JSON_LITERAL;
    } else if (types.isBoolean(value)) {
      object.value = value.toString();
      object.datatype.value = datatype || XSD_BOOLEAN;
    } else if (types.isDouble(value) || datatype === XSD_DOUBLE) {
      if (!types.isDouble(value)) {
        value = parseFloat(value);
      } // canonical double representation


      object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
      object.datatype.value = datatype || XSD_DOUBLE;
    } else if (types.isNumber(value)) {
      object.value = value.toFixed(0);
      object.datatype.value = datatype || XSD_INTEGER;
    } else if (rdfDirection === 'i18n-datatype' && '@direction' in item) {
      var _datatype = 'https://www.w3.org/ns/i18n#' + (item['@language'] || '') + "_".concat(item['@direction']);

      object.datatype.value = _datatype;
      object.value = value;
    } else if ('@language' in item) {
      object.value = value;
      object.datatype.value = datatype || RDF_LANGSTRING;
      object.language = item['@language'];
    } else {
      object.value = value;
      object.datatype.value = datatype || XSD_STRING;
    }
  } else if (graphTypes.isList(item)) {
    var _list = _listToRDF(item['@list'], issuer, dataset, graphTerm, rdfDirection);

    object.termType = _list.termType;
    object.value = _list.value;
  } else {
    // convert string/node object to RDF
    var id = types.isObject(item) ? item['@id'] : item;
    object.termType = id.startsWith('_:') ? 'BlankNode' : 'NamedNode';
    object.value = id;
  } // skip relative IRIs, not valid RDF


  if (object.termType === 'NamedNode' && !_isAbsoluteIri(object.value)) {
    return null;
  }

  return object;
}

/***/ }),

/***/ 4319:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


var api = {};
module.exports = api;
/**
 * Returns true if the given value is an Array.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Array, false if not.
 */

api.isArray = Array.isArray;
/**
 * Returns true if the given value is a Boolean.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Boolean, false if not.
 */

api.isBoolean = function (v) {
  return typeof v === 'boolean' || Object.prototype.toString.call(v) === '[object Boolean]';
};
/**
 * Returns true if the given value is a double.
 *
 * @param v the value to check.
 *
 * @return true if the value is a double, false if not.
 */


api.isDouble = function (v) {
  return api.isNumber(v) && (String(v).indexOf('.') !== -1 || Math.abs(v) >= 1e21);
};
/**
 * Returns true if the given value is an empty Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an empty Object, false if not.
 */


api.isEmptyObject = function (v) {
  return api.isObject(v) && Object.keys(v).length === 0;
};
/**
 * Returns true if the given value is a Number.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Number, false if not.
 */


api.isNumber = function (v) {
  return typeof v === 'number' || Object.prototype.toString.call(v) === '[object Number]';
};
/**
 * Returns true if the given value is numeric.
 *
 * @param v the value to check.
 *
 * @return true if the value is numeric, false if not.
 */


api.isNumeric = function (v) {
  return !isNaN(parseFloat(v)) && isFinite(v);
};
/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */


api.isObject = function (v) {
  return Object.prototype.toString.call(v) === '[object Object]';
};
/**
 * Returns true if the given value is a String.
 *
 * @param v the value to check.
 *
 * @return true if the value is a String, false if not.
 */


api.isString = function (v) {
  return typeof v === 'string' || Object.prototype.toString.call(v) === '[object String]';
};
/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */


api.isUndefined = function (v) {
  return typeof v === 'undefined';
};

/***/ }),

/***/ 41528:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


var types = __webpack_require__(4319);

var api = {};
module.exports = api; // define URL parser
// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
// with local jsonld.js modifications

api.parsers = {
  simple: {
    // RFC 3986 basic parts
    keys: ['href', 'scheme', 'authority', 'path', 'query', 'fragment'],

    /* eslint-disable-next-line max-len */
    regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
  },
  full: {
    keys: ['href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password', 'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'],

    /* eslint-disable-next-line max-len */
    regex: /^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
  }
};

api.parse = function (str, parser) {
  var parsed = {};
  var o = api.parsers[parser || 'full'];
  var m = o.regex.exec(str);
  var i = o.keys.length;

  while (i--) {
    parsed[o.keys[i]] = m[i] === undefined ? null : m[i];
  } // remove default ports in found in URLs


  if (parsed.scheme === 'https' && parsed.port === '443' || parsed.scheme === 'http' && parsed.port === '80') {
    parsed.href = parsed.href.replace(':' + parsed.port, '');
    parsed.authority = parsed.authority.replace(':' + parsed.port, '');
    parsed.port = null;
  }

  parsed.normalizedPath = api.removeDotSegments(parsed.path);
  return parsed;
};
/**
 * Prepends a base IRI to the given relative IRI.
 *
 * @param base the base IRI.
 * @param iri the relative IRI.
 *
 * @return the absolute IRI.
 */


api.prependBase = function (base, iri) {
  // skip IRI processing
  if (base === null) {
    return iri;
  } // already an absolute IRI


  if (api.isAbsolute(iri)) {
    return iri;
  } // parse base if it is a string


  if (!base || types.isString(base)) {
    base = api.parse(base || '');
  } // parse given IRI


  var rel = api.parse(iri); // per RFC3986 5.2.2

  var transform = {
    protocol: base.protocol || ''
  };

  if (rel.authority !== null) {
    transform.authority = rel.authority;
    transform.path = rel.path;
    transform.query = rel.query;
  } else {
    transform.authority = base.authority;

    if (rel.path === '') {
      transform.path = base.path;

      if (rel.query !== null) {
        transform.query = rel.query;
      } else {
        transform.query = base.query;
      }
    } else {
      if (rel.path.indexOf('/') === 0) {
        // IRI represents an absolute path
        transform.path = rel.path;
      } else {
        // merge paths
        var path = base.path; // append relative path to the end of the last directory from base

        path = path.substr(0, path.lastIndexOf('/') + 1);

        if ((path.length > 0 || base.authority) && path.substr(-1) !== '/') {
          path += '/';
        }

        path += rel.path;
        transform.path = path;
      }

      transform.query = rel.query;
    }
  }

  if (rel.path !== '') {
    // remove slashes and dots in path
    transform.path = api.removeDotSegments(transform.path);
  } // construct URL


  var rval = transform.protocol;

  if (transform.authority !== null) {
    rval += '//' + transform.authority;
  }

  rval += transform.path;

  if (transform.query !== null) {
    rval += '?' + transform.query;
  }

  if (rel.fragment !== null) {
    rval += '#' + rel.fragment;
  } // handle empty base


  if (rval === '') {
    rval = './';
  }

  return rval;
};
/**
 * Removes a base IRI from the given absolute IRI.
 *
 * @param base the base IRI.
 * @param iri the absolute IRI.
 *
 * @return the relative IRI if relative to base, otherwise the absolute IRI.
 */


api.removeBase = function (base, iri) {
  // skip IRI processing
  if (base === null) {
    return iri;
  }

  if (!base || types.isString(base)) {
    base = api.parse(base || '');
  } // establish base root


  var root = '';

  if (base.href !== '') {
    root += (base.protocol || '') + '//' + (base.authority || '');
  } else if (iri.indexOf('//')) {
    // support network-path reference with empty base
    root += '//';
  } // IRI not relative to base


  if (iri.indexOf(root) !== 0) {
    return iri;
  } // remove root from IRI and parse remainder


  var rel = api.parse(iri.substr(root.length)); // remove path segments that match (do not remove last segment unless there
  // is a hash or query)

  var baseSegments = base.normalizedPath.split('/');
  var iriSegments = rel.normalizedPath.split('/');
  var last = rel.fragment || rel.query ? 0 : 1;

  while (baseSegments.length > 0 && iriSegments.length > last) {
    if (baseSegments[0] !== iriSegments[0]) {
      break;
    }

    baseSegments.shift();
    iriSegments.shift();
  } // use '../' for each non-matching base segment


  var rval = '';

  if (baseSegments.length > 0) {
    // don't count the last segment (if it ends with '/' last path doesn't
    // count and if it doesn't end with '/' it isn't a path)
    baseSegments.pop();

    for (var i = 0; i < baseSegments.length; ++i) {
      rval += '../';
    }
  } // prepend remaining segments


  rval += iriSegments.join('/'); // add query and hash

  if (rel.query !== null) {
    rval += '?' + rel.query;
  }

  if (rel.fragment !== null) {
    rval += '#' + rel.fragment;
  } // handle empty base


  if (rval === '') {
    rval = './';
  }

  return rval;
};
/**
 * Removes dot segments from a URL path.
 *
 * @param path the path to remove dot segments from.
 */


api.removeDotSegments = function (path) {
  // RFC 3986 5.2.4 (reworked)
  // empty path shortcut
  if (path.length === 0) {
    return '';
  }

  var input = path.split('/');
  var output = [];

  while (input.length > 0) {
    var next = input.shift();
    var done = input.length === 0;

    if (next === '.') {
      if (done) {
        // ensure output has trailing /
        output.push('');
      }

      continue;
    }

    if (next === '..') {
      output.pop();

      if (done) {
        // ensure output has trailing /
        output.push('');
      }

      continue;
    }

    output.push(next);
  } // if path was absolute, ensure output has leading /


  if (path[0] === '/' && output.length > 0 && output[0] !== '') {
    output.unshift('');
  }

  if (output.length === 1 && output[0] === '') {
    return '/';
  }

  return output.join('/');
}; // TODO: time better isAbsolute/isRelative checks using full regexes:
// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html
// regex to check for absolute IRI (starting scheme and ':') or blank node IRI


var isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;
/**
 * Returns true if the given value is an absolute IRI or blank node IRI, false
 * if not.
 * Note: This weak check only checks for a correct starting scheme.
 *
 * @param v the value to check.
 *
 * @return true if the value is an absolute IRI, false if not.
 */

api.isAbsolute = function (v) {
  return types.isString(v) && isAbsoluteRegex.test(v);
};
/**
 * Returns true if the given value is a relative IRI, false if not.
 * Note: this is a weak check.
 *
 * @param v the value to check.
 *
 * @return true if the value is a relative IRI, false if not.
 */


api.isRelative = function (v) {
  return types.isString(v);
};

/***/ }),

/***/ 88336:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var graphTypes = __webpack_require__(61431);

var types = __webpack_require__(4319); // TODO: move `IdentifierIssuer` to its own package


var IdentifierIssuer = (__webpack_require__(59145).IdentifierIssuer);

var JsonLdError = __webpack_require__(3275); // constants


var REGEX_LINK_HEADERS = /(?:<[^>]*?>|"[^"]*?"|[^,])+/g;
var REGEX_LINK_HEADER = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
var REGEX_LINK_HEADER_PARAMS = /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
var DEFAULTS = {
  headers: {
    accept: 'application/ld+json, application/json'
  }
};
var api = {};
module.exports = api;
api.IdentifierIssuer = IdentifierIssuer;
/**
 * Clones an object, array, Map, Set, or string/number. If a typed JavaScript
 * object is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */

api.clone = function (value) {
  if (value && _typeof(value) === 'object') {
    var rval;

    if (types.isArray(value)) {
      rval = [];

      for (var i = 0; i < value.length; ++i) {
        rval[i] = api.clone(value[i]);
      }
    } else if (value instanceof Map) {
      rval = new Map();

      var _iterator = _createForOfIteratorHelper(value),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              k = _step$value[0],
              v = _step$value[1];

          rval.set(k, api.clone(v));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else if (value instanceof Set) {
      rval = new Set();

      var _iterator2 = _createForOfIteratorHelper(value),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _v = _step2.value;
          rval.add(api.clone(_v));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else if (types.isObject(value)) {
      rval = {};

      for (var key in value) {
        rval[key] = api.clone(value[key]);
      }
    } else {
      rval = value.toString();
    }

    return rval;
  }

  return value;
};
/**
 * Ensure a value is an array. If the value is an array, it is returned.
 * Otherwise, it is wrapped in an array.
 *
 * @param value the value to return as an array.
 *
 * @return the value as an array.
 */


api.asArray = function (value) {
  return Array.isArray(value) ? value : [value];
};
/**
 * Builds an HTTP headers object for making a JSON-LD request from custom
 * headers and asserts the `accept` header isn't overridden.
 *
 * @param headers an object of headers with keys as header names and values
 *          as header values.
 *
 * @return an object of headers with a valid `accept` header.
 */


api.buildHeaders = function () {
  var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var hasAccept = Object.keys(headers).some(function (h) {
    return h.toLowerCase() === 'accept';
  });

  if (hasAccept) {
    throw new RangeError('Accept header may not be specified; only "' + DEFAULTS.headers.accept + '" is supported.');
  }

  return Object.assign({
    Accept: DEFAULTS.headers.accept
  }, headers);
};
/**
 * Parses a link header. The results will be key'd by the value of "rel".
 *
 * Link: <http://json-ld.org/contexts/person.jsonld>;
 * rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
 *
 * Parses as: {
 *   'http://www.w3.org/ns/json-ld#context': {
 *     target: http://json-ld.org/contexts/person.jsonld,
 *     type: 'application/ld+json'
 *   }
 * }
 *
 * If there is more than one "rel" with the same IRI, then entries in the
 * resulting map for that "rel" will be arrays.
 *
 * @param header the link header to parse.
 */


api.parseLinkHeader = function (header) {
  var rval = {}; // split on unbracketed/unquoted commas

  var entries = header.match(REGEX_LINK_HEADERS);

  for (var i = 0; i < entries.length; ++i) {
    var match = entries[i].match(REGEX_LINK_HEADER);

    if (!match) {
      continue;
    }

    var result = {
      target: match[1]
    };
    var params = match[2];

    while (match = REGEX_LINK_HEADER_PARAMS.exec(params)) {
      result[match[1]] = match[2] === undefined ? match[3] : match[2];
    }

    var rel = result['rel'] || '';

    if (Array.isArray(rval[rel])) {
      rval[rel].push(result);
    } else if (rval.hasOwnProperty(rel)) {
      rval[rel] = [rval[rel], result];
    } else {
      rval[rel] = result;
    }
  }

  return rval;
};
/**
 * Throws an exception if the given value is not a valid @type value.
 *
 * @param v the value to check.
 */


api.validateTypeValue = function (v, isFrame) {
  if (types.isString(v)) {
    return;
  }

  if (types.isArray(v) && v.every(function (vv) {
    return types.isString(vv);
  })) {
    return;
  }

  if (isFrame && types.isObject(v)) {
    switch (Object.keys(v).length) {
      case 0:
        // empty object is wildcard
        return;

      case 1:
        // default entry is all strings
        if ('@default' in v && api.asArray(v['@default']).every(function (vv) {
          return types.isString(vv);
        })) {
          return;
        }

    }
  }

  throw new JsonLdError('Invalid JSON-LD syntax; "@type" value must a string, an array of ' + 'strings, an empty object, ' + 'or a default object.', 'jsonld.SyntaxError', {
    code: 'invalid type value',
    value: v
  });
};
/**
 * Returns true if the given subject has the given property.
 *
 * @param subject the subject to check.
 * @param property the property to look for.
 *
 * @return true if the subject has the given property, false if not.
 */


api.hasProperty = function (subject, property) {
  if (subject.hasOwnProperty(property)) {
    var value = subject[property];
    return !types.isArray(value) || value.length > 0;
  }

  return false;
};
/**
 * Determines if the given value is a property of the given subject.
 *
 * @param subject the subject to check.
 * @param property the property to check.
 * @param value the value to check.
 *
 * @return true if the value exists, false if not.
 */


api.hasValue = function (subject, property, value) {
  if (api.hasProperty(subject, property)) {
    var val = subject[property];
    var isList = graphTypes.isList(val);

    if (types.isArray(val) || isList) {
      if (isList) {
        val = val['@list'];
      }

      for (var i = 0; i < val.length; ++i) {
        if (api.compareValues(value, val[i])) {
          return true;
        }
      }
    } else if (!types.isArray(value)) {
      // avoid matching the set of values with an array value parameter
      return api.compareValues(value, val);
    }
  }

  return false;
};
/**
 * Adds a value to a subject. If the value is an array, all values in the
 * array will be added.
 *
 * @param subject the subject to add the value to.
 * @param property the property that relates the value to the subject.
 * @param value the value to add.
 * @param [options] the options to use:
 *        [propertyIsArray] true if the property is always an array, false
 *          if not (default: false).
 *        [valueIsArray] true if the value to be added should be preserved as
 *          an array (lists) (default: false).
 *        [allowDuplicate] true to allow duplicates, false not to (uses a
 *          simple shallow comparison of subject ID or value) (default: true).
 *        [prependValue] false to prepend value to any existing values.
 *          (default: false)
 */


api.addValue = function (subject, property, value, options) {
  options = options || {};

  if (!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }

  if (!('valueIsArray' in options)) {
    options.valueIsArray = false;
  }

  if (!('allowDuplicate' in options)) {
    options.allowDuplicate = true;
  }

  if (!('prependValue' in options)) {
    options.prependValue = false;
  }

  if (options.valueIsArray) {
    subject[property] = value;
  } else if (types.isArray(value)) {
    if (value.length === 0 && options.propertyIsArray && !subject.hasOwnProperty(property)) {
      subject[property] = [];
    }

    if (options.prependValue) {
      value = value.concat(subject[property]);
      subject[property] = [];
    }

    for (var i = 0; i < value.length; ++i) {
      api.addValue(subject, property, value[i], options);
    }
  } else if (subject.hasOwnProperty(property)) {
    // check if subject already has value if duplicates not allowed
    var hasValue = !options.allowDuplicate && api.hasValue(subject, property, value); // make property an array if value not present or always an array

    if (!types.isArray(subject[property]) && (!hasValue || options.propertyIsArray)) {
      subject[property] = [subject[property]];
    } // add new value


    if (!hasValue) {
      if (options.prependValue) {
        subject[property].unshift(value);
      } else {
        subject[property].push(value);
      }
    }
  } else {
    // add new value as set or single value
    subject[property] = options.propertyIsArray ? [value] : value;
  }
};
/**
 * Gets all of the values for a subject's property as an array.
 *
 * @param subject the subject.
 * @param property the property.
 *
 * @return all of the values for a subject's property as an array.
 */


api.getValues = function (subject, property) {
  return [].concat(subject[property] || []);
};
/**
 * Removes a property from a subject.
 *
 * @param subject the subject.
 * @param property the property.
 */


api.removeProperty = function (subject, property) {
  delete subject[property];
};
/**
 * Removes a value from a subject.
 *
 * @param subject the subject.
 * @param property the property that relates the value to the subject.
 * @param value the value to remove.
 * @param [options] the options to use:
 *          [propertyIsArray] true if the property is always an array, false
 *            if not (default: false).
 */


api.removeValue = function (subject, property, value, options) {
  options = options || {};

  if (!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  } // filter out value


  var values = api.getValues(subject, property).filter(function (e) {
    return !api.compareValues(e, value);
  });

  if (values.length === 0) {
    api.removeProperty(subject, property);
  } else if (values.length === 1 && !options.propertyIsArray) {
    subject[property] = values[0];
  } else {
    subject[property] = values;
  }
};
/**
 * Relabels all blank nodes in the given JSON-LD input.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [issuer] an IdentifierIssuer to use to label blank nodes.
 */


api.relabelBlankNodes = function (input, options) {
  options = options || {};
  var issuer = options.issuer || new IdentifierIssuer('_:b');
  return _labelBlankNodes(issuer, input);
};
/**
 * Compares two JSON-LD values for equality. Two JSON-LD values will be
 * considered equal if:
 *
 * 1. They are both primitives of the same type and value.
 * 2. They are both @values with the same @value, @type, @language,
 *   and @index, OR
 * 3. They both have @ids they are the same.
 *
 * @param v1 the first value.
 * @param v2 the second value.
 *
 * @return true if v1 and v2 are considered equal, false if not.
 */


api.compareValues = function (v1, v2) {
  // 1. equal primitives
  if (v1 === v2) {
    return true;
  } // 2. equal @values


  if (graphTypes.isValue(v1) && graphTypes.isValue(v2) && v1['@value'] === v2['@value'] && v1['@type'] === v2['@type'] && v1['@language'] === v2['@language'] && v1['@index'] === v2['@index']) {
    return true;
  } // 3. equal @ids


  if (types.isObject(v1) && '@id' in v1 && types.isObject(v2) && '@id' in v2) {
    return v1['@id'] === v2['@id'];
  }

  return false;
};
/**
 * Compares two strings first based on length and then lexicographically.
 *
 * @param a the first string.
 * @param b the second string.
 *
 * @return -1 if a < b, 1 if a > b, 0 if a === b.
 */


api.compareShortestLeast = function (a, b) {
  if (a.length < b.length) {
    return -1;
  }

  if (b.length < a.length) {
    return 1;
  }

  if (a === b) {
    return 0;
  }

  return a < b ? -1 : 1;
};
/**
 * Labels the blank nodes in the given value using the given IdentifierIssuer.
 *
 * @param issuer the IdentifierIssuer to use.
 * @param element the element with blank nodes to rename.
 *
 * @return the element.
 */


function _labelBlankNodes(issuer, element) {
  if (types.isArray(element)) {
    for (var i = 0; i < element.length; ++i) {
      element[i] = _labelBlankNodes(issuer, element[i]);
    }
  } else if (graphTypes.isList(element)) {
    element['@list'] = _labelBlankNodes(issuer, element['@list']);
  } else if (types.isObject(element)) {
    // relabel blank node
    if (graphTypes.isBlankNode(element)) {
      element['@id'] = issuer.getId(element['@id']);
    } // recursively apply to all keys


    var keys = Object.keys(element).sort();

    for (var ki = 0; ki < keys.length; ++ki) {
      var key = keys[ki];

      if (key !== '@id') {
        element[key] = _labelBlankNodes(issuer, element[key]);
      }
    }
  }

  return element;
}

/***/ }),

/***/ 76875:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // A linked list to keep track of recently-used-ness

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Yallist = __webpack_require__(48692);

var MAX = Symbol('max');
var LENGTH = Symbol('length');
var LENGTH_CALCULATOR = Symbol('lengthCalculator');
var ALLOW_STALE = Symbol('allowStale');
var MAX_AGE = Symbol('maxAge');
var DISPOSE = Symbol('dispose');
var NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
var LRU_LIST = Symbol('lruList');
var CACHE = Symbol('cache');
var UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

var naiveLength = function naiveLength() {
  return 1;
}; // lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.


var LRUCache = /*#__PURE__*/function () {
  function LRUCache(options) {
    _classCallCheck(this, LRUCache);

    if (typeof options === 'number') options = {
      max: options
    };
    if (!options) options = {};
    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number'); // Kind of weird to have a default max of Infinity, but oh well.

    var max = this[MAX] = options.max || Infinity;
    var lc = options.length || naiveLength;
    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
    this[ALLOW_STALE] = options.stale || false;
    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
    this[MAX_AGE] = options.maxAge || 0;
    this[DISPOSE] = options.dispose;
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
    this.reset();
  } // resize the cache when the max changes.


  _createClass(LRUCache, [{
    key: "rforEach",
    value: function rforEach(fn, thisp) {
      thisp = thisp || this;

      for (var walker = this[LRU_LIST].tail; walker !== null;) {
        var prev = walker.prev;
        forEachStep(this, fn, walker, thisp);
        walker = prev;
      }
    }
  }, {
    key: "forEach",
    value: function forEach(fn, thisp) {
      thisp = thisp || this;

      for (var walker = this[LRU_LIST].head; walker !== null;) {
        var next = walker.next;
        forEachStep(this, fn, walker, thisp);
        walker = next;
      }
    }
  }, {
    key: "keys",
    value: function keys() {
      return this[LRU_LIST].toArray().map(function (k) {
        return k.key;
      });
    }
  }, {
    key: "values",
    value: function values() {
      return this[LRU_LIST].toArray().map(function (k) {
        return k.value;
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      var _this = this;

      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
        this[LRU_LIST].forEach(function (hit) {
          return _this[DISPOSE](hit.key, hit.value);
        });
      }

      this[CACHE] = new Map(); // hash of items by key

      this[LRU_LIST] = new Yallist(); // list of items in order of use recency

      this[LENGTH] = 0; // length of items in the list
    }
  }, {
    key: "dump",
    value: function dump() {
      var _this2 = this;

      return this[LRU_LIST].map(function (hit) {
        return isStale(_this2, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        };
      }).toArray().filter(function (h) {
        return h;
      });
    }
  }, {
    key: "dumpLru",
    value: function dumpLru() {
      return this[LRU_LIST];
    }
  }, {
    key: "set",
    value: function set(key, value, maxAge) {
      maxAge = maxAge || this[MAX_AGE];
      if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
      var now = maxAge ? Date.now() : 0;
      var len = this[LENGTH_CALCULATOR](value, key);

      if (this[CACHE].has(key)) {
        if (len > this[MAX]) {
          _del(this, this[CACHE].get(key));

          return false;
        }

        var node = this[CACHE].get(key);
        var item = node.value; // dispose of the old one before overwriting
        // split out into 2 ifs for better coverage tracking

        if (this[DISPOSE]) {
          if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
        }

        item.now = now;
        item.maxAge = maxAge;
        item.value = value;
        this[LENGTH] += len - item.length;
        item.length = len;
        this.get(key);
        trim(this);
        return true;
      }

      var hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.

      if (hit.length > this[MAX]) {
        if (this[DISPOSE]) this[DISPOSE](key, value);
        return false;
      }

      this[LENGTH] += hit.length;
      this[LRU_LIST].unshift(hit);
      this[CACHE].set(key, this[LRU_LIST].head);
      trim(this);
      return true;
    }
  }, {
    key: "has",
    value: function has(key) {
      if (!this[CACHE].has(key)) return false;
      var hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
  }, {
    key: "get",
    value: function get(key) {
      return _get(this, key, true);
    }
  }, {
    key: "peek",
    value: function peek(key) {
      return _get(this, key, false);
    }
  }, {
    key: "pop",
    value: function pop() {
      var node = this[LRU_LIST].tail;
      if (!node) return null;

      _del(this, node);

      return node.value;
    }
  }, {
    key: "del",
    value: function del(key) {
      _del(this, this[CACHE].get(key));
    }
  }, {
    key: "load",
    value: function load(arr) {
      // reset the cache
      this.reset();
      var now = Date.now(); // A previous serialized cache has the most recent items first

      for (var l = arr.length - 1; l >= 0; l--) {
        var hit = arr[l];
        var expiresAt = hit.e || 0;
        if (expiresAt === 0) // the item was created without expiration in a non aged cache
          this.set(hit.k, hit.v);else {
          var maxAge = expiresAt - now; // dont add already expired items

          if (maxAge > 0) {
            this.set(hit.k, hit.v, maxAge);
          }
        }
      }
    }
  }, {
    key: "prune",
    value: function prune() {
      var _this3 = this;

      this[CACHE].forEach(function (value, key) {
        return _get(_this3, key, false);
      });
    }
  }, {
    key: "max",
    set: function set(mL) {
      if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
      this[MAX] = mL || Infinity;
      trim(this);
    },
    get: function get() {
      return this[MAX];
    }
  }, {
    key: "allowStale",
    set: function set(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    },
    get: function get() {
      return this[ALLOW_STALE];
    }
  }, {
    key: "maxAge",
    set: function set(mA) {
      if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
      this[MAX_AGE] = mA;
      trim(this);
    },
    get: function get() {
      return this[MAX_AGE];
    } // resize the cache when the lengthCalculator changes.

  }, {
    key: "lengthCalculator",
    set: function set(lC) {
      var _this4 = this;

      if (typeof lC !== 'function') lC = naiveLength;

      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach(function (hit) {
          hit.length = _this4[LENGTH_CALCULATOR](hit.value, hit.key);
          _this4[LENGTH] += hit.length;
        });
      }

      trim(this);
    },
    get: function get() {
      return this[LENGTH_CALCULATOR];
    }
  }, {
    key: "length",
    get: function get() {
      return this[LENGTH];
    }
  }, {
    key: "itemCount",
    get: function get() {
      return this[LRU_LIST].length;
    }
  }]);

  return LRUCache;
}();

var _get = function _get(self, key, doUse) {
  var node = self[CACHE].get(key);

  if (node) {
    var hit = node.value;

    if (isStale(self, hit)) {
      _del(self, node);

      if (!self[ALLOW_STALE]) return undefined;
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
        self[LRU_LIST].unshiftNode(node);
      }
    }

    return hit.value;
  }
};

var isStale = function isStale(self, hit) {
  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
  var diff = Date.now() - hit.now;
  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};

var trim = function trim(self) {
  if (self[LENGTH] > self[MAX]) {
    for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      var prev = walker.prev;

      _del(self, walker);

      walker = prev;
    }
  }
};

var _del = function _del(self, node) {
  if (node) {
    var hit = node.value;
    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
    self[LENGTH] -= hit.length;
    self[CACHE]["delete"](hit.key);
    self[LRU_LIST].removeNode(node);
  }
};

var Entry = function Entry(key, value, length, now, maxAge) {
  _classCallCheck(this, Entry);

  this.key = key;
  this.value = value;
  this.length = length;
  this.now = now;
  this.maxAge = maxAge || 0;
};

var forEachStep = function forEachStep(self, fn, node, thisp) {
  var hit = node.value;

  if (isStale(self, hit)) {
    _del(self, node);

    if (!self[ALLOW_STALE]) hit = undefined;
  }

  if (hit) fn.call(thisp, hit.value, hit.key, self);
};

module.exports = LRUCache;

/***/ }),

/***/ 34986:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

__exportStar(__webpack_require__(845), exports);

__exportStar(__webpack_require__(1335), exports);

__exportStar(__webpack_require__(26515), exports);

__exportStar(__webpack_require__(54239), exports);

__exportStar(__webpack_require__(53951), exports);

__exportStar(__webpack_require__(86110), exports);

__exportStar(__webpack_require__(86800), exports);

__exportStar(__webpack_require__(57326), exports);

__exportStar(__webpack_require__(98185), exports);

__exportStar(__webpack_require__(25492), exports);

/***/ }),

/***/ 86110:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 86800:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 57326:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 98185:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MicrodataRdfParser = void 0;

var stream_1 = __webpack_require__(57245);

var htmlparser2_1 = __webpack_require__(96124);

var ItemPropertyHandlerContent_1 = __webpack_require__(1335);

var ItemPropertyHandlerNumber_1 = __webpack_require__(26515);

var ItemPropertyHandlerTime_1 = __webpack_require__(54239);

var ItemPropertyHandlerUrl_1 = __webpack_require__(53951);

var Util_1 = __webpack_require__(25492);

var VOCAB_REGISTRY_DEFAULT = __webpack_require__(1084);
/**
 * A stream transformer that parses Microdata (text) streams to an {@link RDF.Stream}.
 */


var MicrodataRdfParser = /*#__PURE__*/function (_stream_1$Transform) {
  _inherits(MicrodataRdfParser, _stream_1$Transform);

  var _super = _createSuper(MicrodataRdfParser);

  function MicrodataRdfParser(options) {
    var _this;

    _classCallCheck(this, MicrodataRdfParser);

    _this = _super.call(this, {
      readableObjectMode: true
    }); // Stacks, where the key is the current depth.

    _this.itemScopeStack = [];
    _this.textBufferStack = []; // Variables for managing itemrefs.

    _this.isEmittingReferences = false;
    _this.pendingItemRefsDomain = {};
    _this.pendingItemRefsRangeFinalized = {}; // eslint-disable-next-line lines-between-class-members

    _this.pendingItemRefsRangeCollecting = {};
    options = options || {};
    _this.options = options;
    _this.util = new Util_1.Util(options.dataFactory, options.baseIRI);
    _this.defaultGraph = options.defaultGraph || _this.util.dataFactory.defaultGraph();
    _this.htmlParseListener = options.htmlParseListener;
    _this.vocabRegistry = options.vocabRegistry || VOCAB_REGISTRY_DEFAULT;
    _this.parser = _this.initializeParser(!!options.xmlMode);
    return _this;
  }
  /**
   * Parses the given text stream into a quad stream.
   * @param {NodeJS.EventEmitter} stream A text stream.
   * @return {RDF.Stream} A quad stream.
   */


  _createClass(MicrodataRdfParser, [{
    key: "import",
    value: function _import(stream) {
      var output = new stream_1.PassThrough({
        readableObjectMode: true
      });
      stream.on('error', function (error) {
        return parsed.emit('error', error);
      });
      stream.on('data', function (data) {
        return output.push(data);
      });
      stream.on('end', function () {
        return output.push(null);
      });
      var parsed = output.pipe(new MicrodataRdfParser(this.options));
      return parsed;
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      this.parser.write(chunk);
      callback();
    }
  }, {
    key: "_flush",
    value: function _flush(callback) {
      this.parser.end();
      callback();
    }
    /**
     * Get the current item scope for the current depth.
     * This will skip all undefined item scopes.
     * @param parent If we should start looking one level higher in the stack.
     */

  }, {
    key: "getItemScope",
    value: function getItemScope(parent) {
      var parentTagI = this.itemScopeStack.length - (parent ? 2 : 1);

      while (parentTagI > 0 && !this.itemScopeStack[parentTagI]) {
        parentTagI--;
      }

      return this.itemScopeStack[parentTagI];
    }
    /**
     * Get the current stack depth.
     */

  }, {
    key: "getDepth",
    value: function getDepth() {
      return this.itemScopeStack.length;
    }
  }, {
    key: "onTagOpen",
    value: function onTagOpen(name, attributes) {
      if (!this.isEmittingReferences) {
        // If the tag has an 'id', start collecting the whole stack in the item reference buffer
        if ('id' in attributes) {
          var id = attributes.id;
          this.pendingItemRefsRangeCollecting[id] = {
            events: [],
            counter: 0,
            ids: []
          };
        } // Store this event in all collecting item reference buffers


        for (var _i = 0, _Object$values = Object.values(this.pendingItemRefsRangeCollecting); _i < _Object$values.length; _i++) {
          var buffer = _Object$values[_i];
          buffer.counter++;
          buffer.events.push({
            type: 'open',
            name: name,
            attributes: attributes
          });
        }
      } // Ensure the text buffer stack is in line with the stack depth
      // eslint-disable-next-line unicorn/no-useless-undefined


      this.textBufferStack.push(undefined); // Processing steps based on https://w3c.github.io/microdata-rdf/#rdf-conversion-algorithm
      // 1. Determine the current item scope

      var itemScope;

      if ('itemscope' in attributes) {
        // Create a new item scope
        var subject;

        if (this.emittingReferencesItemScopeIdGenerator) {
          subject = this.emittingReferencesItemScopeIdGenerator();
        } else {
          subject = 'itemid' in attributes && this.util.createSubject(attributes.itemid) || this.util.dataFactory.blankNode(); // Store the genererated id in all collecting item reference buffers

          for (var _i2 = 0, _Object$values2 = Object.values(this.pendingItemRefsRangeCollecting); _i2 < _Object$values2.length; _i2++) {
            var _buffer = _Object$values2[_i2];

            _buffer.ids.push(subject);
          }
        }

        itemScope = {
          subject: subject
        }; // If the id was reused from a reference, block any new triples to be generated from it

        if (this.isEmittingReferences) {
          itemScope.blockEmission = true;
        } // Inherit vocab from parent item scope


        var parentItemScope = this.getItemScope();

        if (parentItemScope && parentItemScope.vocab) {
          itemScope.vocab = parentItemScope.vocab;
        } // 2. Push any changes to the item scope to the stack


        this.itemScopeStack.push(itemScope);
      } else {
        // Determine the parent item scope
        itemScope = this.getItemScope(); // 2. Push any changes to the item scope to the stack
        // eslint-disable-next-line unicorn/no-useless-undefined

        this.itemScopeStack.push(undefined);
      } // If we have a valid item scope, process the current node


      if (itemScope) {
        // 3. Handle item types
        if ('itemtype' in attributes) {
          var _iterator = _createForOfIteratorHelper(this.util.createVocabIris(attributes.itemtype, itemScope, false)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var type = _step.value;

              // 4. Vocab identifier is the first valid item
              if (!itemScope.vocab) {
                // 5. Modify vocab based on registry
                itemScope.vocab = this.util.deriveVocab(type.value, this.vocabRegistry);
              } // Emit item type


              if (!itemScope.blockEmission) {
                this.emitTriple(itemScope.subject, this.util.dataFactory.namedNode("".concat(Util_1.Util.RDF, "type")), type);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } // Save language in item scope


        if ('lang' in attributes) {
          itemScope.language = attributes.lang;
        }

        if ('xml:lang' in attributes) {
          itemScope.language = attributes['xml:lang'];
        } // Handle itemrefs (only if we also had an itemscope)


        if ('itemscope' in attributes) {
          // If we have an itemref, store it in our domain buffer.
          if (!this.isEmittingReferences && 'itemref' in attributes) {
            var _iterator2 = _createForOfIteratorHelper(attributes.itemref.split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/)),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var reference = _step2.value;

                if (!(reference in this.pendingItemRefsDomain)) {
                  this.pendingItemRefsDomain[reference] = [];
                }

                this.pendingItemRefsDomain[reference].push(itemScope);
                this.tryToEmitReferences(reference, itemScope);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        }
      } // 6. Handle item properties


      if ('itemprop' in attributes) {
        this.handleItemProperties(attributes.itemprop, false, itemScope, name, attributes);
      } // Handle reverse item properties
      // https://w3c.github.io/microdata-rdf/#reverse-itemprop


      if ('itemprop-reverse' in attributes) {
        this.handleItemProperties(attributes['itemprop-reverse'], true, itemScope, name, attributes);
      }
    }
  }, {
    key: "onText",
    value: function onText(data) {
      // Store this event in all collecting item reference buffers
      if (!this.isEmittingReferences) {
        for (var _i3 = 0, _Object$values3 = Object.values(this.pendingItemRefsRangeCollecting); _i3 < _Object$values3.length; _i3++) {
          var buffer = _Object$values3[_i3];
          buffer.events.push({
            type: 'text',
            data: data
          });
        }
      } // Save the text inside all item scopes that need to collect text


      var _iterator3 = _createForOfIteratorHelper(this.textBufferStack),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var textBuffer = _step3.value;

          if (textBuffer) {
            textBuffer.push(data);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "onTagClose",
    value: function onTagClose() {
      // Store this event in all collecting item reference buffers
      if (!this.isEmittingReferences) {
        for (var _i4 = 0, _Object$entries = Object.entries(this.pendingItemRefsRangeCollecting); _i4 < _Object$entries.length; _i4++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),
              reference = _Object$entries$_i[0],
              buffer = _Object$entries$_i[1];

          buffer.counter--;
          buffer.events.push({
            type: 'close'
          }); // Once the counter becomes zero, the tag is fully buffered, so we finalize it.

          if (buffer.counter === 0) {
            this.pendingItemRefsRangeFinalized[reference] = buffer;
            delete this.pendingItemRefsRangeCollecting[reference]; // Try to emit this reference with buffered domain items

            this.tryToEmitReferences(reference);
          }
        }
      } // Emit all triples that were determined in the active tag


      var itemScope = this.getItemScope(true);

      if (itemScope) {
        var depth = this.getDepth();

        if (itemScope.predicates && depth in itemScope.predicates) {
          for (var _i5 = 0, _Object$entries2 = Object.entries(itemScope.predicates[depth]); _i5 < _Object$entries2.length; _i5++) {
            var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i5], 2),
                predicateKey = _Object$entries2$_i[0],
                predicates = _Object$entries2$_i[1];

            // First check if we have a child item scope, otherwise get the text content
            // Safely cast textBufferStack, as it is always defined when itemScope.predicates is defined.
            var object = this.util.createLiteral(this.textBufferStack[depth].join(''), itemScope);
            this.emitPredicateTriples(itemScope, predicates, object, predicateKey === 'reverse');
            delete itemScope.predicates[depth][predicateKey];
          }
        }
      } // Remove the active tag from the stack


      this.itemScopeStack.pop();
      this.textBufferStack.pop();
    }
  }, {
    key: "onEnd",
    value: function onEnd() {// Nothing important should happen here.
    }
    /**
     * Initialize a new HtmlParser.
     * @param xmlMode If the parser should be setup in strict mode.
     */

  }, {
    key: "initializeParser",
    value: function initializeParser(xmlMode) {
      var _this2 = this;

      return new htmlparser2_1.Parser({
        onclosetag: function onclosetag() {
          try {
            _this2.onTagClose();

            if (_this2.htmlParseListener) {
              _this2.htmlParseListener.onTagClose();
            }
          } catch (error) {
            _this2.emit('error', error);
          }
        },
        onend: function onend() {
          try {
            _this2.onEnd();

            if (_this2.htmlParseListener) {
              _this2.htmlParseListener.onEnd();
            }
          } catch (error) {
            _this2.emit('error', error);
          }
        },
        onopentag: function onopentag(name, attributes) {
          try {
            _this2.onTagOpen(name, attributes);

            if (_this2.htmlParseListener) {
              _this2.htmlParseListener.onTagOpen(name, attributes);
            }
          } catch (error) {
            _this2.emit('error', error);
          }
        },
        ontext: function ontext(data) {
          try {
            _this2.onText(data);

            if (_this2.htmlParseListener) {
              _this2.htmlParseListener.onText(data);
            }
          } catch (error) {
            _this2.emit('error', error);
          }
        }
      }, {
        decodeEntities: true,
        recognizeSelfClosing: true,
        xmlMode: xmlMode
      });
    }
    /**
     * Handle the given item properties.
     * @param itempropValue The value of itemprop or itemprop-reverse.
     * @param reverse If the item properties are reversed (itemprop-reverse).
     * @param itemScope The current item scope.
     * @param tagName The current tag name.
     * @param tagAttributes The current tag attributes.
     */

  }, {
    key: "handleItemProperties",
    value: function handleItemProperties(itempropValue, reverse, itemScope, tagName, tagAttributes) {
      var parentItemScope = this.getItemScope(true);

      if (parentItemScope) {
        // Set predicates in the scope, and handle them on tag close.
        var depth = this.getDepth();
        var predicates = this.util.createVocabIris(itempropValue, parentItemScope, true);

        if (!parentItemScope.predicates) {
          parentItemScope.predicates = {};
        }

        if (!parentItemScope.predicates[depth]) {
          parentItemScope.predicates[depth] = {};
        }

        var predicatesKey = reverse ? 'reverse' : 'forward';
        parentItemScope.predicates[depth][predicatesKey] = predicates; // Append rdf:type predicate if vocabulary expansion applies

        var _iterator4 = _createForOfIteratorHelper(this.util.getVocabularyExpansionType(itempropValue, parentItemScope, this.vocabRegistry)),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var vocabularyExpansionType = _step4.value;
            predicates.push(vocabularyExpansionType);
          } // Check if a property handler that applies, forcefully use that as predicate value.
          // But DON'T call handlers in this prop is a direct (nested) itemscope.

        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        if (itemScope && 'itemscope' in tagAttributes) {
          this.emitPredicateTriples(parentItemScope, predicates, itemScope.subject, reverse); // Finalize the predicates, so text values do not apply to them.

          delete parentItemScope.predicates[depth][predicatesKey];
        } else {
          var _iterator5 = _createForOfIteratorHelper(MicrodataRdfParser.ITEM_PROPERTY_HANDLERS),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var handler = _step5.value;

              if (handler.canHandle(tagName, tagAttributes)) {
                var object = handler.getObject(tagAttributes, this.util, parentItemScope);
                this.emitPredicateTriples(parentItemScope, predicates, object, reverse); // Finalize the predicates, so text values do not apply to them.

                delete parentItemScope.predicates[depth][predicatesKey];
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        } // If no valid handler was found, indicate that we should collect text at this depth.


        if (parentItemScope.predicates[depth][predicatesKey]) {
          this.textBufferStack[depth] = [];
        }
      }
    }
    /**
     * Emit the given object for the given predicates.
     * @param itemScope The current item scope.
     * @param predicates An array of predicates.
     * @param object An object.
     * @param reverse If the triples should be reversed.
     */

  }, {
    key: "emitPredicateTriples",
    value: function emitPredicateTriples(itemScope, predicates, object, reverse) {
      if (!itemScope.blockEmission) {
        var _iterator6 = _createForOfIteratorHelper(predicates),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var predicate = _step6.value;

            if (reverse) {
              // Literals can not exist in subject position, so they must be ignored.
              if (object.termType !== 'Literal') {
                this.emitTriple(object, predicate, itemScope.subject);
              }
            } else {
              this.emitTriple(itemScope.subject, predicate, object);
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
    }
    /**
     * Emit the given triple to the stream.
     * @param {Quad_Subject} subject A subject term.
     * @param {Quad_Predicate} predicate A predicate term.
     * @param {Quad_Object} object An object term.
     */

  }, {
    key: "emitTriple",
    value: function emitTriple(subject, predicate, object) {
      this.push(this.util.dataFactory.quad(subject, predicate, object, this.defaultGraph));
    }
    /**
     * Attempt to emit all pending itemrefs for the given reference.
     * @param reference An item reference id.
     * @param itemScopeDomain An optional item scope. If defined, only refs from this scope will be emitted.
     */

  }, {
    key: "tryToEmitReferences",
    value: function tryToEmitReferences(reference, itemScopeDomain) {
      var _this3 = this;

      var range = this.pendingItemRefsRangeFinalized[reference];

      if (range) {
        // Determine the item scope domains to emit
        var applicableItemScopes;

        if (itemScopeDomain) {
          applicableItemScopes = [itemScopeDomain]; // Remove the item from the pending array
          // Element is guaranteed to exist in buffer

          var itemScopeDomainIndex = this.pendingItemRefsDomain[reference].indexOf(itemScopeDomain);
          this.pendingItemRefsDomain[reference].splice(itemScopeDomainIndex, 1);
        } else {
          applicableItemScopes = this.pendingItemRefsDomain[reference]; // Remove all items from the pending array

          delete this.pendingItemRefsDomain[reference];
        }

        if (applicableItemScopes) {
          // Save the stack state
          var itemScopeStackOld = this.itemScopeStack;
          var textBufferStackOld = this.textBufferStack;
          this.isEmittingReferences = true; // For all applicable item scopes, emit the buffered events.

          var _iterator7 = _createForOfIteratorHelper(applicableItemScopes),
              _step7;

          try {
            var _loop = function _loop() {
              var itemScope = _step7.value;
              _this3.itemScopeStack = [itemScope];
              _this3.textBufferStack = [undefined];
              var pendingIds = range.ids.slice();

              _this3.emittingReferencesItemScopeIdGenerator = function () {
                return pendingIds.shift();
              };

              var _iterator8 = _createForOfIteratorHelper(range.events),
                  _step8;

              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  var event = _step8.value;

                  switch (event.type) {
                    case 'open':
                      _this3.onTagOpen(event.name, event.attributes);

                      break;

                    case 'text':
                      _this3.onText(event.data);

                      break;

                    case 'close':
                      _this3.onTagClose();

                      break;
                  }
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }
            };

            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              _loop();
            } // Restore the stack state

          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          this.emittingReferencesItemScopeIdGenerator = undefined;
          this.itemScopeStack = itemScopeStackOld;
          this.textBufferStack = textBufferStackOld;
          this.isEmittingReferences = false;
        }
      }
    }
  }]);

  return MicrodataRdfParser;
}(stream_1.Transform);

exports.MicrodataRdfParser = MicrodataRdfParser;
MicrodataRdfParser.ITEM_PROPERTY_HANDLERS = [new ItemPropertyHandlerContent_1.ItemPropertyHandlerContent(), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('a', 'href'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('area', 'href'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('audio', 'src'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('embed', 'src'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('iframe', 'src'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('img', 'src'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('link', 'href'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('object', 'data'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('source', 'src'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('track', 'src'), new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl('video', 'src'), new ItemPropertyHandlerNumber_1.ItemPropertyHandlerNumber('data', 'value'), new ItemPropertyHandlerNumber_1.ItemPropertyHandlerNumber('meter', 'value'), new ItemPropertyHandlerTime_1.ItemPropertyHandlerTime()];

/***/ }),

/***/ 25492:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Util = void 0;

var rdf_data_factory_1 = __webpack_require__(4826);

var relative_to_absolute_iri_1 = __webpack_require__(87723);
/**
 * A collection of utility functions.
 */


var Util = /*#__PURE__*/function () {
  function Util(dataFactory, baseIRI) {
    _classCallCheck(this, Util);

    this.dataFactory = dataFactory || new rdf_data_factory_1.DataFactory();
    this.baseIRI = baseIRI || '';
  }
  /**
   * Check if the given IRI is valid.
   * @param {string} iri A potential IRI.
   * @return {boolean} If the given IRI is valid.
   */


  _createClass(Util, [{
    key: "createVocabIris",

    /**
     * Create vocab terms for the given terms attribute.
     *
     * Relative IRIs will be based on the active vocab or baseIRI if `allowRelativeIris` is true.
     *
     * @param {string} terms An attribute value.
     * @param {IItemScope} itemScope The active item scope.
     * @param {boolean} allowRelativeIris If relative IRIs are allowed.
     * @return {Term[]} The IRI terms.
     */
    value: function createVocabIris(terms, itemScope, allowRelativeIris) {
      var _this = this;

      return terms.split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/).filter(function (term) {
        return !!term;
      }).map(function (property) {
        if (!Util.isValidIri(property)) {
          if (!allowRelativeIris) {
            return;
          }

          property = "".concat(itemScope.vocab || "".concat(_this.baseIRI, "#")).concat(property);
        }

        return _this.dataFactory.namedNode(property);
      }).filter(function (term) {
        return !!term;
      });
    }
    /**
     * Get the predicates for which the given itemprop value should cause vocabulary expansion.
     * @param terms An attribute value.
     * @param itemScope The active item scope.
     * @param vocabRegistry The active vocabulary registry.
     */

  }, {
    key: "getVocabularyExpansionType",
    value: function getVocabularyExpansionType(terms, itemScope, vocabRegistry) {
      var _this2 = this;

      // Check the presence of subPropertyOf or equivalentProperty
      var parts = terms.split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/);

      if (parts.includes('subPropertyOf') || parts.includes('equivalentProperty')) {
        return [this.dataFactory.namedNode("".concat(Util.RDF, "type"))];
      } // Check in the item scope's vocab


      if (itemScope.vocab && itemScope.vocab in vocabRegistry && vocabRegistry[itemScope.vocab].properties) {
        var predicates = [];

        for (var _i = 0, _Object$entries = Object.entries(vocabRegistry[itemScope.vocab].properties); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              property = _Object$entries$_i[0],
              expansions = _Object$entries$_i[1];

          if (parts.includes(property)) {
            predicates = predicates.concat(Object.values(expansions).map(function (iri) {
              return _this2.dataFactory.namedNode(iri);
            }));
          }
        }

        return predicates;
      }

      return [];
    }
    /**
     * Create a named node for the given term, which can be relative to the document base.
     * @param {string} iri A term string.
     * @return {Term} An RDF term, or undefined if invalid.
     */

  }, {
    key: "createSubject",
    value: function createSubject(iri) {
      if (!Util.isValidIri(iri)) {
        try {
          iri = relative_to_absolute_iri_1.resolve(iri, this.baseIRI);
        } catch (_a) {
          return;
        }
      }

      return this.dataFactory.namedNode(iri);
    }
    /**
     * Create a new literal node.
     * @param {string} literal The literal value.
     * @param {IActiveTag} activeTag The current active tag.
     * @return {Literal} A new literal node.
     */

  }, {
    key: "createLiteral",
    value: function createLiteral(literal, activeTag) {
      return this.dataFactory.literal(literal, activeTag.language);
    }
    /**
     * Determine the vocab IRI from a given type IRI.
     * @link https://w3c.github.io/microdata-rdf/#property-uri-generation
     * @param typeIri A type IRI.
     * @param vocabRegistry The active vocabulary registry.
     */

  }, {
    key: "deriveVocab",
    value: function deriveVocab(typeIri, vocabRegistry) {
      var vocab; // First check if we find a prefix in the vocab registry

      for (var uriPrefix in vocabRegistry) {
        if (typeIri.startsWith(uriPrefix)) {
          vocab = uriPrefix; // Append fragment if prefix does not end with a slash

          if (!vocab.endsWith('/')) {
            vocab += '#';
          }

          break;
        }
      } // If no match was found, remove the last path segment from the URI


      if (!vocab) {
        var hashPos = typeIri.indexOf('#');

        if (hashPos > 0) {
          vocab = typeIri.slice(0, hashPos + 1);
        } else {
          vocab = relative_to_absolute_iri_1.resolve('.', typeIri);
        }
      }

      return vocab;
    }
  }], [{
    key: "isValidIri",
    value: function isValidIri(iri) {
      return Util.IRI_REGEX.test(iri);
    }
  }]);

  return Util;
}();

exports.Util = Util;
Util.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
Util.XSD = 'http://www.w3.org/2001/XMLSchema#';
Util.RDFA = 'http://www.w3.org/ns/rdfa#';
Util.IRI_REGEX = /^([A-Za-z][\+-\.0-9A-Za-z]*|_):(?:(?![ "<>\[-\]`\{-\}])[\s\S])*$/;

/***/ }),

/***/ 845:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 1335:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ItemPropertyHandlerContent = void 0;
/**
 * Handler for an item property with the 'content' attribute.
 */

var ItemPropertyHandlerContent = /*#__PURE__*/function () {
  function ItemPropertyHandlerContent() {
    _classCallCheck(this, ItemPropertyHandlerContent);
  }

  _createClass(ItemPropertyHandlerContent, [{
    key: "canHandle",
    value: function canHandle(tagName, attributes) {
      return 'content' in attributes;
    }
  }, {
    key: "getObject",
    value: function getObject(attributes, util, itemScope) {
      return util.createLiteral(attributes.content, itemScope);
    }
  }]);

  return ItemPropertyHandlerContent;
}();

exports.ItemPropertyHandlerContent = ItemPropertyHandlerContent;

/***/ }),

/***/ 26515:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ItemPropertyHandlerNumber = void 0;

var Util_1 = __webpack_require__(25492);
/**
 * Handler for an item property with a number attribute.
 */


var ItemPropertyHandlerNumber = /*#__PURE__*/function () {
  function ItemPropertyHandlerNumber(tagName, attributeName) {
    _classCallCheck(this, ItemPropertyHandlerNumber);

    this.tagName = tagName;
    this.attributeName = attributeName;
  }

  _createClass(ItemPropertyHandlerNumber, [{
    key: "canHandle",
    value: function canHandle(tagName, attributes) {
      return this.tagName === tagName && this.attributeName in attributes;
    }
  }, {
    key: "getObject",
    value: function getObject(attributes, util, itemScope) {
      var value = attributes[this.attributeName];
      var datatype;

      if (!Number.isNaN(Number.parseInt(value, 10)) && !value.includes('.')) {
        datatype = "".concat(Util_1.Util.XSD, "integer");
      } else if (!Number.isNaN(Number.parseFloat(value))) {
        datatype = "".concat(Util_1.Util.XSD, "double");
      }

      return util.dataFactory.literal(value, datatype && util.dataFactory.namedNode(datatype));
    }
  }]);

  return ItemPropertyHandlerNumber;
}();

exports.ItemPropertyHandlerNumber = ItemPropertyHandlerNumber;

/***/ }),

/***/ 54239:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ItemPropertyHandlerTime = void 0;

var Util_1 = __webpack_require__(25492);
/**
 * Handler for an item property for time tags.
 */


var ItemPropertyHandlerTime = /*#__PURE__*/function () {
  function ItemPropertyHandlerTime() {
    _classCallCheck(this, ItemPropertyHandlerTime);
  }

  _createClass(ItemPropertyHandlerTime, [{
    key: "canHandle",
    value: function canHandle(tagName, attributes) {
      return tagName === 'time' && 'datetime' in attributes;
    }
  }, {
    key: "getObject",
    value: function getObject(attributes, util, itemScope) {
      var value = attributes.datetime;
      var datatype;

      var _iterator = _createForOfIteratorHelper(ItemPropertyHandlerTime.TIME_REGEXES),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;

          if (entry.regex.exec(value)) {
            datatype = util.dataFactory.namedNode(Util_1.Util.XSD + entry.type);
            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return util.dataFactory.literal(value, datatype);
    }
  }]);

  return ItemPropertyHandlerTime;
}();

exports.ItemPropertyHandlerTime = ItemPropertyHandlerTime;
ItemPropertyHandlerTime.TIME_REGEXES = [{
  regex: /^\x2D?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9])?S)?)?$/,
  type: 'duration'
}, {
  regex: /^[0-9]+\x2D[0-9][0-9]\x2D[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+\x2D][0-9][0-9]:[0-9][0-9]))$/,
  type: 'dateTime'
}, {
  regex: /^[0-9]+\x2D[0-9][0-9]\x2D[0-9][0-9]Z?$/,
  type: 'date'
}, {
  regex: /^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+\x2D][0-9][0-9]:[0-9][0-9]))$/,
  type: 'time'
}, {
  regex: /^[0-9]+\x2D[0-9][0-9]$/,
  type: 'gYearMonth'
}, {
  regex: /^[0-9]+$/,
  type: 'gYear'
}];

/***/ }),

/***/ 53951:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ItemPropertyHandlerUrl = void 0;

var relative_to_absolute_iri_1 = __webpack_require__(87723);
/**
 * Handler for an item property with a URL attribute.
 */


var ItemPropertyHandlerUrl = /*#__PURE__*/function () {
  function ItemPropertyHandlerUrl(tagName, attributeName) {
    _classCallCheck(this, ItemPropertyHandlerUrl);

    this.tagName = tagName;
    this.attributeName = attributeName;
  }

  _createClass(ItemPropertyHandlerUrl, [{
    key: "canHandle",
    value: function canHandle(tagName, attributes) {
      return this.tagName === tagName && this.attributeName in attributes;
    }
  }, {
    key: "getObject",
    value: function getObject(attributes, util, itemScope) {
      return util.dataFactory.namedNode(relative_to_absolute_iri_1.resolve(attributes[this.attributeName], util.baseIRI));
    }
  }]);

  return ItemPropertyHandlerUrl;
}();

exports.ItemPropertyHandlerUrl = ItemPropertyHandlerUrl;

/***/ }),

/***/ 67937:
/***/ ((module) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};

  var type = _typeof(val);

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options["long"] ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),

/***/ 20629:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "BlankNode": () => (/* reexport */ BlankNode),
  "DataFactory": () => (/* reexport */ N3DataFactory),
  "DefaultGraph": () => (/* reexport */ DefaultGraph),
  "Lexer": () => (/* reexport */ N3Lexer),
  "Literal": () => (/* reexport */ Literal),
  "NamedNode": () => (/* reexport */ NamedNode),
  "Parser": () => (/* reexport */ N3Parser),
  "Quad": () => (/* reexport */ Quad),
  "Store": () => (/* reexport */ N3Store),
  "StreamParser": () => (/* reexport */ N3StreamParser),
  "StreamWriter": () => (/* reexport */ N3StreamWriter),
  "Term": () => (/* reexport */ Term),
  "Triple": () => (/* reexport */ Quad),
  "Util": () => (/* reexport */ N3Util_namespaceObject),
  "Variable": () => (/* reexport */ Variable),
  "Writer": () => (/* reexport */ N3Writer),
  "termFromId": () => (/* reexport */ termFromId),
  "termToId": () => (/* reexport */ termToId)
});

// NAMESPACE OBJECT: ./node_modules/n3/src/N3Util.js
var N3Util_namespaceObject = {};
__webpack_require__.r(N3Util_namespaceObject);
__webpack_require__.d(N3Util_namespaceObject, {
  "inDefaultGraph": () => (inDefaultGraph),
  "isBlankNode": () => (isBlankNode),
  "isDefaultGraph": () => (isDefaultGraph),
  "isLiteral": () => (isLiteral),
  "isNamedNode": () => (isNamedNode),
  "isVariable": () => (isVariable),
  "prefix": () => (prefix),
  "prefixes": () => (prefixes)
});

;// CONCATENATED MODULE: ./node_modules/n3/src/IRIs.js
var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    XSD = 'http://www.w3.org/2001/XMLSchema#',
    SWAP = 'http://www.w3.org/2000/10/swap/';
/* harmony default export */ const IRIs = ({
  xsd: {
    decimal: XSD + 'decimal',
    "boolean": XSD + 'boolean',
    "double": XSD + 'double',
    integer: XSD + 'integer',
    string: XSD + 'string'
  },
  rdf: {
    type: RDF + 'type',
    nil: RDF + 'nil',
    first: RDF + 'first',
    rest: RDF + 'rest',
    langString: RDF + 'langString'
  },
  owl: {
    sameAs: 'http://www.w3.org/2002/07/owl#sameAs'
  },
  r: {
    forSome: SWAP + 'reify#forSome',
    forAll: SWAP + 'reify#forAll'
  },
  log: {
    implies: SWAP + 'log#implies'
  }
});
// EXTERNAL MODULE: ./node_modules/queue-microtask/index.js
var queue_microtask = __webpack_require__(94201);
var queue_microtask_default = /*#__PURE__*/__webpack_require__.n(queue_microtask);
;// CONCATENATED MODULE: ./node_modules/n3/src/N3Lexer.js
/* provided dependency */ var Buffer = __webpack_require__(29033)["Buffer"];
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// **N3Lexer** tokenizes N3 documents.


var xsd = IRIs.xsd; // Regular expression and replacement string to escape N3 strings

var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g;
var escapeReplacements = {
  '\\': '\\',
  "'": "'",
  '"': '"',
  'n': '\n',
  'r': '\r',
  't': '\t',
  'f': '\f',
  'b': '\b',
  '_': '_',
  '~': '~',
  '.': '.',
  '-': '-',
  '!': '!',
  '$': '$',
  '&': '&',
  '(': '(',
  ')': ')',
  '*': '*',
  '+': '+',
  ',': ',',
  ';': ';',
  '=': '=',
  '/': '/',
  '?': '?',
  '#': '#',
  '@': '@',
  '%': '%'
};
var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;
var lineModeRegExps = {
  _iri: true,
  _unescapedIri: true,
  _simpleQuotedString: true,
  _langcode: true,
  _blank: true,
  _newline: true,
  _comment: true,
  _whitespace: true,
  _endOfFile: true
};
var invalidRegExp = /$0^/; // ## Constructor

var N3Lexer = /*#__PURE__*/function () {
  function N3Lexer(options) {
    _classCallCheck(this, N3Lexer);

    // ## Regular expressions
    // It's slightly faster to have these as properties than as in-scope variables
    this._iri = /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/; // IRI with escape sequences; needs sanity check after unescaping

    this._unescapedIri = /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/; // IRI without escape sequences; no unescaping

    this._simpleQuotedString = /^"([^"\\\r\n]*)"(?=[^"])/; // string without escape sequences

    this._simpleApostropheString = /^'([^'\\\r\n]*)'(?=[^'])/;
    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;
    this._prefix = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;
    this._prefixed = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/;
    this._variable = /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/;
    this._blank = /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/;
    this._number = /^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/;
    this._boolean = /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/;
    this._keyword = /^@[a-z]+(?=[\s#<:])/i;
    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;
    this._shortPredicates = /^a(?=[\s()\[\]\{\}"'<>])/;
    this._newline = /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;
    this._comment = /#([^\n\r]*)/;
    this._whitespace = /^[ \t]+/;
    this._endOfFile = /^(?:#[^\n\r]*)?$/;
    options = options || {}; // In line mode (N-Triples or N-Quads), only simple features may be parsed

    if (this._lineMode = !!options.lineMode) {
      this._n3Mode = false; // Don't tokenize special literals

      for (var key in this) {
        if (!(key in lineModeRegExps) && this[key] instanceof RegExp) this[key] = invalidRegExp;
      }
    } // When not in line mode, enable N3 functionality by default
    else {
        this._n3Mode = options.n3 !== false;
      } // Don't output comment tokens by default


    this._comments = !!options.comments; // Cache the last tested closing position of long literals

    this._literalClosingPos = 0;
  } // ## Private methods
  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback


  _createClass(N3Lexer, [{
    key: "_tokenizeToEnd",
    value: function _tokenizeToEnd(callback, inputFinished) {
      // Continue parsing as far as possible; the loop will return eventually
      var input = this._input,
          outputComments = this._comments;

      while (true) {
        // Count and skip whitespace lines
        var whiteSpaceMatch, comment;

        while (whiteSpaceMatch = this._newline.exec(input)) {
          // Try to find a comment
          if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0]))) callback(null, {
            line: this._line,
            type: 'comment',
            value: comment[1],
            prefix: ''
          }); // Advance the input

          input = input.substr(whiteSpaceMatch[0].length, input.length);
          this._line++;
        } // Skip whitespace on current line


        if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input))) input = input.substr(whiteSpaceMatch[0].length, input.length); // Stop for now if we're at the end

        if (this._endOfFile.test(input)) {
          // If the input is finished, emit EOF
          if (inputFinished) {
            // Try to find a final comment
            if (outputComments && (comment = this._comment.exec(input))) callback(null, {
              line: this._line,
              type: 'comment',
              value: comment[1],
              prefix: ''
            });
            callback(input = null, {
              line: this._line,
              type: 'eof',
              value: '',
              prefix: ''
            });
          }

          return this._input = input;
        } // Look for specific token types based on the first character


        var line = this._line,
            type = '',
            value = '',
            prefix = '',
            firstChar = input[0],
            match = null,
            matchLength = 0,
            inconclusive = false;

        switch (firstChar) {
          case '^':
            // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed
            if (input.length < 3) break; // Try to match a type
            else if (input[1] === '^') {
                this._previousMarker = '^^'; // Move to type IRI or prefixed name

                input = input.substr(2);

                if (input[0] !== '<') {
                  inconclusive = true;
                  break;
                }
              } // If no type, it must be a path expression
              else {
                  if (this._n3Mode) {
                    matchLength = 1;
                    type = '^';
                  }

                  break;
                }
          // Fall through in case the type is an IRI

          case '<':
            // Try to find a full IRI without escape sequences
            if (match = this._unescapedIri.exec(input)) type = 'IRI', value = match[1]; // Try to find a full IRI with escape sequences
            else if (match = this._iri.exec(input)) {
                value = this._unescape(match[1]);
                if (value === null || illegalIriChars.test(value)) return reportSyntaxError(this);
                type = 'IRI';
              } // Try to find a nested triple
              else if (input.length > 1 && input[1] === '<') type = '<<', matchLength = 2; // Try to find a backwards implication arrow
                else if (this._n3Mode && input.length > 1 && input[1] === '=') type = 'inverse', matchLength = 2, value = '>';
            break;

          case '>':
            if (input.length > 1 && input[1] === '>') type = '>>', matchLength = 2;
            break;

          case '_':
            // Try to find a blank node. Since it can contain (but not end with) a dot,
            // we always need a non-dot character before deciding it is a blank node.
            // Therefore, try inserting a space if we're at the end of the input.
            if ((match = this._blank.exec(input)) || inputFinished && (match = this._blank.exec(input + ' '))) type = 'blank', prefix = '_', value = match[1];
            break;

          case '"':
            // Try to find a literal without escape sequences
            if (match = this._simpleQuotedString.exec(input)) value = match[1]; // Try to find a literal wrapped in three pairs of quotes
            else {
                var _this$_parseLiteral = this._parseLiteral(input);

                value = _this$_parseLiteral.value;
                matchLength = _this$_parseLiteral.matchLength;
                if (value === null) return reportSyntaxError(this);
              }

            if (match !== null || matchLength !== 0) {
              type = 'literal';
              this._literalClosingPos = 0;
            }

            break;

          case "'":
            if (!this._lineMode) {
              // Try to find a literal without escape sequences
              if (match = this._simpleApostropheString.exec(input)) value = match[1]; // Try to find a literal wrapped in three pairs of quotes
              else {
                  var _this$_parseLiteral2 = this._parseLiteral(input);

                  value = _this$_parseLiteral2.value;
                  matchLength = _this$_parseLiteral2.matchLength;
                  if (value === null) return reportSyntaxError(this);
                }

              if (match !== null || matchLength !== 0) {
                type = 'literal';
                this._literalClosingPos = 0;
              }
            }

            break;

          case '?':
            // Try to find a variable
            if (this._n3Mode && (match = this._variable.exec(input))) type = 'var', value = match[0];
            break;

          case '@':
            // Try to find a language code
            if (this._previousMarker === 'literal' && (match = this._langcode.exec(input))) type = 'langcode', value = match[1]; // Try to find a keyword
            else if (match = this._keyword.exec(input)) type = match[0];
            break;

          case '.':
            // Try to find a dot as punctuation
            if (input.length === 1 ? inputFinished : input[1] < '0' || input[1] > '9') {
              type = '.';
              matchLength = 1;
              break;
            }

          // Fall through to numerical case (could be a decimal dot)

          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case '+':
          case '-':
            // Try to find a number. Since it can contain (but not end with) a dot,
            // we always need a non-dot character before deciding it is a number.
            // Therefore, try inserting a space if we're at the end of the input.
            if (match = this._number.exec(input) || inputFinished && (match = this._number.exec(input + ' '))) {
              type = 'literal', value = match[0];
              prefix = typeof match[1] === 'string' ? xsd["double"] : typeof match[2] === 'string' ? xsd.decimal : xsd.integer;
            }

            break;

          case 'B':
          case 'b':
          case 'p':
          case 'P':
          case 'G':
          case 'g':
            // Try to find a SPARQL-style keyword
            if (match = this._sparqlKeyword.exec(input)) type = match[0].toUpperCase();else inconclusive = true;
            break;

          case 'f':
          case 't':
            // Try to match a boolean
            if (match = this._boolean.exec(input)) type = 'literal', value = match[0], prefix = xsd["boolean"];else inconclusive = true;
            break;

          case 'a':
            // Try to find an abbreviated predicate
            if (match = this._shortPredicates.exec(input)) type = 'abbreviation', value = 'a';else inconclusive = true;
            break;

          case '=':
            // Try to find an implication arrow or equals sign
            if (this._n3Mode && input.length > 1) {
              type = 'abbreviation';
              if (input[1] !== '>') matchLength = 1, value = '=';else matchLength = 2, value = '>';
            }

            break;

          case '!':
            if (!this._n3Mode) break;

          case ',':
          case ';':
          case '[':
          case ']':
          case '(':
          case ')':
          case '{':
          case '}':
            if (!this._lineMode) {
              matchLength = 1;
              type = firstChar;
            }

            break;

          default:
            inconclusive = true;
        } // Some first characters do not allow an immediate decision, so inspect more


        if (inconclusive) {
          // Try to find a prefix
          if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') && (match = this._prefix.exec(input))) type = 'prefix', value = match[1] || ''; // Try to find a prefixed name. Since it can contain (but not end with) a dot,
          // we always need a non-dot character before deciding it is a prefixed name.
          // Therefore, try inserting a space if we're at the end of the input.
          else if ((match = this._prefixed.exec(input)) || inputFinished && (match = this._prefixed.exec(input + ' '))) type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
        } // A type token is special: it can only be emitted after an IRI or prefixed name is read


        if (this._previousMarker === '^^') {
          switch (type) {
            case 'prefixed':
              type = 'type';
              break;

            case 'IRI':
              type = 'typeIRI';
              break;

            default:
              type = '';
          }
        } // What if nothing of the above was found?


        if (!type) {
          // We could be in streaming mode, and then we just wait for more input to arrive.
          // Otherwise, a syntax error has occurred in the input.
          // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
          if (inputFinished || !/^'''|^"""/.test(input) && /\n|\r/.test(input)) return reportSyntaxError(this);else return this._input = input;
        } // Emit the parsed token


        var token = {
          line: line,
          type: type,
          value: value,
          prefix: prefix
        };
        callback(null, token);
        this.previousToken = token;
        this._previousMarker = type; // Advance to next part to tokenize

        input = input.substr(matchLength || match[0].length, input.length);
      } // Signals the syntax error through the callback


      function reportSyntaxError(self) {
        callback(self._syntaxError(/^\S*/.exec(input)[0]));
      }
    } // ### `_unescape` replaces N3 escape codes by their corresponding characters

  }, {
    key: "_unescape",
    value: function _unescape(item) {
      var invalid = false;
      var replaced = item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        // 4-digit unicode character
        if (typeof unicode4 === 'string') return String.fromCharCode(Number.parseInt(unicode4, 16)); // 8-digit unicode character

        if (typeof unicode8 === 'string') {
          var charCode = Number.parseInt(unicode8, 16);
          return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) : String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        } // fixed escape sequence


        if (escapedChar in escapeReplacements) return escapeReplacements[escapedChar]; // invalid escape sequence

        invalid = true;
        return '';
      });
      return invalid ? null : replaced;
    } // ### `_parseLiteral` parses a literal into an unescaped value

  }, {
    key: "_parseLiteral",
    value: function _parseLiteral(input) {
      // Ensure we have enough lookahead to identify triple-quoted strings
      if (input.length >= 3) {
        // Identify the opening quote(s)
        var opening = input.match(/^(?:"""|"|'''|'|)/)[0];
        var openingLength = opening.length; // Find the next candidate closing quotes

        var closingPos = Math.max(this._literalClosingPos, openingLength);

        while ((closingPos = input.indexOf(opening, closingPos)) > 0) {
          // Count backslashes right before the closing quotes
          var backslashCount = 0;

          while (input[closingPos - backslashCount - 1] === '\\') {
            backslashCount++;
          } // An even number of backslashes (in particular 0)
          // means these are actual, non-escaped closing quotes


          if (backslashCount % 2 === 0) {
            // Extract and unescape the value
            var raw = input.substring(openingLength, closingPos);
            var lines = raw.split(/\r\n|\r|\n/).length - 1;
            var matchLength = closingPos + openingLength; // Only triple-quoted strings can be multi-line

            if (openingLength === 1 && lines !== 0 || openingLength === 3 && this._lineMode) break;
            this._line += lines;
            return {
              value: this._unescape(raw),
              matchLength: matchLength
            };
          }

          closingPos++;
        }

        this._literalClosingPos = input.length - openingLength + 1;
      }

      return {
        value: '',
        matchLength: 0
      };
    } // ### `_syntaxError` creates a syntax error for the given issue

  }, {
    key: "_syntaxError",
    value: function _syntaxError(issue) {
      this._input = null;
      var err = new Error('Unexpected "' + issue + '" on line ' + this._line + '.');
      err.context = {
        token: undefined,
        line: this._line,
        previousToken: this.previousToken
      };
      return err;
    } // ## Public methods
    // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
    // The input can be a string or a stream.

  }, {
    key: "tokenize",
    value: function tokenize(input, callback) {
      var self = this;
      this._line = 1; // If the input is a string, continuously emit tokens through the callback until the end

      if (typeof input === 'string') {
        this._input = input; // If a callback was passed, asynchronously call it

        if (typeof callback === 'function') queue_microtask_default()(function () {
          return self._tokenizeToEnd(callback, true);
        }); // If no callback was passed, tokenize synchronously and return
        else {
            var tokens = [],
                error;

            this._tokenizeToEnd(function (e, t) {
              e ? error = e : tokens.push(t);
            }, true);

            if (error) throw error;
            return tokens;
          }
      } // Otherwise, the input must be a stream
      else {
          this._input = '';
          this._pendingBuffer = null;
          if (typeof input.setEncoding === 'function') input.setEncoding('utf8'); // Adds the data chunk to the buffer and parses as far as possible

          input.on('data', function (data) {
            if (self._input !== null && data.length !== 0) {
              // Prepend any previous pending writes
              if (self._pendingBuffer) {
                data = Buffer.concat([self._pendingBuffer, data]);
                self._pendingBuffer = null;
              } // Hold if the buffer ends in an incomplete unicode sequence


              if (data[data.length - 1] & 0x80) {
                self._pendingBuffer = data;
              } // Otherwise, tokenize as far as possible
              else {
                  self._input += data;

                  self._tokenizeToEnd(callback, false);
                }
            }
          }); // Parses until the end

          input.on('end', function () {
            if (self._input !== null) self._tokenizeToEnd(callback, true);
          });
          input.on('error', callback);
        }
    }
  }]);

  return N3Lexer;
}();


;// CONCATENATED MODULE: ./node_modules/n3/src/N3Util.js
// **N3Util** provides N3 utility functions.
 // Tests whether the given term represents an IRI

function isNamedNode(term) {
  return !!term && term.termType === 'NamedNode';
} // Tests whether the given term represents a blank node

function isBlankNode(term) {
  return !!term && term.termType === 'BlankNode';
} // Tests whether the given term represents a literal

function isLiteral(term) {
  return !!term && term.termType === 'Literal';
} // Tests whether the given term represents a variable

function isVariable(term) {
  return !!term && term.termType === 'Variable';
} // Tests whether the given term represents the default graph

function isDefaultGraph(term) {
  return !!term && term.termType === 'DefaultGraph';
} // Tests whether the given quad is in the default graph

function inDefaultGraph(quad) {
  return isDefaultGraph(quad.graph);
} // Creates a function that prepends the given IRI to a local name

function prefix(iri, factory) {
  return prefixes({
    '': iri
  }, factory)('');
} // Creates a function that allows registering and expanding prefixes

function prefixes(defaultPrefixes, factory) {
  // Add all of the default prefixes
  var prefixes = Object.create(null);

  for (var prefix in defaultPrefixes) {
    processPrefix(prefix, defaultPrefixes[prefix]);
  } // Set the default factory if none was specified


  factory = factory || N3DataFactory; // Registers a new prefix (if an IRI was specified)
  // or retrieves a function that expands an existing prefix (if no IRI was specified)

  function processPrefix(prefix, iri) {
    // Create a new prefix if an IRI is specified or the prefix doesn't exist
    if (typeof iri === 'string') {
      // Create a function that expands the prefix
      var cache = Object.create(null);

      prefixes[prefix] = function (local) {
        return cache[local] || (cache[local] = factory.namedNode(iri + local));
      };
    } else if (!(prefix in prefixes)) {
      throw new Error('Unknown prefix: ' + prefix);
    }

    return prefixes[prefix];
  }

  return processPrefix;
}
;// CONCATENATED MODULE: ./node_modules/n3/src/N3DataFactory.js
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function N3DataFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function N3DataFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function N3DataFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) N3DataFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) N3DataFactory_defineProperties(Constructor, staticProps); return Constructor; }

// N3.js implementations of the RDF/JS core data types
// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md


var rdf = IRIs.rdf,
    N3DataFactory_xsd = IRIs.xsd;
var DEFAULTGRAPH;
var _blankNodeCounter = 0;
var escapedLiteral = /^"(.*".*)(?="[^"]*$)/;
var quadId = /^<<("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ?("(?:""|[^"])*"[^ ]*|[^ ]+)?>>$/; // ## DataFactory singleton

var DataFactory = {
  namedNode: namedNode,
  blankNode: blankNode,
  variable: variable,
  literal: literal,
  defaultGraph: defaultGraph,
  quad: quad,
  triple: quad
};
/* harmony default export */ const N3DataFactory = (DataFactory); // ## Term constructor

var Term = /*#__PURE__*/function () {
  function Term(id) {
    N3DataFactory_classCallCheck(this, Term);

    this.id = id;
  } // ### The value of this term


  N3DataFactory_createClass(Term, [{
    key: "equals",
    // ### Returns whether this object represents the same term as the other
    value: function equals(other) {
      // If both terms were created by this library,
      // equality can be computed through ids
      if (other instanceof Term) return this.id === other.id; // Otherwise, compare term type and value

      return !!other && this.termType === other.termType && this.value === other.value;
    } // ### Returns a plain object representation of this term

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        termType: this.termType,
        value: this.value
      };
    }
  }, {
    key: "value",
    get: function get() {
      return this.id;
    }
  }]);

  return Term;
}(); // ## NamedNode constructor

var NamedNode = /*#__PURE__*/function (_Term) {
  _inherits(NamedNode, _Term);

  var _super = _createSuper(NamedNode);

  function NamedNode() {
    N3DataFactory_classCallCheck(this, NamedNode);

    return _super.apply(this, arguments);
  }

  N3DataFactory_createClass(NamedNode, [{
    key: "termType",
    // ### The term type of this term
    get: function get() {
      return 'NamedNode';
    }
  }]);

  return NamedNode;
}(Term); // ## Literal constructor

var Literal = /*#__PURE__*/function (_Term2) {
  _inherits(Literal, _Term2);

  var _super2 = _createSuper(Literal);

  function Literal() {
    N3DataFactory_classCallCheck(this, Literal);

    return _super2.apply(this, arguments);
  }

  N3DataFactory_createClass(Literal, [{
    key: "equals",
    // ### Returns whether this object represents the same term as the other
    value: function equals(other) {
      // If both literals were created by this library,
      // equality can be computed through ids
      if (other instanceof Literal) return this.id === other.id; // Otherwise, compare term type, value, language, and datatype

      return !!other && !!other.datatype && this.termType === other.termType && this.value === other.value && this.language === other.language && this.datatype.value === other.datatype.value;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        termType: this.termType,
        value: this.value,
        language: this.language,
        datatype: {
          termType: 'NamedNode',
          value: this.datatypeString
        }
      };
    }
  }, {
    key: "termType",
    // ### The term type of this term
    get: function get() {
      return 'Literal';
    } // ### The text value of this literal

  }, {
    key: "value",
    get: function get() {
      return this.id.substring(1, this.id.lastIndexOf('"'));
    } // ### The language of this literal

  }, {
    key: "language",
    get: function get() {
      // Find the last quotation mark (e.g., '"abc"@en-us')
      var id = this.id,
          atPos = id.lastIndexOf('"') + 1; // If "@" it follows, return the remaining substring; empty otherwise

      return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';
    } // ### The datatype IRI of this literal

  }, {
    key: "datatype",
    get: function get() {
      return new NamedNode(this.datatypeString);
    } // ### The datatype string of this literal

  }, {
    key: "datatypeString",
    get: function get() {
      // Find the last quotation mark (e.g., '"abc"^^http://ex.org/types#t')
      var id = this.id,
          dtPos = id.lastIndexOf('"') + 1,
          ch; // If "^" it follows, return the remaining substring

      return dtPos < id.length && (ch = id[dtPos]) === '^' ? id.substr(dtPos + 2) : // If "@" follows, return rdf:langString; xsd:string otherwise
      ch !== '@' ? N3DataFactory_xsd.string : rdf.langString;
    }
  }]);

  return Literal;
}(Term); // ## BlankNode constructor

var BlankNode = /*#__PURE__*/function (_Term3) {
  _inherits(BlankNode, _Term3);

  var _super3 = _createSuper(BlankNode);

  function BlankNode(name) {
    N3DataFactory_classCallCheck(this, BlankNode);

    return _super3.call(this, '_:' + name);
  } // ### The term type of this term


  N3DataFactory_createClass(BlankNode, [{
    key: "termType",
    get: function get() {
      return 'BlankNode';
    } // ### The name of this blank node

  }, {
    key: "value",
    get: function get() {
      return this.id.substr(2);
    }
  }]);

  return BlankNode;
}(Term);
var Variable = /*#__PURE__*/function (_Term4) {
  _inherits(Variable, _Term4);

  var _super4 = _createSuper(Variable);

  function Variable(name) {
    N3DataFactory_classCallCheck(this, Variable);

    return _super4.call(this, '?' + name);
  } // ### The term type of this term


  N3DataFactory_createClass(Variable, [{
    key: "termType",
    get: function get() {
      return 'Variable';
    } // ### The name of this variable

  }, {
    key: "value",
    get: function get() {
      return this.id.substr(1);
    }
  }]);

  return Variable;
}(Term); // ## DefaultGraph constructor

var DefaultGraph = /*#__PURE__*/function (_Term5) {
  _inherits(DefaultGraph, _Term5);

  var _super5 = _createSuper(DefaultGraph);

  function DefaultGraph() {
    var _this;

    N3DataFactory_classCallCheck(this, DefaultGraph);

    _this = _super5.call(this, '');
    return _possibleConstructorReturn(_this, DEFAULTGRAPH || _assertThisInitialized(_this));
  } // ### The term type of this term


  N3DataFactory_createClass(DefaultGraph, [{
    key: "equals",
    // ### Returns whether this object represents the same term as the other
    value: function equals(other) {
      // If both terms were created by this library,
      // equality can be computed through strict equality;
      // otherwise, compare term types.
      return this === other || !!other && this.termType === other.termType;
    }
  }, {
    key: "termType",
    get: function get() {
      return 'DefaultGraph';
    }
  }]);

  return DefaultGraph;
}(Term); // ## DefaultGraph singleton

DEFAULTGRAPH = new DefaultGraph(); // ### Constructs a term from the given internal string ID

function termFromId(id, factory) {
  factory = factory || DataFactory; // Falsy value or empty string indicate the default graph

  if (!id) return factory.defaultGraph(); // Identify the term type based on the first character

  switch (id[0]) {
    case '?':
      return factory.variable(id.substr(1));

    case '_':
      return factory.blankNode(id.substr(2));

    case '"':
      // Shortcut for internal literals
      if (factory === DataFactory) return new Literal(id); // Literal without datatype or language

      if (id[id.length - 1] === '"') return factory.literal(id.substr(1, id.length - 2)); // Literal with datatype or language

      var endPos = id.lastIndexOf('"', id.length - 1);
      return factory.literal(id.substr(1, endPos - 1), id[endPos + 1] === '@' ? id.substr(endPos + 2) : factory.namedNode(id.substr(endPos + 3)));

    case '<':
      var components = quadId.exec(id);
      return factory.quad(termFromId(unescapeQuotes(components[1]), factory), termFromId(unescapeQuotes(components[2]), factory), termFromId(unescapeQuotes(components[3]), factory), components[4] && termFromId(unescapeQuotes(components[4]), factory));

    default:
      return factory.namedNode(id);
  }
} // ### Constructs an internal string ID from the given term or ID string

function termToId(term) {
  if (typeof term === 'string') return term;
  if (term instanceof Term && term.termType !== 'Quad') return term.id;
  if (!term) return DEFAULTGRAPH.id; // Term instantiated with another library

  switch (term.termType) {
    case 'NamedNode':
      return term.value;

    case 'BlankNode':
      return '_:' + term.value;

    case 'Variable':
      return '?' + term.value;

    case 'DefaultGraph':
      return '';

    case 'Literal':
      return '"' + term.value + '"' + (term.language ? '@' + term.language : term.datatype && term.datatype.value !== N3DataFactory_xsd.string ? '^^' + term.datatype.value : '');

    case 'Quad':
      // To identify RDF* quad components, we escape quotes by doubling them.
      // This avoids the overhead of backslash parsing of Turtle-like syntaxes.
      return "<<".concat(escapeQuotes(termToId(term.subject)), " ").concat(escapeQuotes(termToId(term.predicate)), " ").concat(escapeQuotes(termToId(term.object))).concat(isDefaultGraph(term.graph) ? '' : " ".concat(termToId(term.graph)), ">>");

    default:
      throw new Error('Unexpected termType: ' + term.termType);
  }
} // ## Quad constructor

var Quad = /*#__PURE__*/function (_Term6) {
  _inherits(Quad, _Term6);

  var _super6 = _createSuper(Quad);

  function Quad(subject, predicate, object, graph) {
    var _this2;

    N3DataFactory_classCallCheck(this, Quad);

    _this2 = _super6.call(this, '');
    _this2.subject = subject;
    _this2.predicate = predicate;
    _this2.object = object;
    _this2.graph = graph || DEFAULTGRAPH;
    return _this2;
  } // ### The term type of this term


  N3DataFactory_createClass(Quad, [{
    key: "toJSON",
    // ### Returns a plain object representation of this quad
    value: function toJSON() {
      return {
        termType: this.termType,
        subject: this.subject.toJSON(),
        predicate: this.predicate.toJSON(),
        object: this.object.toJSON(),
        graph: this.graph.toJSON()
      };
    } // ### Returns whether this object represents the same quad as the other

  }, {
    key: "equals",
    value: function equals(other) {
      return !!other && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
    }
  }, {
    key: "termType",
    get: function get() {
      return 'Quad';
    }
  }]);

  return Quad;
}(Term);
 // ### Escapes the quotes within the given literal

function escapeQuotes(id) {
  return id.replace(escapedLiteral, function (_, quoted) {
    return "\"".concat(quoted.replace(/"/g, '""'));
  });
} // ### Unescapes the quotes within the given literal

function unescapeQuotes(id) {
  return id.replace(escapedLiteral, function (_, quoted) {
    return "\"".concat(quoted.replace(/""/g, '"'));
  });
} // ### Creates an IRI

function namedNode(iri) {
  return new NamedNode(iri);
} // ### Creates a blank node


function blankNode(name) {
  return new BlankNode(name || "n3-".concat(_blankNodeCounter++));
} // ### Creates a literal


function literal(value, languageOrDataType) {
  // Create a language-tagged string
  if (typeof languageOrDataType === 'string') return new Literal('"' + value + '"@' + languageOrDataType.toLowerCase()); // Automatically determine datatype for booleans and numbers

  var datatype = languageOrDataType ? languageOrDataType.value : '';

  if (datatype === '') {
    // Convert a boolean
    if (typeof value === 'boolean') datatype = N3DataFactory_xsd["boolean"]; // Convert an integer or double
    else if (typeof value === 'number') {
        if (Number.isFinite(value)) datatype = Number.isInteger(value) ? N3DataFactory_xsd.integer : N3DataFactory_xsd["double"];else {
          datatype = N3DataFactory_xsd["double"];
          if (!Number.isNaN(value)) value = value > 0 ? 'INF' : '-INF';
        }
      }
  } // Create a datatyped literal


  return datatype === '' || datatype === N3DataFactory_xsd.string ? new Literal('"' + value + '"') : new Literal('"' + value + '"^^' + datatype);
} // ### Creates a variable


function variable(name) {
  return new Variable(name);
} // ### Returns the default graph


function defaultGraph() {
  return DEFAULTGRAPH;
} // ### Creates a quad


function quad(subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph);
}
;// CONCATENATED MODULE: ./node_modules/n3/src/N3Parser.js
function N3Parser_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function N3Parser_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function N3Parser_createClass(Constructor, protoProps, staticProps) { if (protoProps) N3Parser_defineProperties(Constructor.prototype, protoProps); if (staticProps) N3Parser_defineProperties(Constructor, staticProps); return Constructor; }

// **N3Parser** parses N3 documents.



var blankNodePrefix = 0; // ## Constructor

var N3Parser = /*#__PURE__*/function () {
  function N3Parser(options) {
    N3Parser_classCallCheck(this, N3Parser);

    this._contextStack = [];
    this._graph = null; // Set the document IRI

    options = options || {};

    this._setBase(options.baseIRI);

    options.factory && initDataFactory(this, options.factory); // Set supported features depending on the format

    var format = typeof options.format === 'string' ? options.format.match(/\w*$/)[0].toLowerCase() : '',
        isTurtle = /turtle/.test(format),
        isTriG = /trig/.test(format),
        isNTriples = /triple/.test(format),
        isNQuads = /quad/.test(format),
        isN3 = this._n3Mode = /n3/.test(format),
        isLineMode = isNTriples || isNQuads;
    if (!(this._supportsNamedGraphs = !(isTurtle || isN3))) this._readPredicateOrNamedGraph = this._readPredicate; // Support triples in other graphs

    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3); // Support nesting of triples

    this._supportsRDFStar = format === '' || /star|\*$/.test(format); // Disable relative IRIs in N-Triples or N-Quads mode

    if (isLineMode) this._resolveRelativeIRI = function (iri) {
      return null;
    };
    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' : options.blankNodePrefix.replace(/^(?!_:)/, '_:');
    this._lexer = options.lexer || new N3Lexer({
      lineMode: isLineMode,
      n3: isN3
    }); // Disable explicit quantifiers by default

    this._explicitQuantifiers = !!options.explicitQuantifiers;
  } // ## Static class methods
  // ### `_resetBlankNodePrefix` restarts blank node prefix identification


  N3Parser_createClass(N3Parser, [{
    key: "_setBase",
    // ## Private methods
    // ### `_setBase` sets the base IRI to resolve relative IRIs
    value: function _setBase(baseIRI) {
      if (!baseIRI) {
        this._base = '';
        this._basePath = '';
      } else {
        // Remove fragment if present
        var fragmentPos = baseIRI.indexOf('#');
        if (fragmentPos >= 0) baseIRI = baseIRI.substr(0, fragmentPos); // Set base IRI and its components

        this._base = baseIRI;
        this._basePath = baseIRI.indexOf('/') < 0 ? baseIRI : baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
        baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);
        this._baseRoot = baseIRI[0];
        this._baseScheme = baseIRI[1];
      }
    } // ### `_saveContext` stores the current parsing context
    // when entering a new scope (list, blank node, formula)

  }, {
    key: "_saveContext",
    value: function _saveContext(type, graph, subject, predicate, object) {
      var n3Mode = this._n3Mode;

      this._contextStack.push({
        subject: subject,
        predicate: predicate,
        object: object,
        graph: graph,
        type: type,
        inverse: n3Mode ? this._inversePredicate : false,
        blankPrefix: n3Mode ? this._prefixes._ : '',
        quantified: n3Mode ? this._quantified : null
      }); // The settings below only apply to N3 streams


      if (n3Mode) {
        // Every new scope resets the predicate direction
        this._inversePredicate = false; // In N3, blank nodes are scoped to a formula
        // (using a dot as separator, as a blank node label cannot start with it)

        this._prefixes._ = this._graph ? this._graph.id.substr(2) + '.' : '.'; // Quantifiers are scoped to a formula

        this._quantified = Object.create(this._quantified);
      }
    } // ### `_restoreContext` restores the parent context
    // when leaving a scope (list, blank node, formula)

  }, {
    key: "_restoreContext",
    value: function _restoreContext() {
      var context = this._contextStack.pop(),
          n3Mode = this._n3Mode;

      this._subject = context.subject;
      this._predicate = context.predicate;
      this._object = context.object;
      this._graph = context.graph; // The settings below only apply to N3 streams

      if (n3Mode) {
        this._inversePredicate = context.inverse;
        this._prefixes._ = context.blankPrefix;
        this._quantified = context.quantified;
      }
    } // ### `_readInTopContext` reads a token when in the top context

  }, {
    key: "_readInTopContext",
    value: function _readInTopContext(token) {
      switch (token.type) {
        // If an EOF token arrives in the top context, signal that we're done
        case 'eof':
          if (this._graph !== null) return this._error('Unclosed graph', token);
          delete this._prefixes._;
          return this._callback(null, null, this._prefixes);
        // It could be a prefix declaration

        case 'PREFIX':
          this._sparqlStyle = true;

        case '@prefix':
          return this._readPrefix;
        // It could be a base declaration

        case 'BASE':
          this._sparqlStyle = true;

        case '@base':
          return this._readBaseIRI;
        // It could be a graph

        case '{':
          if (this._supportsNamedGraphs) {
            this._graph = '';
            this._subject = null;
            return this._readSubject;
          }

        case 'GRAPH':
          if (this._supportsNamedGraphs) return this._readNamedGraphLabel;
        // Otherwise, the next token must be a subject

        default:
          return this._readSubject(token);
      }
    } // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable

  }, {
    key: "_readEntity",
    value: function _readEntity(token, quantifier) {
      var value;

      switch (token.type) {
        // Read a relative or absolute IRI
        case 'IRI':
        case 'typeIRI':
          var iri = this._resolveIRI(token.value);

          if (iri === null) return this._error('Invalid IRI', token);
          value = this._namedNode(iri);
          break;
        // Read a prefixed name

        case 'type':
        case 'prefixed':
          var prefix = this._prefixes[token.prefix];
          if (prefix === undefined) return this._error('Undefined prefix "' + token.prefix + ':"', token);
          value = this._namedNode(prefix + token.value);
          break;
        // Read a blank node

        case 'blank':
          value = this._blankNode(this._prefixes[token.prefix] + token.value);
          break;
        // Read a variable

        case 'var':
          value = this._variable(token.value.substr(1));
          break;
        // Everything else is not an entity

        default:
          return this._error('Expected entity but got ' + token.type, token);
      } // In N3 mode, replace the entity if it is quantified


      if (!quantifier && this._n3Mode && value.id in this._quantified) value = this._quantified[value.id];
      return value;
    } // ### `_readSubject` reads a quad's subject

  }, {
    key: "_readSubject",
    value: function _readSubject(token) {
      this._predicate = null;

      switch (token.type) {
        case '[':
          // Start a new quad with a new blank node as subject
          this._saveContext('blank', this._graph, this._subject = this._blankNode(), null, null);

          return this._readBlankNodeHead;

        case '(':
          // Start a new list
          this._saveContext('list', this._graph, this.RDF_NIL, null, null);

          this._subject = null;
          return this._readListItem;

        case '{':
          // Start a new formula
          if (!this._n3Mode) return this._error('Unexpected graph', token);

          this._saveContext('formula', this._graph, this._graph = this._blankNode(), null, null);

          return this._readSubject;

        case '}':
          // No subject; the graph in which we are reading is closed instead
          return this._readPunctuation(token);

        case '@forSome':
          if (!this._n3Mode) return this._error('Unexpected "@forSome"', token);
          this._subject = null;
          this._predicate = this.N3_FORSOME;
          this._quantifier = this._blankNode;
          return this._readQuantifierList;

        case '@forAll':
          if (!this._n3Mode) return this._error('Unexpected "@forAll"', token);
          this._subject = null;
          this._predicate = this.N3_FORALL;
          this._quantifier = this._variable;
          return this._readQuantifierList;

        case 'literal':
          if (!this._n3Mode) return this._error('Unexpected literal', token);

          if (token.prefix.length === 0) {
            this._literalValue = token.value;
            return this._completeSubjectLiteral;
          } else this._subject = this._literal(token.value, this._namedNode(token.prefix));

          break;

        case '<<':
          if (!this._supportsRDFStar) return this._error('Unexpected RDF* syntax', token);

          this._saveContext('<<', this._graph, null, null, null);

          this._graph = null;
          return this._readSubject;

        default:
          // Read the subject entity
          if ((this._subject = this._readEntity(token)) === undefined) return; // In N3 mode, the subject might be a path

          if (this._n3Mode) return this._getPathReader(this._readPredicateOrNamedGraph);
      } // The next token must be a predicate,
      // or, if the subject was actually a graph IRI, a named graph


      return this._readPredicateOrNamedGraph;
    } // ### `_readPredicate` reads a quad's predicate

  }, {
    key: "_readPredicate",
    value: function _readPredicate(token) {
      var type = token.type;

      switch (type) {
        case 'inverse':
          this._inversePredicate = true;

        case 'abbreviation':
          this._predicate = this.ABBREVIATIONS[token.value];
          break;

        case '.':
        case ']':
        case '}':
          // Expected predicate didn't come, must have been trailing semicolon
          if (this._predicate === null) return this._error('Unexpected ' + type, token);
          this._subject = null;
          return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);

        case ';':
          // Additional semicolons can be safely ignored
          return this._predicate !== null ? this._readPredicate : this._error('Expected predicate but got ;', token);

        case 'blank':
          if (!this._n3Mode) return this._error('Disallowed blank node as predicate', token);

        default:
          if ((this._predicate = this._readEntity(token)) === undefined) return;
      } // The next token must be an object


      return this._readObject;
    } // ### `_readObject` reads a quad's object

  }, {
    key: "_readObject",
    value: function _readObject(token) {
      switch (token.type) {
        case 'literal':
          // Regular literal, can still get a datatype or language
          if (token.prefix.length === 0) {
            this._literalValue = token.value;
            return this._readDataTypeOrLang;
          } // Pre-datatyped string literal (prefix stores the datatype)
          else this._object = this._literal(token.value, this._namedNode(token.prefix));

          break;

        case '[':
          // Start a new quad with a new blank node as subject
          this._saveContext('blank', this._graph, this._subject, this._predicate, this._subject = this._blankNode());

          return this._readBlankNodeHead;

        case '(':
          // Start a new list
          this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);

          this._subject = null;
          return this._readListItem;

        case '{':
          // Start a new formula
          if (!this._n3Mode) return this._error('Unexpected graph', token);

          this._saveContext('formula', this._graph, this._subject, this._predicate, this._graph = this._blankNode());

          return this._readSubject;

        case '<<':
          if (!this._supportsRDFStar) return this._error('Unexpected RDF* syntax', token);

          this._saveContext('<<', this._graph, this._subject, this._predicate, null);

          this._graph = null;
          return this._readSubject;

        default:
          // Read the object entity
          if ((this._object = this._readEntity(token)) === undefined) return; // In N3 mode, the object might be a path

          if (this._n3Mode) return this._getPathReader(this._getContextEndReader());
      }

      return this._getContextEndReader();
    } // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph

  }, {
    key: "_readPredicateOrNamedGraph",
    value: function _readPredicateOrNamedGraph(token) {
      return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
    } // ### `_readGraph` reads a graph

  }, {
    key: "_readGraph",
    value: function _readGraph(token) {
      if (token.type !== '{') return this._error('Expected graph but got ' + token.type, token); // The "subject" we read is actually the GRAPH's label

      this._graph = this._subject, this._subject = null;
      return this._readSubject;
    } // ### `_readBlankNodeHead` reads the head of a blank node

  }, {
    key: "_readBlankNodeHead",
    value: function _readBlankNodeHead(token) {
      if (token.type === ']') {
        this._subject = null;
        return this._readBlankNodeTail(token);
      } else {
        this._predicate = null;
        return this._readPredicate(token);
      }
    } // ### `_readBlankNodeTail` reads the end of a blank node

  }, {
    key: "_readBlankNodeTail",
    value: function _readBlankNodeTail(token) {
      if (token.type !== ']') return this._readBlankNodePunctuation(token); // Store blank node quad

      if (this._subject !== null) this._emit(this._subject, this._predicate, this._object, this._graph); // Restore the parent context containing this blank node

      var empty = this._predicate === null;

      this._restoreContext(); // If the blank node was the subject, continue reading the predicate


      if (this._object === null) // If the blank node was empty, it could be a named graph label
        return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank; // If the blank node was the object, restore previous context and read punctuation
      else return this._getContextEndReader();
    } // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node

  }, {
    key: "_readPredicateAfterBlank",
    value: function _readPredicateAfterBlank(token) {
      switch (token.type) {
        case '.':
        case '}':
          // No predicate is coming if the triple is terminated here
          this._subject = null;
          return this._readPunctuation(token);

        default:
          return this._readPredicate(token);
      }
    } // ### `_readListItem` reads items from a list

  }, {
    key: "_readListItem",
    value: function _readListItem(token) {
      var item = null,
          // The item of the list
      list = null,
          // The list itself
      previousList = this._subject,
          // The previous list that contains this list
      stack = this._contextStack,
          // The stack of parent contexts
      parent = stack[stack.length - 1],
          // The parent containing the current list
      next = this._readListItem; // The next function to execute

      switch (token.type) {
        case '[':
          // Stack the current list quad and start a new quad with a blank node as subject
          this._saveContext('blank', this._graph, list = this._blankNode(), this.RDF_FIRST, this._subject = item = this._blankNode());

          next = this._readBlankNodeHead;
          break;

        case '(':
          // Stack the current list quad and start a new list
          this._saveContext('list', this._graph, list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);

          this._subject = null;
          break;

        case ')':
          // Closing the list; restore the parent context
          this._restoreContext(); // If this list is contained within a parent list, return the membership quad here.
          // This will be `<parent list element> rdf:first <this list>.`.


          if (stack.length !== 0 && stack[stack.length - 1].type === 'list') this._emit(this._subject, this._predicate, this._object, this._graph); // Was this list the parent's subject?

          if (this._predicate === null) {
            // The next token is the predicate
            next = this._readPredicate; // No list tail if this was an empty list

            if (this._subject === this.RDF_NIL) return next;
          } // The list was in the parent context's object
          else {
              next = this._getContextEndReader(); // No list tail if this was an empty list

              if (this._object === this.RDF_NIL) return next;
            } // Close the list by making the head nil


          list = this.RDF_NIL;
          break;

        case 'literal':
          // Regular literal, can still get a datatype or language
          if (token.prefix.length === 0) {
            this._literalValue = token.value;
            next = this._readListItemDataTypeOrLang;
          } // Pre-datatyped string literal (prefix stores the datatype)
          else {
              item = this._literal(token.value, this._namedNode(token.prefix));
              next = this._getContextEndReader();
            }

          break;

        case '{':
          // Start a new formula
          if (!this._n3Mode) return this._error('Unexpected graph', token);

          this._saveContext('formula', this._graph, this._subject, this._predicate, this._graph = this._blankNode());

          return this._readSubject;

        default:
          if ((item = this._readEntity(token)) === undefined) return;
      } // Create a new blank node if no item head was assigned yet


      if (list === null) this._subject = list = this._blankNode(); // Is this the first element of the list?

      if (previousList === null) {
        // This list is either the subject or the object of its parent
        if (parent.predicate === null) parent.subject = list;else parent.object = list;
      } else {
        // Continue the previous list with the current list
        this._emit(previousList, this.RDF_REST, list, this._graph);
      } // If an item was read, add it to the list


      if (item !== null) {
        // In N3 mode, the item might be a path
        if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {
          // Create a new context to add the item's path
          this._saveContext('item', this._graph, list, this.RDF_FIRST, item);

          this._subject = item, this._predicate = null; // _readPath will restore the context and output the item

          return this._getPathReader(this._readListItem);
        } // Output the item


        this._emit(list, this.RDF_FIRST, item, this._graph);
      }

      return next;
    } // ### `_readDataTypeOrLang` reads an _optional_ datatype or language

  }, {
    key: "_readDataTypeOrLang",
    value: function _readDataTypeOrLang(token) {
      return this._completeObjectLiteral(token, false);
    } // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list

  }, {
    key: "_readListItemDataTypeOrLang",
    value: function _readListItemDataTypeOrLang(token) {
      return this._completeObjectLiteral(token, true);
    } // ### `_completeLiteral` completes a literal with an optional datatype or language

  }, {
    key: "_completeLiteral",
    value: function _completeLiteral(token) {
      // Create a simple string literal by default
      var literal = this._literal(this._literalValue);

      switch (token.type) {
        // Create a datatyped literal
        case 'type':
        case 'typeIRI':
          var datatype = this._readEntity(token);

          if (datatype === undefined) return; // No datatype means an error occurred

          literal = this._literal(this._literalValue, datatype);
          token = null;
          break;
        // Create a language-tagged string

        case 'langcode':
          literal = this._literal(this._literalValue, token.value);
          token = null;
          break;
      }

      return {
        token: token,
        literal: literal
      };
    } // Completes a literal in subject position

  }, {
    key: "_completeSubjectLiteral",
    value: function _completeSubjectLiteral(token) {
      this._subject = this._completeLiteral(token).literal;
      return this._readPredicateOrNamedGraph;
    } // Completes a literal in object position

  }, {
    key: "_completeObjectLiteral",
    value: function _completeObjectLiteral(token, listItem) {
      var completed = this._completeLiteral(token);

      if (!completed) return;
      this._object = completed.literal; // If this literal was part of a list, write the item
      // (we could also check the context stack, but passing in a flag is faster)

      if (listItem) this._emit(this._subject, this.RDF_FIRST, this._object, this._graph); // If the token was consumed, continue with the rest of the input

      if (completed.token === null) return this._getContextEndReader(); // Otherwise, consume the token now
      else {
          this._readCallback = this._getContextEndReader();
          return this._readCallback(completed.token);
        }
    } // ### `_readFormulaTail` reads the end of a formula

  }, {
    key: "_readFormulaTail",
    value: function _readFormulaTail(token) {
      if (token.type !== '}') return this._readPunctuation(token); // Store the last quad of the formula

      if (this._subject !== null) this._emit(this._subject, this._predicate, this._object, this._graph); // Restore the parent context containing this formula

      this._restoreContext(); // If the formula was the subject, continue reading the predicate.
      // If the formula was the object, read punctuation.


      return this._object === null ? this._readPredicate : this._getContextEndReader();
    } // ### `_readPunctuation` reads punctuation between quads or quad parts

  }, {
    key: "_readPunctuation",
    value: function _readPunctuation(token) {
      var next,
          subject = this._subject,
          graph = this._graph,
          inversePredicate = this._inversePredicate;

      switch (token.type) {
        // A closing brace ends a graph
        case '}':
          if (this._graph === null) return this._error('Unexpected graph closing', token);
          if (this._n3Mode) return this._readFormulaTail(token);
          this._graph = null;
        // A dot just ends the statement, without sharing anything with the next

        case '.':
          this._subject = null;
          next = this._contextStack.length ? this._readSubject : this._readInTopContext;
          if (inversePredicate) this._inversePredicate = false;
          break;
        // Semicolon means the subject is shared; predicate and object are different

        case ';':
          next = this._readPredicate;
          break;
        // Comma means both the subject and predicate are shared; the object is different

        case ',':
          next = this._readObject;
          break;

        default:
          // An entity means this is a quad (only allowed if not already inside a graph)
          if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {
            next = this._readQuadPunctuation;
            break;
          }

          return this._error('Expected punctuation to follow "' + this._object.id + '"', token);
      } // A quad has been completed now, so return it


      if (subject !== null) {
        var predicate = this._predicate,
            object = this._object;
        if (!inversePredicate) this._emit(subject, predicate, object, graph);else this._emit(object, predicate, subject, graph);
      }

      return next;
    } // ### `_readBlankNodePunctuation` reads punctuation in a blank node

  }, {
    key: "_readBlankNodePunctuation",
    value: function _readBlankNodePunctuation(token) {
      var next;

      switch (token.type) {
        // Semicolon means the subject is shared; predicate and object are different
        case ';':
          next = this._readPredicate;
          break;
        // Comma means both the subject and predicate are shared; the object is different

        case ',':
          next = this._readObject;
          break;

        default:
          return this._error('Expected punctuation to follow "' + this._object.id + '"', token);
      } // A quad has been completed now, so return it


      this._emit(this._subject, this._predicate, this._object, this._graph);

      return next;
    } // ### `_readQuadPunctuation` reads punctuation after a quad

  }, {
    key: "_readQuadPunctuation",
    value: function _readQuadPunctuation(token) {
      if (token.type !== '.') return this._error('Expected dot to follow quad', token);
      return this._readInTopContext;
    } // ### `_readPrefix` reads the prefix of a prefix declaration

  }, {
    key: "_readPrefix",
    value: function _readPrefix(token) {
      if (token.type !== 'prefix') return this._error('Expected prefix to follow @prefix', token);
      this._prefix = token.value;
      return this._readPrefixIRI;
    } // ### `_readPrefixIRI` reads the IRI of a prefix declaration

  }, {
    key: "_readPrefixIRI",
    value: function _readPrefixIRI(token) {
      if (token.type !== 'IRI') return this._error('Expected IRI to follow prefix "' + this._prefix + ':"', token);

      var prefixNode = this._readEntity(token);

      this._prefixes[this._prefix] = prefixNode.value;

      this._prefixCallback(this._prefix, prefixNode);

      return this._readDeclarationPunctuation;
    } // ### `_readBaseIRI` reads the IRI of a base declaration

  }, {
    key: "_readBaseIRI",
    value: function _readBaseIRI(token) {
      var iri = token.type === 'IRI' && this._resolveIRI(token.value);

      if (!iri) return this._error('Expected valid IRI to follow base declaration', token);

      this._setBase(iri);

      return this._readDeclarationPunctuation;
    } // ### `_readNamedGraphLabel` reads the label of a named graph

  }, {
    key: "_readNamedGraphLabel",
    value: function _readNamedGraphLabel(token) {
      switch (token.type) {
        case 'IRI':
        case 'blank':
        case 'prefixed':
          return this._readSubject(token), this._readGraph;

        case '[':
          return this._readNamedGraphBlankLabel;

        default:
          return this._error('Invalid graph label', token);
      }
    } // ### `_readNamedGraphLabel` reads a blank node label of a named graph

  }, {
    key: "_readNamedGraphBlankLabel",
    value: function _readNamedGraphBlankLabel(token) {
      if (token.type !== ']') return this._error('Invalid graph label', token);
      this._subject = this._blankNode();
      return this._readGraph;
    } // ### `_readDeclarationPunctuation` reads the punctuation of a declaration

  }, {
    key: "_readDeclarationPunctuation",
    value: function _readDeclarationPunctuation(token) {
      // SPARQL-style declarations don't have punctuation
      if (this._sparqlStyle) {
        this._sparqlStyle = false;
        return this._readInTopContext(token);
      }

      if (token.type !== '.') return this._error('Expected declaration to end with a dot', token);
      return this._readInTopContext;
    } // Reads a list of quantified symbols from a @forSome or @forAll statement

  }, {
    key: "_readQuantifierList",
    value: function _readQuantifierList(token) {
      var entity;

      switch (token.type) {
        case 'IRI':
        case 'prefixed':
          if ((entity = this._readEntity(token, true)) !== undefined) break;

        default:
          return this._error('Unexpected ' + token.type, token);
      } // Without explicit quantifiers, map entities to a quantified entity


      if (!this._explicitQuantifiers) this._quantified[entity.id] = this._quantifier(this._blankNode().value); // With explicit quantifiers, output the reified quantifier
      else {
          // If this is the first item, start a new quantifier list
          if (this._subject === null) this._emit(this._graph || this.DEFAULTGRAPH, this._predicate, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH); // Otherwise, continue the previous list
          else this._emit(this._subject, this.RDF_REST, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH); // Output the list item

          this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);
        }
      return this._readQuantifierPunctuation;
    } // Reads punctuation from a @forSome or @forAll statement

  }, {
    key: "_readQuantifierPunctuation",
    value: function _readQuantifierPunctuation(token) {
      // Read more quantifiers
      if (token.type === ',') return this._readQuantifierList; // End of the quantifier list
      else {
          // With explicit quantifiers, close the quantifier list
          if (this._explicitQuantifiers) {
            this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);

            this._subject = null;
          } // Read a dot


          this._readCallback = this._getContextEndReader();
          return this._readCallback(token);
        }
    } // ### `_getPathReader` reads a potential path and then resumes with the given function

  }, {
    key: "_getPathReader",
    value: function _getPathReader(afterPath) {
      this._afterPath = afterPath;
      return this._readPath;
    } // ### `_readPath` reads a potential path

  }, {
    key: "_readPath",
    value: function _readPath(token) {
      switch (token.type) {
        // Forward path
        case '!':
          return this._readForwardPath;
        // Backward path

        case '^':
          return this._readBackwardPath;
        // Not a path; resume reading where we left off

        default:
          var stack = this._contextStack,
              parent = stack.length && stack[stack.length - 1]; // If we were reading a list item, we still need to output it

          if (parent && parent.type === 'item') {
            // The list item is the remaining subejct after reading the path
            var item = this._subject; // Switch back to the context of the list

            this._restoreContext(); // Output the list item


            this._emit(this._subject, this.RDF_FIRST, item, this._graph);
          }

          return this._afterPath(token);
      }
    } // ### `_readForwardPath` reads a '!' path

  }, {
    key: "_readForwardPath",
    value: function _readForwardPath(token) {
      var subject,
          predicate,
          object = this._blankNode(); // The next token is the predicate


      if ((predicate = this._readEntity(token)) === undefined) return; // If we were reading a subject, replace the subject by the path's object

      if (this._predicate === null) subject = this._subject, this._subject = object; // If we were reading an object, replace the subject by the path's object
      else subject = this._object, this._object = object; // Emit the path's current quad and read its next section

      this._emit(subject, predicate, object, this._graph);

      return this._readPath;
    } // ### `_readBackwardPath` reads a '^' path

  }, {
    key: "_readBackwardPath",
    value: function _readBackwardPath(token) {
      var subject = this._blankNode(),
          predicate,
          object; // The next token is the predicate


      if ((predicate = this._readEntity(token)) === undefined) return; // If we were reading a subject, replace the subject by the path's subject

      if (this._predicate === null) object = this._subject, this._subject = subject; // If we were reading an object, replace the subject by the path's subject
      else object = this._object, this._object = subject; // Emit the path's current quad and read its next section

      this._emit(subject, predicate, object, this._graph);

      return this._readPath;
    } // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple

  }, {
    key: "_readRDFStarTailOrGraph",
    value: function _readRDFStarTailOrGraph(token) {
      if (token.type !== '>>') {
        // An entity means this is a quad (only allowed if not already inside a graph)
        if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined) return this._readRDFStarTail;
        return this._error('Expected >> to follow "' + this._object.id + '"', token);
      }

      return this._readRDFStarTail(token);
    } // ### `_readRDFStarTail` reads the end of a nested RDF* triple

  }, {
    key: "_readRDFStarTail",
    value: function _readRDFStarTail(token) {
      if (token.type !== '>>') return this._error("Expected >> but got ".concat(token.type), token); // Read the quad and restore the previous context

      var quad = this._quad(this._subject, this._predicate, this._object, this._graph || this.DEFAULTGRAPH);

      this._restoreContext(); // If the triple was the subject, continue by reading the predicate.


      if (this._subject === null) {
        this._subject = quad;
        return this._readPredicate;
      } // If the triple was the object, read context end.
      else {
          this._object = quad;
          return this._getContextEndReader();
        }
    } // ### `_getContextEndReader` gets the next reader function at the end of a context

  }, {
    key: "_getContextEndReader",
    value: function _getContextEndReader() {
      var contextStack = this._contextStack;
      if (!contextStack.length) return this._readPunctuation;

      switch (contextStack[contextStack.length - 1].type) {
        case 'blank':
          return this._readBlankNodeTail;

        case 'list':
          return this._readListItem;

        case 'formula':
          return this._readFormulaTail;

        case '<<':
          return this._readRDFStarTailOrGraph;
      }
    } // ### `_emit` sends a quad through the callback

  }, {
    key: "_emit",
    value: function _emit(subject, predicate, object, graph) {
      this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));
    } // ### `_error` emits an error message through the callback

  }, {
    key: "_error",
    value: function _error(message, token) {
      var err = new Error(message + ' on line ' + token.line + '.');
      err.context = {
        token: token,
        line: token.line,
        previousToken: this._lexer.previousToken
      };

      this._callback(err);

      this._callback = noop;
    } // ### `_resolveIRI` resolves an IRI against the base path

  }, {
    key: "_resolveIRI",
    value: function _resolveIRI(iri) {
      return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);
    } // ### `_resolveRelativeIRI` resolves an IRI against the base path,
    // assuming that a base path has been set and that the IRI is indeed relative

  }, {
    key: "_resolveRelativeIRI",
    value: function _resolveRelativeIRI(iri) {
      // An empty relative IRI indicates the base IRI
      if (!iri.length) return this._base; // Decide resolving strategy based in the first character

      switch (iri[0]) {
        // Resolve relative fragment IRIs against the base IRI
        case '#':
          return this._base + iri;
        // Resolve relative query string IRIs by replacing the query string

        case '?':
          return this._base.replace(/(?:\?.*)?$/, iri);
        // Resolve root-relative IRIs at the root of the base IRI

        case '/':
          // Resolve scheme-relative IRIs to the scheme
          return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
        // Resolve all other IRIs at the base IRI's path

        default:
          // Relative IRIs cannot contain a colon in the first path segment
          return /^[^/:]*:/.test(iri) ? null : this._removeDotSegments(this._basePath + iri);
      }
    } // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986

  }, {
    key: "_removeDotSegments",
    value: function _removeDotSegments(iri) {
      // Don't modify the IRI if it does not contain any dot segments
      if (!/(^|\/)\.\.?($|[/#?])/.test(iri)) return iri; // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'

      var result = '',
          length = iri.length,
          i = -1,
          pathStart = -1,
          segmentStart = 0,
          next = '/';

      while (i < length) {
        switch (next) {
          // The path starts with the first slash after the authority
          case ':':
            if (pathStart < 0) {
              // Skip two slashes before the authority
              if (iri[++i] === '/' && iri[++i] === '/') // Skip to slash after the authority
                while ((pathStart = i + 1) < length && iri[pathStart] !== '/') {
                  i = pathStart;
                }
            }

            break;
          // Don't modify a query string or fragment

          case '?':
          case '#':
            i = length;
            break;
          // Handle '/.' or '/..' path segments

          case '/':
            if (iri[i + 1] === '.') {
              next = iri[++i + 1];

              switch (next) {
                // Remove a '/.' segment
                case '/':
                  result += iri.substring(segmentStart, i - 1);
                  segmentStart = i + 1;
                  break;
                // Remove a trailing '/.' segment

                case undefined:
                case '?':
                case '#':
                  return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
                // Remove a '/..' segment

                case '.':
                  next = iri[++i + 1];

                  if (next === undefined || next === '/' || next === '?' || next === '#') {
                    result += iri.substring(segmentStart, i - 2); // Try to remove the parent path from result

                    if ((segmentStart = result.lastIndexOf('/')) >= pathStart) result = result.substr(0, segmentStart); // Remove a trailing '/..' segment

                    if (next !== '/') return result + '/' + iri.substr(i + 1);
                    segmentStart = i + 1;
                  }

              }
            }

        }

        next = iri[++i];
      }

      return result + iri.substring(segmentStart);
    } // ## Public methods
    // ### `parse` parses the N3 input and emits each parsed quad through the callback

  }, {
    key: "parse",
    value: function parse(input, quadCallback, prefixCallback) {
      var self = this; // The read callback is the next function to be executed when a token arrives.
      // We start reading in the top context.

      this._readCallback = this._readInTopContext;
      this._sparqlStyle = false;
      this._prefixes = Object.create(null);
      this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2) : 'b' + blankNodePrefix++ + '_';
      this._prefixCallback = prefixCallback || noop;
      this._inversePredicate = false;
      this._quantified = Object.create(null); // Parse synchronously if no quad callback is given

      if (!quadCallback) {
        var quads = [],
            error;

        this._callback = function (e, t) {
          e ? error = e : t && quads.push(t);
        };

        this._lexer.tokenize(input).every(function (token) {
          return self._readCallback = self._readCallback(token);
        });

        if (error) throw error;
        return quads;
      } // Parse asynchronously otherwise, executing the read callback when a token arrives


      this._callback = quadCallback;

      this._lexer.tokenize(input, function (error, token) {
        if (error !== null) self._callback(error), self._callback = noop;else if (self._readCallback) self._readCallback = self._readCallback(token);
      });
    }
  }], [{
    key: "_resetBlankNodePrefix",
    value: function _resetBlankNodePrefix() {
      blankNodePrefix = 0;
    }
  }]);

  return N3Parser;
}(); // The empty function




function noop() {} // Initializes the parser with the given data factory


function initDataFactory(parser, factory) {
  // Set factory methods
  var namedNode = factory.namedNode;
  parser._namedNode = namedNode;
  parser._blankNode = factory.blankNode;
  parser._literal = factory.literal;
  parser._variable = factory.variable;
  parser._quad = factory.quad;
  parser.DEFAULTGRAPH = factory.defaultGraph(); // Set common named nodes

  parser.RDF_FIRST = namedNode(IRIs.rdf.first);
  parser.RDF_REST = namedNode(IRIs.rdf.rest);
  parser.RDF_NIL = namedNode(IRIs.rdf.nil);
  parser.N3_FORALL = namedNode(IRIs.r.forAll);
  parser.N3_FORSOME = namedNode(IRIs.r.forSome);
  parser.ABBREVIATIONS = {
    'a': namedNode(IRIs.rdf.type),
    '=': namedNode(IRIs.owl.sameAs),
    '>': namedNode(IRIs.log.implies)
  };
  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');
}

initDataFactory(N3Parser.prototype, N3DataFactory);
;// CONCATENATED MODULE: ./node_modules/n3/src/N3Writer.js
function N3Writer_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { N3Writer_typeof = function _typeof(obj) { return typeof obj; }; } else { N3Writer_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return N3Writer_typeof(obj); }

function N3Writer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function N3Writer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function N3Writer_createClass(Constructor, protoProps, staticProps) { if (protoProps) N3Writer_defineProperties(Constructor.prototype, protoProps); if (staticProps) N3Writer_defineProperties(Constructor, staticProps); return Constructor; }

function N3Writer_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) N3Writer_setPrototypeOf(subClass, superClass); }

function N3Writer_setPrototypeOf(o, p) { N3Writer_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return N3Writer_setPrototypeOf(o, p); }

function N3Writer_createSuper(Derived) { var hasNativeReflectConstruct = N3Writer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = N3Writer_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = N3Writer_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return N3Writer_possibleConstructorReturn(this, result); }; }

function N3Writer_possibleConstructorReturn(self, call) { if (call && (N3Writer_typeof(call) === "object" || typeof call === "function")) { return call; } return N3Writer_assertThisInitialized(self); }

function N3Writer_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function N3Writer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function N3Writer_getPrototypeOf(o) { N3Writer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return N3Writer_getPrototypeOf(o); }

// **N3Writer** writes N3 documents.



var N3Writer_DEFAULTGRAPH = N3DataFactory.defaultGraph();
var N3Writer_rdf = IRIs.rdf,
    N3Writer_xsd = IRIs.xsd; // Characters in literals that require escaping

var N3Writer_escape = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    escapedCharacters = {
  '\\': '\\\\',
  '"': '\\"',
  '\t': '\\t',
  '\n': '\\n',
  '\r': '\\r',
  '\b': '\\b',
  '\f': '\\f'
}; // ## Placeholder class to represent already pretty-printed terms

var SerializedTerm = /*#__PURE__*/function (_Term) {
  N3Writer_inherits(SerializedTerm, _Term);

  var _super = N3Writer_createSuper(SerializedTerm);

  function SerializedTerm() {
    N3Writer_classCallCheck(this, SerializedTerm);

    return _super.apply(this, arguments);
  }

  N3Writer_createClass(SerializedTerm, [{
    key: "equals",
    // Pretty-printed nodes are not equal to any other node
    // (e.g., [] does not equal [])
    value: function equals() {
      return false;
    }
  }]);

  return SerializedTerm;
}(Term); // ## Constructor


var N3Writer = /*#__PURE__*/function () {
  function N3Writer(outputStream, options) {
    N3Writer_classCallCheck(this, N3Writer);

    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
    this._prefixRegex = /$0^/; // Shift arguments if the first argument is not a stream

    if (outputStream && typeof outputStream.write !== 'function') options = outputStream, outputStream = null;
    options = options || {};
    this._lists = options.lists; // If no output stream given, send the output as string through the end callback

    if (!outputStream) {
      var output = '';
      this._outputStream = {
        write: function write(chunk, encoding, done) {
          output += chunk;
          done && done();
        },
        end: function end(done) {
          done && done(null, output);
        }
      };
      this._endStream = true;
    } else {
      this._outputStream = outputStream;
      this._endStream = options.end === undefined ? true : !!options.end;
    } // Initialize writer, depending on the format


    this._subject = null;

    if (!/triple|quad/i.test(options.format)) {
      this._graph = N3Writer_DEFAULTGRAPH;
      this._prefixIRIs = Object.create(null);
      options.prefixes && this.addPrefixes(options.prefixes);
    } else {
      this._writeQuad = this._writeQuadLine;
    }
  } // ## Private methods
  // ### Whether the current graph is the default graph


  N3Writer_createClass(N3Writer, [{
    key: "_write",
    // ### `_write` writes the argument to the output stream
    value: function _write(string, callback) {
      this._outputStream.write(string, 'utf8', callback);
    } // ### `_writeQuad` writes the quad to the output stream

  }, {
    key: "_writeQuad",
    value: function _writeQuad(subject, predicate, object, graph, done) {
      try {
        // Write the graph's label if it has changed
        if (!graph.equals(this._graph)) {
          // Close the previous graph and start the new one
          this._write((this._subject === null ? '' : this._inDefaultGraph ? '.\n' : '\n}\n') + (N3Writer_DEFAULTGRAPH.equals(graph) ? '' : this._encodeIriOrBlank(graph) + ' {\n'));

          this._graph = graph;
          this._subject = null;
        } // Don't repeat the subject if it's the same


        if (subject.equals(this._subject)) {
          // Don't repeat the predicate if it's the same
          if (predicate.equals(this._predicate)) this._write(', ' + this._encodeObject(object), done); // Same subject, different predicate
          else this._write(';\n    ' + this._encodePredicate(this._predicate = predicate) + ' ' + this._encodeObject(object), done);
        } // Different subject; write the whole quad
        else this._write((this._subject === null ? '' : '.\n') + this._encodeSubject(this._subject = subject) + ' ' + this._encodePredicate(this._predicate = predicate) + ' ' + this._encodeObject(object), done);
      } catch (error) {
        done && done(error);
      }
    } // ### `_writeQuadLine` writes the quad to the output stream as a single line

  }, {
    key: "_writeQuadLine",
    value: function _writeQuadLine(subject, predicate, object, graph, done) {
      // Write the quad without prefixes
      delete this._prefixMatch;

      this._write(this.quadToString(subject, predicate, object, graph), done);
    } // ### `quadToString` serializes a quad as a string

  }, {
    key: "quadToString",
    value: function quadToString(subject, predicate, object, graph) {
      return this._encodeSubject(subject) + ' ' + this._encodeIriOrBlank(predicate) + ' ' + this._encodeObject(object) + (graph && graph.value ? ' ' + this._encodeIriOrBlank(graph) + ' .\n' : ' .\n');
    } // ### `quadsToString` serializes an array of quads as a string

  }, {
    key: "quadsToString",
    value: function quadsToString(quads) {
      return quads.map(function (t) {
        return this.quadToString(t.subject, t.predicate, t.object, t.graph);
      }, this).join('');
    } // ### `_encodeSubject` represents a subject

  }, {
    key: "_encodeSubject",
    value: function _encodeSubject(entity) {
      return entity.termType === 'Quad' ? this._encodeQuad(entity) : this._encodeIriOrBlank(entity);
    } // ### `_encodeIriOrBlank` represents an IRI or blank node

  }, {
    key: "_encodeIriOrBlank",
    value: function _encodeIriOrBlank(entity) {
      // A blank node or list is represented as-is
      if (entity.termType !== 'NamedNode') {
        // If it is a list head, pretty-print it
        if (this._lists && entity.value in this._lists) entity = this.list(this._lists[entity.value]);
        return 'id' in entity ? entity.id : '_:' + entity.value;
      } // Escape special characters


      var iri = entity.value;
      if (N3Writer_escape.test(iri)) iri = iri.replace(escapeAll, characterReplacer); // Try to represent the IRI as prefixed name

      var prefixMatch = this._prefixRegex.exec(iri);

      return !prefixMatch ? '<' + iri + '>' : !prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2];
    } // ### `_encodeLiteral` represents a literal

  }, {
    key: "_encodeLiteral",
    value: function _encodeLiteral(literal) {
      // Escape special characters
      var value = literal.value;
      if (N3Writer_escape.test(value)) value = value.replace(escapeAll, characterReplacer); // Write the literal, possibly with type or language

      if (literal.language) return '"' + value + '"@' + literal.language;else if (literal.datatype.value !== N3Writer_xsd.string) return '"' + value + '"^^' + this._encodeIriOrBlank(literal.datatype);else return '"' + value + '"';
    } // ### `_encodePredicate` represents a predicate

  }, {
    key: "_encodePredicate",
    value: function _encodePredicate(predicate) {
      return predicate.value === N3Writer_rdf.type ? 'a' : this._encodeIriOrBlank(predicate);
    } // ### `_encodeObject` represents an object

  }, {
    key: "_encodeObject",
    value: function _encodeObject(object) {
      switch (object.termType) {
        case 'Quad':
          return this._encodeQuad(object);

        case 'Literal':
          return this._encodeLiteral(object);

        default:
          return this._encodeIriOrBlank(object);
      }
    } // ### `_encodeQuad` encodes an RDF* quad

  }, {
    key: "_encodeQuad",
    value: function _encodeQuad(_ref) {
      var subject = _ref.subject,
          predicate = _ref.predicate,
          object = _ref.object,
          graph = _ref.graph;
      return "<<".concat(this._encodeSubject(subject), " ").concat(this._encodePredicate(predicate), " ").concat(this._encodeObject(object)).concat(isDefaultGraph(graph) ? '' : " ".concat(this._encodeIriOrBlank(graph)), ">>");
    } // ### `_blockedWrite` replaces `_write` after the writer has been closed

  }, {
    key: "_blockedWrite",
    value: function _blockedWrite() {
      throw new Error('Cannot write because the writer has been closed.');
    } // ### `addQuad` adds the quad to the output stream

  }, {
    key: "addQuad",
    value: function addQuad(subject, predicate, object, graph, done) {
      // The quad was given as an object, so shift parameters
      if (object === undefined) this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate); // The optional `graph` parameter was not provided
      else if (typeof graph === 'function') this._writeQuad(subject, predicate, object, N3Writer_DEFAULTGRAPH, graph); // The `graph` parameter was provided
        else this._writeQuad(subject, predicate, object, graph || N3Writer_DEFAULTGRAPH, done);
    } // ### `addQuads` adds the quads to the output stream

  }, {
    key: "addQuads",
    value: function addQuads(quads) {
      for (var i = 0; i < quads.length; i++) {
        this.addQuad(quads[i]);
      }
    } // ### `addPrefix` adds the prefix to the output stream

  }, {
    key: "addPrefix",
    value: function addPrefix(prefix, iri, done) {
      var prefixes = {};
      prefixes[prefix] = iri;
      this.addPrefixes(prefixes, done);
    } // ### `addPrefixes` adds the prefixes to the output stream

  }, {
    key: "addPrefixes",
    value: function addPrefixes(prefixes, done) {
      var prefixIRIs = this._prefixIRIs,
          hasPrefixes = false;

      for (var prefix in prefixes) {
        var iri = prefixes[prefix];
        if (typeof iri !== 'string') iri = iri.value;
        hasPrefixes = true; // Finish a possible pending quad

        if (this._subject !== null) {
          this._write(this._inDefaultGraph ? '.\n' : '\n}\n');

          this._subject = null, this._graph = '';
        } // Store and write the prefix


        prefixIRIs[iri] = prefix += ':';

        this._write('@prefix ' + prefix + ' <' + iri + '>.\n');
      } // Recreate the prefix matcher


      if (hasPrefixes) {
        var IRIlist = '',
            prefixList = '';

        for (var prefixIRI in prefixIRIs) {
          IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
          prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
        }

        IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
        this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' + '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
      } // End a prefix block with a newline


      this._write(hasPrefixes ? '\n' : '', done);
    } // ### `blank` creates a blank node with the given content

  }, {
    key: "blank",
    value: function blank(predicate, object) {
      var children = predicate,
          child,
          length; // Empty blank node

      if (predicate === undefined) children = []; // Blank node passed as blank(Term("predicate"), Term("object"))
      else if (predicate.termType) children = [{
          predicate: predicate,
          object: object
        }]; // Blank node passed as blank({ predicate: predicate, object: object })
        else if (!('length' in predicate)) children = [predicate];

      switch (length = children.length) {
        // Generate an empty blank node
        case 0:
          return new SerializedTerm('[]');
        // Generate a non-nested one-triple blank node

        case 1:
          child = children[0];
          if (!(child.object instanceof SerializedTerm)) return new SerializedTerm('[ ' + this._encodePredicate(child.predicate) + ' ' + this._encodeObject(child.object) + ' ]');
        // Generate a multi-triple or nested blank node

        default:
          var contents = '['; // Write all triples in order

          for (var i = 0; i < length; i++) {
            child = children[i]; // Write only the object is the predicate is the same as the previous

            if (child.predicate.equals(predicate)) contents += ', ' + this._encodeObject(child.object); // Otherwise, write the predicate and the object
            else {
                contents += (i ? ';\n  ' : '\n  ') + this._encodePredicate(child.predicate) + ' ' + this._encodeObject(child.object);
                predicate = child.predicate;
              }
          }

          return new SerializedTerm(contents + '\n]');
      }
    } // ### `list` creates a list node with the given content

  }, {
    key: "list",
    value: function list(elements) {
      var length = elements && elements.length || 0,
          contents = new Array(length);

      for (var i = 0; i < length; i++) {
        contents[i] = this._encodeObject(elements[i]);
      }

      return new SerializedTerm('(' + contents.join(' ') + ')');
    } // ### `end` signals the end of the output stream

  }, {
    key: "end",
    value: function end(done) {
      // Finish a possible pending quad
      if (this._subject !== null) {
        this._write(this._inDefaultGraph ? '.\n' : '\n}\n');

        this._subject = null;
      } // Disallow further writing


      this._write = this._blockedWrite; // Try to end the underlying stream, ensuring done is called exactly one time

      var singleDone = done && function (error, result) {
        singleDone = null, done(error, result);
      };

      if (this._endStream) {
        try {
          return this._outputStream.end(singleDone);
        } catch (error) {
          /* error closing stream */
        }
      }

      singleDone && singleDone();
    }
  }, {
    key: "_inDefaultGraph",
    get: function get() {
      return N3Writer_DEFAULTGRAPH.equals(this._graph);
    }
  }]);

  return N3Writer;
}(); // Replaces a character by its escaped version




function characterReplacer(character) {
  // Replace a single character by its escaped version
  var result = escapedCharacters[character];

  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = "\\u0000".substr(0, 6 - result.length) + result;
    } // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
        result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);
        result = "\\U00000000".substr(0, 10 - result.length) + result;
      }
  }

  return result;
}
// EXTERNAL MODULE: ./node_modules/readable-stream/readable-browser.js
var readable_browser = __webpack_require__(86505);
;// CONCATENATED MODULE: ./node_modules/n3/src/N3Store.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function N3Store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function N3Store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function N3Store_createClass(Constructor, protoProps, staticProps) { if (protoProps) N3Store_defineProperties(Constructor.prototype, protoProps); if (staticProps) N3Store_defineProperties(Constructor, staticProps); return Constructor; }

// **N3Store** objects store N3 quads by graph in memory.


 // ## Constructor

var N3Store = /*#__PURE__*/function () {
  function N3Store(quads, options) {
    N3Store_classCallCheck(this, N3Store);

    // The number of quads is initially zero
    this._size = 0; // `_graphs` contains subject, predicate, and object indexes per graph

    this._graphs = Object.create(null); // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
    // saving memory by using only numbers as keys in `_graphs`

    this._id = 0;
    this._ids = Object.create(null);
    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero

    this._entities = Object.create(null); // inverse of `_ids`
    // `_blankNodeIndex` is the index of the last automatically named blank node

    this._blankNodeIndex = 0; // Shift parameters if `quads` is not given

    if (!options && quads && !quads[0]) options = quads, quads = null;
    options = options || {};
    this._factory = options.factory || N3DataFactory; // Add quads if passed

    if (quads) this.addQuads(quads);
  } // ## Public properties
  // ### `size` returns the number of quads in the store


  N3Store_createClass(N3Store, [{
    key: "_addToIndex",
    // ## Private methods
    // ### `_addToIndex` adds a quad to a three-layered index.
    // Returns if the index has changed, if the entry did not already exist.
    value: function _addToIndex(index0, key0, key1, key2) {
      // Create layers as necessary
      var index1 = index0[key0] || (index0[key0] = {});
      var index2 = index1[key1] || (index1[key1] = {}); // Setting the key to _any_ value signals the presence of the quad

      var existed = (key2 in index2);
      if (!existed) index2[key2] = null;
      return !existed;
    } // ### `_removeFromIndex` removes a quad from a three-layered index

  }, {
    key: "_removeFromIndex",
    value: function _removeFromIndex(index0, key0, key1, key2) {
      // Remove the quad from the index
      var index1 = index0[key0],
          index2 = index1[key1],
          key;
      delete index2[key2]; // Remove intermediary index layers if they are empty

      for (key in index2) {
        return;
      }

      delete index1[key1];

      for (key in index1) {
        return;
      }

      delete index0[key0];
    } // ### `_findInIndex` finds a set of quads in a three-layered index.
    // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
    // Any of these keys can be undefined, which is interpreted as a wildcard.
    // `name0`, `name1`, and `name2` are the names of the keys at each level,
    // used when reconstructing the resulting quad
    // (for instance: _subject_, _predicate_, and _object_).
    // Finally, `graph` will be the graph of the created quads.
    // If `callback` is given, each result is passed through it
    // and iteration halts when it returns truthy for any quad.
    // If instead `array` is given, each result is added to the array.

  }, {
    key: "_findInIndex",
    value: function _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
      var tmp,
          index1,
          index2,
          varCount = !key0 + !key1 + !key2,
          // depending on the number of variables, keys or reverse index are faster
      entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities; // If a key is specified, use only that part of index 0.

      if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];

      for (var value0 in index0) {
        var entity0 = entityKeys[value0];

        if (index1 = index0[value0]) {
          // If a key is specified, use only that part of index 1.
          if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];

          for (var value1 in index1) {
            var entity1 = entityKeys[value1];

            if (index2 = index1[value1]) {
              // If a key is specified, use only that part of index 2, if it exists.
              var values = key2 ? key2 in index2 ? [key2] : [] : Object.keys(index2); // Create quads for all items found in index 2.

              for (var l = 0; l < values.length; l++) {
                var parts = {
                  subject: null,
                  predicate: null,
                  object: null
                };
                parts[name0] = termFromId(entity0, this._factory);
                parts[name1] = termFromId(entity1, this._factory);
                parts[name2] = termFromId(entityKeys[values[l]], this._factory);

                var quad = this._factory.quad(parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));

                if (array) array.push(quad);else if (callback(quad)) return true;
              }
            }
          }
        }
      }

      return array;
    } // ### `_loop` executes the callback on all keys of index 0

  }, {
    key: "_loop",
    value: function _loop(index0, callback) {
      for (var key0 in index0) {
        callback(key0);
      }
    } // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0

  }, {
    key: "_loopByKey0",
    value: function _loopByKey0(index0, key0, callback) {
      var index1, key1;

      if (index1 = index0[key0]) {
        for (key1 in index1) {
          callback(key1);
        }
      }
    } // ### `_loopByKey1` executes the callback on given keys of all entries in index 0

  }, {
    key: "_loopByKey1",
    value: function _loopByKey1(index0, key1, callback) {
      var key0, index1;

      for (key0 in index0) {
        index1 = index0[key0];
        if (index1[key1]) callback(key0);
      }
    } // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2

  }, {
    key: "_loopBy2Keys",
    value: function _loopBy2Keys(index0, key0, key1, callback) {
      var index1, index2, key2;

      if ((index1 = index0[key0]) && (index2 = index1[key1])) {
        for (key2 in index2) {
          callback(key2);
        }
      }
    } // ### `_countInIndex` counts matching quads in a three-layered index.
    // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
    // Any of these keys can be undefined, which is interpreted as a wildcard.

  }, {
    key: "_countInIndex",
    value: function _countInIndex(index0, key0, key1, key2) {
      var count = 0,
          tmp,
          index1,
          index2; // If a key is specified, count only that part of index 0

      if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];

      for (var value0 in index0) {
        if (index1 = index0[value0]) {
          // If a key is specified, count only that part of index 1
          if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];

          for (var value1 in index1) {
            if (index2 = index1[value1]) {
              // If a key is specified, count the quad if it exists
              if (key2) key2 in index2 && count++; // Otherwise, count all quads
              else count += Object.keys(index2).length;
            }
          }
        }
      }

      return count;
    } // ### `_getGraphs` returns an array with the given graph,
    // or all graphs if the argument is null or undefined.

  }, {
    key: "_getGraphs",
    value: function _getGraphs(graph) {
      if (!isString(graph)) return this._graphs;
      var graphs = {};
      graphs[graph] = this._graphs[graph];
      return graphs;
    } // ### `_uniqueEntities` returns a function that accepts an entity ID
    // and passes the corresponding entity to callback if it hasn't occurred before.

  }, {
    key: "_uniqueEntities",
    value: function _uniqueEntities(callback) {
      var uniqueIds = Object.create(null),
          entities = this._entities;
      return function (id) {
        if (!(id in uniqueIds)) {
          uniqueIds[id] = true;
          callback(termFromId(entities[id]));
        }
      };
    } // ## Public methods
    // ### `addQuad` adds a new quad to the store.
    // Returns if the quad index has changed, if the quad did not already exist.

  }, {
    key: "addQuad",
    value: function addQuad(subject, predicate, object, graph) {
      // Shift arguments if a quad object is given instead of components
      if (!predicate) graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject; // Convert terms to internal string representation

      subject = termToId(subject);
      predicate = termToId(predicate);
      object = termToId(object);
      graph = termToId(graph); // Find the graph that will contain the triple

      var graphItem = this._graphs[graph]; // Create the graph if it doesn't exist yet

      if (!graphItem) {
        graphItem = this._graphs[graph] = {
          subjects: {},
          predicates: {},
          objects: {}
        }; // Freezing a graph helps subsequent `add` performance,
        // and properties will never be modified anyway

        Object.freeze(graphItem);
      } // Since entities can often be long IRIs, we avoid storing them in every index.
      // Instead, we have a separate index that maps entities to numbers,
      // which are then used as keys in the other indexes.


      var ids = this._ids;
      var entities = this._entities;
      subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id);
      predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
      object = ids[object] || (ids[entities[++this._id] = object] = this._id);

      var changed = this._addToIndex(graphItem.subjects, subject, predicate, object);

      this._addToIndex(graphItem.predicates, predicate, object, subject);

      this._addToIndex(graphItem.objects, object, subject, predicate); // The cached quad count is now invalid


      this._size = null;
      return changed;
    } // ### `addQuads` adds multiple quads to the store

  }, {
    key: "addQuads",
    value: function addQuads(quads) {
      for (var i = 0; i < quads.length; i++) {
        this.addQuad(quads[i]);
      }
    } // ### `import` adds a stream of quads to the store

  }, {
    key: "import",
    value: function _import(stream) {
      var self = this;
      stream.on('data', function (quad) {
        self.addQuad(quad);
      });
      return stream;
    } // ### `removeQuad` removes a quad from the store if it exists

  }, {
    key: "removeQuad",
    value: function removeQuad(subject, predicate, object, graph) {
      // Shift arguments if a quad object is given instead of components
      if (!predicate) graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject; // Convert terms to internal string representation

      subject = termToId(subject);
      predicate = termToId(predicate);
      object = termToId(object);
      graph = termToId(graph); // Find internal identifiers for all components
      // and verify the quad exists.

      var graphItem,
          ids = this._ids,
          graphs = this._graphs,
          subjects,
          predicates;
      if (!(subject = ids[subject]) || !(predicate = ids[predicate]) || !(object = ids[object]) || !(graphItem = graphs[graph]) || !(subjects = graphItem.subjects[subject]) || !(predicates = subjects[predicate]) || !(object in predicates)) return false; // Remove it from all indexes

      this._removeFromIndex(graphItem.subjects, subject, predicate, object);

      this._removeFromIndex(graphItem.predicates, predicate, object, subject);

      this._removeFromIndex(graphItem.objects, object, subject, predicate);

      if (this._size !== null) this._size--; // Remove the graph if it is empty

      for (subject in graphItem.subjects) {
        return true;
      }

      delete graphs[graph];
      return true;
    } // ### `removeQuads` removes multiple quads from the store

  }, {
    key: "removeQuads",
    value: function removeQuads(quads) {
      for (var i = 0; i < quads.length; i++) {
        this.removeQuad(quads[i]);
      }
    } // ### `remove` removes a stream of quads from the store

  }, {
    key: "remove",
    value: function remove(stream) {
      var self = this;
      stream.on('data', function (quad) {
        self.removeQuad(quad);
      });
      return stream;
    } // ### `removeMatches` removes all matching quads from the store
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "removeMatches",
    value: function removeMatches(subject, predicate, object, graph) {
      return this.remove(this.match(subject, predicate, object, graph));
    } // ### `deleteGraph` removes all triples with the given graph from the store

  }, {
    key: "deleteGraph",
    value: function deleteGraph(graph) {
      return this.removeMatches(null, null, null, graph);
    } // ### `getQuads` returns an array of quads matching a pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "getQuads",
    value: function getQuads(subject, predicate, object, graph) {
      // Convert terms to internal string representation
      subject = subject && termToId(subject);
      predicate = predicate && termToId(predicate);
      object = object && termToId(object);
      graph = graph && termToId(graph);

      var quads = [],
          graphs = this._getGraphs(graph),
          content,
          ids = this._ids,
          subjectId,
          predicateId,
          objectId; // Translate IRIs to internal index keys.


      if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return quads;

      for (var graphId in graphs) {
        // Only if the specified graph contains triples, there can be results
        if (content = graphs[graphId]) {
          // Choose the optimal index, based on what fields are present
          if (subjectId) {
            if (objectId) // If subject and object are given, the object index will be the fastest
              this._findInIndex(content.objects, objectId, subjectId, predicateId, 'object', 'subject', 'predicate', graphId, null, quads);else // If only subject and possibly predicate are given, the subject index will be the fastest
              this._findInIndex(content.subjects, subjectId, predicateId, null, 'subject', 'predicate', 'object', graphId, null, quads);
          } else if (predicateId) // If only predicate and possibly object are given, the predicate index will be the fastest
            this._findInIndex(content.predicates, predicateId, objectId, null, 'predicate', 'object', 'subject', graphId, null, quads);else if (objectId) // If only object is given, the object index will be the fastest
            this._findInIndex(content.objects, objectId, null, null, 'object', 'subject', 'predicate', graphId, null, quads);else // If nothing is given, iterate subjects and predicates first
            this._findInIndex(content.subjects, null, null, null, 'subject', 'predicate', 'object', graphId, null, quads);
        }
      }

      return quads;
    } // ### `match` returns a stream of quads matching a pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "match",
    value: function match(subject, predicate, object, graph) {
      var _this = this;

      var stream = new readable_browser.Readable({
        objectMode: true
      }); // Initialize stream once it is being read

      stream._read = function () {
        var _iterator = _createForOfIteratorHelper(_this.getQuads(subject, predicate, object, graph)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var quad = _step.value;
            stream.push(quad);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        stream.push(null);
      };

      return stream;
    } // ### `countQuads` returns the number of quads matching a pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "countQuads",
    value: function countQuads(subject, predicate, object, graph) {
      // Convert terms to internal string representation
      subject = subject && termToId(subject);
      predicate = predicate && termToId(predicate);
      object = object && termToId(object);
      graph = graph && termToId(graph);

      var count = 0,
          graphs = this._getGraphs(graph),
          content,
          ids = this._ids,
          subjectId,
          predicateId,
          objectId; // Translate IRIs to internal index keys.


      if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return 0;

      for (var graphId in graphs) {
        // Only if the specified graph contains triples, there can be results
        if (content = graphs[graphId]) {
          // Choose the optimal index, based on what fields are present
          if (subject) {
            if (object) // If subject and object are given, the object index will be the fastest
              count += this._countInIndex(content.objects, objectId, subjectId, predicateId);else // If only subject and possibly predicate are given, the subject index will be the fastest
              count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
          } else if (predicate) {
            // If only predicate and possibly object are given, the predicate index will be the fastest
            count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
          } else {
            // If only object is possibly given, the object index will be the fastest
            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
          }
        }
      }

      return count;
    } // ### `forEach` executes the callback on all quads.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "forEach",
    value: function forEach(callback, subject, predicate, object, graph) {
      this.some(function (quad) {
        callback(quad);
        return false;
      }, subject, predicate, object, graph);
    } // ### `every` executes the callback on all quads,
    // and returns `true` if it returns truthy for all them.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "every",
    value: function every(callback, subject, predicate, object, graph) {
      var some = false;
      var every = !this.some(function (quad) {
        some = true;
        return !callback(quad);
      }, subject, predicate, object, graph);
      return some && every;
    } // ### `some` executes the callback on all quads,
    // and returns `true` if it returns truthy for any of them.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "some",
    value: function some(callback, subject, predicate, object, graph) {
      // Convert terms to internal string representation
      subject = subject && termToId(subject);
      predicate = predicate && termToId(predicate);
      object = object && termToId(object);
      graph = graph && termToId(graph);

      var graphs = this._getGraphs(graph),
          content,
          ids = this._ids,
          subjectId,
          predicateId,
          objectId; // Translate IRIs to internal index keys.


      if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return false;

      for (var graphId in graphs) {
        // Only if the specified graph contains triples, there can be results
        if (content = graphs[graphId]) {
          // Choose the optimal index, based on what fields are present
          if (subjectId) {
            if (objectId) {
              // If subject and object are given, the object index will be the fastest
              if (this._findInIndex(content.objects, objectId, subjectId, predicateId, 'object', 'subject', 'predicate', graphId, callback, null)) return true;
            } else // If only subject and possibly predicate are given, the subject index will be the fastest
              if (this._findInIndex(content.subjects, subjectId, predicateId, null, 'subject', 'predicate', 'object', graphId, callback, null)) return true;
          } else if (predicateId) {
            // If only predicate and possibly object are given, the predicate index will be the fastest
            if (this._findInIndex(content.predicates, predicateId, objectId, null, 'predicate', 'object', 'subject', graphId, callback, null)) {
              return true;
            }
          } else if (objectId) {
            // If only object is given, the object index will be the fastest
            if (this._findInIndex(content.objects, objectId, null, null, 'object', 'subject', 'predicate', graphId, callback, null)) {
              return true;
            }
          } else // If nothing is given, iterate subjects and predicates first
            if (this._findInIndex(content.subjects, null, null, null, 'subject', 'predicate', 'object', graphId, callback, null)) {
              return true;
            }
        }
      }

      return false;
    } // ### `getSubjects` returns all subjects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "getSubjects",
    value: function getSubjects(predicate, object, graph) {
      var results = [];
      this.forSubjects(function (s) {
        results.push(s);
      }, predicate, object, graph);
      return results;
    } // ### `forSubjects` executes the callback on all subjects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "forSubjects",
    value: function forSubjects(callback, predicate, object, graph) {
      // Convert terms to internal string representation
      predicate = predicate && termToId(predicate);
      object = object && termToId(object);
      graph = graph && termToId(graph);

      var ids = this._ids,
          graphs = this._getGraphs(graph),
          content,
          predicateId,
          objectId;

      callback = this._uniqueEntities(callback); // Translate IRIs to internal index keys.

      if (isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return;

      for (graph in graphs) {
        // Only if the specified graph contains triples, there can be results
        if (content = graphs[graph]) {
          // Choose optimal index based on which fields are wildcards
          if (predicateId) {
            if (objectId) // If predicate and object are given, the POS index is best.
              this._loopBy2Keys(content.predicates, predicateId, objectId, callback);else // If only predicate is given, the SPO index is best.
              this._loopByKey1(content.subjects, predicateId, callback);
          } else if (objectId) // If only object is given, the OSP index is best.
            this._loopByKey0(content.objects, objectId, callback);else // If no params given, iterate all the subjects
            this._loop(content.subjects, callback);
        }
      }
    } // ### `getPredicates` returns all predicates that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "getPredicates",
    value: function getPredicates(subject, object, graph) {
      var results = [];
      this.forPredicates(function (p) {
        results.push(p);
      }, subject, object, graph);
      return results;
    } // ### `forPredicates` executes the callback on all predicates that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "forPredicates",
    value: function forPredicates(callback, subject, object, graph) {
      // Convert terms to internal string representation
      subject = subject && termToId(subject);
      object = object && termToId(object);
      graph = graph && termToId(graph);

      var ids = this._ids,
          graphs = this._getGraphs(graph),
          content,
          subjectId,
          objectId;

      callback = this._uniqueEntities(callback); // Translate IRIs to internal index keys.

      if (isString(subject) && !(subjectId = ids[subject]) || isString(object) && !(objectId = ids[object])) return;

      for (graph in graphs) {
        // Only if the specified graph contains triples, there can be results
        if (content = graphs[graph]) {
          // Choose optimal index based on which fields are wildcards
          if (subjectId) {
            if (objectId) // If subject and object are given, the OSP index is best.
              this._loopBy2Keys(content.objects, objectId, subjectId, callback);else // If only subject is given, the SPO index is best.
              this._loopByKey0(content.subjects, subjectId, callback);
          } else if (objectId) // If only object is given, the POS index is best.
            this._loopByKey1(content.predicates, objectId, callback);else // If no params given, iterate all the predicates.
            this._loop(content.predicates, callback);
        }
      }
    } // ### `getObjects` returns all objects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "getObjects",
    value: function getObjects(subject, predicate, graph) {
      var results = [];
      this.forObjects(function (o) {
        results.push(o);
      }, subject, predicate, graph);
      return results;
    } // ### `forObjects` executes the callback on all objects that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "forObjects",
    value: function forObjects(callback, subject, predicate, graph) {
      // Convert terms to internal string representation
      subject = subject && termToId(subject);
      predicate = predicate && termToId(predicate);
      graph = graph && termToId(graph);

      var ids = this._ids,
          graphs = this._getGraphs(graph),
          content,
          subjectId,
          predicateId;

      callback = this._uniqueEntities(callback); // Translate IRIs to internal index keys.

      if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate])) return;

      for (graph in graphs) {
        // Only if the specified graph contains triples, there can be results
        if (content = graphs[graph]) {
          // Choose optimal index based on which fields are wildcards
          if (subjectId) {
            if (predicateId) // If subject and predicate are given, the SPO index is best.
              this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);else // If only subject is given, the OSP index is best.
              this._loopByKey1(content.objects, subjectId, callback);
          } else if (predicateId) // If only predicate is given, the POS index is best.
            this._loopByKey0(content.predicates, predicateId, callback);else // If no params given, iterate all the objects.
            this._loop(content.objects, callback);
        }
      }
    } // ### `getGraphs` returns all graphs that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "getGraphs",
    value: function getGraphs(subject, predicate, object) {
      var results = [];
      this.forGraphs(function (g) {
        results.push(g);
      }, subject, predicate, object);
      return results;
    } // ### `forGraphs` executes the callback on all graphs that match the pattern.
    // Setting any field to `undefined` or `null` indicates a wildcard.

  }, {
    key: "forGraphs",
    value: function forGraphs(callback, subject, predicate, object) {
      for (var graph in this._graphs) {
        this.some(function (quad) {
          callback(quad.graph);
          return true; // Halt iteration of some()
        }, subject, predicate, object, graph);
      }
    } // ### `createBlankNode` creates a new blank node, returning its name

  }, {
    key: "createBlankNode",
    value: function createBlankNode(suggestedName) {
      var name, index; // Generate a name based on the suggested name

      if (suggestedName) {
        name = suggestedName = '_:' + suggestedName, index = 1;

        while (this._ids[name]) {
          name = suggestedName + index++;
        }
      } // Generate a generic blank node name
      else {
          do {
            name = '_:b' + this._blankNodeIndex++;
          } while (this._ids[name]);
        } // Add the blank node to the entities, avoiding the generation of duplicates


      this._ids[name] = ++this._id;
      this._entities[this._id] = name;
      return this._factory.blankNode(name.substr(2));
    } // ### `extractLists` finds and removes all list triples
    // and returns the items per list.

  }, {
    key: "extractLists",
    value: function extractLists() {
      var _this2 = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$remove = _ref.remove,
          remove = _ref$remove === void 0 ? false : _ref$remove,
          _ref$ignoreErrors = _ref.ignoreErrors,
          ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors;

      var lists = {}; // has scalar keys so could be a simple Object

      var onError = ignoreErrors ? function () {
        return true;
      } : function (node, message) {
        throw new Error("".concat(node.value, " ").concat(message));
      }; // Traverse each list from its tail

      var tails = this.getQuads(null, IRIs.rdf.rest, IRIs.rdf.nil, null);
      var toRemove = remove ? _toConsumableArray(tails) : [];
      tails.forEach(function (tailQuad) {
        var items = []; // the members found as objects of rdf:first quads

        var malformed = false; // signals whether the current list is malformed

        var head; // the head of the list (_:b1 in above example)

        var headPos; // set to subject or object when head is set

        var graph = tailQuad.graph; // make sure list is in exactly one graph
        // Traverse the list from tail to end

        var current = tailQuad.subject;

        while (current && !malformed) {
          var objectQuads = _this2.getQuads(null, null, current, null);

          var subjectQuads = _this2.getQuads(current, null, null, null);

          var i,
              quad,
              first = null,
              rest = null,
              parent = null; // Find the first and rest of this list node

          for (i = 0; i < subjectQuads.length && !malformed; i++) {
            quad = subjectQuads[i];
            if (!quad.graph.equals(graph)) malformed = onError(current, 'not confined to single graph');else if (head) malformed = onError(current, 'has non-list arcs out'); // one rdf:first
            else if (quad.predicate.value === IRIs.rdf.first) {
                if (first) malformed = onError(current, 'has multiple rdf:first arcs');else toRemove.push(first = quad);
              } // one rdf:rest
              else if (quad.predicate.value === IRIs.rdf.rest) {
                  if (rest) malformed = onError(current, 'has multiple rdf:rest arcs');else toRemove.push(rest = quad);
                } // alien triple
                else if (objectQuads.length) malformed = onError(current, 'can\'t be subject and object');else {
                    head = quad; // e.g. { (1 2 3) :p :o }

                    headPos = 'subject';
                  }
          } // { :s :p (1 2) } arrives here with no head
          // { (1 2) :p :o } arrives here with head set to the list.


          for (i = 0; i < objectQuads.length && !malformed; ++i) {
            quad = objectQuads[i];
            if (head) malformed = onError(current, 'can\'t have coreferences'); // one rdf:rest
            else if (quad.predicate.value === IRIs.rdf.rest) {
                if (parent) malformed = onError(current, 'has incoming rdf:rest arcs');else parent = quad;
              } else {
                head = quad; // e.g. { :s :p (1 2) }

                headPos = 'object';
              }
          } // Store the list item and continue with parent


          if (!first) malformed = onError(current, 'has no list head');else items.unshift(first.object);
          current = parent && parent.subject;
        } // Don't remove any quads if the list is malformed


        if (malformed) remove = false; // Store the list under the value of its head
        else if (head) lists[head[headPos].value] = items;
      }); // Remove list quads if requested

      if (remove) this.removeQuads(toRemove);
      return lists;
    }
  }, {
    key: "size",
    get: function get() {
      // Return the quad count if if was cached
      var size = this._size;
      if (size !== null) return size; // Calculate the number of quads by counting to the deepest level

      size = 0;
      var graphs = this._graphs,
          subjects,
          subject;

      for (var graphKey in graphs) {
        for (var subjectKey in subjects = graphs[graphKey].subjects) {
          for (var predicateKey in subject = subjects[subjectKey]) {
            size += Object.keys(subject[predicateKey]).length;
          }
        }
      }

      return this._size = size;
    }
  }]);

  return N3Store;
}(); // Determines whether the argument is a string




function isString(s) {
  return typeof s === 'string' || s instanceof String;
}
;// CONCATENATED MODULE: ./node_modules/n3/src/N3StreamParser.js
function N3StreamParser_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { N3StreamParser_typeof = function _typeof(obj) { return typeof obj; }; } else { N3StreamParser_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return N3StreamParser_typeof(obj); }

function N3StreamParser_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function N3StreamParser_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function N3StreamParser_createClass(Constructor, protoProps, staticProps) { if (protoProps) N3StreamParser_defineProperties(Constructor.prototype, protoProps); if (staticProps) N3StreamParser_defineProperties(Constructor, staticProps); return Constructor; }

function N3StreamParser_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) N3StreamParser_setPrototypeOf(subClass, superClass); }

function N3StreamParser_setPrototypeOf(o, p) { N3StreamParser_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return N3StreamParser_setPrototypeOf(o, p); }

function N3StreamParser_createSuper(Derived) { var hasNativeReflectConstruct = N3StreamParser_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = N3StreamParser_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = N3StreamParser_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return N3StreamParser_possibleConstructorReturn(this, result); }; }

function N3StreamParser_possibleConstructorReturn(self, call) { if (call && (N3StreamParser_typeof(call) === "object" || typeof call === "function")) { return call; } return N3StreamParser_assertThisInitialized(self); }

function N3StreamParser_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function N3StreamParser_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function N3StreamParser_getPrototypeOf(o) { N3StreamParser_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return N3StreamParser_getPrototypeOf(o); }

// **N3StreamParser** parses a text stream into a quad stream.

 // ## Constructor

var N3StreamParser = /*#__PURE__*/function (_Transform) {
  N3StreamParser_inherits(N3StreamParser, _Transform);

  var _super = N3StreamParser_createSuper(N3StreamParser);

  function N3StreamParser(options) {
    var _this;

    N3StreamParser_classCallCheck(this, N3StreamParser);

    _this = _super.call(this, {
      decodeStrings: true
    });
    _this._readableState.objectMode = true; // Set up parser with dummy stream to obtain `data` and `end` callbacks

    var self = N3StreamParser_assertThisInitialized(_this),
        parser = new N3Parser(options),
        onData,
        onEnd;

    parser.parse({
      on: function on(event, callback) {
        switch (event) {
          case 'data':
            onData = callback;
            break;

          case 'end':
            onEnd = callback;
            break;
        }
      }
    }, // Handle quads by pushing them down the pipeline
    function (error, quad) {
      error && self.emit('error', error) || quad && self.push(quad);
    }, // Emit prefixes through the `prefix` event
    function (prefix, uri) {
      self.emit('prefix', prefix, uri);
    }); // Implement Transform methods through parser callbacks

    _this._transform = function (chunk, encoding, done) {
      onData(chunk);
      done();
    };

    _this._flush = function (done) {
      onEnd();
      done();
    };

    return _this;
  } // ### Parses a stream of strings


  N3StreamParser_createClass(N3StreamParser, [{
    key: "import",
    value: function _import(stream) {
      var self = this;
      stream.on('data', function (chunk) {
        self.write(chunk);
      });
      stream.on('end', function () {
        self.end();
      });
      stream.on('error', function (error) {
        self.emit('error', error);
      });
      return this;
    }
  }]);

  return N3StreamParser;
}(readable_browser.Transform);


;// CONCATENATED MODULE: ./node_modules/n3/src/N3StreamWriter.js
function N3StreamWriter_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { N3StreamWriter_typeof = function _typeof(obj) { return typeof obj; }; } else { N3StreamWriter_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return N3StreamWriter_typeof(obj); }

function N3StreamWriter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function N3StreamWriter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function N3StreamWriter_createClass(Constructor, protoProps, staticProps) { if (protoProps) N3StreamWriter_defineProperties(Constructor.prototype, protoProps); if (staticProps) N3StreamWriter_defineProperties(Constructor, staticProps); return Constructor; }

function N3StreamWriter_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) N3StreamWriter_setPrototypeOf(subClass, superClass); }

function N3StreamWriter_setPrototypeOf(o, p) { N3StreamWriter_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return N3StreamWriter_setPrototypeOf(o, p); }

function N3StreamWriter_createSuper(Derived) { var hasNativeReflectConstruct = N3StreamWriter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = N3StreamWriter_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = N3StreamWriter_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return N3StreamWriter_possibleConstructorReturn(this, result); }; }

function N3StreamWriter_possibleConstructorReturn(self, call) { if (call && (N3StreamWriter_typeof(call) === "object" || typeof call === "function")) { return call; } return N3StreamWriter_assertThisInitialized(self); }

function N3StreamWriter_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function N3StreamWriter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function N3StreamWriter_getPrototypeOf(o) { N3StreamWriter_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return N3StreamWriter_getPrototypeOf(o); }

// **N3StreamWriter** serializes a quad stream into a text stream.

 // ## Constructor

var N3StreamWriter = /*#__PURE__*/function (_Transform) {
  N3StreamWriter_inherits(N3StreamWriter, _Transform);

  var _super = N3StreamWriter_createSuper(N3StreamWriter);

  function N3StreamWriter(options) {
    var _this;

    N3StreamWriter_classCallCheck(this, N3StreamWriter);

    _this = _super.call(this, {
      encoding: 'utf8'
    });
    _this._writableState.objectMode = true; // Set up writer with a dummy stream object

    var self = N3StreamWriter_assertThisInitialized(_this);

    var writer = _this._writer = new N3Writer({
      write: function write(quad, encoding, callback) {
        self.push(quad);
        callback && callback();
      },
      end: function end(callback) {
        self.push(null);
        callback && callback();
      }
    }, options); // Implement Transform methods on top of writer

    _this._transform = function (quad, encoding, done) {
      writer.addQuad(quad, done);
    };

    _this._flush = function (done) {
      writer.end(done);
    };

    return _this;
  } // ### Serializes a stream of quads


  N3StreamWriter_createClass(N3StreamWriter, [{
    key: "import",
    value: function _import(stream) {
      var self = this;
      stream.on('data', function (quad) {
        self.write(quad);
      });
      stream.on('end', function () {
        self.end();
      });
      stream.on('error', function (error) {
        self.emit('error', error);
      });
      stream.on('prefix', function (prefix, iri) {
        self._writer.addPrefix(prefix, iri);
      });
      return this;
    }
  }]);

  return N3StreamWriter;
}(readable_browser.Transform);


;// CONCATENATED MODULE: ./node_modules/n3/src/index.js










/***/ }),

/***/ 54782:
/***/ ((module) => {

"use strict";


var numberIsNaN = function numberIsNaN(value) {
  return value !== value;
};

module.exports = function is(a, b) {
  if (a === 0 && b === 0) {
    return 1 / a === 1 / b;
  }

  if (a === b) {
    return true;
  }

  if (numberIsNaN(a) && numberIsNaN(b)) {
    return true;
  }

  return false;
};

/***/ }),

/***/ 40731:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(64347);

var callBind = __webpack_require__(24373);

var implementation = __webpack_require__(54782);

var getPolyfill = __webpack_require__(21210);

var shim = __webpack_require__(31453);

var polyfill = callBind(getPolyfill(), Object);
define(polyfill, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});
module.exports = polyfill;

/***/ }),

/***/ 21210:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(54782);

module.exports = function getPolyfill() {
  return typeof Object.is === 'function' ? Object.is : implementation;
};

/***/ }),

/***/ 31453:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(21210);

var define = __webpack_require__(64347);

module.exports = function shimObjectIs() {
  var polyfill = getPolyfill();
  define(Object, {
    is: polyfill
  }, {
    is: function testObjectIs() {
      return Object.is !== polyfill;
    }
  });
  return polyfill;
};

/***/ }),

/***/ 81561:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var keysShim;

if (!Object.keys) {
  // modified from https://github.com/es-shims/es5-shim
  var has = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArgs = __webpack_require__(58013); // eslint-disable-line global-require


  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var hasDontEnumBug = !isEnumerable.call({
    toString: null
  }, 'toString');
  var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];

  var equalsConstructorPrototype = function equalsConstructorPrototype(o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
  };

  var excludedKeys = {
    $applicationCache: true,
    $console: true,
    $external: true,
    $frame: true,
    $frameElement: true,
    $frames: true,
    $innerHeight: true,
    $innerWidth: true,
    $onmozfullscreenchange: true,
    $onmozfullscreenerror: true,
    $outerHeight: true,
    $outerWidth: true,
    $pageXOffset: true,
    $pageYOffset: true,
    $parent: true,
    $scrollLeft: true,
    $scrollTop: true,
    $scrollX: true,
    $scrollY: true,
    $self: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $window: true
  };

  var hasAutomationEqualityBug = function () {
    /* global window */
    if (typeof window === 'undefined') {
      return false;
    }

    for (var k in window) {
      try {
        if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && _typeof(window[k]) === 'object') {
          try {
            equalsConstructorPrototype(window[k]);
          } catch (e) {
            return true;
          }
        }
      } catch (e) {
        return true;
      }
    }

    return false;
  }();

  var equalsConstructorPrototypeIfNotBuggy = function equalsConstructorPrototypeIfNotBuggy(o) {
    /* global window */
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
      return equalsConstructorPrototype(o);
    }

    try {
      return equalsConstructorPrototype(o);
    } catch (e) {
      return false;
    }
  };

  keysShim = function keys(object) {
    var isObject = object !== null && _typeof(object) === 'object';
    var isFunction = toStr.call(object) === '[object Function]';
    var isArguments = isArgs(object);
    var isString = isObject && toStr.call(object) === '[object String]';
    var theKeys = [];

    if (!isObject && !isFunction && !isArguments) {
      throw new TypeError('Object.keys called on a non-object');
    }

    var skipProto = hasProtoEnumBug && isFunction;

    if (isString && object.length > 0 && !has.call(object, 0)) {
      for (var i = 0; i < object.length; ++i) {
        theKeys.push(String(i));
      }
    }

    if (isArguments && object.length > 0) {
      for (var j = 0; j < object.length; ++j) {
        theKeys.push(String(j));
      }
    } else {
      for (var name in object) {
        if (!(skipProto && name === 'prototype') && has.call(object, name)) {
          theKeys.push(String(name));
        }
      }
    }

    if (hasDontEnumBug) {
      var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

      for (var k = 0; k < dontEnums.length; ++k) {
        if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
          theKeys.push(dontEnums[k]);
        }
      }
    }

    return theKeys;
  };
}

module.exports = keysShim;

/***/ }),

/***/ 98204:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;

var isArgs = __webpack_require__(58013);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) {
  return origKeys(o);
} : __webpack_require__(81561);
var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
  if (Object.keys) {
    var keysWorksWithArguments = function () {
      // Safari 5.0 bug
      var args = Object.keys(arguments);
      return args && args.length === arguments.length;
    }(1, 2);

    if (!keysWorksWithArguments) {
      Object.keys = function keys(object) {
        // eslint-disable-line func-name-matching
        if (isArgs(object)) {
          return originalKeys(slice.call(object));
        }

        return originalKeys(object);
      };
    }
  } else {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

module.exports = keysShim;

/***/ }),

/***/ 58013:
/***/ ((module) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
  var str = toStr.call(value);
  var isArgs = str === '[object Arguments]';

  if (!isArgs) {
    isArgs = str !== '[object Array]' && value !== null && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
  }

  return isArgs;
};

/***/ }),

/***/ 19142:
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ 69891:
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
 // If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

/***/ }),

/***/ 23418:
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var stringifyPrimitive = function stringifyPrimitive(v) {
  switch (_typeof(v)) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (_typeof(obj) === 'object') {
    return Object.keys(obj).map(function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (Array.isArray(obj[k])) {
        return obj[k].map(function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

/***/ }),

/***/ 28320:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.decode = exports.parse = __webpack_require__(69891);
exports.encode = exports.stringify = __webpack_require__(23418);

/***/ }),

/***/ 94201:
/***/ ((module) => {

/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var promise;
module.exports = typeof queueMicrotask === 'function' ? queueMicrotask.bind(globalThis) // reuse resolved promise, and allocate it lazily
: function (cb) {
  return (promise || (promise = Promise.resolve())).then(cb)["catch"](function (err) {
    return setTimeout(function () {
      throw err;
    }, 0);
  });
};

/***/ }),

/***/ 59145:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * An implementation of the RDF Dataset Normalization specification.
 *
 * @author Dave Longley
 *
 * Copyright 2010-2021 Digital Bazaar, Inc.
 */
module.exports = __webpack_require__(98592);

/***/ }),

/***/ 45946:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  /**
   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
   * identifiers, keeping track of any previously issued identifiers.
   *
   * @param prefix the prefix to use ('<prefix><counter>').
   * @param existing an existing Map to use.
   * @param counter the counter to use.
   */
  function IdentifierIssuer(prefix) {
    var existing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();
    var counter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    _classCallCheck(this, IdentifierIssuer);

    this.prefix = prefix;
    this._existing = existing;
    this.counter = counter;
  }
  /**
   * Copies this IdentifierIssuer.
   *
   * @return a copy of this IdentifierIssuer.
   */


  _createClass(IdentifierIssuer, [{
    key: "clone",
    value: function clone() {
      var prefix = this.prefix,
          _existing = this._existing,
          counter = this.counter;
      return new IdentifierIssuer(prefix, new Map(_existing), counter);
    }
    /**
     * Gets the new identifier for the given old identifier, where if no old
     * identifier is given a new identifier will be generated.
     *
     * @param [old] the old identifier to get the new identifier for.
     *
     * @return the new identifier.
     */

  }, {
    key: "getId",
    value: function getId(old) {
      // return existing old identifier
      var existing = old && this._existing.get(old);

      if (existing) {
        return existing;
      } // get next identifier


      var identifier = this.prefix + this.counter;
      this.counter++; // save mapping

      if (old) {
        this._existing.set(old, identifier);
      }

      return identifier;
    }
    /**
     * Returns true if the given old identifer has already been assigned a new
     * identifier.
     *
     * @param old the old identifier to check.
     *
     * @return true if the old identifier has been assigned a new identifier,
     *   false if not.
     */

  }, {
    key: "hasId",
    value: function hasId(old) {
      return this._existing.has(old);
    }
    /**
     * Returns all of the IDs that have been issued new IDs in the order in
     * which they were issued new IDs.
     *
     * @return the list of old IDs that has been issued new IDs in order.
     */

  }, {
    key: "getOldIds",
    value: function getOldIds() {
      return _toConsumableArray(this._existing.keys());
    }
  }]);

  return IdentifierIssuer;
}();

/***/ }),

/***/ 92231:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

__webpack_require__(46599);

var crypto = self.crypto || self.msCrypto; // TODO: synchronous version no longer supported in browser

module.exports = /*#__PURE__*/function () {
  /**
   * Creates a new MessageDigest.
   *
   * @param algorithm the algorithm to use.
   */
  function MessageDigest(algorithm) {
    _classCallCheck(this, MessageDigest);

    // check if crypto.subtle is available
    // check is here rather than top-level to only fail if class is used
    if (!(crypto && crypto.subtle)) {
      throw new Error('crypto.subtle not found.');
    }

    if (algorithm === 'sha256') {
      this.algorithm = {
        name: 'SHA-256'
      };
    } else if (algorithm === 'sha1') {
      this.algorithm = {
        name: 'SHA-1'
      };
    } else {
      throw new Error("Unsupport algorithm \"".concat(algorithm, "\"."));
    }

    this._content = '';
  }

  _createClass(MessageDigest, [{
    key: "update",
    value: function update(msg) {
      this._content += msg;
    }
  }, {
    key: "digest",
    value: function () {
      var _digest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var data, buffer, hex, i;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data = new TextEncoder().encode(this._content);
                _context.t0 = Uint8Array;
                _context.next = 4;
                return crypto.subtle.digest(this.algorithm, data);

              case 4:
                _context.t1 = _context.sent;
                buffer = new _context.t0(_context.t1);
                // return digest in hex
                hex = '';

                for (i = 0; i < buffer.length; ++i) {
                  hex += buffer[i].toString(16).padStart(2, '0');
                }

                return _context.abrupt("return", hex);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function digest() {
        return _digest.apply(this, arguments);
      }

      return digest;
    }()
  }]);

  return MessageDigest;
}();

/***/ }),

/***/ 14181:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
 // eslint-disable-next-line no-unused-vars

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TERMS = (/* unused pure expression or super */ null && (['subject', 'predicate', 'object', 'graph']));
var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
var RDF_LANGSTRING = RDF + 'langString';
var XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';
var TYPE_NAMED_NODE = 'NamedNode';
var TYPE_BLANK_NODE = 'BlankNode';
var TYPE_LITERAL = 'Literal';
var TYPE_DEFAULT_GRAPH = 'DefaultGraph'; // build regexes

var REGEX = {};

(function () {
  var iri = '(?:<([^:]+:[^>]*)>)'; // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL

  var PN_CHARS_BASE = 'A-Z' + 'a-z' + "\xC0-\xD6" + "\xD8-\xF6" + "\xF8-\u02FF" + "\u0370-\u037D" + "\u037F-\u1FFF" + "\u200C-\u200D" + "\u2070-\u218F" + "\u2C00-\u2FEF" + "\u3001-\uD7FF" + "\uF900-\uFDCF" + "\uFDF0-\uFFFD"; // TODO:
  //'\u10000-\uEFFFF';

  var PN_CHARS_U = PN_CHARS_BASE + '_';
  var PN_CHARS = PN_CHARS_U + '0-9' + '-' + "\xB7" + "\u0300-\u036F" + "\u203F-\u2040";
  var BLANK_NODE_LABEL = '(_:' + '(?:[' + PN_CHARS_U + '0-9])' + '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' + ')';
  var bnode = BLANK_NODE_LABEL;
  var plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
  var datatype = '(?:\\^\\^' + iri + ')';
  var language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';
  var literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
  var ws = '[ \\t]+';
  var wso = '[ \\t]*'; // define quad part regexes

  var subject = '(?:' + iri + '|' + bnode + ')' + ws;
  var property = iri + ws;
  var object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
  var graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))'; // end of line and empty regexes

  REGEX.eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
  REGEX.empty = new RegExp('^' + wso + '$'); // full quad regex

  REGEX.quad = new RegExp('^' + wso + subject + property + object + graphName + wso + '$');
})();

module.exports = /*#__PURE__*/function () {
  function NQuads() {
    _classCallCheck(this, NQuads);
  }

  _createClass(NQuads, null, [{
    key: "parse",

    /**
     * Parses RDF in the form of N-Quads.
     *
     * @param input the N-Quads input to parse.
     *
     * @return an RDF dataset (an array of quads per http://rdf.js.org/).
     */
    value: function parse(input) {
      // build RDF dataset
      var dataset = [];
      var graphs = {}; // split N-Quad input into lines

      var lines = input.split(REGEX.eoln);
      var lineNumber = 0;

      var _iterator = _createForOfIteratorHelper(lines),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var line = _step.value;
          lineNumber++; // skip empty lines

          if (REGEX.empty.test(line)) {
            continue;
          } // parse quad


          var match = line.match(REGEX.quad);

          if (match === null) {
            throw new Error('N-Quads parse error on line ' + lineNumber + '.');
          } // create RDF quad


          var quad = {
            subject: null,
            predicate: null,
            object: null,
            graph: null
          }; // get subject

          if (match[1] !== undefined) {
            quad.subject = {
              termType: TYPE_NAMED_NODE,
              value: match[1]
            };
          } else {
            quad.subject = {
              termType: TYPE_BLANK_NODE,
              value: match[2]
            };
          } // get predicate


          quad.predicate = {
            termType: TYPE_NAMED_NODE,
            value: match[3]
          }; // get object

          if (match[4] !== undefined) {
            quad.object = {
              termType: TYPE_NAMED_NODE,
              value: match[4]
            };
          } else if (match[5] !== undefined) {
            quad.object = {
              termType: TYPE_BLANK_NODE,
              value: match[5]
            };
          } else {
            quad.object = {
              termType: TYPE_LITERAL,
              value: undefined,
              datatype: {
                termType: TYPE_NAMED_NODE
              }
            };

            if (match[7] !== undefined) {
              quad.object.datatype.value = match[7];
            } else if (match[8] !== undefined) {
              quad.object.datatype.value = RDF_LANGSTRING;
              quad.object.language = match[8];
            } else {
              quad.object.datatype.value = XSD_STRING;
            }

            quad.object.value = _unescape(match[6]);
          } // get graph


          if (match[9] !== undefined) {
            quad.graph = {
              termType: TYPE_NAMED_NODE,
              value: match[9]
            };
          } else if (match[10] !== undefined) {
            quad.graph = {
              termType: TYPE_BLANK_NODE,
              value: match[10]
            };
          } else {
            quad.graph = {
              termType: TYPE_DEFAULT_GRAPH,
              value: ''
            };
          } // only add quad if it is unique in its graph


          if (!(quad.graph.value in graphs)) {
            graphs[quad.graph.value] = [quad];
            dataset.push(quad);
          } else {
            var unique = true;
            var quads = graphs[quad.graph.value];

            var _iterator2 = _createForOfIteratorHelper(quads),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var q = _step2.value;

                if (_compareTriples(q, quad)) {
                  unique = false;
                  break;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            if (unique) {
              quads.push(quad);
              dataset.push(quad);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return dataset;
    }
    /**
     * Converts an RDF dataset to N-Quads.
     *
     * @param dataset (array of quads) the RDF dataset to convert.
     *
     * @return the N-Quads string.
     */

  }, {
    key: "serialize",
    value: function serialize(dataset) {
      if (!Array.isArray(dataset)) {
        dataset = NQuads.legacyDatasetToQuads(dataset);
      }

      var quads = [];

      var _iterator3 = _createForOfIteratorHelper(dataset),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var quad = _step3.value;
          quads.push(NQuads.serializeQuad(quad));
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return quads.sort().join('');
    }
    /**
     * Converts an RDF quad to an N-Quad string (a single quad).
     *
     * @param quad the RDF quad convert.
     *
     * @return the N-Quad string.
     */

  }, {
    key: "serializeQuad",
    value: function serializeQuad(quad) {
      var s = quad.subject;
      var p = quad.predicate;
      var o = quad.object;
      var g = quad.graph;
      var nquad = ''; // subject can only be NamedNode or BlankNode

      if (s.termType === TYPE_NAMED_NODE) {
        nquad += "<".concat(s.value, ">");
      } else {
        nquad += "".concat(s.value);
      } // predicate can only be NamedNode


      nquad += " <".concat(p.value, "> "); // object is NamedNode, BlankNode, or Literal

      if (o.termType === TYPE_NAMED_NODE) {
        nquad += "<".concat(o.value, ">");
      } else if (o.termType === TYPE_BLANK_NODE) {
        nquad += o.value;
      } else {
        nquad += "\"".concat(_escape(o.value), "\"");

        if (o.datatype.value === RDF_LANGSTRING) {
          if (o.language) {
            nquad += "@".concat(o.language);
          }
        } else if (o.datatype.value !== XSD_STRING) {
          nquad += "^^<".concat(o.datatype.value, ">");
        }
      } // graph can only be NamedNode or BlankNode (or DefaultGraph, but that
      // does not add to `nquad`)


      if (g.termType === TYPE_NAMED_NODE) {
        nquad += " <".concat(g.value, ">");
      } else if (g.termType === TYPE_BLANK_NODE) {
        nquad += " ".concat(g.value);
      }

      nquad += ' .\n';
      return nquad;
    }
    /**
     * Converts a legacy-formatted dataset to an array of quads dataset per
     * http://rdf.js.org/.
     *
     * @param dataset the legacy dataset to convert.
     *
     * @return the array of quads dataset.
     */

  }, {
    key: "legacyDatasetToQuads",
    value: function legacyDatasetToQuads(dataset) {
      var quads = [];
      var termTypeMap = {
        'blank node': TYPE_BLANK_NODE,
        IRI: TYPE_NAMED_NODE,
        literal: TYPE_LITERAL
      };

      var _loop = function _loop(graphName) {
        var triples = dataset[graphName];
        triples.forEach(function (triple) {
          var quad = {};

          for (var componentName in triple) {
            var oldComponent = triple[componentName];
            var newComponent = {
              termType: termTypeMap[oldComponent.type],
              value: oldComponent.value
            };

            if (newComponent.termType === TYPE_LITERAL) {
              newComponent.datatype = {
                termType: TYPE_NAMED_NODE
              };

              if ('datatype' in oldComponent) {
                newComponent.datatype.value = oldComponent.datatype;
              }

              if ('language' in oldComponent) {
                if (!('datatype' in oldComponent)) {
                  newComponent.datatype.value = RDF_LANGSTRING;
                }

                newComponent.language = oldComponent.language;
              } else if (!('datatype' in oldComponent)) {
                newComponent.datatype.value = XSD_STRING;
              }
            }

            quad[componentName] = newComponent;
          }

          if (graphName === '@default') {
            quad.graph = {
              termType: TYPE_DEFAULT_GRAPH,
              value: ''
            };
          } else {
            quad.graph = {
              termType: graphName.startsWith('_:') ? TYPE_BLANK_NODE : TYPE_NAMED_NODE,
              value: graphName
            };
          }

          quads.push(quad);
        });
      };

      for (var graphName in dataset) {
        _loop(graphName);
      }

      return quads;
    }
  }]);

  return NQuads;
}();
/**
 * Compares two RDF triples for equality.
 *
 * @param t1 the first triple.
 * @param t2 the second triple.
 *
 * @return true if the triples are the same, false if not.
 */


function _compareTriples(t1, t2) {
  // compare subject and object types first as it is the quickest check
  if (!(t1.subject.termType === t2.subject.termType && t1.object.termType === t2.object.termType)) {
    return false;
  } // compare values


  if (!(t1.subject.value === t2.subject.value && t1.predicate.value === t2.predicate.value && t1.object.value === t2.object.value)) {
    return false;
  }

  if (t1.object.termType !== TYPE_LITERAL) {
    // no `datatype` or `language` to check
    return true;
  }

  return t1.object.datatype.termType === t2.object.datatype.termType && t1.object.language === t2.object.language && t1.object.datatype.value === t2.object.datatype.value;
}

var _escapeRegex = /["\\\n\r]/g;
/**
 * Escape string to N-Quads literal
 */

function _escape(s) {
  return s.replace(_escapeRegex, function (match) {
    switch (match) {
      case '"':
        return '\\"';

      case '\\':
        return '\\\\';

      case '\n':
        return '\\n';

      case '\r':
        return '\\r';
    }
  });
}

var _unescapeRegex = /(?:\\([tbnrf"'\\]))|(?:\\u([0-9A-Fa-f]{4}))|(?:\\U([0-9A-Fa-f]{8}))/g;
/**
 * Unescape N-Quads literal to string
 */

function _unescape(s) {
  return s.replace(_unescapeRegex, function (match, code, u, U) {
    if (code) {
      switch (code) {
        case 't':
          return '\t';

        case 'b':
          return '\b';

        case 'n':
          return '\n';

        case 'r':
          return '\r';

        case 'f':
          return '\f';

        case '"':
          return '"';

        case '\'':
          return '\'';

        case '\\':
          return '\\';
      }
    }

    if (u) {
      return String.fromCharCode(parseInt(u, 16));
    }

    if (U) {
      // FIXME: support larger values
      throw new Error('Unsupported U escape');
    }
  });
}

/***/ }),

/***/ 26010:
/***/ ((module) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
 // TODO: convert to ES6 iterable?

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  /**
   * A Permuter iterates over all possible permutations of the given array
   * of elements.
   *
   * @param list the array of elements to iterate over.
   */
  function Permuter(list) {
    _classCallCheck(this, Permuter);

    // original array
    this.current = list.sort(); // indicates whether there are more permutations

    this.done = false; // directional info for permutation algorithm

    this.dir = new Map();

    for (var i = 0; i < list.length; ++i) {
      this.dir.set(list[i], true);
    }
  }
  /**
   * Returns true if there is another permutation.
   *
   * @return true if there is another permutation, false if not.
   */


  _createClass(Permuter, [{
    key: "hasNext",
    value: function hasNext() {
      return !this.done;
    }
    /**
     * Gets the next permutation. Call hasNext() to ensure there is another one
     * first.
     *
     * @return the next permutation.
     */

  }, {
    key: "next",
    value: function next() {
      // copy current permutation to return it
      var current = this.current,
          dir = this.dir;
      var rval = current.slice();
      /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
       permutation algorithm. */
      // get largest mobile element k
      // (mobile: element is greater than the one it is looking at)

      var k = null;
      var pos = 0;
      var length = current.length;

      for (var i = 0; i < length; ++i) {
        var element = current[i];
        var left = dir.get(element);

        if ((k === null || element > k) && (left && i > 0 && element > current[i - 1] || !left && i < length - 1 && element > current[i + 1])) {
          k = element;
          pos = i;
        }
      } // no more permutations


      if (k === null) {
        this.done = true;
      } else {
        // swap k and the element it is looking at
        var swap = dir.get(k) ? pos - 1 : pos + 1;
        current[pos] = current[swap];
        current[swap] = k; // reverse the direction of all elements larger than k

        var _iterator = _createForOfIteratorHelper(current),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _element = _step.value;

            if (_element > k) {
              dir.set(_element, !dir.get(_element));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return rval;
    }
  }]);

  return Permuter;
}();

/***/ }),

/***/ 22116:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var IdentifierIssuer = __webpack_require__(45946);

var MessageDigest = __webpack_require__(92231);

var Permuter = __webpack_require__(26010);

var NQuads = __webpack_require__(14181);

module.exports = /*#__PURE__*/function () {
  function URDNA2015() {
    _classCallCheck(this, URDNA2015);

    this.name = 'URDNA2015';
    this.blankNodeInfo = new Map();
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads = null;
  } // 4.4) Normalization Algorithm


  _createClass(URDNA2015, [{
    key: "main",
    value: function () {
      var _main = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dataset) {
        var _iterator, _step, quad, hashToBlankNodes, nonNormalized, i, _iterator2, _step2, _id2, hashes, nonUnique, _iterator3, _step3, hash, _idList, _id3, _i, _nonUnique, idList, hashPathList, _iterator4, _step4, _id, issuer, _result, _i2, _hashPathList, result, oldIds, _iterator5, _step5, id, normalized, _iterator6, _step6, _quad, q;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.quads = dataset; // 1) Create the normalization state.
                // 2) For every quad in input dataset:

                _iterator = _createForOfIteratorHelper(dataset);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    quad = _step.value;

                    // 2.1) For each blank node that occurs in the quad, add a reference
                    // to the quad using the blank node identifier in the blank node to
                    // quads map, creating a new entry if necessary.
                    this._addBlankNodeQuadInfo({
                      quad: quad,
                      component: quad.subject
                    });

                    this._addBlankNodeQuadInfo({
                      quad: quad,
                      component: quad.object
                    });

                    this._addBlankNodeQuadInfo({
                      quad: quad,
                      component: quad.graph
                    });
                  } // 3) Create a list of non-normalized blank node identifiers
                  // non-normalized identifiers and populate it using the keys from the
                  // blank node to quads map.
                  // Note: We use a map here and it was generated during step 2.
                  // 4) `simple` flag is skipped -- loop is optimized away. This optimization
                  // is permitted because there was a typo in the hash first degree quads
                  // algorithm in the URDNA2015 spec that was implemented widely making it
                  // such that it could not be fixed; the result was that the loop only
                  // needs to be run once and the first degree quad hashes will never change.
                  // 5.1-5.2 are skipped; first degree quad hashes are generated just once
                  // for all non-normalized blank nodes.
                  // 5.3) For each blank node identifier identifier in non-normalized
                  // identifiers:

                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                hashToBlankNodes = new Map();
                nonNormalized = _toConsumableArray(this.blankNodeInfo.keys());
                i = 0;
                _iterator2 = _createForOfIteratorHelper(nonNormalized);
                _context.prev = 7;

                _iterator2.s();

              case 9:
                if ((_step2 = _iterator2.n()).done) {
                  _context.next = 18;
                  break;
                }

                _id2 = _step2.value;

                if (!(++i % 100 === 0)) {
                  _context.next = 14;
                  break;
                }

                _context.next = 14;
                return this._yield();

              case 14:
                _context.next = 16;
                return this._hashAndTrackBlankNode({
                  id: _id2,
                  hashToBlankNodes: hashToBlankNodes
                });

              case 16:
                _context.next = 9;
                break;

              case 18:
                _context.next = 23;
                break;

              case 20:
                _context.prev = 20;
                _context.t0 = _context["catch"](7);

                _iterator2.e(_context.t0);

              case 23:
                _context.prev = 23;

                _iterator2.f();

                return _context.finish(23);

              case 26:
                // 5.4) For each hash to identifier list mapping in hash to blank
                // nodes map, lexicographically-sorted by hash:
                hashes = _toConsumableArray(hashToBlankNodes.keys()).sort(); // optimize away second sort, gather non-unique hashes in order as we go

                nonUnique = [];
                _iterator3 = _createForOfIteratorHelper(hashes);
                _context.prev = 29;

                _iterator3.s();

              case 31:
                if ((_step3 = _iterator3.n()).done) {
                  _context.next = 41;
                  break;
                }

                hash = _step3.value;
                // 5.4.1) If the length of identifier list is greater than 1,
                // continue to the next mapping.
                _idList = hashToBlankNodes.get(hash);

                if (!(_idList.length > 1)) {
                  _context.next = 37;
                  break;
                }

                nonUnique.push(_idList);
                return _context.abrupt("continue", 39);

              case 37:
                // 5.4.2) Use the Issue Identifier algorithm, passing canonical
                // issuer and the single blank node identifier in identifier
                // list, identifier, to issue a canonical replacement identifier
                // for identifier.
                _id3 = _idList[0];
                this.canonicalIssuer.getId(_id3); // Note: These steps are skipped, optimized away since the loop
                // only needs to be run once.
                // 5.4.3) Remove identifier from non-normalized identifiers.
                // 5.4.4) Remove hash from the hash to blank nodes map.
                // 5.4.5) Set simple to true.

              case 39:
                _context.next = 31;
                break;

              case 41:
                _context.next = 46;
                break;

              case 43:
                _context.prev = 43;
                _context.t1 = _context["catch"](29);

                _iterator3.e(_context.t1);

              case 46:
                _context.prev = 46;

                _iterator3.f();

                return _context.finish(46);

              case 49:
                _i = 0, _nonUnique = nonUnique;

              case 50:
                if (!(_i < _nonUnique.length)) {
                  _context.next = 81;
                  break;
                }

                idList = _nonUnique[_i];
                // 6.1) Create hash path list where each item will be a result of
                // running the Hash N-Degree Quads algorithm.
                hashPathList = []; // 6.2) For each blank node identifier identifier in identifier list:

                _iterator4 = _createForOfIteratorHelper(idList);
                _context.prev = 54;

                _iterator4.s();

              case 56:
                if ((_step4 = _iterator4.n()).done) {
                  _context.next = 68;
                  break;
                }

                _id = _step4.value;

                if (!this.canonicalIssuer.hasId(_id)) {
                  _context.next = 60;
                  break;
                }

                return _context.abrupt("continue", 66);

              case 60:
                // 6.2.2) Create temporary issuer, an identifier issuer
                // initialized with the prefix _:b.
                issuer = new IdentifierIssuer('_:b'); // 6.2.3) Use the Issue Identifier algorithm, passing temporary
                // issuer and identifier, to issue a new temporary blank node
                // identifier for identifier.

                issuer.getId(_id); // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
                // temporary issuer, and append the result to the hash path list.

                _context.next = 64;
                return this.hashNDegreeQuads(_id, issuer);

              case 64:
                _result = _context.sent;
                hashPathList.push(_result);

              case 66:
                _context.next = 56;
                break;

              case 68:
                _context.next = 73;
                break;

              case 70:
                _context.prev = 70;
                _context.t2 = _context["catch"](54);

                _iterator4.e(_context.t2);

              case 73:
                _context.prev = 73;

                _iterator4.f();

                return _context.finish(73);

              case 76:
                // 6.3) For each result in the hash path list,
                // lexicographically-sorted by the hash in result:
                hashPathList.sort(_stringHashCompare);

                for (_i2 = 0, _hashPathList = hashPathList; _i2 < _hashPathList.length; _i2++) {
                  result = _hashPathList[_i2];
                  // 6.3.1) For each blank node identifier, existing identifier,
                  // that was issued a temporary identifier by identifier issuer
                  // in result, issue a canonical identifier, in the same order,
                  // using the Issue Identifier algorithm, passing canonical
                  // issuer and existing identifier.
                  oldIds = result.issuer.getOldIds();
                  _iterator5 = _createForOfIteratorHelper(oldIds);

                  try {
                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                      id = _step5.value;
                      this.canonicalIssuer.getId(id);
                    }
                  } catch (err) {
                    _iterator5.e(err);
                  } finally {
                    _iterator5.f();
                  }
                }

              case 78:
                _i++;
                _context.next = 50;
                break;

              case 81:
                /* Note: At this point all blank nodes in the set of RDF quads have been
                assigned canonical identifiers, which have been stored in the canonical
                issuer. Here each quad is updated by assigning each of its blank nodes
                its new identifier. */
                // 7) For each quad, quad, in input dataset:
                normalized = [];
                _iterator6 = _createForOfIteratorHelper(this.quads);

                try {
                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                    _quad = _step6.value;
                    // 7.1) Create a copy, quad copy, of quad and replace any existing
                    // blank node identifiers using the canonical identifiers
                    // previously issued by canonical issuer.
                    // Note: We optimize with shallow copies here.
                    q = _objectSpread({}, _quad);
                    q.subject = this._useCanonicalId({
                      component: q.subject
                    });
                    q.object = this._useCanonicalId({
                      component: q.object
                    });
                    q.graph = this._useCanonicalId({
                      component: q.graph
                    }); // 7.2) Add quad copy to the normalized dataset.

                    normalized.push(NQuads.serializeQuad(q));
                  } // sort normalized output

                } catch (err) {
                  _iterator6.e(err);
                } finally {
                  _iterator6.f();
                }

                normalized.sort(); // 8) Return the normalized dataset.

                return _context.abrupt("return", normalized.join(''));

              case 86:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 20, 23, 26], [29, 43, 46, 49], [54, 70, 73, 76]]);
      }));

      function main(_x) {
        return _main.apply(this, arguments);
      }

      return main;
    }() // 4.6) Hash First Degree Quads

  }, {
    key: "hashFirstDegreeQuads",
    value: function () {
      var _hashFirstDegreeQuads = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
        var nquads, info, quads, _iterator7, _step7, quad, copy, md, _i3, _nquads, nquad;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // 1) Initialize nquads to an empty list. It will be used to store quads in
                // N-Quads format.
                nquads = []; // 2) Get the list of quads `quads` associated with the reference blank node
                // identifier in the blank node to quads map.

                info = this.blankNodeInfo.get(id);
                quads = info.quads; // 3) For each quad `quad` in `quads`:

                _iterator7 = _createForOfIteratorHelper(quads);

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    quad = _step7.value;
                    // 3.1) Serialize the quad in N-Quads format with the following special
                    // rule:
                    // 3.1.1) If any component in quad is an blank node, then serialize it
                    // using a special identifier as follows:
                    copy = {
                      subject: null,
                      predicate: quad.predicate,
                      object: null,
                      graph: null
                    }; // 3.1.2) If the blank node's existing blank node identifier matches
                    // the reference blank node identifier then use the blank node
                    // identifier _:a, otherwise, use the blank node identifier _:z.

                    copy.subject = this.modifyFirstDegreeComponent(id, quad.subject, 'subject');
                    copy.object = this.modifyFirstDegreeComponent(id, quad.object, 'object');
                    copy.graph = this.modifyFirstDegreeComponent(id, quad.graph, 'graph');
                    nquads.push(NQuads.serializeQuad(copy));
                  } // 4) Sort nquads in lexicographical order.

                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }

                nquads.sort(); // 5) Return the hash that results from passing the sorted, joined nquads
                // through the hash algorithm.

                md = new MessageDigest(this.hashAlgorithm);

                for (_i3 = 0, _nquads = nquads; _i3 < _nquads.length; _i3++) {
                  nquad = _nquads[_i3];
                  md.update(nquad);
                }

                _context2.next = 10;
                return md.digest();

              case 10:
                info.hash = _context2.sent;
                return _context2.abrupt("return", info.hash);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function hashFirstDegreeQuads(_x2) {
        return _hashFirstDegreeQuads.apply(this, arguments);
      }

      return hashFirstDegreeQuads;
    }() // 4.7) Hash Related Blank Node

  }, {
    key: "hashRelatedBlankNode",
    value: function () {
      var _hashRelatedBlankNode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(related, quad, issuer, position) {
        var id, md;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // 1) Set the identifier to use for related, preferring first the canonical
                // identifier for related if issued, second the identifier issued by issuer
                // if issued, and last, if necessary, the result of the Hash First Degree
                // Quads algorithm, passing related.
                if (this.canonicalIssuer.hasId(related)) {
                  id = this.canonicalIssuer.getId(related);
                } else if (issuer.hasId(related)) {
                  id = issuer.getId(related);
                } else {
                  id = this.blankNodeInfo.get(related).hash;
                } // 2) Initialize a string input to the value of position.
                // Note: We use a hash object instead.


                md = new MessageDigest(this.hashAlgorithm);
                md.update(position); // 3) If position is not g, append <, the value of the predicate in quad,
                // and > to input.

                if (position !== 'g') {
                  md.update(this.getRelatedPredicate(quad));
                } // 4) Append identifier to input.


                md.update(id); // 5) Return the hash that results from passing input through the hash
                // algorithm.

                return _context3.abrupt("return", md.digest());

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function hashRelatedBlankNode(_x3, _x4, _x5, _x6) {
        return _hashRelatedBlankNode.apply(this, arguments);
      }

      return hashRelatedBlankNode;
    }() // 4.8) Hash N-Degree Quads

  }, {
    key: "hashNDegreeQuads",
    value: function () {
      var _hashNDegreeQuads = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(id, issuer) {
        var md, hashToRelated, hashes, _iterator8, _step8, hash, chosenPath, chosenIssuer, permuter, i, permutation, issuerCopy, path, recursionList, nextPermutation, _iterator9, _step9, _related, _i4, _recursionList, related, result;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // 1) Create a hash to related blank nodes map for storing hashes that
                // identify related blank nodes.
                // Note: 2) and 3) handled within `createHashToRelated`
                md = new MessageDigest(this.hashAlgorithm);
                _context4.next = 3;
                return this.createHashToRelated(id, issuer);

              case 3:
                hashToRelated = _context4.sent;
                // 4) Create an empty string, data to hash.
                // Note: We created a hash object `md` above instead.
                // 5) For each related hash to blank node list mapping in hash to related
                // blank nodes map, sorted lexicographically by related hash:
                hashes = _toConsumableArray(hashToRelated.keys()).sort();
                _iterator8 = _createForOfIteratorHelper(hashes);
                _context4.prev = 6;

                _iterator8.s();

              case 8:
                if ((_step8 = _iterator8.n()).done) {
                  _context4.next = 69;
                  break;
                }

                hash = _step8.value;
                // 5.1) Append the related hash to the data to hash.
                md.update(hash); // 5.2) Create a string chosen path.

                chosenPath = ''; // 5.3) Create an unset chosen issuer variable.

                chosenIssuer = void 0; // 5.4) For each permutation of blank node list:

                permuter = new Permuter(hashToRelated.get(hash));
                i = 0;

              case 15:
                if (!permuter.hasNext()) {
                  _context4.next = 65;
                  break;
                }

                permutation = permuter.next(); // Note: batch permutations 3 at a time

                if (!(++i % 3 === 0)) {
                  _context4.next = 20;
                  break;
                }

                _context4.next = 20;
                return this._yield();

              case 20:
                // 5.4.1) Create a copy of issuer, issuer copy.
                issuerCopy = issuer.clone(); // 5.4.2) Create a string path.

                path = ''; // 5.4.3) Create a recursion list, to store blank node identifiers
                // that must be recursively processed by this algorithm.

                recursionList = []; // 5.4.4) For each related in permutation:

                nextPermutation = false;
                _iterator9 = _createForOfIteratorHelper(permutation);
                _context4.prev = 25;

                _iterator9.s();

              case 27:
                if ((_step9 = _iterator9.n()).done) {
                  _context4.next = 35;
                  break;
                }

                _related = _step9.value;

                // 5.4.4.1) If a canonical identifier has been issued for
                // related, append it to path.
                if (this.canonicalIssuer.hasId(_related)) {
                  path += this.canonicalIssuer.getId(_related);
                } else {
                  // 5.4.4.2) Otherwise:
                  // 5.4.4.2.1) If issuer copy has not issued an identifier for
                  // related, append related to recursion list.
                  if (!issuerCopy.hasId(_related)) {
                    recursionList.push(_related);
                  } // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
                  // issuer copy and related and append the result to path.


                  path += issuerCopy.getId(_related);
                } // 5.4.4.3) If chosen path is not empty and the length of path
                // is greater than or equal to the length of chosen path and
                // path is lexicographically greater than chosen path, then
                // skip to the next permutation.
                // Note: Comparing path length to chosen path length can be optimized
                // away; only compare lexicographically.


                if (!(chosenPath.length !== 0 && path > chosenPath)) {
                  _context4.next = 33;
                  break;
                }

                nextPermutation = true;
                return _context4.abrupt("break", 35);

              case 33:
                _context4.next = 27;
                break;

              case 35:
                _context4.next = 40;
                break;

              case 37:
                _context4.prev = 37;
                _context4.t0 = _context4["catch"](25);

                _iterator9.e(_context4.t0);

              case 40:
                _context4.prev = 40;

                _iterator9.f();

                return _context4.finish(40);

              case 43:
                if (!nextPermutation) {
                  _context4.next = 45;
                  break;
                }

                return _context4.abrupt("continue", 15);

              case 45:
                _i4 = 0, _recursionList = recursionList;

              case 46:
                if (!(_i4 < _recursionList.length)) {
                  _context4.next = 60;
                  break;
                }

                related = _recursionList[_i4];
                _context4.next = 50;
                return this.hashNDegreeQuads(related, issuerCopy);

              case 50:
                result = _context4.sent;
                // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
                // copy and related and append the result to path.
                path += issuerCopy.getId(related); // 5.4.5.3) Append <, the hash in result, and > to path.

                path += "<".concat(result.hash, ">"); // 5.4.5.4) Set issuer copy to the identifier issuer in
                // result.

                issuerCopy = result.issuer; // 5.4.5.5) If chosen path is not empty and the length of path
                // is greater than or equal to the length of chosen path and
                // path is lexicographically greater than chosen path, then
                // skip to the next permutation.
                // Note: Comparing path length to chosen path length can be optimized
                // away; only compare lexicographically.

                if (!(chosenPath.length !== 0 && path > chosenPath)) {
                  _context4.next = 57;
                  break;
                }

                nextPermutation = true;
                return _context4.abrupt("break", 60);

              case 57:
                _i4++;
                _context4.next = 46;
                break;

              case 60:
                if (!nextPermutation) {
                  _context4.next = 62;
                  break;
                }

                return _context4.abrupt("continue", 15);

              case 62:
                // 5.4.6) If chosen path is empty or path is lexicographically
                // less than chosen path, set chosen path to path and chosen
                // issuer to issuer copy.
                if (chosenPath.length === 0 || path < chosenPath) {
                  chosenPath = path;
                  chosenIssuer = issuerCopy;
                }

                _context4.next = 15;
                break;

              case 65:
                // 5.5) Append chosen path to data to hash.
                md.update(chosenPath); // 5.6) Replace issuer, by reference, with chosen issuer.

                issuer = chosenIssuer;

              case 67:
                _context4.next = 8;
                break;

              case 69:
                _context4.next = 74;
                break;

              case 71:
                _context4.prev = 71;
                _context4.t1 = _context4["catch"](6);

                _iterator8.e(_context4.t1);

              case 74:
                _context4.prev = 74;

                _iterator8.f();

                return _context4.finish(74);

              case 77:
                _context4.next = 79;
                return md.digest();

              case 79:
                _context4.t2 = _context4.sent;
                _context4.t3 = issuer;
                return _context4.abrupt("return", {
                  hash: _context4.t2,
                  issuer: _context4.t3
                });

              case 82:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[6, 71, 74, 77], [25, 37, 40, 43]]);
      }));

      function hashNDegreeQuads(_x7, _x8) {
        return _hashNDegreeQuads.apply(this, arguments);
      }

      return hashNDegreeQuads;
    }() // helper for modifying component during Hash First Degree Quads

  }, {
    key: "modifyFirstDegreeComponent",
    value: function modifyFirstDegreeComponent(id, component) {
      if (component.termType !== 'BlankNode') {
        return component;
      }
      /* Note: A mistake in the URDNA2015 spec that made its way into
      implementations (and therefore must stay to avoid interop breakage)
      resulted in an assigned canonical ID, if available for
      `component.value`, not being used in place of `_:a`/`_:z`, so
      we don't use it here. */


      return {
        termType: 'BlankNode',
        value: component.value === id ? '_:a' : '_:z'
      };
    } // helper for getting a related predicate

  }, {
    key: "getRelatedPredicate",
    value: function getRelatedPredicate(quad) {
      return "<".concat(quad.predicate.value, ">");
    } // helper for creating hash to related blank nodes map

  }, {
    key: "createHashToRelated",
    value: function () {
      var _createHashToRelated = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(id, issuer) {
        var hashToRelated, quads, i, _iterator10, _step10, quad;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // 1) Create a hash to related blank nodes map for storing hashes that
                // identify related blank nodes.
                hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
                // quads map for the key identifier.

                quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

                i = 0;
                _iterator10 = _createForOfIteratorHelper(quads);
                _context5.prev = 4;

                _iterator10.s();

              case 6:
                if ((_step10 = _iterator10.n()).done) {
                  _context5.next = 15;
                  break;
                }

                quad = _step10.value;

                if (!(++i % 100 === 0)) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 11;
                return this._yield();

              case 11:
                _context5.next = 13;
                return Promise.all([this._addRelatedBlankNodeHash({
                  quad: quad,
                  component: quad.subject,
                  position: 's',
                  id: id,
                  issuer: issuer,
                  hashToRelated: hashToRelated
                }), this._addRelatedBlankNodeHash({
                  quad: quad,
                  component: quad.object,
                  position: 'o',
                  id: id,
                  issuer: issuer,
                  hashToRelated: hashToRelated
                }), this._addRelatedBlankNodeHash({
                  quad: quad,
                  component: quad.graph,
                  position: 'g',
                  id: id,
                  issuer: issuer,
                  hashToRelated: hashToRelated
                })]);

              case 13:
                _context5.next = 6;
                break;

              case 15:
                _context5.next = 20;
                break;

              case 17:
                _context5.prev = 17;
                _context5.t0 = _context5["catch"](4);

                _iterator10.e(_context5.t0);

              case 20:
                _context5.prev = 20;

                _iterator10.f();

                return _context5.finish(20);

              case 23:
                return _context5.abrupt("return", hashToRelated);

              case 24:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[4, 17, 20, 23]]);
      }));

      function createHashToRelated(_x9, _x10) {
        return _createHashToRelated.apply(this, arguments);
      }

      return createHashToRelated;
    }()
  }, {
    key: "_hashAndTrackBlankNode",
    value: function () {
      var _hashAndTrackBlankNode2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref) {
        var id, hashToBlankNodes, hash, idList;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                id = _ref.id, hashToBlankNodes = _ref.hashToBlankNodes;
                _context6.next = 3;
                return this.hashFirstDegreeQuads(id);

              case 3:
                hash = _context6.sent;
                // 5.3.2) Add hash and identifier to hash to blank nodes map,
                // creating a new entry if necessary.
                idList = hashToBlankNodes.get(hash);

                if (!idList) {
                  hashToBlankNodes.set(hash, [id]);
                } else {
                  idList.push(id);
                }

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _hashAndTrackBlankNode(_x11) {
        return _hashAndTrackBlankNode2.apply(this, arguments);
      }

      return _hashAndTrackBlankNode;
    }()
  }, {
    key: "_addBlankNodeQuadInfo",
    value: function _addBlankNodeQuadInfo(_ref2) {
      var quad = _ref2.quad,
          component = _ref2.component;

      if (component.termType !== 'BlankNode') {
        return;
      }

      var id = component.value;
      var info = this.blankNodeInfo.get(id);

      if (info) {
        info.quads.add(quad);
      } else {
        this.blankNodeInfo.set(id, {
          quads: new Set([quad]),
          hash: null
        });
      }
    }
  }, {
    key: "_addRelatedBlankNodeHash",
    value: function () {
      var _addRelatedBlankNodeHash2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_ref3) {
        var quad, component, position, id, issuer, hashToRelated, related, hash, entries;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                quad = _ref3.quad, component = _ref3.component, position = _ref3.position, id = _ref3.id, issuer = _ref3.issuer, hashToRelated = _ref3.hashToRelated;

                if (component.termType === 'BlankNode' && component.value !== id) {
                  _context7.next = 3;
                  break;
                }

                return _context7.abrupt("return");

              case 3:
                // 3.1.1) Set hash to the result of the Hash Related Blank Node
                // algorithm, passing the blank node identifier for component as
                // related, quad, path identifier issuer as issuer, and position as
                // either s, o, or g based on whether component is a subject, object,
                // graph name, respectively.
                related = component.value;
                _context7.next = 6;
                return this.hashRelatedBlankNode(related, quad, issuer, position);

              case 6:
                hash = _context7.sent;
                // 3.1.2) Add a mapping of hash to the blank node identifier for
                // component to hash to related blank nodes map, adding an entry as
                // necessary.
                entries = hashToRelated.get(hash);

                if (entries) {
                  entries.push(related);
                } else {
                  hashToRelated.set(hash, [related]);
                }

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _addRelatedBlankNodeHash(_x12) {
        return _addRelatedBlankNodeHash2.apply(this, arguments);
      }

      return _addRelatedBlankNodeHash;
    }()
  }, {
    key: "_useCanonicalId",
    value: function _useCanonicalId(_ref4) {
      var component = _ref4.component;

      if (component.termType === 'BlankNode' && !component.value.startsWith(this.canonicalIssuer.prefix)) {
        return {
          termType: 'BlankNode',
          value: this.canonicalIssuer.getId(component.value)
        };
      }

      return component;
    }
  }, {
    key: "_yield",
    value: function () {
      var _yield2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", new Promise(function (resolve) {
                  return setImmediate(resolve);
                }));

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function _yield() {
        return _yield2.apply(this, arguments);
      }

      return _yield;
    }()
  }]);

  return URDNA2015;
}();

function _stringHashCompare(a, b) {
  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
}

/***/ }),

/***/ 19587:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var IdentifierIssuer = __webpack_require__(45946);

var MessageDigest = __webpack_require__(92231);

var Permuter = __webpack_require__(26010);

var NQuads = __webpack_require__(14181);

module.exports = /*#__PURE__*/function () {
  function URDNA2015Sync() {
    _classCallCheck(this, URDNA2015Sync);

    this.name = 'URDNA2015';
    this.blankNodeInfo = new Map();
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads = null;
  } // 4.4) Normalization Algorithm


  _createClass(URDNA2015Sync, [{
    key: "main",
    value: function main(dataset) {
      this.quads = dataset; // 1) Create the normalization state.
      // 2) For every quad in input dataset:

      var _iterator = _createForOfIteratorHelper(dataset),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var quad = _step.value;

          // 2.1) For each blank node that occurs in the quad, add a reference
          // to the quad using the blank node identifier in the blank node to
          // quads map, creating a new entry if necessary.
          this._addBlankNodeQuadInfo({
            quad: quad,
            component: quad.subject
          });

          this._addBlankNodeQuadInfo({
            quad: quad,
            component: quad.object
          });

          this._addBlankNodeQuadInfo({
            quad: quad,
            component: quad.graph
          });
        } // 3) Create a list of non-normalized blank node identifiers
        // non-normalized identifiers and populate it using the keys from the
        // blank node to quads map.
        // Note: We use a map here and it was generated during step 2.
        // 4) `simple` flag is skipped -- loop is optimized away. This optimization
        // is permitted because there was a typo in the hash first degree quads
        // algorithm in the URDNA2015 spec that was implemented widely making it
        // such that it could not be fixed; the result was that the loop only
        // needs to be run once and the first degree quad hashes will never change.
        // 5.1-5.2 are skipped; first degree quad hashes are generated just once
        // for all non-normalized blank nodes.
        // 5.3) For each blank node identifier identifier in non-normalized
        // identifiers:

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var hashToBlankNodes = new Map();

      var nonNormalized = _toConsumableArray(this.blankNodeInfo.keys());

      var _iterator2 = _createForOfIteratorHelper(nonNormalized),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _id2 = _step2.value;

          // steps 5.3.1 and 5.3.2:
          this._hashAndTrackBlankNode({
            id: _id2,
            hashToBlankNodes: hashToBlankNodes
          });
        } // 5.4) For each hash to identifier list mapping in hash to blank
        // nodes map, lexicographically-sorted by hash:

      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var hashes = _toConsumableArray(hashToBlankNodes.keys()).sort(); // optimize away second sort, gather non-unique hashes in order as we go


      var nonUnique = [];

      var _iterator3 = _createForOfIteratorHelper(hashes),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var hash = _step3.value;

          // 5.4.1) If the length of identifier list is greater than 1,
          // continue to the next mapping.
          var _idList = hashToBlankNodes.get(hash);

          if (_idList.length > 1) {
            nonUnique.push(_idList);
            continue;
          } // 5.4.2) Use the Issue Identifier algorithm, passing canonical
          // issuer and the single blank node identifier in identifier
          // list, identifier, to issue a canonical replacement identifier
          // for identifier.


          var _id3 = _idList[0];
          this.canonicalIssuer.getId(_id3); // Note: These steps are skipped, optimized away since the loop
          // only needs to be run once.
          // 5.4.3) Remove identifier from non-normalized identifiers.
          // 5.4.4) Remove hash from the hash to blank nodes map.
          // 5.4.5) Set simple to true.
        } // 6) For each hash to identifier list mapping in hash to blank nodes map,
        // lexicographically-sorted by hash:
        // Note: sort optimized away, use `nonUnique`.

      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      for (var _i = 0, _nonUnique = nonUnique; _i < _nonUnique.length; _i++) {
        var idList = _nonUnique[_i];
        // 6.1) Create hash path list where each item will be a result of
        // running the Hash N-Degree Quads algorithm.
        var hashPathList = []; // 6.2) For each blank node identifier identifier in identifier list:

        var _iterator4 = _createForOfIteratorHelper(idList),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _id = _step4.value;

            // 6.2.1) If a canonical identifier has already been issued for
            // identifier, continue to the next identifier.
            if (this.canonicalIssuer.hasId(_id)) {
              continue;
            } // 6.2.2) Create temporary issuer, an identifier issuer
            // initialized with the prefix _:b.


            var issuer = new IdentifierIssuer('_:b'); // 6.2.3) Use the Issue Identifier algorithm, passing temporary
            // issuer and identifier, to issue a new temporary blank node
            // identifier for identifier.

            issuer.getId(_id); // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
            // temporary issuer, and append the result to the hash path list.

            var _result = this.hashNDegreeQuads(_id, issuer);

            hashPathList.push(_result);
          } // 6.3) For each result in the hash path list,
          // lexicographically-sorted by the hash in result:

        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        hashPathList.sort(_stringHashCompare);

        for (var _i2 = 0, _hashPathList = hashPathList; _i2 < _hashPathList.length; _i2++) {
          var result = _hashPathList[_i2];
          // 6.3.1) For each blank node identifier, existing identifier,
          // that was issued a temporary identifier by identifier issuer
          // in result, issue a canonical identifier, in the same order,
          // using the Issue Identifier algorithm, passing canonical
          // issuer and existing identifier.
          var oldIds = result.issuer.getOldIds();

          var _iterator5 = _createForOfIteratorHelper(oldIds),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var id = _step5.value;
              this.canonicalIssuer.getId(id);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      }
      /* Note: At this point all blank nodes in the set of RDF quads have been
      assigned canonical identifiers, which have been stored in the canonical
      issuer. Here each quad is updated by assigning each of its blank nodes
      its new identifier. */
      // 7) For each quad, quad, in input dataset:


      var normalized = [];

      var _iterator6 = _createForOfIteratorHelper(this.quads),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _quad = _step6.value;

          // 7.1) Create a copy, quad copy, of quad and replace any existing
          // blank node identifiers using the canonical identifiers
          // previously issued by canonical issuer.
          // Note: We optimize with shallow copies here.
          var q = _objectSpread({}, _quad);

          q.subject = this._useCanonicalId({
            component: q.subject
          });
          q.object = this._useCanonicalId({
            component: q.object
          });
          q.graph = this._useCanonicalId({
            component: q.graph
          }); // 7.2) Add quad copy to the normalized dataset.

          normalized.push(NQuads.serializeQuad(q));
        } // sort normalized output

      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      normalized.sort(); // 8) Return the normalized dataset.

      return normalized.join('');
    } // 4.6) Hash First Degree Quads

  }, {
    key: "hashFirstDegreeQuads",
    value: function hashFirstDegreeQuads(id) {
      // 1) Initialize nquads to an empty list. It will be used to store quads in
      // N-Quads format.
      var nquads = []; // 2) Get the list of quads `quads` associated with the reference blank node
      // identifier in the blank node to quads map.

      var info = this.blankNodeInfo.get(id);
      var quads = info.quads; // 3) For each quad `quad` in `quads`:

      var _iterator7 = _createForOfIteratorHelper(quads),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var quad = _step7.value;
          // 3.1) Serialize the quad in N-Quads format with the following special
          // rule:
          // 3.1.1) If any component in quad is an blank node, then serialize it
          // using a special identifier as follows:
          var copy = {
            subject: null,
            predicate: quad.predicate,
            object: null,
            graph: null
          }; // 3.1.2) If the blank node's existing blank node identifier matches
          // the reference blank node identifier then use the blank node
          // identifier _:a, otherwise, use the blank node identifier _:z.

          copy.subject = this.modifyFirstDegreeComponent(id, quad.subject, 'subject');
          copy.object = this.modifyFirstDegreeComponent(id, quad.object, 'object');
          copy.graph = this.modifyFirstDegreeComponent(id, quad.graph, 'graph');
          nquads.push(NQuads.serializeQuad(copy));
        } // 4) Sort nquads in lexicographical order.

      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      nquads.sort(); // 5) Return the hash that results from passing the sorted, joined nquads
      // through the hash algorithm.

      var md = new MessageDigest(this.hashAlgorithm);

      for (var _i3 = 0, _nquads = nquads; _i3 < _nquads.length; _i3++) {
        var nquad = _nquads[_i3];
        md.update(nquad);
      }

      info.hash = md.digest();
      return info.hash;
    } // 4.7) Hash Related Blank Node

  }, {
    key: "hashRelatedBlankNode",
    value: function hashRelatedBlankNode(related, quad, issuer, position) {
      // 1) Set the identifier to use for related, preferring first the canonical
      // identifier for related if issued, second the identifier issued by issuer
      // if issued, and last, if necessary, the result of the Hash First Degree
      // Quads algorithm, passing related.
      var id;

      if (this.canonicalIssuer.hasId(related)) {
        id = this.canonicalIssuer.getId(related);
      } else if (issuer.hasId(related)) {
        id = issuer.getId(related);
      } else {
        id = this.blankNodeInfo.get(related).hash;
      } // 2) Initialize a string input to the value of position.
      // Note: We use a hash object instead.


      var md = new MessageDigest(this.hashAlgorithm);
      md.update(position); // 3) If position is not g, append <, the value of the predicate in quad,
      // and > to input.

      if (position !== 'g') {
        md.update(this.getRelatedPredicate(quad));
      } // 4) Append identifier to input.


      md.update(id); // 5) Return the hash that results from passing input through the hash
      // algorithm.

      return md.digest();
    } // 4.8) Hash N-Degree Quads

  }, {
    key: "hashNDegreeQuads",
    value: function hashNDegreeQuads(id, issuer) {
      // 1) Create a hash to related blank nodes map for storing hashes that
      // identify related blank nodes.
      // Note: 2) and 3) handled within `createHashToRelated`
      var md = new MessageDigest(this.hashAlgorithm);
      var hashToRelated = this.createHashToRelated(id, issuer); // 4) Create an empty string, data to hash.
      // Note: We created a hash object `md` above instead.
      // 5) For each related hash to blank node list mapping in hash to related
      // blank nodes map, sorted lexicographically by related hash:

      var hashes = _toConsumableArray(hashToRelated.keys()).sort();

      var _iterator8 = _createForOfIteratorHelper(hashes),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var hash = _step8.value;
          // 5.1) Append the related hash to the data to hash.
          md.update(hash); // 5.2) Create a string chosen path.

          var chosenPath = ''; // 5.3) Create an unset chosen issuer variable.

          var chosenIssuer = void 0; // 5.4) For each permutation of blank node list:

          var permuter = new Permuter(hashToRelated.get(hash));

          while (permuter.hasNext()) {
            var permutation = permuter.next(); // 5.4.1) Create a copy of issuer, issuer copy.

            var issuerCopy = issuer.clone(); // 5.4.2) Create a string path.

            var path = ''; // 5.4.3) Create a recursion list, to store blank node identifiers
            // that must be recursively processed by this algorithm.

            var recursionList = []; // 5.4.4) For each related in permutation:

            var nextPermutation = false;

            var _iterator9 = _createForOfIteratorHelper(permutation),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var _related = _step9.value;

                // 5.4.4.1) If a canonical identifier has been issued for
                // related, append it to path.
                if (this.canonicalIssuer.hasId(_related)) {
                  path += this.canonicalIssuer.getId(_related);
                } else {
                  // 5.4.4.2) Otherwise:
                  // 5.4.4.2.1) If issuer copy has not issued an identifier for
                  // related, append related to recursion list.
                  if (!issuerCopy.hasId(_related)) {
                    recursionList.push(_related);
                  } // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
                  // issuer copy and related and append the result to path.


                  path += issuerCopy.getId(_related);
                } // 5.4.4.3) If chosen path is not empty and the length of path
                // is greater than or equal to the length of chosen path and
                // path is lexicographically greater than chosen path, then
                // skip to the next permutation.
                // Note: Comparing path length to chosen path length can be optimized
                // away; only compare lexicographically.


                if (chosenPath.length !== 0 && path > chosenPath) {
                  nextPermutation = true;
                  break;
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            if (nextPermutation) {
              continue;
            } // 5.4.5) For each related in recursion list:


            for (var _i4 = 0, _recursionList = recursionList; _i4 < _recursionList.length; _i4++) {
              var related = _recursionList[_i4];
              // 5.4.5.1) Set result to the result of recursively executing
              // the Hash N-Degree Quads algorithm, passing related for
              // identifier and issuer copy for path identifier issuer.
              var result = this.hashNDegreeQuads(related, issuerCopy); // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
              // copy and related and append the result to path.

              path += issuerCopy.getId(related); // 5.4.5.3) Append <, the hash in result, and > to path.

              path += "<".concat(result.hash, ">"); // 5.4.5.4) Set issuer copy to the identifier issuer in
              // result.

              issuerCopy = result.issuer; // 5.4.5.5) If chosen path is not empty and the length of path
              // is greater than or equal to the length of chosen path and
              // path is lexicographically greater than chosen path, then
              // skip to the next permutation.
              // Note: Comparing path length to chosen path length can be optimized
              // away; only compare lexicographically.

              if (chosenPath.length !== 0 && path > chosenPath) {
                nextPermutation = true;
                break;
              }
            }

            if (nextPermutation) {
              continue;
            } // 5.4.6) If chosen path is empty or path is lexicographically
            // less than chosen path, set chosen path to path and chosen
            // issuer to issuer copy.


            if (chosenPath.length === 0 || path < chosenPath) {
              chosenPath = path;
              chosenIssuer = issuerCopy;
            }
          } // 5.5) Append chosen path to data to hash.


          md.update(chosenPath); // 5.6) Replace issuer, by reference, with chosen issuer.

          issuer = chosenIssuer;
        } // 6) Return issuer and the hash that results from passing data to hash
        // through the hash algorithm.

      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      return {
        hash: md.digest(),
        issuer: issuer
      };
    } // helper for modifying component during Hash First Degree Quads

  }, {
    key: "modifyFirstDegreeComponent",
    value: function modifyFirstDegreeComponent(id, component) {
      if (component.termType !== 'BlankNode') {
        return component;
      }
      /* Note: A mistake in the URDNA2015 spec that made its way into
      implementations (and therefore must stay to avoid interop breakage)
      resulted in an assigned canonical ID, if available for
      `component.value`, not being used in place of `_:a`/`_:z`, so
      we don't use it here. */


      return {
        termType: 'BlankNode',
        value: component.value === id ? '_:a' : '_:z'
      };
    } // helper for getting a related predicate

  }, {
    key: "getRelatedPredicate",
    value: function getRelatedPredicate(quad) {
      return "<".concat(quad.predicate.value, ">");
    } // helper for creating hash to related blank nodes map

  }, {
    key: "createHashToRelated",
    value: function createHashToRelated(id, issuer) {
      // 1) Create a hash to related blank nodes map for storing hashes that
      // identify related blank nodes.
      var hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
      // quads map for the key identifier.

      var quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

      var _iterator10 = _createForOfIteratorHelper(quads),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var quad = _step10.value;

          // 3.1) For each component in quad, if component is the subject, object,
          // or graph name and it is a blank node that is not identified by
          // identifier:
          // steps 3.1.1 and 3.1.2 occur in helpers:
          this._addRelatedBlankNodeHash({
            quad: quad,
            component: quad.subject,
            position: 's',
            id: id,
            issuer: issuer,
            hashToRelated: hashToRelated
          });

          this._addRelatedBlankNodeHash({
            quad: quad,
            component: quad.object,
            position: 'o',
            id: id,
            issuer: issuer,
            hashToRelated: hashToRelated
          });

          this._addRelatedBlankNodeHash({
            quad: quad,
            component: quad.graph,
            position: 'g',
            id: id,
            issuer: issuer,
            hashToRelated: hashToRelated
          });
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      return hashToRelated;
    }
  }, {
    key: "_hashAndTrackBlankNode",
    value: function _hashAndTrackBlankNode(_ref) {
      var id = _ref.id,
          hashToBlankNodes = _ref.hashToBlankNodes;
      // 5.3.1) Create a hash, hash, according to the Hash First Degree
      // Quads algorithm.
      var hash = this.hashFirstDegreeQuads(id); // 5.3.2) Add hash and identifier to hash to blank nodes map,
      // creating a new entry if necessary.

      var idList = hashToBlankNodes.get(hash);

      if (!idList) {
        hashToBlankNodes.set(hash, [id]);
      } else {
        idList.push(id);
      }
    }
  }, {
    key: "_addBlankNodeQuadInfo",
    value: function _addBlankNodeQuadInfo(_ref2) {
      var quad = _ref2.quad,
          component = _ref2.component;

      if (component.termType !== 'BlankNode') {
        return;
      }

      var id = component.value;
      var info = this.blankNodeInfo.get(id);

      if (info) {
        info.quads.add(quad);
      } else {
        this.blankNodeInfo.set(id, {
          quads: new Set([quad]),
          hash: null
        });
      }
    }
  }, {
    key: "_addRelatedBlankNodeHash",
    value: function _addRelatedBlankNodeHash(_ref3) {
      var quad = _ref3.quad,
          component = _ref3.component,
          position = _ref3.position,
          id = _ref3.id,
          issuer = _ref3.issuer,
          hashToRelated = _ref3.hashToRelated;

      if (!(component.termType === 'BlankNode' && component.value !== id)) {
        return;
      } // 3.1.1) Set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for component as
      // related, quad, path identifier issuer as issuer, and position as
      // either s, o, or g based on whether component is a subject, object,
      // graph name, respectively.


      var related = component.value;
      var hash = this.hashRelatedBlankNode(related, quad, issuer, position); // 3.1.2) Add a mapping of hash to the blank node identifier for
      // component to hash to related blank nodes map, adding an entry as
      // necessary.

      var entries = hashToRelated.get(hash);

      if (entries) {
        entries.push(related);
      } else {
        hashToRelated.set(hash, [related]);
      }
    }
  }, {
    key: "_useCanonicalId",
    value: function _useCanonicalId(_ref4) {
      var component = _ref4.component;

      if (component.termType === 'BlankNode' && !component.value.startsWith(this.canonicalIssuer.prefix)) {
        return {
          termType: 'BlankNode',
          value: this.canonicalIssuer.getId(component.value)
        };
      }

      return component;
    }
  }]);

  return URDNA2015Sync;
}();

function _stringHashCompare(a, b) {
  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
}

/***/ }),

/***/ 17596:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var URDNA2015 = __webpack_require__(22116);

module.exports = /*#__PURE__*/function (_URDNA) {
  _inherits(URDNA2012, _URDNA);

  var _super = _createSuper(URDNA2012);

  function URDNA2012() {
    var _this;

    _classCallCheck(this, URDNA2012);

    _this = _super.call(this);
    _this.name = 'URGNA2012';
    _this.hashAlgorithm = 'sha1';
    return _this;
  } // helper for modifying component during Hash First Degree Quads


  _createClass(URDNA2012, [{
    key: "modifyFirstDegreeComponent",
    value: function modifyFirstDegreeComponent(id, component, key) {
      if (component.termType !== 'BlankNode') {
        return component;
      }

      if (key === 'graph') {
        return {
          termType: 'BlankNode',
          value: '_:g'
        };
      }

      return {
        termType: 'BlankNode',
        value: component.value === id ? '_:a' : '_:z'
      };
    } // helper for getting a related predicate

  }, {
    key: "getRelatedPredicate",
    value: function getRelatedPredicate(quad) {
      return quad.predicate.value;
    } // helper for creating hash to related blank nodes map

  }, {
    key: "createHashToRelated",
    value: function () {
      var _createHashToRelated = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, issuer) {
        var hashToRelated, quads, i, _iterator, _step, quad, position, related, hash, entries;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // 1) Create a hash to related blank nodes map for storing hashes that
                // identify related blank nodes.
                hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
                // quads map for the key identifier.

                quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

                i = 0;
                _iterator = _createForOfIteratorHelper(quads);
                _context.prev = 4;

                _iterator.s();

              case 6:
                if ((_step = _iterator.n()).done) {
                  _context.next = 31;
                  break;
                }

                quad = _step.value;
                // 3.1) If the quad's subject is a blank node that does not match
                // identifier, set hash to the result of the Hash Related Blank Node
                // algorithm, passing the blank node identifier for subject as related,
                // quad, path identifier issuer as issuer, and p as position.
                position = void 0;
                related = void 0;

                if (!(quad.subject.termType === 'BlankNode' && quad.subject.value !== id)) {
                  _context.next = 15;
                  break;
                }

                related = quad.subject.value;
                position = 'p';
                _context.next = 21;
                break;

              case 15:
                if (!(quad.object.termType === 'BlankNode' && quad.object.value !== id)) {
                  _context.next = 20;
                  break;
                }

                // 3.2) Otherwise, if quad's object is a blank node that does not match
                // identifier, to the result of the Hash Related Blank Node algorithm,
                // passing the blank node identifier for object as related, quad, path
                // identifier issuer as issuer, and r as position.
                related = quad.object.value;
                position = 'r';
                _context.next = 21;
                break;

              case 20:
                return _context.abrupt("continue", 29);

              case 21:
                if (!(++i % 100 === 0)) {
                  _context.next = 24;
                  break;
                }

                _context.next = 24;
                return this._yield();

              case 24:
                _context.next = 26;
                return this.hashRelatedBlankNode(related, quad, issuer, position);

              case 26:
                hash = _context.sent;
                entries = hashToRelated.get(hash);

                if (entries) {
                  entries.push(related);
                } else {
                  hashToRelated.set(hash, [related]);
                }

              case 29:
                _context.next = 6;
                break;

              case 31:
                _context.next = 36;
                break;

              case 33:
                _context.prev = 33;
                _context.t0 = _context["catch"](4);

                _iterator.e(_context.t0);

              case 36:
                _context.prev = 36;

                _iterator.f();

                return _context.finish(36);

              case 39:
                return _context.abrupt("return", hashToRelated);

              case 40:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 33, 36, 39]]);
      }));

      function createHashToRelated(_x, _x2) {
        return _createHashToRelated.apply(this, arguments);
      }

      return createHashToRelated;
    }()
  }]);

  return URDNA2012;
}(URDNA2015);

/***/ }),

/***/ 51278:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var URDNA2015Sync = __webpack_require__(19587);

module.exports = /*#__PURE__*/function (_URDNA2015Sync) {
  _inherits(URDNA2012Sync, _URDNA2015Sync);

  var _super = _createSuper(URDNA2012Sync);

  function URDNA2012Sync() {
    var _this;

    _classCallCheck(this, URDNA2012Sync);

    _this = _super.call(this);
    _this.name = 'URGNA2012';
    _this.hashAlgorithm = 'sha1';
    return _this;
  } // helper for modifying component during Hash First Degree Quads


  _createClass(URDNA2012Sync, [{
    key: "modifyFirstDegreeComponent",
    value: function modifyFirstDegreeComponent(id, component, key) {
      if (component.termType !== 'BlankNode') {
        return component;
      }

      if (key === 'graph') {
        return {
          termType: 'BlankNode',
          value: '_:g'
        };
      }

      return {
        termType: 'BlankNode',
        value: component.value === id ? '_:a' : '_:z'
      };
    } // helper for getting a related predicate

  }, {
    key: "getRelatedPredicate",
    value: function getRelatedPredicate(quad) {
      return quad.predicate.value;
    } // helper for creating hash to related blank nodes map

  }, {
    key: "createHashToRelated",
    value: function createHashToRelated(id, issuer) {
      // 1) Create a hash to related blank nodes map for storing hashes that
      // identify related blank nodes.
      var hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
      // quads map for the key identifier.

      var quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

      var _iterator = _createForOfIteratorHelper(quads),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var quad = _step.value;
          // 3.1) If the quad's subject is a blank node that does not match
          // identifier, set hash to the result of the Hash Related Blank Node
          // algorithm, passing the blank node identifier for subject as related,
          // quad, path identifier issuer as issuer, and p as position.
          var position = void 0;
          var related = void 0;

          if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
            related = quad.subject.value;
            position = 'p';
          } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {
            // 3.2) Otherwise, if quad's object is a blank node that does not match
            // identifier, to the result of the Hash Related Blank Node algorithm,
            // passing the blank node identifier for object as related, quad, path
            // identifier issuer as issuer, and r as position.
            related = quad.object.value;
            position = 'r';
          } else {
            // 3.3) Otherwise, continue to the next quad.
            continue;
          } // 3.4) Add a mapping of hash to the blank node identifier for the
          // component that matched (subject or object) to hash to related blank
          // nodes map, adding an entry as necessary.


          var hash = this.hashRelatedBlankNode(related, quad, issuer, position);
          var entries = hashToRelated.get(hash);

          if (entries) {
            entries.push(related);
          } else {
            hashToRelated.set(hash, [related]);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return hashToRelated;
    }
  }]);

  return URDNA2012Sync;
}(URDNA2015Sync);

/***/ }),

/***/ 98592:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * An implementation of the RDF Dataset Normalization specification.
 * This library works in the browser and node.js.
 *
 * BSD 3-Clause License
 * Copyright (c) 2016-2021 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var URDNA2015 = __webpack_require__(22116);

var URGNA2012 = __webpack_require__(17596);

var URDNA2015Sync = __webpack_require__(19587);

var URGNA2012Sync = __webpack_require__(51278); // optional native support


var rdfCanonizeNative;

try {
  rdfCanonizeNative = __webpack_require__(97670);
} catch (e) {}

var api = {};
module.exports = api; // expose helpers

api.NQuads = __webpack_require__(14181);
api.IdentifierIssuer = __webpack_require__(45946);
/**
 * Get or set native API.
 *
 * @param api the native API.
 *
 * @return the currently set native API.
 */

api._rdfCanonizeNative = function (api) {
  if (api) {
    rdfCanonizeNative = api;
  }

  return rdfCanonizeNative;
};
/**
 * Asynchronously canonizes an RDF dataset.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return a Promise that resolves to the canonicalized RDF Dataset.
 */


api.canonize = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dataset, options) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // back-compat with legacy dataset
            if (!Array.isArray(dataset)) {
              dataset = api.NQuads.legacyDatasetToQuads(dataset);
            }

            if (!options.useNative) {
              _context.next = 5;
              break;
            }

            if (rdfCanonizeNative) {
              _context.next = 4;
              break;
            }

            throw new Error('rdf-canonize-native not available');

          case 4:
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              return rdfCanonizeNative.canonize(dataset, options, function (err, canonical) {
                return err ? reject(err) : resolve(canonical);
              });
            }));

          case 5:
            if (!(options.algorithm === 'URDNA2015')) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", new URDNA2015(options).main(dataset));

          case 7:
            if (!(options.algorithm === 'URGNA2012')) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", new URGNA2012(options).main(dataset));

          case 9:
            if ('algorithm' in options) {
              _context.next = 11;
              break;
            }

            throw new Error('No RDF Dataset Canonicalization algorithm specified.');

          case 11:
            throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * This method is no longer available in the public API, it is for testing
 * only. It synchronously canonizes an RDF dataset and does not work in the
 * browser.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return the RDF dataset in canonical form.
 */


api._canonizeSync = function (dataset, options) {
  // back-compat with legacy dataset
  if (!Array.isArray(dataset)) {
    dataset = api.NQuads.legacyDatasetToQuads(dataset);
  }

  if (options.useNative) {
    if (rdfCanonizeNative) {
      return rdfCanonizeNative.canonizeSync(dataset, options);
    }

    throw new Error('rdf-canonize-native not available');
  }

  if (options.algorithm === 'URDNA2015') {
    return new URDNA2015Sync(options).main(dataset);
  }

  if (options.algorithm === 'URGNA2012') {
    return new URGNA2012Sync(options).main(dataset);
  }

  if (!('algorithm' in options)) {
    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
  }

  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};

/***/ }),

/***/ 4826:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

__exportStar(__webpack_require__(15779), exports);

__exportStar(__webpack_require__(22618), exports);

__exportStar(__webpack_require__(59384), exports);

__exportStar(__webpack_require__(56444), exports);

__exportStar(__webpack_require__(9000), exports);

__exportStar(__webpack_require__(22439), exports);

__exportStar(__webpack_require__(31158), exports);

/***/ }),

/***/ 15779:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.BlankNode = void 0;
/**
 * A term that represents an RDF blank node with a label.
 */

var BlankNode = /*#__PURE__*/function () {
  function BlankNode(value) {
    _classCallCheck(this, BlankNode);

    this.termType = 'BlankNode';
    this.value = value;
  }

  _createClass(BlankNode, [{
    key: "equals",
    value: function equals(other) {
      return !!other && other.termType === 'BlankNode' && other.value === this.value;
    }
  }]);

  return BlankNode;
}();

exports.BlankNode = BlankNode;

/***/ }),

/***/ 22618:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DataFactory = void 0;

var BlankNode_1 = __webpack_require__(15779);

var DefaultGraph_1 = __webpack_require__(59384);

var Literal_1 = __webpack_require__(56444);

var NamedNode_1 = __webpack_require__(9000);

var Quad_1 = __webpack_require__(22439);

var Variable_1 = __webpack_require__(31158);

var dataFactoryCounter = 0;
/**
 * A factory for instantiating RDF terms and quads.
 */

var DataFactory = /*#__PURE__*/function () {
  function DataFactory(options) {
    _classCallCheck(this, DataFactory);

    this.blankNodeCounter = 0;
    options = options || {};
    this.blankNodePrefix = options.blankNodePrefix || "df_".concat(dataFactoryCounter++, "_");
  }
  /**
   * @param value The IRI for the named node.
   * @return A new instance of NamedNode.
   * @see NamedNode
   */


  _createClass(DataFactory, [{
    key: "namedNode",
    value: function namedNode(value) {
      return new NamedNode_1.NamedNode(value);
    }
    /**
     * @param value The optional blank node identifier.
     * @return A new instance of BlankNode.
     *         If the `value` parameter is undefined a new identifier
     *         for the blank node is generated for each call.
     * @see BlankNode
     */

  }, {
    key: "blankNode",
    value: function blankNode(value) {
      return new BlankNode_1.BlankNode(value || "".concat(this.blankNodePrefix).concat(this.blankNodeCounter++));
    }
    /**
     * @param value              The literal value.
     * @param languageOrDatatype The optional language or datatype.
     *                           If `languageOrDatatype` is a NamedNode,
     *                           then it is used for the value of `NamedNode.datatype`.
     *                           Otherwise `languageOrDatatype` is used for the value
     *                           of `NamedNode.language`.
     * @return A new instance of Literal.
     * @see Literal
     */

  }, {
    key: "literal",
    value: function literal(value, languageOrDatatype) {
      return new Literal_1.Literal(value, languageOrDatatype);
    }
    /**
     * This method is optional.
     * @param value The variable name
     * @return A new instance of Variable.
     * @see Variable
     */

  }, {
    key: "variable",
    value: function variable(value) {
      return new Variable_1.Variable(value);
    }
    /**
     * @return An instance of DefaultGraph.
     */

  }, {
    key: "defaultGraph",
    value: function defaultGraph() {
      return DefaultGraph_1.DefaultGraph.INSTANCE;
    }
    /**
     * @param subject   The quad subject term.
     * @param predicate The quad predicate term.
     * @param object    The quad object term.
     * @param graph     The quad graph term.
     * @return A new instance of Quad.
     * @see Quad
     */

  }, {
    key: "quad",
    value: function quad(subject, predicate, object, graph) {
      return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
    }
    /**
     * Create a deep copy of the given term using this data factory.
     * @param original An RDF term.
     * @return A deep copy of the given term.
     */

  }, {
    key: "fromTerm",
    value: function fromTerm(original) {
      // TODO: remove nasty any casts when this TS bug has been fixed:
      //  https://github.com/microsoft/TypeScript/issues/26933
      switch (original.termType) {
        case 'NamedNode':
          return this.namedNode(original.value);

        case 'BlankNode':
          return this.blankNode(original.value);

        case 'Literal':
          if (original.language) {
            return this.literal(original.value, original.language);
          }

          if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
            return this.literal(original.value, this.fromTerm(original.datatype));
          }

          return this.literal(original.value);

        case 'Variable':
          return this.variable(original.value);

        case 'DefaultGraph':
          return this.defaultGraph();

        case 'Quad':
          return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
      }
    }
    /**
     * Create a deep copy of the given quad using this data factory.
     * @param original An RDF quad.
     * @return A deep copy of the given quad.
     */

  }, {
    key: "fromQuad",
    value: function fromQuad(original) {
      return this.fromTerm(original);
    }
    /**
     * Reset the internal blank node counter.
     */

  }, {
    key: "resetBlankNodeCounter",
    value: function resetBlankNodeCounter() {
      this.blankNodeCounter = 0;
    }
  }]);

  return DataFactory;
}();

exports.DataFactory = DataFactory;

/***/ }),

/***/ 59384:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DefaultGraph = void 0;
/**
 * A singleton term instance that represents the default graph.
 * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.
 */

var DefaultGraph = /*#__PURE__*/function () {
  function DefaultGraph() {
    _classCallCheck(this, DefaultGraph);

    this.termType = 'DefaultGraph';
    this.value = ''; // Private constructor
  }

  _createClass(DefaultGraph, [{
    key: "equals",
    value: function equals(other) {
      return !!other && other.termType === 'DefaultGraph';
    }
  }]);

  return DefaultGraph;
}();

exports.DefaultGraph = DefaultGraph;
DefaultGraph.INSTANCE = new DefaultGraph();

/***/ }),

/***/ 56444:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Literal = void 0;

var NamedNode_1 = __webpack_require__(9000);
/**
 * A term that represents an RDF literal, containing a string with an optional language tag or datatype.
 */


var Literal = /*#__PURE__*/function () {
  function Literal(value, languageOrDatatype) {
    _classCallCheck(this, Literal);

    this.termType = 'Literal';
    this.value = value;

    if (typeof languageOrDatatype === 'string') {
      this.language = languageOrDatatype;
      this.datatype = Literal.RDF_LANGUAGE_STRING;
    } else if (languageOrDatatype) {
      this.language = '';
      this.datatype = languageOrDatatype;
    } else {
      this.language = '';
      this.datatype = Literal.XSD_STRING;
    }
  }

  _createClass(Literal, [{
    key: "equals",
    value: function equals(other) {
      return !!other && other.termType === 'Literal' && other.value === this.value && other.language === this.language && other.datatype.equals(this.datatype);
    }
  }]);

  return Literal;
}();

exports.Literal = Literal;
Literal.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');
Literal.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');

/***/ }),

/***/ 9000:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NamedNode = void 0;
/**
 * A term that contains an IRI.
 */

var NamedNode = /*#__PURE__*/function () {
  function NamedNode(value) {
    _classCallCheck(this, NamedNode);

    this.termType = 'NamedNode';
    this.value = value;
  }

  _createClass(NamedNode, [{
    key: "equals",
    value: function equals(other) {
      return !!other && other.termType === 'NamedNode' && other.value === this.value;
    }
  }]);

  return NamedNode;
}();

exports.NamedNode = NamedNode;

/***/ }),

/***/ 22439:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Quad = void 0;
/**
 * An instance of DefaultGraph represents the default graph.
 * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.
 */

var Quad = /*#__PURE__*/function () {
  function Quad(subject, predicate, object, graph) {
    _classCallCheck(this, Quad);

    this.termType = 'Quad';
    this.value = '';
    this.subject = subject;
    this.predicate = predicate;
    this.object = object;
    this.graph = graph;
  }

  _createClass(Quad, [{
    key: "equals",
    value: function equals(other) {
      // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.
      return !!other && (other.termType === 'Quad' || !other.termType) && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
    }
  }]);

  return Quad;
}();

exports.Quad = Quad;

/***/ }),

/***/ 31158:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Variable = void 0;
/**
 * A term that represents a variable.
 */

var Variable = /*#__PURE__*/function () {
  function Variable(value) {
    _classCallCheck(this, Variable);

    this.termType = 'Variable';
    this.value = value;
  }

  _createClass(Variable, [{
    key: "equals",
    value: function equals(other) {
      return !!other && other.termType === 'Variable' && other.value === this.value;
    }
  }]);

  return Variable;
}();

exports.Variable = Variable;

/***/ }),

/***/ 86243:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var validators = __webpack_require__(11325);

var validateTerm = __webpack_require__(1);

var validateQuad = __webpack_require__(30961);

module.exports = {
  validators: validators,
  validateTerm: validateTerm,
  validateQuad: validateQuad
};

/***/ }),

/***/ 30961:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var validateTerm = __webpack_require__(1);
/**
 * Validate that a quad's object value is valid in regards to its declared
 * datatype.
 *
 * @param {Quad} quad - The quad to validate
 * @returns {boolean} - `true` if valid, `false` otherwise
 */


function validateQuad(quad) {
  return quad.object.termType !== 'Literal' || validateTerm(quad.object);
}

module.exports = validateQuad;

/***/ }),

/***/ 1:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var validators = __webpack_require__(11325);
/**
 * Validate that a term's value is valid in regards to its declared datatype.
 *
 * @param {Term} term - The term to validate
 * @returns {boolean} - `true` if valid, `false` otherwise
 */


function validateTerm(term) {
  if (term.termType !== 'Literal') {
    throw new Error('Cannot validate non-literal terms');
  }

  var validator = validators.find(term.datatype);

  if (validator) {
    return validator(term.value);
  }

  return true;
}

module.exports = validateTerm;

/***/ }),

/***/ 11325:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* global BigInt */
var _require = __webpack_require__(58739),
    csvw = _require.csvw,
    rdf = _require.rdf,
    xsd = _require.xsd;

var _require2 = __webpack_require__(84776),
    toCanonical = _require2.termToNTriples;
/**
 * Validators registry
 */


var Registry = /*#__PURE__*/function () {
  function Registry() {
    _classCallCheck(this, Registry);

    this.validators = new Map();
  }
  /**
   * Register a new validator for a specific datatype.
   *
   * @param {NamedNode} datatype - Validator datatype
   * @param {Function} validatorFunc - Function to validate the term value.
   *    Takes a term value (string) and returns a boolean describing if the
   *    value is valid in regards to the validator's datatype.
   * @returns {void}
   */


  _createClass(Registry, [{
    key: "register",
    value: function register(datatype, validatorFunc) {
      this.validators.set(toCanonical(datatype), validatorFunc);
    }
    /**
     * Find validator for a given datatype.
     *
     * @param {NamedNode | null} datatype - The datatype
     * @returns {Function | null} - The validation function, if found. `null`
     *    otherwise.
     */

  }, {
    key: "find",
    value: function find(datatype) {
      if (!datatype) {
        return null;
      }

      return this.validators.get(toCanonical(datatype));
    }
  }]);

  return Registry;
}();

var validators = new Registry();
validators.register(xsd.anySimpleType, function (value) {
  return true;
});
validators.register(xsd.anyAtomicType, function (value) {
  return true;
});
validators.register(xsd.string, function (value) {
  return true;
});
validators.register(xsd.normalizedString, function (value) {
  return isNormalized(value);
});
validators.register(xsd.token, function (value) {
  return isNormalized(value) && !value.startsWith(' ') && !value.endsWith(' ') && !value.includes('  ');
});

function isNormalized(value) {
  var forbiddenChars = ['\n', '\r', '\t'];
  return !forbiddenChars.some(function (forbiddenChar) {
    return value.includes(forbiddenChar);
  });
}

var languagePattern = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
validators.register(xsd.language, function (value) {
  return languagePattern.test(value);
});
var anyURIPattern = /^[^\ufffe\uffff]*$/;
validators.register(xsd.anyURI, function (value) {
  return anyURIPattern.test(value);
});
var signSeg = '(\\+|-)?';
var integerPattern = new RegExp("^".concat(signSeg, "\\d+$"));
validators.register(xsd.integer, function (value) {
  return integerPattern.test(value);
});
validators.register(xsd.nonNegativeInteger, function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('0');
});
validators.register(xsd.positiveInteger, function (value) {
  return integerPattern.test(value) && BigInt(value) > BigInt('0');
});
validators.register(xsd.nonPositiveInteger, function (value) {
  return integerPattern.test(value) && BigInt(value) <= BigInt('0');
});
validators.register(xsd.negativeInteger, function (value) {
  return integerPattern.test(value) && BigInt(value) < BigInt('0');
});
validators.register(xsd["int"], function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('-2147483647') && BigInt(value) <= BigInt('2147483648');
});
validators.register(xsd.unsignedInt, function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('0') && BigInt(value) <= BigInt('4294967295');
});
validators.register(xsd["long"], function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('-9223372036854775808') && BigInt(value) <= BigInt('9223372036854775807');
});
validators.register(xsd.unsignedLong, function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('0') && BigInt(value) <= BigInt('18446744073709551615');
});
validators.register(xsd["short"], function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('-32768') && BigInt(value) <= BigInt('32767');
});
validators.register(xsd.unsignedShort, function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('0') && BigInt(value) <= BigInt('65535');
});
validators.register(xsd["byte"], function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('-128') && BigInt(value) <= BigInt('127');
});
validators.register(xsd.unsignedByte, function (value) {
  return integerPattern.test(value) && BigInt(value) >= BigInt('0') && BigInt(value) <= BigInt('255');
});
validators.register(xsd["boolean"], function (value) {
  return value === '1' || value === 'true' || value === '0' || value === 'false';
});
var decimalSeg = "".concat(signSeg, "\\d+(\\.\\d+)?");
var decimalPattern = new RegExp("^".concat(signSeg).concat(decimalSeg, "$"));
validators.register(xsd.decimal, function (value) {
  return decimalPattern.test(value);
});
validators.register(xsd["float"], validateFloat);
validators.register(xsd["double"], validateFloat);
var floatPattern = new RegExp("^".concat(signSeg).concat(decimalSeg, "((E|e)(\\+|-)?\\d+)?$"));

function validateFloat(value) {
  return value === 'INF' || value === '-INF' || value === 'NaN' || floatPattern.test(value);
}

var dateSignSeg = '-?';
var durationYearSeg = '\\d+Y';
var durationMonthSeg = '\\d+M';
var durationDaySeg = '\\d+D';
var durationHourSeg = '\\d+H';
var durationMinuteSeg = '\\d+M';
var durationSecondSeg = '\\d+(\\.\\d+)?S';
var durationYearMonthSeg = "(".concat(durationYearSeg, "(").concat(durationMonthSeg, ")?|").concat(durationMonthSeg, ")");
var durationTimeSeg = "T((".concat(durationHourSeg, "(").concat(durationMinuteSeg, ")?(").concat(durationSecondSeg, ")?)|(").concat(durationMinuteSeg, "(").concat(durationSecondSeg, ")?)|").concat(durationSecondSeg, ")");
var durationDayTimeSeg = "(".concat(durationDaySeg, "(").concat(durationTimeSeg, ")?|").concat(durationTimeSeg, ")");
var durationSeg = "".concat(dateSignSeg, "P((").concat(durationYearMonthSeg, "(").concat(durationDayTimeSeg, ")?)|").concat(durationDayTimeSeg, ")");
var durationPattern = new RegExp("^".concat(durationSeg, "$"));
validators.register(xsd.duration, function (value) {
  return durationPattern.test(value);
});
var dayTimeDurationPattern = new RegExp("^".concat(dateSignSeg, "P").concat(durationDayTimeSeg, "$"));
validators.register(xsd.dayTimeDuration, function (value) {
  return dayTimeDurationPattern.test(value);
});
var yearMonthDurationPattern = new RegExp("^".concat(dateSignSeg, "P").concat(durationYearMonthSeg, "$"));
validators.register(xsd.yearMonthDuration, function (value) {
  return yearMonthDurationPattern.test(value);
});
var yearSeg = "".concat(dateSignSeg, "\\d{4}");
var timezoneSeg = '(((\\+|-)\\d{2}:\\d{2})|Z)';
var monthSeg = '\\d{2}';
var daySeg = '\\d{2}';
var dateSeg = "".concat(yearSeg, "-").concat(monthSeg, "-").concat(daySeg);
var timeSeg = '\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?';
var dateTimePattern = new RegExp("^".concat(dateSeg, "T").concat(timeSeg).concat(timezoneSeg, "?$"));
validators.register(xsd.dateTime, function (value) {
  return dateTimePattern.test(value);
});
var dateTimeStampPattern = new RegExp("^".concat(dateSeg, "T").concat(timeSeg).concat(timezoneSeg, "$"));
validators.register(xsd.dateTimeStamp, function (value) {
  return dateTimeStampPattern.test(value);
});
var datePattern = new RegExp("^".concat(dateSeg).concat(timezoneSeg, "?$"));
validators.register(xsd.date, function (value) {
  return datePattern.test(value);
});
var dayPattern = new RegExp("^".concat(daySeg).concat(timezoneSeg, "?$"));
validators.register(xsd.gDay, function (value) {
  return dayPattern.test(value);
});
var monthPattern = new RegExp("^".concat(monthSeg).concat(timezoneSeg, "?$"));
validators.register(xsd.gMonth, function (value) {
  return monthPattern.test(value);
});
var monthDayPattern = new RegExp("^".concat(monthSeg, "-").concat(daySeg).concat(timezoneSeg, "?$"));
validators.register(xsd.gMonthDay, function (value) {
  return monthDayPattern.test(value);
});
var yearPattern = new RegExp("^".concat(yearSeg).concat(timezoneSeg, "?$"));
validators.register(xsd.gYear, function (value) {
  return yearPattern.test(value);
});
var yearMonthPattern = new RegExp("^".concat(yearSeg, "-").concat(monthSeg).concat(timezoneSeg, "?$"));
validators.register(xsd.gYearMonth, function (value) {
  return yearMonthPattern.test(value);
});
var timePattern = new RegExp("^".concat(timeSeg).concat(timezoneSeg, "?$"));
validators.register(xsd.time, function (value) {
  return timePattern.test(value);
});
var hexBinaryPattern = /^([0-9a-fA-F]{2})*$/;
validators.register(xsd.hexBinary, function (value) {
  return hexBinaryPattern.test(value);
});
var b64CharSeg = '[A-Za-z0-9+/]';
var b16CharSeg = '[AEIMQUYcgkosw048]';
var b04CharSeg = '[AQgw]';
var b64Seg = "(".concat(b64CharSeg, " ?)");
var b16Seg = "(".concat(b16CharSeg, " ?)");
var b04Seg = "(".concat(b04CharSeg, " ?)");
var b64Padded16Seg = "(".concat(b64Seg, "{2}").concat(b16Seg, "=)");
var b64Padded8Seg = "(".concat(b64Seg).concat(b04Seg, "= ?=)");
var b64QuadSeg = "(".concat(b64Seg, "{4})");
var b64FinalQuadSeg = "(".concat(b64Seg, "{3}").concat(b64CharSeg, ")");
var b64FinalSeg = "(".concat(b64FinalQuadSeg, "|").concat(b64Padded16Seg, "|").concat(b64Padded8Seg, ")");
var b64Pattern = new RegExp("^(".concat(b64QuadSeg, "*").concat(b64FinalSeg, ")?$"));
validators.register(xsd.base64Binary, function (value) {
  return b64Pattern.test(value);
});
validators.register(csvw.JSON, function (value) {
  try {
    JSON.parse(value);
    return true;
  } catch (e) {
    return false;
  }
}); // TODO

validators.register(xsd.NOTATION, function (value) {
  return true;
});
validators.register(xsd.QName, function (value) {
  return true;
});
validators.register(xsd.Name, function (value) {
  return true;
});
validators.register(xsd.NCName, function (value) {
  return true;
});
validators.register(xsd.ENTITY, function (value) {
  return true;
});
validators.register(xsd.ID, function (value) {
  return true;
});
validators.register(xsd.IDREF, function (value) {
  return true;
});
validators.register(xsd.NMTOKEN, function (value) {
  return true;
});
validators.register(xsd.ENTITIES, function (value) {
  return true;
});
validators.register(xsd.IDREFS, function (value) {
  return true;
});
validators.register(xsd.NMTOKENS, function (value) {
  return true;
});
validators.register(rdf.XMLLiteral, function (value) {
  return true;
});
validators.register(rdf.HTML, function (value) {
  return true;
});
module.exports = validators;

/***/ }),

/***/ 31428:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DataFactory = __webpack_require__(23999);

var ShapesGraph = __webpack_require__(74916);

var ValidationEngine = __webpack_require__(19951);

var RDFLibGraph = __webpack_require__(90675);

var shaclVocabularyFactory = __webpack_require__(90990);
/**
 * Validates RDF data based on a set of RDF shapes.
 *
 * @param {DatasetCore} shapes - Dataset containing the SHACL shapes for validation
 * @param {object} options - Validator options
 * @param {DataFactory} options.factory - Optional RDFJS data factory
 * @param {Number} options.maxErrors - Max number of errors before the engine
 *   stops. Defaults to finding all the errors.
 */


var SHACLValidator = /*#__PURE__*/function () {
  function SHACLValidator(shapes, options) {
    _classCallCheck(this, SHACLValidator);

    options = options || {};
    this.factory = new DataFactory(options.factory || __webpack_require__(69608));
    this.loadShapes(shapes);
    this.validationEngine = new ValidationEngine(this, options);
    this.depth = 0;
  }
  /**
   * Validates the provided data graph against the provided shapes graph
   *
   * @param {DatasetCore} data - Dataset containing the data to validate
   * @return {ValidationReport} - Result of the validation
   */


  _createClass(SHACLValidator, [{
    key: "validate",
    value: function validate(data) {
      this.$data = new RDFLibGraph(data, this.factory);
      this.validationEngine.validateAll(this.$data);
      return this.validationEngine.getReport();
    }
    /**
     * Load SHACL shapes constraints from dataset.
     *
     * @param {DatasetCore} shapes - Dataset containing the shapes for validation
     */

  }, {
    key: "loadShapes",
    value: function loadShapes(shapes) {
      var shaclQuads = shaclVocabularyFactory(this.factory);
      var dataset = this.factory.dataset(shaclQuads.concat(_toConsumableArray(shapes)));
      this.$shapes = new RDFLibGraph(dataset, this.factory);
      this.shapesGraph = new ShapesGraph(this);
    } // Exposed to be available from validation functions as `SHACL.nodeConformsToShape`

  }, {
    key: "nodeConformsToShape",
    value: function nodeConformsToShape(focusNode, shapeNode) {
      var shape = this.shapesGraph.getShape(shapeNode);

      try {
        this.depth++;
        var foundViolations = this.validationEngine.validateNodeAgainstShape(focusNode, shape, this.$data);
        return !foundViolations;
      } finally {
        this.depth--;
      }
    }
  }]);

  return SHACLValidator;
}();

module.exports = SHACLValidator;

/***/ }),

/***/ 23999:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(39133),
    prepareNamespaces = _require.prepareNamespaces;

var DataFactory = /*#__PURE__*/function () {
  function DataFactory(impl) {
    _classCallCheck(this, DataFactory);

    this.impl = impl || __webpack_require__(69608);
    this.ns = prepareNamespaces(this);
  }

  _createClass(DataFactory, [{
    key: "blankNode",
    value: function blankNode(id) {
      return this.impl.blankNode(id);
    }
  }, {
    key: "literal",
    value: function literal(lex, langOrDatatype) {
      return this.impl.literal(lex, langOrDatatype);
    }
  }, {
    key: "namedNode",
    value: function namedNode(uri) {
      return this.impl.namedNode(uri);
    }
  }, {
    key: "quad",
    value: function quad(s, p, o, g) {
      return this.impl.quad(s, p, o, g);
    }
  }, {
    key: "dataset",
    value: function dataset(quads) {
      return this.impl.dataset(quads);
    }
  }, {
    key: "true",
    get: function get() {
      return this.literal('true', this.ns.xsd["boolean"]);
    }
  }]);

  return DataFactory;
}();

module.exports = DataFactory;

/***/ }),

/***/ 57279:
/***/ ((module) => {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Extracts all the quads forming the structure under a blank node. Stops at
 * non-blank nodes.
 *
 * @param {DatasetCore} dataset
 * @param {Term} startNode
 */
function extractStructure(dataset, startNode) {
  if (startNode.termType !== 'BlankNode') {
    return [];
  }

  var quads = _toConsumableArray(dataset.match(startNode, null, null));

  var children = quads.map(function (quad) {
    return extractStructure(dataset, quad.object);
  });
  return quads.concat.apply(quads, _toConsumableArray(children));
}

module.exports = {
  extractStructure: extractStructure
};

/***/ }),

/***/ 39133:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var namespace = __webpack_require__(2325);

var prepareNamespaces = function prepareNamespaces(factory) {
  return {
    sh: namespace('http://www.w3.org/ns/shacl#', {
      factory: factory
    }),
    xsd: namespace('http://www.w3.org/2001/XMLSchema#', {
      factory: factory
    }),
    rdf: namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#', {
      factory: factory
    }),
    rdfs: namespace('http://www.w3.org/2000/01/rdf-schema#', {
      factory: factory
    })
  };
};

var namespaces = prepareNamespaces();
module.exports = _objectSpread(_objectSpread({}, namespaces), {}, {
  prepareNamespaces: prepareNamespaces
});

/***/ }),

/***/ 19031:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TermSet = __webpack_require__(80456);

var NodeSet = /*#__PURE__*/function (_TermSet) {
  _inherits(NodeSet, _TermSet);

  var _super = _createSuper(NodeSet);

  function NodeSet() {
    _classCallCheck(this, NodeSet);

    return _super.apply(this, arguments);
  }

  _createClass(NodeSet, [{
    key: "addAll",
    value: function addAll(nodes) {
      var _iterator = _createForOfIteratorHelper(nodes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;
          this.add(node);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return NodeSet;
}(TermSet);

module.exports = NodeSet;

/***/ }),

/***/ 92122:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var NodeSet = __webpack_require__(19031);

var _require = __webpack_require__(39133),
    rdf = _require.rdf,
    sh = _require.sh;
/**
 * Extracts all the nodes of a property path from a graph and returns a
 * property path object.
 *
 * @param {RDFLibGraph} graph
 * @param {Term} pathNode - Start node of the path
 * @return Property path object
 */


function extractPropertyPath(graph, pathNode) {
  if (pathNode.termType === 'NamedNode') {
    return pathNode;
  }

  if (pathNode.termType === 'BlankNode') {
    var pathCf = graph.cf.node(pathNode);
    var first = pathCf.out(rdf.first).term;

    if (first) {
      var paths = graph.rdfListToArray(pathNode);
      return paths.map(function (path) {
        return extractPropertyPath(graph, path);
      });
    }

    var alternativePath = pathCf.out(sh.alternativePath).term;

    if (alternativePath) {
      var _paths = graph.rdfListToArray(alternativePath);

      return {
        or: _paths.map(function (path) {
          return extractPropertyPath(graph, path);
        })
      };
    }

    var zeroOrMorePath = pathCf.out(sh.zeroOrMorePath).term;

    if (zeroOrMorePath) {
      return {
        zeroOrMore: extractPropertyPath(graph, zeroOrMorePath)
      };
    }

    var oneOrMorePath = pathCf.out(sh.oneOrMorePath).term;

    if (oneOrMorePath) {
      return {
        oneOrMore: extractPropertyPath(graph, oneOrMorePath)
      };
    }

    var zeroOrOnePath = pathCf.out(sh.zeroOrOnePath).term;

    if (zeroOrOnePath) {
      return {
        zeroOrOne: extractPropertyPath(graph, zeroOrOnePath)
      };
    }

    var inversePath = pathCf.out(sh.inversePath).term;

    if (inversePath) {
      return {
        inverse: extractPropertyPath(graph, inversePath)
      };
    }
  }

  throw new Error("Unsupported SHACL path: ".concat(pathNode.value));
}
/**
 * Follows a property path in a graph, starting from a given node, and returns
 * all the nodes it points to.
 *
 * @param {RDFLibGraph} graph
 * @param {Term} subject - Start node
 * @param {object} path - Property path object
 * @return {Term[]} - Nodes that are reachable through the property path
 */


function getPathObjects(graph, subject, path) {
  return _toConsumableArray(getPathObjectsSet(graph, subject, path));
}

function getPathObjectsSet(graph, subject, path) {
  if (path.termType === 'NamedNode') {
    return getNamedNodePathObjects(graph, subject, path);
  } else if (Array.isArray(path)) {
    return getSequencePathObjects(graph, subject, path);
  } else if (path.or) {
    return getOrPathObjects(graph, subject, path);
  } else if (path.inverse) {
    return getInversePathObjects(graph, subject, path);
  } else if (path.zeroOrOne) {
    return getZeroOrOnePathObjects(graph, subject, path);
  } else if (path.zeroOrMore) {
    return getZeroOrMorePathObjects(graph, subject, path);
  } else if (path.oneOrMore) {
    return getOneOrMorePathObjects(graph, subject, path);
  } else {
    throw new Error("Unsupported path object: ".concat(path));
  }
}

function getNamedNodePathObjects(graph, subject, path) {
  return new NodeSet(graph.cf.node(subject).out(path).terms);
}

function getSequencePathObjects(graph, subject, path) {
  // TODO: This one is really unreadable
  var subjects = new NodeSet([subject]);

  var _iterator = _createForOfIteratorHelper(path),
      _step;

  try {
    var _loop = function _loop() {
      var pathItem = _step.value;
      subjects = new NodeSet(flatMap(subjects, function (subjectItem) {
        return getPathObjects(graph, subjectItem, pathItem);
      }));
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return subjects;
}

function getOrPathObjects(graph, subject, path) {
  return new NodeSet(flatMap(path.or, function (pathItem) {
    return getPathObjects(graph, subject, pathItem);
  }));
}

function getInversePathObjects(graph, subject, path) {
  if (path.inverse.termType !== 'NamedNode') {
    throw new Error('Unsupported: Inverse paths only work for named nodes');
  }

  return new NodeSet(graph.cf.node(subject)["in"](path.inverse).terms);
}

function getZeroOrOnePathObjects(graph, subject, path) {
  var pathObjects = getPathObjectsSet(graph, subject, path.zeroOrOne);
  pathObjects.add(subject);
  return pathObjects;
}

function getZeroOrMorePathObjects(graph, subject, path) {
  var pathObjects = walkPath(graph, subject, path.zeroOrMore);
  pathObjects.add(subject);
  return pathObjects;
}

function getOneOrMorePathObjects(graph, subject, path) {
  return walkPath(graph, subject, path.oneOrMore);
}

function walkPath(graph, subject, path, visited) {
  visited = visited || new NodeSet();
  visited.add(subject);
  var pathValues = getPathObjectsSet(graph, subject, path);
  var deeperValues = flatMap(pathValues, function (pathValue) {
    if (!visited.has(pathValue)) {
      return _toConsumableArray(walkPath(graph, pathValue, path, visited));
    } else {
      return [];
    }
  });
  pathValues.addAll(deeperValues);
  return pathValues;
}

function flatMap(arr, func) {
  return _toConsumableArray(arr).reduce(function (acc, x) {
    return acc.concat(func(x));
  }, []);
}

module.exports = {
  extractPropertyPath: extractPropertyPath,
  getPathObjects: getPathObjects
};

/***/ }),

/***/ 90675:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var clownface = __webpack_require__(92383);

var NodeSet = __webpack_require__(19031);

var _require = __webpack_require__(39133),
    rdf = _require.rdf,
    rdfs = _require.rdfs;

var RDFLibGraph = /*#__PURE__*/function () {
  function RDFLibGraph(dataset, factory) {
    _classCallCheck(this, RDFLibGraph);

    this.dataset = dataset;
    this.factory = factory;
  }

  _createClass(RDFLibGraph, [{
    key: "match",
    value: function match(s, p, o) {
      return this.dataset.match(s, p, o);
    }
  }, {
    key: "getInstancesOf",
    value: function getInstancesOf($class) {
      var _this = this;

      var classes = this.getSubClassesOf($class);
      classes.add($class);
      return _toConsumableArray(classes).reduce(function (acc, cls) {
        var classInstances = _this.cf.node(cls)["in"](rdf.type).terms;

        acc.addAll(classInstances);
        return acc;
      }, new NodeSet());
    }
  }, {
    key: "getSubClassesOf",
    value: function getSubClassesOf($class) {
      var subclasses = this.cf.node($class)["in"](rdfs.subClassOf).terms;
      return new NodeSet(subclasses);
    }
  }, {
    key: "isInstanceOf",
    value: function isInstanceOf($instance, $class) {
      var classes = this.getSubClassesOf($class);
      classes.add($class);
      var types = this.cf.node($instance).out(rdf.type).terms;
      return types.some(function (type) {
        return classes.has(type);
      });
    }
  }, {
    key: "rdfListToArray",
    value: function rdfListToArray(listNode) {
      var iterator = this.cf.node(listNode).list();
      return _toConsumableArray(iterator).map(function (_ref) {
        var term = _ref.term;
        return term;
      });
    }
  }, {
    key: "cf",
    get: function get() {
      return clownface({
        dataset: this.dataset,
        factory: this.factory
      });
    }
  }]);

  return RDFLibGraph;
}();

module.exports = RDFLibGraph;

/***/ }),

/***/ 74916:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Design:
//
// First, derive a ShapesGraph object from the definitions in $shapes.
// This manages a map of parameters to ConstraintComponents.
// Each ConstraintComponent manages its list of parameters and a link to the validators.
//
// The ShapesGraph also manages a list of Shapes, each which has a list of Constraints.
// A Constraint is a specific combination of parameters for a constraint component,
// and has functions to access the target nodes.
//
// Each ShapesGraph can be reused between validation calls, and thus often only needs
// to be created once per application.
//
// The validation process is started by creating a ValidationEngine that relies on
// a given ShapesGraph and operates on the current $data().
// It basically walks through all Shapes that have target nodes and runs the validators
// for each Constraint of the shape, producing results along the way.
var NodeSet = __webpack_require__(19031);

var ValidationFunction = __webpack_require__(57818);

var validatorsRegistry = __webpack_require__(19963);

var _require = __webpack_require__(92122),
    extractPropertyPath = _require.extractPropertyPath,
    getPathObjects = _require.getPathObjects;

var _require2 = __webpack_require__(39133),
    rdfs = _require2.rdfs,
    sh = _require2.sh;

var ShapesGraph = /*#__PURE__*/function () {
  function ShapesGraph(context) {
    _classCallCheck(this, ShapesGraph);

    this.context = context; // Collect all defined constraint components

    var componentNodes = context.$shapes.getInstancesOf(sh.ConstraintComponent);
    this.components = _toConsumableArray(componentNodes).map(function (node) {
      return new ConstraintComponent(node, context);
    }); // Build map from parameters to constraint components

    this.parametersMap = {};

    var _iterator = _createForOfIteratorHelper(this.components),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var component = _step.value;

        var _iterator2 = _createForOfIteratorHelper(component.parameters),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var parameter = _step2.value;
            this.parametersMap[parameter.value] = component;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } // Collection of shapes is populated on demand - here we remember the instances

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    this.shapes = {}; // Keys are the URIs/bnode ids of the shape nodes
  }

  _createClass(ShapesGraph, [{
    key: "getComponentWithParameter",
    value: function getComponentWithParameter(parameter) {
      return this.parametersMap[parameter.value];
    }
  }, {
    key: "getShape",
    value: function getShape(shapeNode) {
      var shape = this.shapes[shapeNode.value];

      if (!shape) {
        shape = new Shape(this.context, shapeNode);
        this.shapes[shapeNode.value] = shape;
      }

      return shape;
    }
  }, {
    key: "getShapeNodesWithConstraints",
    value: function getShapeNodesWithConstraints() {
      if (!this.shapeNodesWithConstraints) {
        var set = new NodeSet();

        var _iterator3 = _createForOfIteratorHelper(this.components),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var component = _step3.value;
            var params = component.requiredParameters;

            var _iterator4 = _createForOfIteratorHelper(params),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var param = _step4.value;

                var shapesWithParam = _toConsumableArray(this.context.$shapes.match(null, param, null)).map(function (_ref) {
                  var subject = _ref.subject;
                  return subject;
                });

                set.addAll(shapesWithParam);
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        this.shapeNodesWithConstraints = _toConsumableArray(set);
      }

      return this.shapeNodesWithConstraints;
    }
  }, {
    key: "getShapesWithTarget",
    value: function getShapesWithTarget() {
      var $shapes = this.context.$shapes;

      if (!this.targetShapes) {
        this.targetShapes = [];
        var shapeNodes = this.getShapeNodesWithConstraints();

        var _iterator5 = _createForOfIteratorHelper(shapeNodes),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var shapeNode = _step5.value;

            if ($shapes.isInstanceOf(shapeNode, rdfs.Class) || $shapes.cf.node(shapeNode).out([sh.targetClass, sh.targetNode, sh.targetSubjectsOf, sh.targetObjectsOf, sh.target]).terms.length > 0) {
              this.targetShapes.push(this.getShape(shapeNode));
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }

      return this.targetShapes;
    }
  }]);

  return ShapesGraph;
}();

var Constraint = /*#__PURE__*/function () {
  function Constraint(shape, component, paramValue, rdfShapesGraph) {
    _classCallCheck(this, Constraint);

    this.shape = shape;
    this.component = component;
    this.paramValue = paramValue;
    this.shapeNodeCf = rdfShapesGraph.cf.node(shape.shapeNode);
  }

  _createClass(Constraint, [{
    key: "getParameterValue",
    value: function getParameterValue(param) {
      return this.paramValue || this.shapeNodeCf.out(param).term;
    }
  }, {
    key: "componentMessages",
    get: function get() {
      return this.component.getMessages(this.shape);
    }
  }]);

  return Constraint;
}();

var ConstraintComponent = /*#__PURE__*/function () {
  function ConstraintComponent(node, context) {
    var _this = this;

    _classCallCheck(this, ConstraintComponent);

    this.context = context;
    this.factory = context.factory;
    this.node = node;
    this.parameters = [];
    this.parameterNodes = [];
    this.requiredParameters = [];
    this.optionals = {};
    this.context.$shapes.cf.node(node).out(sh.parameter).forEach(function (parameterCf) {
      var parameter = parameterCf.term;
      parameterCf.out(sh.path).forEach(function (_ref2) {
        var path = _ref2.term;

        _this.parameters.push(path);

        _this.parameterNodes.push(parameter);

        if (_this.context.$shapes.match(parameter, sh.optional, _this.factory["true"]).size > 0) {
          _this.optionals[path.value] = true;
        } else {
          _this.requiredParameters.push(path);
        }
      });
    });
    this.nodeValidationFunction = this.findValidationFunction(sh.nodeValidator);

    if (!this.nodeValidationFunction) {
      this.nodeValidationFunction = this.findValidationFunction(sh.validator);
      this.nodeValidationFunctionGeneric = true;
    }

    this.propertyValidationFunction = this.findValidationFunction(sh.propertyValidator);

    if (!this.propertyValidationFunction) {
      this.propertyValidationFunction = this.findValidationFunction(sh.validator);
      this.propertyValidationFunctionGeneric = true;
    }
  }

  _createClass(ConstraintComponent, [{
    key: "findValidationFunction",
    value: function findValidationFunction(predicate) {
      var validatorType = predicate.value.split('#').slice(-1)[0];
      var validator = this.findValidator(validatorType);
      if (!validator) return null;
      return new ValidationFunction(this.context, validator.func.name, validator.func);
    }
  }, {
    key: "getMessages",
    value: function getMessages(shape) {
      var generic = shape.isPropertyShape() ? this.propertyValidationFunctionGeneric : this.nodeValidationFunctionGeneric;
      var validatorType = generic ? 'validator' : shape.isPropertyShape() ? 'propertyValidator' : 'nodeValidator';
      var validator = this.findValidator(validatorType);
      if (!validator) return [];
      var message = validator.message;
      return message ? [message] : [];
    }
  }, {
    key: "findValidator",
    value: function findValidator(validatorType) {
      var constraintValidators = validatorsRegistry[this.node.value];
      if (!constraintValidators) return null;
      var validator = constraintValidators[validatorType];
      return validator || null;
    }
  }, {
    key: "isComplete",
    value: function isComplete(shapeNode) {
      var _this2 = this;

      return !this.parameters.some(function (parameter) {
        return _this2.isRequired(parameter.value) && _this2.context.$shapes.match(shapeNode, parameter, null).size === 0;
      });
    }
  }, {
    key: "isRequired",
    value: function isRequired(parameterURI) {
      return !this.optionals[parameterURI];
    }
  }]);

  return ConstraintComponent;
}();

var Shape = /*#__PURE__*/function () {
  function Shape(context, shapeNode) {
    var _this3 = this;

    _classCallCheck(this, Shape);

    this.context = context;
    this.severity = context.$shapes.cf.node(shapeNode).out(sh.severity).term;

    if (!this.severity) {
      this.severity = context.factory.ns.sh.Violation;
    }

    this.deactivated = context.$shapes.cf.node(shapeNode).out(sh.deactivated).value === 'true';
    this.path = context.$shapes.cf.node(shapeNode).out(sh.path).term;
    this._pathObject = undefined;
    this.shapeNode = shapeNode;
    this.constraints = [];
    var handled = new NodeSet();

    var shapeProperties = _toConsumableArray(context.$shapes.match(shapeNode, null, null));

    shapeProperties.forEach(function (sol) {
      var component = _this3.context.shapesGraph.getComponentWithParameter(sol.predicate);

      if (component && !handled.has(component.node)) {
        var params = component.parameters;

        if (params.length === 1) {
          _this3.constraints.push(new Constraint(_this3, component, sol.object, context.$shapes));
        } else if (component.isComplete(shapeNode)) {
          _this3.constraints.push(new Constraint(_this3, component, undefined, context.$shapes));

          handled.add(component.node);
        }
      }
    });
  }
  /**
   * Property path object
   */


  _createClass(Shape, [{
    key: "getTargetNodes",
    value: function getTargetNodes(rdfDataGraph) {
      var results = new NodeSet();

      if (this.context.$shapes.isInstanceOf(this.shapeNode, rdfs.Class)) {
        results.addAll(rdfDataGraph.getInstancesOf(this.shapeNode));
      }

      var targetClasses = _toConsumableArray(this.context.$shapes.match(this.shapeNode, sh.targetClass, null));

      targetClasses.forEach(function (_ref3) {
        var targetClass = _ref3.object;
        results.addAll(rdfDataGraph.getInstancesOf(targetClass));
      });
      results.addAll(this.context.$shapes.cf.node(this.shapeNode).out(sh.targetNode).terms);
      this.context.$shapes.cf.node(this.shapeNode).out(sh.targetSubjectsOf).terms.forEach(function (predicate) {
        var subjects = _toConsumableArray(rdfDataGraph.match(null, predicate, null)).map(function (_ref4) {
          var subject = _ref4.subject;
          return subject;
        });

        results.addAll(subjects);
      });
      this.context.$shapes.cf.node(this.shapeNode).out(sh.targetObjectsOf).terms.forEach(function (predicate) {
        var objects = _toConsumableArray(rdfDataGraph.match(null, predicate, null)).map(function (_ref5) {
          var object = _ref5.object;
          return object;
        });

        results.addAll(objects);
      });
      return _toConsumableArray(results);
    }
  }, {
    key: "getValueNodes",
    value: function getValueNodes(focusNode, dataGraph) {
      if (this.path) {
        return getPathObjects(dataGraph, focusNode, this.pathObject);
      } else {
        return [focusNode];
      }
    }
  }, {
    key: "isPropertyShape",
    value: function isPropertyShape() {
      return this.path != null;
    }
  }, {
    key: "pathObject",
    get: function get() {
      if (this._pathObject === undefined) {
        this._pathObject = this.path ? extractPropertyPath(this.context.$shapes, this.path) : null;
      }

      return this._pathObject;
    }
  }]);

  return Shape;
}();

module.exports = ShapesGraph;

/***/ }),

/***/ 19951:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ValidationReport = __webpack_require__(85166);

var _require = __webpack_require__(57279),
    extractStructure = _require.extractStructure;

var error = __webpack_require__(99796)('validation-enging::error');

var ValidationEngine = /*#__PURE__*/function () {
  function ValidationEngine(context, options) {
    _classCallCheck(this, ValidationEngine);

    this.context = context;
    this.factory = context.factory;
    this.maxErrors = options.maxErrors;
    this.results = [];
    this.recordErrorsLevel = 0;
    this.violationsCount = 0;
    this.validationError = null;
  }

  _createClass(ValidationEngine, [{
    key: "addResultProperty",
    value: function addResultProperty(result, predicate, object) {
      this.results.push(this.factory.quad(result, predicate, object));
    }
    /**
     * Creates a new BlankNode holding the SHACL validation result, adding the default
     * properties for the constraint, focused node and value node
     */

  }, {
    key: "createResult",
    value: function createResult(constraint, focusNode, valueNode) {
      var _this$factory$ns = this.factory.ns,
          rdf = _this$factory$ns.rdf,
          sh = _this$factory$ns.sh;
      var result = this.factory.blankNode();
      var severity = constraint.shape.severity;
      var sourceConstraintComponent = constraint.component.node;
      var sourceShape = constraint.shape.shapeNode;
      this.addResultProperty(result, rdf.type, sh.ValidationResult);
      this.addResultProperty(result, sh.resultSeverity, severity);
      this.addResultProperty(result, sh.sourceConstraintComponent, sourceConstraintComponent);
      this.addResultPropertyDeep(result, sh.sourceShape, sourceShape);
      this.addResultPropertyDeep(result, sh.focusNode, focusNode);

      if (valueNode) {
        this.addResultPropertyDeep(result, sh.value, valueNode);
      }

      return result;
    }
  }, {
    key: "addResultPropertyDeep",
    value: function addResultPropertyDeep(result, predicate, node) {
      this.addResultProperty(result, predicate, node);
      var structureQuads = extractStructure(this.context.$shapes.dataset, node);

      var _iterator = _createForOfIteratorHelper(structureQuads),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var quad = _step.value;
          this.results.push(quad);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Creates all the validation result nodes and messages for the result of applying the validation logic
     * of a constraints against a node.
     * Result passed as the first argument can be false, a resultMessage or a validation result object.
     * If none of these values is passed no error result or error message will be created.
     */

  }, {
    key: "createResultFromObject",
    value: function createResultFromObject(obj, constraint, focusNode, valueNode) {
      var _this$factory$ns2 = this.factory.ns,
          sh = _this$factory$ns2.sh,
          xsd = _this$factory$ns2.xsd;

      if (obj === false) {
        if (this.recordErrorsLevel > 0) {
          return true;
        }

        var result = this.createResult(constraint, focusNode, valueNode);

        if (constraint.shape.isPropertyShape()) {
          this.addResultPropertyDeep(result, sh.resultPath, constraint.shape.path, true);
        }

        this.createResultMessages(result, constraint);
        return true;
      } else if (typeof obj === 'string') {
        if (this.recordErrorsLevel > 0) {
          return true;
        }

        var _result = this.createResult(constraint, focusNode, valueNode);

        if (constraint.shape.isPropertyShape()) {
          this.addResultPropertyDeep(_result, sh.resultPath, constraint.shape.path, true);
        }

        this.addResultProperty(_result, sh.resultMessage, this.factory.literal(obj, xsd.string));
        this.createResultMessages(_result, constraint);
        return true;
      } else if (_typeof(obj) === 'object') {
        if (this.recordErrorsLevel > 0) {
          return true;
        }

        var _result2 = this.createResult(constraint, focusNode);

        if (obj.path) {
          this.addResultPropertyDeep(_result2, sh.resultPath, obj.path, true);
        } else if (constraint.shape.isPropertyShape()) {
          this.addResultPropertyDeep(_result2, sh.resultPath, constraint.shape.path, true);
        }

        if (obj.value) {
          this.addResultPropertyDeep(_result2, sh.value, obj.value);
        } else if (valueNode) {
          this.addResultPropertyDeep(_result2, sh.value, valueNode);
        }

        if (obj.message) {
          this.addResultProperty(_result2, sh.resultMessage, this.factory.literal(obj.message, xsd.string));
        } else {
          this.createResultMessages(_result2, constraint);
        }

        return true;
      }

      return false;
    }
    /**
     * Creates a result message from the result and the message pattern in the constraint
     */

  }, {
    key: "createResultMessages",
    value: function createResultMessages(result, constraint) {
      var _this = this;

      var $shapes = this.context.$shapes;
      var sh = this.factory.ns.sh; // 1. Try to get message from the shape itself

      var messages = $shapes.cf.node(constraint.shape.shapeNode).out(sh.message).terms; // 2. Try to get message from the constraint component validator

      if (messages.length === 0) {
        messages = constraint.componentMessages.map(function (m) {
          return _this.factory.literal(m);
        });
      } // 3. Try to get message from the constraint component node


      if (messages.length === 0) {
        messages = $shapes.cf.node(constraint.component.node).out(sh.message).terms;
      }

      var _iterator2 = _createForOfIteratorHelper(messages),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var message = _step2.value;
          var str = this.withSubstitutions(message, constraint);
          this.addResultProperty(result, sh.resultMessage, str);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    /**
     * Validates the data graph against the shapes graph
     */

  }, {
    key: "validateAll",
    value: function validateAll(rdfDataGraph) {
      if (this.maxErrorsReached()) {
        return true;
      }

      this.validationError = null;

      try {
        this.results = [];
        var foundError = false;
        var shapes = this.context.shapesGraph.getShapesWithTarget();

        var _iterator3 = _createForOfIteratorHelper(shapes),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var shape = _step3.value;
            var focusNodes = shape.getTargetNodes(rdfDataGraph);

            var _iterator4 = _createForOfIteratorHelper(focusNodes),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var focusNode = _step4.value;

                if (this.validateNodeAgainstShape(focusNode, shape, rdfDataGraph)) {
                  foundError = true;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return foundError;
      } catch (e) {
        this.validationError = e;
        return true; // Really? Why do we even return a boolean here?
      }
    }
    /**
     * Returns true if any violation has been found
     */

  }, {
    key: "validateNodeAgainstShape",
    value: function validateNodeAgainstShape(focusNode, shape, rdfDataGraph) {
      if (this.maxErrorsReached()) {
        return true;
      }

      if (shape.deactivated) {
        return false;
      }

      var valueNodes = shape.getValueNodes(focusNode, rdfDataGraph);
      var errorFound = false;

      var _iterator5 = _createForOfIteratorHelper(shape.constraints),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var constraint = _step5.value;

          if (this.validateNodeAgainstConstraint(focusNode, valueNodes, constraint, rdfDataGraph)) {
            errorFound = true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return errorFound;
    }
  }, {
    key: "validateNodeAgainstConstraint",
    value: function validateNodeAgainstConstraint(focusNode, valueNodes, constraint, rdfDataGraph) {
      var sh = this.factory.ns.sh;

      if (this.maxErrorsReached()) {
        return true;
      }

      if (sh.PropertyConstraintComponent.equals(constraint.component.node)) {
        var errorFound = false;

        var _iterator6 = _createForOfIteratorHelper(valueNodes),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var valueNode = _step6.value;

            if (this.validateNodeAgainstShape(valueNode, this.context.shapesGraph.getShape(constraint.paramValue), rdfDataGraph)) {
              errorFound = true;
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return errorFound;
      }

      var validationFunction = constraint.shape.isPropertyShape() ? constraint.component.propertyValidationFunction : constraint.component.nodeValidationFunction;

      if (validationFunction) {
        var generic = constraint.shape.isPropertyShape() ? constraint.component.propertyValidationFunctionGeneric : constraint.component.nodeValidationFunctionGeneric;

        if (generic) {
          // Generic sh:validator is called for each value node separately
          var _errorFound = false;

          var _iterator7 = _createForOfIteratorHelper(valueNodes),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _valueNode = _step7.value;

              if (this.maxErrorsReached()) {
                break;
              }

              var iterationError = false; // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {

              this.recordErrorsLevel++; // }

              var obj = validationFunction.execute(focusNode, _valueNode, constraint); // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {

              this.recordErrorsLevel--; // }

              if (Array.isArray(obj)) {
                var _iterator8 = _createForOfIteratorHelper(obj),
                    _step8;

                try {
                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                    var item = _step8.value;

                    if (this.createResultFromObject(item, constraint, focusNode, _valueNode)) {
                      iterationError = true;
                    }
                  }
                } catch (err) {
                  _iterator8.e(err);
                } finally {
                  _iterator8.f();
                }
              } else {
                if (this.createResultFromObject(obj, constraint, focusNode, _valueNode)) {
                  iterationError = true;
                }
              }

              if (iterationError) {
                this.violationsCount++;
              }

              _errorFound = _errorFound || iterationError;
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          return _errorFound;
        } else {
          // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {
          this.recordErrorsLevel++; // }

          var _obj = validationFunction.execute(focusNode, null, constraint); // if (validationFunction.funcName === "validateAnd" || validationFunction.funcName === "validateOr" || validationFunction.funcName === "validateNot") {


          this.recordErrorsLevel--; // }

          if (Array.isArray(_obj)) {
            var _errorFound2 = false;

            var _iterator9 = _createForOfIteratorHelper(_obj),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var _item = _step9.value;

                if (this.createResultFromObject(_item, constraint, focusNode)) {
                  _errorFound2 = true;
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            return _errorFound2;
          } else {
            if (this.createResultFromObject(_obj, constraint, focusNode)) {
              return true;
            }
          }
        }
      } else {
        throw new Error('Cannot find validator for constraint component ' + constraint.component.node.value);
      }
    }
  }, {
    key: "maxErrorsReached",
    value: function maxErrorsReached() {
      if (this.maxErrors) {
        return this.violationsCount >= this.maxErrors;
      } else {
        return false;
      }
    }
  }, {
    key: "withSubstitutions",
    value: function withSubstitutions(messageNode, constraint) {
      var message = constraint.component.parameters.reduce(function (message, param) {
        var paramName = localName(param.value);
        var paramValue = nodeLabel(constraint.getParameterValue(param));
        return message.replace("{$".concat(paramName, "}"), paramValue).replace("{?".concat(paramName, "}"), paramValue);
      }, messageNode.value);
      return this.factory.literal(message, messageNode.language || messageNode.datatype);
    }
  }, {
    key: "getReport",
    value: function getReport() {
      if (this.validationError) {
        error('Validation Failure: ' + this.validationError);
        throw this.validationError;
      } else {
        return new ValidationReport(this.results, {
          factory: this.factory
        });
      }
    }
  }]);

  return ValidationEngine;
}(); // TODO: This is not the 100% correct local name algorithm


function localName(uri) {
  var index = uri.lastIndexOf('#');

  if (index < 0) {
    index = uri.lastIndexOf('/');
  }

  if (index < 0) {
    throw new Error("Cannot get local name of ".concat(uri));
  }

  return uri.substring(index + 1);
}

function nodeLabel(node) {
  if (!node) {
    return 'NULL';
  }

  if (node.termType === 'NamedNode') {
    // TODO: shrink URI if possible
    return '<' + node.value + '>';
  }

  if (node.termType === 'BlankNode') {
    return 'Blank node ' + node.value;
  }

  return node.value;
}

module.exports = ValidationEngine;

/***/ }),

/***/ 57818:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var globalObject = typeof window !== 'undefined' ? window : __webpack_require__.g;

var ValidationFunction = /*#__PURE__*/function () {
  function ValidationFunction(context, functionName, func) {
    _classCallCheck(this, ValidationFunction);

    this.context = context;
    this.funcName = functionName;
    this.func = func;
  }

  _createClass(ValidationFunction, [{
    key: "execute",
    value: function execute(focusNode, valueNode, constraint) {
      return this.func.apply(globalObject, [this.context, focusNode, valueNode, constraint]);
    }
  }]);

  return ValidationFunction;
}();

module.exports = ValidationFunction;

/***/ }),

/***/ 85166:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var clownface = __webpack_require__(92383);

var DataFactory = __webpack_require__(23999);

var _require = __webpack_require__(39133),
    sh = _require.sh;
/**
 * Result of a SHACL validation.
 */


var ValidationReport = function ValidationReport(resultsQuads, options) {
  var _this = this;

  _classCallCheck(this, ValidationReport);

  options = options || {};
  this.factory = new DataFactory(options.factory || __webpack_require__(69608));
  var _this$factory$ns = this.factory.ns,
      rdf = _this$factory$ns.rdf,
      sh = _this$factory$ns.sh,
      xsd = _this$factory$ns.xsd;
  this.term = this.factory.blankNode('report');
  this.dataset = this.factory.dataset(resultsQuads); // Prepare report dataset

  var cf = clownface({
    dataset: this.dataset,
    factory: this.factory
  });
  var resultNodes = cf.node(sh.ValidationResult)["in"](rdf.type).terms;
  var conforms = resultNodes.length === 0;
  cf.node(this.term).addOut(rdf.type, sh.ValidationReport).addOut(sh.conforms, this.factory.literal(conforms.toString(), xsd["boolean"])).addOut(sh.result, resultNodes);
  /**
   * `true` if the data conforms to the defined shapes, `false` otherwise.
   */

  this.conforms = conforms;
  /**
   * List of `ValidationResult` with details about nodes that don't conform to
   * the given shapes.
   */

  this.results = resultNodes.map(function (resultNode) {
    return new ValidationResult(resultNode, _this.dataset);
  });
};

var ValidationResult = /*#__PURE__*/function () {
  function ValidationResult(term, dataset) {
    _classCallCheck(this, ValidationResult);

    this.term = term;
    this.dataset = dataset;
    this.cf = clownface({
      dataset: dataset
    }).node(term);
  }

  _createClass(ValidationResult, [{
    key: "message",
    get: function get() {
      return this.cf.out(sh.resultMessage).terms || [];
    }
  }, {
    key: "path",
    get: function get() {
      return this.cf.out(sh.resultPath).term || null;
    }
  }, {
    key: "focusNode",
    get: function get() {
      return this.cf.out(sh.focusNode).term || null;
    }
  }, {
    key: "severity",
    get: function get() {
      return this.cf.out(sh.resultSeverity).term || null;
    }
  }, {
    key: "sourceConstraintComponent",
    get: function get() {
      return this.cf.out(sh.sourceConstraintComponent).term || null;
    }
  }, {
    key: "sourceShape",
    get: function get() {
      return this.cf.out(sh.sourceShape).term || null;
    }
  }]);

  return ValidationResult;
}();

module.exports = ValidationReport;

/***/ }),

/***/ 19963:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _module$exports;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var validators = __webpack_require__(18923);

var _require = __webpack_require__(39133),
    sh = _require.sh; // Constraint to validator registry


module.exports = (_module$exports = {}, _defineProperty(_module$exports, sh.AndConstraintComponent.value, {
  validator: {
    func: validators.validateAnd
  }
}), _defineProperty(_module$exports, sh.ClassConstraintComponent.value, {
  validator: {
    func: validators.validateClass
  }
}), _defineProperty(_module$exports, sh.ClosedConstraintComponent.value, {
  validator: {
    func: validators.validateClosed,
    message: 'Predicate is not allowed (closed shape)'
  }
}), _defineProperty(_module$exports, sh.DatatypeConstraintComponent.value, {
  validator: {
    func: validators.validateDatatype,
    message: 'Value does not have datatype {$datatype}'
  }
}), _defineProperty(_module$exports, sh.DisjointConstraintComponent.value, {
  validator: {
    func: validators.validateDisjoint,
    message: 'Value node must not also be one of the values of {$disjoint}'
  }
}), _defineProperty(_module$exports, sh.EqualsConstraintComponent.value, {
  nodeValidator: {
    func: validators.validateEqualsNode,
    message: 'Must have same values as {$equals}'
  },
  propertyValidator: {
    func: validators.validateEqualsProperty,
    message: 'Must have same values as {$equals}'
  }
}), _defineProperty(_module$exports, sh.HasValueConstraintComponent.value, {
  nodeValidator: {
    func: validators.validateHasValueNode,
    message: 'Value must be {$hasValue}'
  },
  propertyValidator: {
    func: validators.validateHasValueProperty,
    message: 'Missing expected value {$hasValue}'
  }
}), _defineProperty(_module$exports, sh.InConstraintComponent.value, {
  validator: {
    func: validators.validateIn,
    message: 'Value is not in {$in}'
  }
}), _defineProperty(_module$exports, sh.LanguageInConstraintComponent.value, {
  validator: {
    func: validators.validateLanguageIn,
    message: 'Language does not match any of {$languageIn}'
  }
}), _defineProperty(_module$exports, sh.LessThanConstraintComponent.value, {
  propertyValidator: {
    func: validators.validateLessThanProperty,
    message: 'Value is not < value of {$lessThan}'
  }
}), _defineProperty(_module$exports, sh.LessThanOrEqualsConstraintComponent.value, {
  propertyValidator: {
    func: validators.validateLessThanOrEqualsProperty,
    message: 'Value is not <= value of {$lessThanOrEquals}'
  }
}), _defineProperty(_module$exports, sh.MaxCountConstraintComponent.value, {
  propertyValidator: {
    func: validators.validateMaxCountProperty,
    message: 'More than {$maxCount} values'
  }
}), _defineProperty(_module$exports, sh.MaxExclusiveConstraintComponent.value, {
  validator: {
    func: validators.validateMaxExclusive,
    message: 'Value is not < {$maxExclusive}'
  }
}), _defineProperty(_module$exports, sh.MaxInclusiveConstraintComponent.value, {
  validator: {
    func: validators.validateMaxInclusive,
    message: 'Value is not <= {$maxInclusive}'
  }
}), _defineProperty(_module$exports, sh.MaxLengthConstraintComponent.value, {
  validator: {
    func: validators.validateMaxLength,
    message: 'Value has more than {$maxLength} characters'
  }
}), _defineProperty(_module$exports, sh.MinCountConstraintComponent.value, {
  propertyValidator: {
    func: validators.validateMinCountProperty,
    message: 'Less than {$minCount} values'
  }
}), _defineProperty(_module$exports, sh.MinExclusiveConstraintComponent.value, {
  validator: {
    func: validators.validateMinExclusive,
    message: 'Value is not > {$minExclusive}'
  }
}), _defineProperty(_module$exports, sh.MinInclusiveConstraintComponent.value, {
  validator: {
    func: validators.validateMinInclusive,
    message: 'Value is not >= {$minInclusive}'
  }
}), _defineProperty(_module$exports, sh.MinLengthConstraintComponent.value, {
  validator: {
    func: validators.validateMinLength,
    message: 'Value has less than {$minLength} characters'
  }
}), _defineProperty(_module$exports, sh.NodeConstraintComponent.value, {
  validator: {
    func: validators.validateNode,
    message: 'Value does not have shape {$node}'
  }
}), _defineProperty(_module$exports, sh.NodeKindConstraintComponent.value, {
  validator: {
    func: validators.validateNodeKind,
    message: 'Value does not have node kind {$nodeKind}'
  }
}), _defineProperty(_module$exports, sh.NotConstraintComponent.value, {
  validator: {
    func: validators.validateNot,
    message: 'Value does have shape {$not}'
  }
}), _defineProperty(_module$exports, sh.OrConstraintComponent.value, {
  validator: {
    func: validators.validateOr
  }
}), _defineProperty(_module$exports, sh.PatternConstraintComponent.value, {
  validator: {
    func: validators.validatePattern,
    message: 'Value does not match pattern "{$pattern}"'
  }
}), _defineProperty(_module$exports, sh.QualifiedMaxCountConstraintComponent.value, {
  propertyValidator: {
    func: validators.validateQualifiedMaxCountProperty,
    message: 'More than {$qualifiedMaxCount} values have shape {$qualifiedValueShape}'
  }
}), _defineProperty(_module$exports, sh.QualifiedMinCountConstraintComponent.value, {
  propertyValidator: {
    func: validators.validateQualifiedMinCountProperty,
    message: 'Less than {$qualifiedMinCount} values have shape {$qualifiedValueShape}'
  }
}), _defineProperty(_module$exports, sh.UniqueLangConstraintComponent.value, {
  propertyValidator: {
    func: validators.validateUniqueLangProperty,
    message: 'Language "{?lang}" used more than once'
  }
}), _defineProperty(_module$exports, sh.XoneConstraintComponent.value, {
  validator: {
    func: validators.validateXone
  }
}), _module$exports);

/***/ }),

/***/ 18923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = __webpack_require__(86243),
    validateTerm = _require.validateTerm;

var NodeSet = __webpack_require__(19031);

var _require2 = __webpack_require__(39133),
    rdf = _require2.rdf,
    sh = _require2.sh;

var _require3 = __webpack_require__(92122),
    getPathObjects = _require3.getPathObjects;

function validateAnd(context, focusNode, valueNode, constraint) {
  var andNode = constraint.getParameterValue(sh.and);
  var shapes = context.$shapes.rdfListToArray(andNode);
  return shapes.every(function (shape) {
    return context.nodeConformsToShape(valueNode, shape);
  });
}

function validateClass(context, focusNode, valueNode, constraint) {
  var classNode = constraint.getParameterValue(sh["class"]);
  return context.$data.isInstanceOf(valueNode, classNode);
}

function validateClosed(context, focusNode, valueNode, constraint) {
  var closedNode = constraint.getParameterValue(sh.closed);
  var ignoredPropertiesNode = constraint.getParameterValue(sh.ignoredProperties);
  var currentShape = constraint.shape.shapeNode;

  if (!context.factory["true"].equals(closedNode)) {
    return;
  }

  var allowed = new NodeSet(context.$shapes.cf.node(currentShape).out(sh.property).out(sh.path).terms.filter(function (term) {
    return term.termType === 'NamedNode';
  }));

  if (ignoredPropertiesNode) {
    allowed.addAll(context.$shapes.rdfListToArray(ignoredPropertiesNode));
  }

  var results = [];

  var valueQuads = _toConsumableArray(context.$data.match(valueNode, null, null));

  valueQuads.filter(function (_ref) {
    var predicate = _ref.predicate;
    return !allowed.has(predicate);
  }).forEach(function (_ref2) {
    var predicate = _ref2.predicate,
        object = _ref2.object;
    results.push({
      path: predicate,
      value: object
    });
  });
  return results;
}

function validateDatatype(context, focusNode, valueNode, constraint) {
  var datatypeNode = constraint.getParameterValue(sh.datatype);

  if (valueNode.termType === 'Literal') {
    return datatypeNode.equals(valueNode.datatype) && validateTerm(valueNode);
  } else {
    return false;
  }
}

function validateDisjoint(context, focusNode, valueNode, constraint) {
  var disjointNode = constraint.getParameterValue(sh.disjoint);
  return context.$data.match(focusNode, disjointNode, valueNode).size === 0;
}

function validateEqualsProperty(context, focusNode, valueNode, constraint) {
  var path = constraint.shape.pathObject;
  var equalsNode = constraint.getParameterValue(sh.equals);
  var results = [];
  getPathObjects(context.$data, focusNode, path).forEach(function (value) {
    if (context.$data.match(focusNode, equalsNode, value).size === 0) {
      results.push({
        value: value
      });
    }
  });

  var equalsQuads = _toConsumableArray(context.$data.match(focusNode, equalsNode, null));

  equalsQuads.forEach(function (_ref3) {
    var object = _ref3.object;
    var value = object;

    if (!getPathObjects(context.$data, focusNode, path).some(function (pathValue) {
      return pathValue.equals(value);
    })) {
      results.push({
        value: value
      });
    }
  });
  return results;
}

function validateEqualsNode(context, focusNode, valueNode, constraint) {
  var equalsNode = constraint.getParameterValue(sh.equals);
  var results = [];
  var solutions = 0;
  getPathObjects(context.$data, focusNode, equalsNode).forEach(function (value) {
    solutions++;

    if (compareNodes(focusNode, value) !== 0) {
      results.push({
        value: value
      });
    }
  });

  if (results.length === 0 && solutions === 0) {
    results.push({
      value: focusNode
    });
  }

  return results;
}

function validateHasValueNode(context, focusNode, valueNode, constraint) {
  var hasValueNode = constraint.getParameterValue(sh.hasValue);
  return focusNode.equals(hasValueNode);
}

function validateHasValueProperty(context, focusNode, valueNode, constraint) {
  var path = constraint.shape.pathObject;
  var hasValueNode = constraint.getParameterValue(sh.hasValue);
  return getPathObjects(context.$data, focusNode, path).some(function (value) {
    return value.equals(hasValueNode);
  });
}

function validateIn(context, focusNode, valueNode, constraint) {
  var inNode = constraint.getParameterValue(sh["in"]);
  return new NodeSet(context.$shapes.rdfListToArray(inNode)).has(valueNode);
}

function validateLanguageIn(context, focusNode, valueNode, constraint) {
  if (valueNode.termType !== 'Literal') {
    return false;
  }

  var valueLanguage = valueNode.language;

  if (!valueLanguage || valueLanguage === '') {
    return false;
  }

  var languageInNode = constraint.getParameterValue(sh.languageIn);
  var allowedLanguages = context.$shapes.rdfListToArray(languageInNode);
  return allowedLanguages.some(function (allowedLanguage) {
    return valueLanguage.startsWith(allowedLanguage.value);
  });
}

function validateLessThanProperty(context, focusNode, valueNode, constraint) {
  var valuePath = constraint.shape.pathObject;
  var values = getPathObjects(context.$data, focusNode, valuePath);
  var lessThanNode = constraint.getParameterValue(sh.lessThan);
  var referenceValues = context.$data.cf.node(focusNode).out(lessThanNode).terms;
  var invalidValues = [];

  var _iterator = _createForOfIteratorHelper(values),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var value = _step.value;

      var _iterator2 = _createForOfIteratorHelper(referenceValues),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var referenceValue = _step2.value;
          var c = compareNodes(value, referenceValue);

          if (c === null || c >= 0) {
            invalidValues.push({
              value: value
            });
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return invalidValues;
}

function validateLessThanOrEqualsProperty(context, focusNode, valueNode, constraint) {
  var valuePath = constraint.shape.pathObject;
  var values = getPathObjects(context.$data, focusNode, valuePath);
  var lessThanOrEqualsNode = constraint.getParameterValue(sh.lessThanOrEquals);
  var referenceValues = context.$data.cf.node(focusNode).out(lessThanOrEqualsNode).terms;
  var invalidValues = [];

  var _iterator3 = _createForOfIteratorHelper(values),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var value = _step3.value;

      var _iterator4 = _createForOfIteratorHelper(referenceValues),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var referenceValue = _step4.value;
          var c = compareNodes(value, referenceValue);

          if (c === null || c > 0) {
            invalidValues.push({
              value: value
            });
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return invalidValues;
}

function validateMaxCountProperty(context, focusNode, valueNode, constraint) {
  var path = constraint.shape.pathObject;
  var count = getPathObjects(context.$data, focusNode, path).length;
  var maxCountNode = constraint.getParameterValue(sh.maxCount);
  return count <= Number(maxCountNode.value);
}

function validateMaxExclusive(context, focusNode, valueNode, constraint) {
  var maxExclusiveNode = constraint.getParameterValue(sh.maxExclusive);
  return valueNode.termType === 'Literal' && Number(valueNode.value) < Number(maxExclusiveNode.value);
}

function validateMaxInclusive(context, focusNode, valueNode, constraint) {
  var maxInclusiveNode = constraint.getParameterValue(sh.maxInclusive);
  return valueNode.termType === 'Literal' && Number(valueNode.value) <= Number(maxInclusiveNode.value);
}

function validateMaxLength(context, focusNode, valueNode, constraint) {
  if (valueNode.termType === 'BlankNode') {
    return false;
  }

  var maxLengthNode = constraint.getParameterValue(sh.maxLength);
  return valueNode.value.length <= Number(maxLengthNode.value);
}

function validateMinCountProperty(context, focusNode, valueNode, constraint) {
  var path = constraint.shape.pathObject;
  var count = getPathObjects(context.$data, focusNode, path).length;
  var minCountNode = constraint.getParameterValue(sh.minCount);
  return count >= Number(minCountNode.value);
}

function validateMinExclusive(context, focusNode, valueNode, constraint) {
  var minExclusiveNode = constraint.getParameterValue(sh.minExclusive);
  return valueNode.termType === 'Literal' && Number(valueNode.value) > Number(minExclusiveNode.value);
}

function validateMinInclusive(context, focusNode, valueNode, constraint) {
  var minInclusiveNode = constraint.getParameterValue(sh.minInclusive);
  return valueNode.termType === 'Literal' && Number(valueNode.value) >= Number(minInclusiveNode.value);
}

function validateMinLength(context, focusNode, valueNode, constraint) {
  if (valueNode.termType === 'BlankNode') {
    return false;
  }

  var minLengthNode = constraint.getParameterValue(sh.minLength);
  return valueNode.value.length >= Number(minLengthNode.value);
}

function validateNodeKind(context, focusNode, valueNode, constraint) {
  var nodeKindNode = constraint.getParameterValue(sh.nodeKind);

  if (valueNode.termType === 'BlankNode') {
    return sh.BlankNode.equals(nodeKindNode) || sh.BlankNodeOrIRI.equals(nodeKindNode) || sh.BlankNodeOrLiteral.equals(nodeKindNode);
  } else if (valueNode.termType === 'NamedNode') {
    return sh.IRI.equals(nodeKindNode) || sh.BlankNodeOrIRI.equals(nodeKindNode) || sh.IRIOrLiteral.equals(nodeKindNode);
  } else if (valueNode.termType === 'Literal') {
    return sh.Literal.equals(nodeKindNode) || sh.BlankNodeOrLiteral.equals(nodeKindNode) || sh.IRIOrLiteral.equals(nodeKindNode);
  }
}

function validateNode(context, focusNode, valueNode, constraint) {
  var nodeNode = constraint.getParameterValue(sh.node);
  return context.nodeConformsToShape(valueNode, nodeNode);
}

function validateNot(context, focusNode, valueNode, constraint) {
  var notNode = constraint.getParameterValue(sh.not);
  return !context.nodeConformsToShape(valueNode, notNode);
}

function validateOr(context, focusNode, valueNode, constraint) {
  var orNode = constraint.getParameterValue(sh.or);
  var shapes = context.$shapes.rdfListToArray(orNode);
  return shapes.some(function (shape) {
    return context.nodeConformsToShape(valueNode, shape);
  });
}

function validatePattern(context, focusNode, valueNode, constraint) {
  if (valueNode.termType === 'BlankNode') {
    return false;
  }

  var flagsNode = constraint.getParameterValue(sh.flags);
  var patternNode = constraint.getParameterValue(sh.pattern);
  var re = flagsNode ? new RegExp(patternNode.value, flagsNode.value) : new RegExp(patternNode.value);
  return re.test(valueNode.value);
}

function validateQualifiedMaxCountProperty(context, focusNode, valueNode, constraint) {
  var count = validateQualifiedHelper(context, focusNode, constraint);
  var qualifiedMaxCountNode = constraint.getParameterValue(sh.qualifiedMaxCount);
  return qualifiedMaxCountNode.termType === 'Literal' && count <= Number(qualifiedMaxCountNode.value);
}

function validateQualifiedMinCountProperty(context, focusNode, valueNode, constraint) {
  var count = validateQualifiedHelper(context, focusNode, constraint);
  var qualifiedMinCountNode = constraint.getParameterValue(sh.qualifiedMinCount);
  return qualifiedMinCountNode.termType === 'Literal' && count >= Number(qualifiedMinCountNode.value);
}

function validateQualifiedHelper(context, focusNode, constraint) {
  var currentShapeNode = constraint.shape.shapeNode;
  var qualifiedValueShapesDisjointNode = constraint.getParameterValue(sh.qualifiedValueShapesDisjoint);
  var qualifiedValueShapeNode = constraint.getParameterValue(sh.qualifiedValueShape);
  var siblingShapes = new NodeSet();

  if (context.factory["true"].equals(qualifiedValueShapesDisjointNode)) {
    var qualifiedSiblingShapes = context.$shapes.cf.node(currentShapeNode) // Move up to parent
    ["in"](sh.property) // Move down to all siblings
    .out(sh.property) // Select sh:qualifiedValueShape of all siblings
    .out(sh.qualifiedValueShape).filter(function (_ref4) {
      var term = _ref4.term;
      return !term.equals(qualifiedValueShapeNode);
    }).terms;
    siblingShapes.addAll(qualifiedSiblingShapes);
  }

  var path = constraint.shape.pathObject;
  return getPathObjects(context.$data, focusNode, path).filter(function (value) {
    return context.nodeConformsToShape(value, qualifiedValueShapeNode) && !validateQualifiedConformsToASibling(context, value, _toConsumableArray(siblingShapes));
  }).length;
}

function validateQualifiedConformsToASibling(context, value, siblingShapes) {
  for (var i = 0; i < siblingShapes.length; i++) {
    if (context.nodeConformsToShape(value, siblingShapes[i])) {
      return true;
    }
  }

  return false;
}

function validateUniqueLangProperty(context, focusNode, valueNode, constraint) {
  var uniqueLangNode = constraint.getParameterValue(sh.uniqueLang);

  if (!context.factory["true"].equals(uniqueLangNode)) {
    return;
  }

  var path = constraint.shape.pathObject;
  var map = {};
  getPathObjects(context.$data, focusNode, path).forEach(function (value) {
    var lang = value.language;

    if (lang && lang !== '') {
      var old = map[lang];

      if (!old) {
        map[lang] = 1;
      } else {
        map[lang] = old + 1;
      }
    }
  });
  var results = [];

  for (var lang in map) {
    if (Object.prototype.hasOwnProperty.call(map, lang)) {
      var count = map[lang];

      if (count > 1) {
        results.push('Language "' + lang + '" has been used by ' + count + ' values');
      }
    }
  }

  return results;
}

function validateXone(context, focusNode, valueNode, constraint) {
  var xoneNode = constraint.getParameterValue(sh.xone);
  var shapes = context.$shapes.rdfListToArray(xoneNode);
  var conformsCount = shapes.map(function (shape) {
    return context.nodeConformsToShape(valueNode, shape);
  }).filter(Boolean).length;
  return conformsCount === 1;
} // Private helper functions


function compareNodes(node1, node2) {
  // TODO: Does not handle the case where nodes cannot be compared
  if (node1 && node1.termType === 'Literal' && node2 && node2.termType === 'Literal') {
    if (node1.datatype != null !== (node2.datatype != null)) {
      return null;
    } else if (node1.datatype && node2.datatype && node1.datatype.value !== node2.datatype.value) {
      return null;
    }
  }

  return compareTerms(node1, node2);
}

function compareTerms(t1, t2) {
  if (!t1) {
    return !t2 ? 0 : 1;
  } else if (!t2) {
    return -1;
  }

  var bt = t1.termType.localeCompare(t2.termType);

  if (bt !== 0) {
    return bt;
  } else {
    // TODO: Does not handle numeric or date comparison
    var bv = t1.value.localeCompare(t2.value);

    if (bv !== 0) {
      return bv;
    } else {
      if (t1.termType === 'Literal') {
        var bd = t1.datatype.value.localeCompare(t2.datatype.value);

        if (bd !== 0) {
          return bd;
        } else if (rdf.langString.equals(t1.datatype)) {
          return t1.language.localeCompare(t2.language);
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    }
  }
}

module.exports = {
  validateAnd: validateAnd,
  validateClass: validateClass,
  validateClosed: validateClosed,
  validateDatatype: validateDatatype,
  validateDisjoint: validateDisjoint,
  validateEqualsNode: validateEqualsNode,
  validateEqualsProperty: validateEqualsProperty,
  validateHasValueNode: validateHasValueNode,
  validateHasValueProperty: validateHasValueProperty,
  validateIn: validateIn,
  validateLanguageIn: validateLanguageIn,
  validateLessThanProperty: validateLessThanProperty,
  validateLessThanOrEqualsProperty: validateLessThanOrEqualsProperty,
  validateMaxCountProperty: validateMaxCountProperty,
  validateMaxExclusive: validateMaxExclusive,
  validateMaxInclusive: validateMaxInclusive,
  validateMaxLength: validateMaxLength,
  validateMinCountProperty: validateMinCountProperty,
  validateMinExclusive: validateMinExclusive,
  validateMinInclusive: validateMinInclusive,
  validateMinLength: validateMinLength,
  validateNode: validateNode,
  validateNodeKind: validateNodeKind,
  validateNot: validateNot,
  validateOr: validateOr,
  validatePattern: validatePattern,
  validateQualifiedMaxCountProperty: validateQualifiedMaxCountProperty,
  validateQualifiedMinCountProperty: validateQualifiedMinCountProperty,
  validateUniqueLangProperty: validateUniqueLangProperty,
  validateXone: validateXone
};

/***/ }),

/***/ 90990:
/***/ ((module) => {

/* This file was automatically generated. Do not edit by hand. */
module.exports = function (factory) {
  var blankNodes = {
    'b0_c14n3': factory.namedNode('urn:rdf-validate-shacl:blank-ICrbDblpRlstcUSwjBAYZ'),
    'b0_c14n6': factory.namedNode('urn:rdf-validate-shacl:blank-pFK9KYtN26DN0NMXyH8Ar'),
    'b0_c14n0': factory.namedNode('urn:rdf-validate-shacl:blank-78BxHlZRiJnXywWTF5cqq'),
    'b0_c14n1': factory.namedNode('urn:rdf-validate-shacl:blank-x54-DFCLtSR8nEZND8Bk3'),
    'b0_c14n5': factory.namedNode('urn:rdf-validate-shacl:blank-31XwBcULxRTIx9l5dbYMx'),
    'b0_c14n2': factory.namedNode('urn:rdf-validate-shacl:blank-JIQGzDSBoYQOBoFXDRJb9'),
    'b0_c14n4': factory.namedNode('urn:rdf-validate-shacl:blank-DzoWy3baN0DSUzrH2JFJ8')
  };
  return [factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("This vocabulary defines terms used in SHACL, the W3C Shapes Constraint Language.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("W3C Shapes Constraint Language (SHACL) Vocabulary", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#declare'), blankNodes['b0_c14n3'], factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'), factory.namedNode('http://www.w3.org/ns/shacl-shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The base class of validation results, typically not instantiated directly.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Abstract result", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#and'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to test whether a value node conforms to all members of a provided list of shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("And constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#AndConstraintComponent-and'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node kind of all blank nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Blank node", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node kind of all blank nodes or IRIs.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Blank node or IRI", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node kind of all blank nodes or literals.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Blank node or literal", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that each value node is an instance of a given type.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Class constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#ClassConstraintComponent-class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#closed'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'), factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.literal("true", factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to indicate that focus nodes must only have values for those properties that have been explicitly enumerated via sh:property/sh:path.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Closed constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-closed'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#ClosedConstraintComponent-ignoredProperties'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of constraint components.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the datatype of all value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Datatype constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#DatatypeConstraintComponent-datatype'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#disjoint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that the set of value nodes is disjoint with the the set of nodes that have the focus node as subject and the value of a given property as predicate.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Disjoint constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#DisjointConstraintComponent-disjoint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#equals'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that the set of value nodes is equal to the set of nodes that have the focus node as subject and the value of a given property as predicate.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Equals constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#EqualsConstraintComponent-equals'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#expression'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that a given node expression produces true for all value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Expression constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#ExpressionConstraintComponent-expression'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SHACL functions.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Function", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#hasValue'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that one of the value nodes is a given RDF node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Has-value constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#HasValueConstraintComponent-hasValue'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node kind of all IRIs.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("IRI", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node kind of all IRIs or literals.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("IRI or literal", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#in'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to exclusively enumerate the permitted value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("In constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#InConstraintComponent-in'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Info'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Info'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The severity for an informational validation result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Info'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Info'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Info", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#js'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of constraints backed by a JavaScript function.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript-based constraint", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component with the parameter sh:js linking to a sh:JSConstraint containing a sh:script.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint-js'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Abstract base class of resources that declare an executable JavaScript.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript executable", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SHACL functions that execute a JavaScript function when called.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript function", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Represents a JavaScript library, typically identified by one or more URLs of files to include.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript library", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSRule'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SHACL rules expressed using JavaScript.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript rule", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of targets that are based on JavaScript functions.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript target", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (meta) class for parameterizable targets that are based on JavaScript functions.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript target type", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A SHACL validator based on JavaScript. This can be used to declare SHACL constraint components that perform JavaScript-based validation when used.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript validator", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#JSValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#languageIn'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to enumerate language tags that all value nodes must have.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Language-in constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#LanguageInConstraintComponent-languageIn'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#lessThan'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that each value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Less-than constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#LessThanConstraintComponent-lessThan'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that every value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("less-than-or-equals constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent-lessThanOrEquals'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node kind of all literals.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Literal", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the maximum number of value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Max-count constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MaxCountConstraintComponent-maxCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the range of value nodes with a maximum exclusive value.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Max-exclusive constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent-maxExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the range of value nodes with a maximum inclusive value.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Max-inclusive constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent-maxInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#maxLength'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the maximum string length of value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Max-length constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MaxLengthConstraintComponent-maxLength'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#minCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the minimum number of value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Min-count constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MinCountConstraintComponent-minCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the range of value nodes with a minimum exclusive value.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Min-exclusive constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent-minExclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the range of value nodes with a minimum inclusive value.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Min-inclusive constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent-minInclusive'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#minLength'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the minimum string length of value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Min-length constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#MinLengthConstraintComponent-minLength'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#node'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that all value nodes conform to the given node shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Node constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#NodeConstraintComponent-node'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of all node kinds, including sh:BlankNode, sh:IRI, sh:Literal or the combinations of these: sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral, sh:IRIOrLiteral.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Node kind", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#in'), blankNodes['b0_c14n6'], factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the RDF node kind of each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Node-kind constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKindConstraintComponent-nodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A node shape is a shape that specifies constraint that need to be met with respect to focus nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Node shape", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#not'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that value nodes do not conform to a given shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Not constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#NotConstraintComponent-not'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#or'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the value nodes so that they conform to at least one out of several provided shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Or constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#OrConstraintComponent-or'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of parameter declarations, consisting of a path predicate and (possibly) information about allowed value type, cardinality and other characteristics.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Parameter", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Superclass of components that can take parameters, especially functions and constraint components.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Parameterizable", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'), factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.literal("true", factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#flags'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#pattern'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that every value node matches a given regular expression.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Pattern constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-flags'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#PatternConstraintComponent-pattern'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of prefix declarations, consisting of pairs of a prefix with a namespace.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Prefix declaration", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that all value nodes conform to the given property shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Property constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyConstraintComponent-property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Instances of this class represent groups of property shapes that belong together.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Property group", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A property shape is a shape that specifies constraints on the values of a focus node for a given property or path.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Property shape", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.literal("true", factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that a specified maximum number of value nodes conforms to a given shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Qualified-max-count constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedMaxCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.literal("true", factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to verify that a specified minimum number of value nodes conforms to a given shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Qualified-min-count constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedMinCount'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A class of result annotations, which define the rules to derive the values of a given annotation property as extra values for a validation result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Result annotation", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SHACL rules. Never instantiated directly.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Rule", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SPARQL executables that are based on an ASK query.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL ASK executable", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of validators based on SPARQL ASK queries. The queries are evaluated for each value node and are supposed to return true if the given node conforms.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL ASK validator", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of constraints based on SPARQL SELECT queries.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL constraint", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#sparql'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to define constraints based on SPARQL queries.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraintComponent-sparql'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SPARQL executables that are based on a CONSTRUCT query.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL CONSTRUCT executable", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of resources that encapsulate a SPARQL query.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL executable", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A function backed by a SPARQL query - either ASK or SELECT.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL function", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLFunction'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SHACL rules based on SPARQL CONSTRUCT queries.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL CONSTRUCT rule", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SPARQL executables based on a SELECT query.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL SELECT executable", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of validators based on SPARQL SELECT queries. The queries are evaluated for each focus node and are supposed to produce bindings for all focus nodes that do not conform.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL SELECT validator", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of targets that are based on SPARQL queries.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL target", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTarget'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (meta) class for parameterizable targets that are based on SPARQL queries.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL target type", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLTargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SPARQL executables based on a SPARQL UPDATE.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("SPARQL UPDATE executable", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of validation result severity levels, including violation and warning levels.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Severity", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A shape is a collection of constraints that may be targeted for certain nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Shape", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The base class of targets such as those based on SPARQL queries.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Target", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (meta) class for parameterizable targets.\tInstances of this are instantiated as values of the sh:target property.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Target type", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TargetType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("A rule based on triple (subject, predicate, object) pattern.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'), factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'), factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.literal("1", factory.namedNode('http://www.w3.org/2001/XMLSchema#integer')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to specify that no pair of value nodes may use the same language tag.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Unique-languages constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#UniqueLangConstraintComponent-uniqueLang'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of SHACL validation reports.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Validation report", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of validation results.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Validation result", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The class of validators, which provide instructions on how to process a constraint definition. This class serves as base class for the SPARQL-based validators and other possible implementations.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Validator", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#subClassOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Violation'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Violation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The severity for a violation validation result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Violation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Violation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Violation", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Warning'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Warning'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The severity for a warning validation result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Warning'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#Warning'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Warning", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'), factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/ns/shacl#xone'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A constraint component that can be used to restrict the value nodes so that they conform to exactly one out of several provided shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("Exactly one constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/ns/shacl#XoneConstraintComponent-xone'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (single) value of this property must be a list of path elements, representing the elements of alternative paths.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("alternative path", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#alternativePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#and'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#and'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("RDF list of shapes to validate the value nodes against.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#and'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#and'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("and", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#and'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The annotation property that shall be set.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("annotation property", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationProperty'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (default) values of the annotation property.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("annotation value", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The name of the SPARQL variable from the SELECT clause that shall be used for the values.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("annotation variable name", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#annotationVarName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ask'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ask'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The SPARQL ASK query to execute.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ask'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLAskExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ask'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ask'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("ask", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ask'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#class'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#class'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The type that all value nodes must have.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#class'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#class'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("class", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#class'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#closed'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#closed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("If set to true then the shape is closed.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#closed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#closed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("closed", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#closed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#condition'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#condition'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The shapes that the focus nodes need to conform to before a rule is executed on them.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#condition'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#condition'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#condition'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("condition", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#condition'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#conforms'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#conforms'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("True if the validation did not produce any validation results, and false otherwise.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#conforms'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#conforms'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#conforms'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("conforms", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#conforms'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#construct'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#construct'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The SPARQL CONSTRUCT query to execute.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#construct'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstructExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#construct'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#construct'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("construct", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#construct'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies an RDF datatype that all value nodes must have.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("datatype", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#datatype'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Datatype'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#deactivated'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#deactivated'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("If set to true then all nodes conform to this.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#deactivated'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#deactivated'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("deactivated", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#deactivated'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#declare'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#declare'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a resource with its namespace prefix declarations.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#declare'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#declare'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#declare'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("declare", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#declare'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A default value for a property, for example for user interface tools to pre-populate input fields.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#defaultValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("default value", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#description'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#description'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Human-readable descriptions for the property in the context of the surrounding shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#description'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#description'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#description'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("description", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#detail'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#detail'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a result with other results that provide more details, for example to describe violations against nested shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#detail'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#detail'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#detail'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("detail", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#detail'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#disjoint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#disjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a property where the set of values must be disjoint with the value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#disjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#disjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("disjoint", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#disjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#entailment'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#entailment'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("An entailment regime that indicates what kind of inferencing is required by a shapes graph.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#entailment'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#entailment'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#entailment'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("entailment", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#entailment'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#equals'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#equals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a property that must have the same values as the value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#equals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#equals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("equals", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#equals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#expression'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#expression'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node expression that must return true for the value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#expression'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#expression'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("expression", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#filterShape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#filterShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The shape that all input nodes of the expression need to conform to.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#filterShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#filterShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("filter shape", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#filterShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#flags'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#flags'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("An optional flag to be used with regular expression pattern matching.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#flags'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#flags'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("flags", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#flags'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#focusNode'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#focusNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The focus node that was validated when the result was produced.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#focusNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#focusNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#focusNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("focus node", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#group'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#group'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Can be used to link to a property group to indicate that a property shape belongs to a group of related property shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#group'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#group'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#group'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("group", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#group'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyGroup'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#hasValue'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#hasValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a value that must be among the value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#hasValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#hasValue'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("has value", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("An optional RDF list of properties that are also permitted in addition to those explicitly enumerated via sh:property/sh:path.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("ignored properties", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#ignoredProperties'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#in'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#in'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a list of allowed values so that each value node must be among the members of the given list.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#in'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#in'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("in", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#in'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#intersection'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#intersection'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A list of node expressions that shall be intersected.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#intersection'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#intersection'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("intersection", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#inversePath'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#inversePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (single) value of this property represents an inverse path (object to subject).", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#inversePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#inversePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("inverse path", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#inversePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#js'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#js'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Constraints expressed in JavaScript.", factory.namedNode('http://www.w3.org/2001/XMLSchema#string')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#js'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#js'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript constraint", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#js'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#JSConstraint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The name of the JavaScript function to execute.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#JSExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript function name", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsFunctionName'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Declares which JavaScript libraries are needed to execute this.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript library", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibrary'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Declares the URLs of a JavaScript library. This should be the absolute URL of a JavaScript file. Implementations may redirect those to local files.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#JSLibrary'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("JavaScript library URL", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#jsLibraryURL'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#anyURI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Outlines how human-readable labels of instances of the associated Parameterizable shall be produced. The values can contain {?paramName} as placeholders for the actual values of the given parameter.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#labelTemplate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("label template", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#languageIn'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#languageIn'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a list of language tags that all value nodes must have.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#languageIn'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#languageIn'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("language in", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#languageIn'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThan'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThan'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a property that must have smaller values than the value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThan'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThan'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("less than", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThan'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a property that must have smaller or equal values than the value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("less than or equals", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#lessThanOrEquals'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the maximum number of values in the set of value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("max count", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the maximum exclusive value of each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("max exclusive", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the maximum inclusive value of each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("max inclusive", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxLength'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the maximum string length of each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("max length", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#maxLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#message'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#message'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A human-readable message (possibly with placeholders for variables) explaining the cause of the result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#message'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#message'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("message", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the minimum number of values in the set of value nodes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("min count", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the minimum exclusive value of each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minExclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("min exclusive", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the minimum inclusive value of each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minInclusive'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("min inclusive", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minLength'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the minimum string length of each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("min length", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#minLength'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#name'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#name'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Human-readable labels for the property in the context of the surrounding shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#name'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#name'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#name'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("name", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#namespace'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#namespace'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The namespace associated with a prefix in a prefix declaration.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#namespace'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#namespace'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#namespace'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("namespace", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#namespace'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#anyURI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#node'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#node'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the node shape that all value nodes must conform to.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#node'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#node'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("node", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#node'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#NodeShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the node kind (e.g. IRI or literal) each value node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("node kind", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeKind'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#NodeKind'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The validator(s) used to evaluate a constraint in the context of a node shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("shape validator", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodeValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodes'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The node expression producing the input nodes of a filter shape expression.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#nodes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("nodes", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#not'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#not'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a shape that the value nodes must not conform to.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#not'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#not'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("not", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#not'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#object'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#object'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("An expression producing the nodes that shall be inferred as objects.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#object'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#object'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#object'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("object", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (single) value of this property represents a path that is matched one or more times.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("one or more path", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#oneOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Indicates whether a parameter is optional.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("optional", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#optional'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#or'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#or'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a list of shapes so that the value nodes must conform to at least one of the shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#or'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#or'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("or", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#or'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#order'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#order'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the relative order of this compared to its siblings. For example use 0 for the first, 1 for the second.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#order'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#order'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("order", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The parameters of a function or constraint component.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Parameterizable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("parameter", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#parameter'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Parameter'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies the property path of a property shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("path", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#path'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#pattern'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#pattern'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a regular expression pattern that the string representations of the value nodes must match.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#pattern'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#pattern'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("pattern", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#pattern'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#predicate'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#predicate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("An expression producing the properties that shall be inferred as predicates.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#predicate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#predicate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#predicate'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("predicate", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefix'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefix'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The prefix of a prefix declaration.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefix'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#PrefixDeclaration'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefix'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefix'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("prefix", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefix'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefixes'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefixes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The prefixes that shall be applied before parsing the associated SPARQL query.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefixes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefixes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefixes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("prefixes", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#prefixes'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#property'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#property'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a shape to its property shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#property'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#property'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#property'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("property", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#property'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#PropertyShape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The validator(s) used to evaluate a constraint in the context of a property shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("property validator", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#propertyValidator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The maximum number of value nodes that can conform to the shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("qualified max count", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMaxCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The minimum number of value nodes that must conform to the shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("qualified min count", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedMinCount'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#integer'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The shape that a specified number of values must conform to.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("qualified value shape", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Can be used to mark the qualified value shape to be disjoint with its sibling shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("qualified value shapes disjoint", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#result'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#result'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The validation results contained in a validation report.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#result'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#result'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#result'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("result", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#result'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#ValidationResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectValidator'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("result annotation", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultAnnotation'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#ResultAnnotation'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Human-readable messages explaining the cause of the result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultMessage'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("result message", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultPath'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultPath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The path of a validation result, based on the path of the validated property shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultPath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultPath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultPath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("result path", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultPath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The severity of the result, e.g. warning.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("result severity", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#resultSeverity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#returnType'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#returnType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The expected type of values returned by the associated function.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#returnType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Function'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#returnType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#returnType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("return type", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#returnType'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#rule'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The rules linked to a shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("rule", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#rule'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Rule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#select'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#select'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The SPARQL SELECT query to execute.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#select'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLSelectExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#select'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#select'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("select", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#select'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#severity'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Defines the severity that validation results produced by a shape must have. Defaults to sh:Violation.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("severity", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#severity'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Severity'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Shapes graphs that should be used when validating this data graph.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("shapes graph", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("If true then the validation engine was certain that the shapes graph has passed all SHACL syntax requirements during the validation process.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ValidationReport'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("shapes graph well-formed", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#shapesGraphWellFormed'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The constraint that was validated when the result was produced.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraint'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("source constraint", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The constraint component that is the source of the result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("source constraint component", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceConstraintComponent'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The shape that is was validated when the result was produced.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("source shape", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sourceShape'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sparql'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sparql'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a shape with SPARQL constraints.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sparql'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sparql'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sparql'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("constraint (in SPARQL)", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#sparql'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLConstraint'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#subject'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#subject'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("An expression producing the resources that shall be inferred as subjects.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#subject'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#TripleRule'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#subject'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#subject'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("subject", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Suggested shapes graphs for this ontology. The values of this property may be used in the absence of specific sh:shapesGraph statements.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("suggested shapes graph", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#suggestedShapesGraph'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2002/07/owl#Ontology'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#target'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a shape to a target specified by an extension language, for example instances of sh:SPARQLTarget.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("target", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#target'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Target'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetClass'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetClass'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a shape to a class, indicating that all instances of the class must conform to the shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetClass'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetClass'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetClass'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("target class", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetClass'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Class'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetNode'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a shape to individual nodes, indicating that these nodes must conform to the shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetNode'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("target node", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a shape to a property, indicating that all all objects of triples that have the given property as their predicate must conform to the shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("target objects of", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetObjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Links a shape to a property, indicating that all subjects of triples that have the given property as their predicate must conform to the shape.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#Shape'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("target subjects of", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#targetSubjectsOf'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#this'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#this'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A node expression that represents the current focus node.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#this'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#this'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("this", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#union'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#union'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("A list of node expressions that shall be used together.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#union'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#union'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("union", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies whether all node values must have a unique (or no) language tag.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("unique languages", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#uniqueLang'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#update'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#update'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The SPARQL UPDATE to execute.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#update'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#SPARQLUpdateExecutable'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#update'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#update'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("update", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#update'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2001/XMLSchema#string'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#validator'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The validator(s) used to evaluate constraints of either node or property shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#ConstraintComponent'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("validator", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#validator'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/ns/shacl#Validator'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#value'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#value'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("An RDF node that has caused the result.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#value'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#domain'), factory.namedNode('http://www.w3.org/ns/shacl#AbstractResult'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#value'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#value'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("value", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#xone'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#xone'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("Specifies a list of shapes so that the value nodes must conform to exactly one of the shapes.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#xone'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#xone'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("exactly one", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#xone'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#List'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (single) value of this property represents a path that is matched zero or more times.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("zero or more path", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrMorePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#comment'), factory.literal("The (single) value of this property represents a path that is matched zero or one times.", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#isDefinedBy'), factory.namedNode('http://www.w3.org/ns/shacl#'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label'), factory.literal("zero or one path", 'en'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(factory.namedNode('http://www.w3.org/ns/shacl#zeroOrOnePath'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#range'), factory.namedNode('http://www.w3.org/2000/01/rdf-schema#Resource'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n0'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'), factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrIRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n0'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'), blankNodes['b0_c14n1'], factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n1'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'), factory.namedNode('http://www.w3.org/ns/shacl#BlankNodeOrLiteral'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n1'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'), blankNodes['b0_c14n5'], factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n2'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'), factory.namedNode('http://www.w3.org/ns/shacl#Literal'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n2'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'), blankNodes['b0_c14n0'], factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n3'], factory.namedNode('http://www.w3.org/ns/shacl#namespace'), factory.literal("http://www.w3.org/ns/shacl#", factory.namedNode('http://www.w3.org/2001/XMLSchema#string')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n3'], factory.namedNode('http://www.w3.org/ns/shacl#prefix'), factory.literal("sh", factory.namedNode('http://www.w3.org/2001/XMLSchema#string')), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n4'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'), factory.namedNode('http://www.w3.org/ns/shacl#IRI'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n4'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'), blankNodes['b0_c14n2'], factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n5'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'), factory.namedNode('http://www.w3.org/ns/shacl#IRIOrLiteral'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n5'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'), factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n6'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first'), factory.namedNode('http://www.w3.org/ns/shacl#BlankNode'), factory.namedNode('http://www.w3.org/ns/shacl#')), factory.quad(blankNodes['b0_c14n6'], factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'), blankNodes['b0_c14n4'], factory.namedNode('http://www.w3.org/ns/shacl#'))];
};

/***/ }),

/***/ 6251:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

__exportStar(__webpack_require__(28507), exports);

__exportStar(__webpack_require__(68138), exports);

__exportStar(__webpack_require__(41878), exports);

__exportStar(__webpack_require__(34447), exports);

__exportStar(__webpack_require__(78352), exports);

__exportStar(__webpack_require__(80481), exports);

/***/ }),

/***/ 28507:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 68138:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 41878:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 34447:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RdfaParser = void 0;

var htmlparser2_1 = __webpack_require__(96124);

var stream_1 = __webpack_require__(57245);

var INITIAL_CONTEXT_XHTML = __webpack_require__(99653);

var INITIAL_CONTEXT = __webpack_require__(43104);

var RdfaProfile_1 = __webpack_require__(78352);

var Util_1 = __webpack_require__(80481);
/**
 * A stream transformer that parses RDFa (text) streams to an {@link RDF.Stream}.
 */


var RdfaParser = /*#__PURE__*/function (_stream_1$Transform) {
  _inherits(RdfaParser, _stream_1$Transform);

  var _super = _createSuper(RdfaParser);

  function RdfaParser(options) {
    var _this;

    _classCallCheck(this, RdfaParser);

    _this = _super.call(this, {
      readableObjectMode: true
    });
    _this.activeTagStack = [];
    options = options || {};
    _this.options = options;
    _this.util = new Util_1.Util(options.dataFactory, options.baseIRI);
    _this.defaultGraph = options.defaultGraph || _this.util.dataFactory.defaultGraph();
    var profile = options.contentType ? Util_1.Util.contentTypeToProfile(options.contentType) : options.profile || '';
    _this.features = options.features || RdfaProfile_1.RDFA_FEATURES[profile];
    _this.htmlParseListener = options.htmlParseListener;
    _this.rdfaPatterns = _this.features.copyRdfaPatterns ? {} : null;
    _this.pendingRdfaPatternCopies = _this.features.copyRdfaPatterns ? {} : null;
    _this.parser = _this.initializeParser(profile === 'xml');

    _this.activeTagStack.push({
      incompleteTriples: [],
      inlist: false,
      language: options.language,
      listMapping: {},
      listMappingLocal: {},
      name: '',
      prefixesAll: Object.assign(Object.assign({}, INITIAL_CONTEXT['@context']), _this.features.xhtmlInitialContext ? INITIAL_CONTEXT_XHTML['@context'] : {}),
      prefixesCustom: {},
      skipElement: false,
      vocab: options.vocab
    });

    return _this;
  }
  /**
   * Parses the given text stream into a quad stream.
   * @param {NodeJS.EventEmitter} stream A text stream.
   * @return {RDF.Stream} A quad stream.
   */


  _createClass(RdfaParser, [{
    key: "import",
    value: function _import(stream) {
      var output = new stream_1.PassThrough({
        readableObjectMode: true
      });
      stream.on('error', function (error) {
        return parsed.emit('error', error);
      });
      stream.on('data', function (data) {
        return output.push(data);
      });
      stream.on('end', function () {
        return output.push(null);
      });
      var parsed = output.pipe(new RdfaParser(this.options));
      return parsed;
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      this.parser.write(chunk);
      callback();
    }
  }, {
    key: "_flush",
    value: function _flush(callback) {
      this.parser.end();
      callback();
    }
  }, {
    key: "onTagOpen",
    value: function onTagOpen(name, attributes) {
      // Determine the parent tag (ignore skipped tags)
      var parentTagI = this.activeTagStack.length - 1;

      while (parentTagI > 0 && this.activeTagStack[parentTagI].skipElement) {
        parentTagI--;
      }

      var parentTag = this.activeTagStack[parentTagI]; // If we skipped a tag, make sure we DO use the lang, prefixes and vocab of the skipped tag

      if (parentTagI !== this.activeTagStack.length - 1) {
        parentTag = Object.assign(Object.assign({}, parentTag), {
          language: this.activeTagStack[this.activeTagStack.length - 1].language,
          prefixesAll: this.activeTagStack[this.activeTagStack.length - 1].prefixesAll,
          prefixesCustom: this.activeTagStack[this.activeTagStack.length - 1].prefixesCustom,
          vocab: this.activeTagStack[this.activeTagStack.length - 1].vocab
        });
      } // Create a new active tag and inherit language scope and baseIRI from parent


      var activeTag = {
        collectChildTags: parentTag.collectChildTags,
        incompleteTriples: [],
        inlist: 'inlist' in attributes,
        listMapping: [],
        listMappingLocal: parentTag.listMapping,
        localBaseIRI: parentTag.localBaseIRI,
        name: name,
        prefixesAll: null,
        prefixesCustom: null,
        skipElement: false
      };
      this.activeTagStack.push(activeTag); // Save the tag contents if needed

      if (activeTag.collectChildTags) {
        // Add explicitly defined xmlns, xmlns:* and prefixes to attributes, as required by the spec (Step 11, note)
        // Sort prefixes alphabetically for deterministic namespace declaration order
        var _iterator = _createForOfIteratorHelper(Object.keys(parentTag.prefixesCustom).sort()),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var prefix = _step.value;
            var suffix = parentTag.prefixesCustom[prefix];
            var attributeKey = prefix === '' ? 'xmlns' : 'xmlns:' + prefix;

            if (!(attributeKey in attributes)) {
              attributes[attributeKey] = suffix;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var attributesSerialized = Object.keys(attributes).map(function (key) {
          return "".concat(key, "=\"").concat(attributes[key], "\"");
        }).join(' ');
        activeTag.text = ["<".concat(name).concat(attributesSerialized ? ' ' + attributesSerialized : '', ">")];

        if (this.features.skipHandlingXmlLiteralChildren) {
          return;
        }
      }

      var allowTermsInRelPredicates = true;
      var allowTermsInRevPredicates = true;

      if (this.features.onlyAllowUriRelRevIfProperty) {
        // Ignore illegal rel/rev values when property is present
        if ('property' in attributes && 'rel' in attributes) {
          allowTermsInRelPredicates = false;

          if (attributes.rel.indexOf(':') < 0) {
            delete attributes.rel;
          }
        }

        if ('property' in attributes && 'rev' in attributes) {
          allowTermsInRevPredicates = false;

          if (attributes.rev.indexOf(':') < 0) {
            delete attributes.rev;
          }
        }
      }

      if (this.features.copyRdfaPatterns) {
        // Save the tag if needed
        if (parentTag.collectedPatternTag) {
          var patternTag = {
            attributes: attributes,
            children: [],
            name: name,
            referenced: false,
            rootPattern: false,
            text: []
          };
          parentTag.collectedPatternTag.children.push(patternTag);
          activeTag.collectedPatternTag = patternTag;
          return;
        } // Store tags with type rdfa:Pattern as patterns


        if (attributes["typeof"] === 'rdfa:Pattern') {
          activeTag.collectedPatternTag = {
            attributes: attributes,
            children: [],
            name: name,
            parentTag: parentTag,
            referenced: false,
            rootPattern: true,
            text: []
          };
          return;
        } // Instantiate patterns on rdfa:copy


        if (attributes.property === 'rdfa:copy') {
          var copyTargetPatternId = attributes.resource || attributes.href || attributes.src;

          if (this.rdfaPatterns[copyTargetPatternId]) {
            this.emitPatternCopy(parentTag, this.rdfaPatterns[copyTargetPatternId], copyTargetPatternId);
          } else {
            if (!this.pendingRdfaPatternCopies[copyTargetPatternId]) {
              this.pendingRdfaPatternCopies[copyTargetPatternId] = [];
            }

            this.pendingRdfaPatternCopies[copyTargetPatternId].push(parentTag);
          }

          return;
        }
      } // <base> tags override the baseIRI of the whole document


      if (this.features.baseTag && name === 'base' && attributes.href) {
        this.util.baseIRI = this.util.getBaseIRI(attributes.href);
      } // xml:base attributes override the baseIRI of the current tag and children


      if (this.features.xmlBase && attributes['xml:base']) {
        activeTag.localBaseIRI = this.util.getBaseIRI(attributes['xml:base']);
      } // <time> tags set an initial datatype


      if (this.features.timeTag && name === 'time' && !attributes.datatype) {
        activeTag.interpretObjectAsTime = true;
      } // Processing based on https://www.w3.org/TR/rdfa-core/#s_rdfaindetail
      // 1: initialize values


      var newSubject;
      var currentObjectResource;
      var typedResource; // 2: handle vocab attribute to set active vocabulary
      // Vocab sets the active vocabulary

      if ('vocab' in attributes) {
        if (attributes.vocab) {
          activeTag.vocab = attributes.vocab;
          this.emitTriple(this.util.getBaseIriTerm(activeTag), this.util.dataFactory.namedNode(Util_1.Util.RDFA + 'usesVocabulary'), this.util.dataFactory.namedNode(activeTag.vocab));
        } else {
          // If vocab is set to '', then we fallback to the root vocab as defined via the parser constructor
          activeTag.vocab = this.activeTagStack[0].vocab;
        }
      } else {
        activeTag.vocab = parentTag.vocab;
      } // 3: handle prefixes


      activeTag.prefixesCustom = Util_1.Util.parsePrefixes(attributes, parentTag.prefixesCustom, this.features.xmlnsPrefixMappings);
      activeTag.prefixesAll = Object.keys(activeTag.prefixesCustom).length > 0 ? Object.assign(Object.assign({}, parentTag.prefixesAll), activeTag.prefixesCustom) : parentTag.prefixesAll; // Handle role attribute

      if (this.features.roleAttribute && attributes.role) {
        var roleSubject = attributes.id ? this.util.createIri('#' + attributes.id, activeTag, false, false, false) : this.util.createBlankNode(); // Temporarily override vocab

        var vocabOld = activeTag.vocab;
        activeTag.vocab = 'http://www.w3.org/1999/xhtml/vocab#';

        var _iterator2 = _createForOfIteratorHelper(this.util.createVocabIris(attributes.role, activeTag, true, false)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var role = _step2.value;
            this.emitTriple(roleSubject, this.util.dataFactory.namedNode('http://www.w3.org/1999/xhtml/vocab#role'), role);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        activeTag.vocab = vocabOld;
      } // 4: handle language
      // Save language attribute value in active tag


      if ('xml:lang' in attributes || this.features.langAttribute && 'lang' in attributes) {
        activeTag.language = attributes['xml:lang'] || attributes.lang;
      } else {
        activeTag.language = parentTag.language;
      }

      var isRootTag = this.activeTagStack.length === 2;

      if (!('rel' in attributes) && !('rev' in attributes)) {
        // 5: Determine the new subject when rel and rev are not present
        if ('property' in attributes && !('content' in attributes) && !('datatype' in attributes)) {
          // 5.1: property is present, but not content and datatype
          // Determine new subject
          if ('about' in attributes) {
            newSubject = this.util.createIri(attributes.about, activeTag, false, true, true);
            activeTag.explicitNewSubject = !!newSubject;
          } else if (isRootTag) {
            newSubject = true;
          } else if (parentTag.object) {
            newSubject = parentTag.object;
          } // Determine type


          if ('typeof' in attributes) {
            if ('about' in attributes) {
              typedResource = this.util.createIri(attributes.about, activeTag, false, true, true);
            }

            if (!typedResource && isRootTag) {
              typedResource = true;
            }

            if (!typedResource && 'resource' in attributes) {
              typedResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
            }

            if (!typedResource && ('href' in attributes || 'src' in attributes)) {
              typedResource = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
            }

            if (!typedResource && this.isInheritSubjectInHeadBody(name)) {
              typedResource = newSubject;
            }

            if (!typedResource) {
              typedResource = this.util.createBlankNode();
            }

            currentObjectResource = typedResource;
          }
        } else {
          // 5.2
          if ('about' in attributes || 'resource' in attributes) {
            newSubject = this.util.createIri(attributes.about || attributes.resource, activeTag, false, true, true);
            activeTag.explicitNewSubject = !!newSubject;
          }

          if (!newSubject && ('href' in attributes || 'src' in attributes)) {
            newSubject = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
            activeTag.explicitNewSubject = !!newSubject;
          }

          if (!newSubject) {
            if (isRootTag) {
              newSubject = true;
            } else if (this.isInheritSubjectInHeadBody(name)) {
              newSubject = parentTag.object;
            } else if ('typeof' in attributes) {
              newSubject = this.util.createBlankNode();
              activeTag.explicitNewSubject = true;
            } else if (parentTag.object) {
              newSubject = parentTag.object;

              if (!('property' in attributes)) {
                activeTag.skipElement = true;
              }
            }
          } // Determine type


          if ('typeof' in attributes) {
            typedResource = newSubject;
          }
        }
      } else {
        // either rel or rev is present
        // 6: Determine the new subject when rel or rev are present
        // Define new subject
        if ('about' in attributes) {
          newSubject = this.util.createIri(attributes.about, activeTag, false, true, true);
          activeTag.explicitNewSubject = !!newSubject;

          if ('typeof' in attributes) {
            typedResource = newSubject;
          }
        } else if (isRootTag) {
          newSubject = true;
        } else if (parentTag.object) {
          newSubject = parentTag.object;
        } // Define object


        if ('resource' in attributes) {
          currentObjectResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
        }

        if (!currentObjectResource) {
          if ('href' in attributes || 'src' in attributes) {
            currentObjectResource = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
          } else if ('typeof' in attributes && !('about' in attributes) && !this.isInheritSubjectInHeadBody(name)) {
            currentObjectResource = this.util.createBlankNode();
          }
        } // Set typed resource


        if ('typeof' in attributes && !('about' in attributes)) {
          if (this.isInheritSubjectInHeadBody(name)) {
            typedResource = newSubject;
          } else {
            typedResource = currentObjectResource;
          }
        }
      } // 7: If a typed resource was defined, emit it as a triple


      if (typedResource) {
        var _iterator3 = _createForOfIteratorHelper(this.util.createVocabIris(attributes["typeof"], activeTag, true, true)),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var type = _step3.value;
            this.emitTriple(this.util.getResourceOrBaseIri(typedResource, activeTag), this.util.dataFactory.namedNode(Util_1.Util.RDF + 'type'), type);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      } // 8: Reset list mapping if we have a new subject


      if (newSubject) {
        activeTag.listMapping = {};
      } // 9: If an object was defined, emit triples for it


      if (currentObjectResource) {
        // Handle list mapping
        if ('rel' in attributes && 'inlist' in attributes) {
          var _iterator4 = _createForOfIteratorHelper(this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var predicate = _step4.value;
              this.addListMapping(activeTag, newSubject, predicate, currentObjectResource);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        } // Determine predicates using rel or rev (unless rel and inlist are present)


        if (!('rel' in attributes && 'inlist' in attributes)) {
          if ('rel' in attributes) {
            var _iterator5 = _createForOfIteratorHelper(this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var _predicate = _step5.value;
                this.emitTriple(this.util.getResourceOrBaseIri(newSubject, activeTag), _predicate, this.util.getResourceOrBaseIri(currentObjectResource, activeTag));
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }

          if ('rev' in attributes) {
            var _iterator6 = _createForOfIteratorHelper(this.util.createVocabIris(attributes.rev, activeTag, allowTermsInRevPredicates, false)),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var _predicate2 = _step6.value;
                this.emitTriple(this.util.getResourceOrBaseIri(currentObjectResource, activeTag), _predicate2, this.util.getResourceOrBaseIri(newSubject, activeTag));
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }
        }
      } // 10: Store incomplete triples if we don't have an object, but we do have predicates


      if (!currentObjectResource) {
        if ('rel' in attributes) {
          if ('inlist' in attributes) {
            var _iterator7 = _createForOfIteratorHelper(this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var _predicate3 = _step7.value;
                this.addListMapping(activeTag, newSubject, _predicate3, null);
                activeTag.incompleteTriples.push({
                  predicate: _predicate3,
                  reverse: false,
                  list: true
                });
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          } else {
            var _iterator8 = _createForOfIteratorHelper(this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var _predicate4 = _step8.value;
                activeTag.incompleteTriples.push({
                  predicate: _predicate4,
                  reverse: false
                });
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }
        }

        if ('rev' in attributes) {
          var _iterator9 = _createForOfIteratorHelper(this.util.createVocabIris(attributes.rev, activeTag, allowTermsInRevPredicates, false)),
              _step9;

          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var _predicate5 = _step9.value;
              activeTag.incompleteTriples.push({
                predicate: _predicate5,
                reverse: true
              });
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
        } // Set a blank node object, so the children can make use of this when completing the triples


        if (activeTag.incompleteTriples.length > 0) {
          currentObjectResource = this.util.createBlankNode();
        }
      } // 11: Determine current property value


      if ('property' in attributes) {
        // Create predicates
        activeTag.predicates = this.util.createVocabIris(attributes.property, activeTag, true, false); // Save datatype attribute value in active tag

        var localObjectResource;

        if ('datatype' in attributes) {
          activeTag.datatype = this.util.createIri(attributes.datatype, activeTag, true, true, false);

          if (activeTag.datatype && (activeTag.datatype.value === Util_1.Util.RDF + 'XMLLiteral' || this.features.htmlDatatype && activeTag.datatype.value === Util_1.Util.RDF + 'HTML')) {
            activeTag.collectChildTags = true;
          }
        } else {
          // Try to determine resource
          if (!('rev' in attributes) && !('rel' in attributes) && !('content' in attributes)) {
            if ('resource' in attributes) {
              localObjectResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
            }

            if (!localObjectResource && 'href' in attributes) {
              localObjectResource = this.util.createIri(attributes.href, activeTag, false, false, true);
            }

            if (!localObjectResource && 'src' in attributes) {
              localObjectResource = this.util.createIri(attributes.src, activeTag, false, false, true);
            }
          }

          if ('typeof' in attributes && !('about' in attributes)) {
            localObjectResource = typedResource;
          }
        }

        if ('content' in attributes) {
          // Emit triples based on content attribute has preference over text content
          var object = this.util.createLiteral(attributes.content, activeTag);

          if ('inlist' in attributes) {
            var _iterator10 = _createForOfIteratorHelper(activeTag.predicates),
                _step10;

            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var _predicate6 = _step10.value;
                this.addListMapping(activeTag, newSubject, _predicate6, object);
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          } else {
            var subject = this.util.getResourceOrBaseIri(newSubject, activeTag);

            var _iterator11 = _createForOfIteratorHelper(activeTag.predicates),
                _step11;

            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var _predicate7 = _step11.value;
                this.emitTriple(subject, _predicate7, object);
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
          } // Unset predicate to avoid text contents to produce new triples


          activeTag.predicates = null;
        } else if (this.features.datetimeAttribute && 'datetime' in attributes) {
          activeTag.interpretObjectAsTime = true; // Datetime attribute on time tag has preference over text content

          var _object = this.util.createLiteral(attributes.datetime, activeTag);

          if ('inlist' in attributes) {
            var _iterator12 = _createForOfIteratorHelper(activeTag.predicates),
                _step12;

            try {
              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                var _predicate8 = _step12.value;
                this.addListMapping(activeTag, newSubject, _predicate8, _object);
              }
            } catch (err) {
              _iterator12.e(err);
            } finally {
              _iterator12.f();
            }
          } else {
            var _subject = this.util.getResourceOrBaseIri(newSubject, activeTag);

            var _iterator13 = _createForOfIteratorHelper(activeTag.predicates),
                _step13;

            try {
              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                var _predicate9 = _step13.value;
                this.emitTriple(_subject, _predicate9, _object);
              }
            } catch (err) {
              _iterator13.e(err);
            } finally {
              _iterator13.f();
            }
          } // Unset predicate to avoid text contents to produce new triples


          activeTag.predicates = null;
        } else if (localObjectResource) {
          // Emit triples for all resource objects
          var _object2 = this.util.getResourceOrBaseIri(localObjectResource, activeTag);

          if ('inlist' in attributes) {
            var _iterator14 = _createForOfIteratorHelper(activeTag.predicates),
                _step14;

            try {
              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                var _predicate10 = _step14.value;
                this.addListMapping(activeTag, newSubject, _predicate10, _object2);
              }
            } catch (err) {
              _iterator14.e(err);
            } finally {
              _iterator14.f();
            }
          } else {
            var _subject2 = this.util.getResourceOrBaseIri(newSubject, activeTag);

            var _iterator15 = _createForOfIteratorHelper(activeTag.predicates),
                _step15;

            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var _predicate11 = _step15.value;
                this.emitTriple(_subject2, _predicate11, _object2);
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }
          } // Unset predicate to avoid text contents to produce new triples


          activeTag.predicates = null;
        }
      } // 12: Complete incomplete triples


      var incompleteTriplesCompleted = false;

      if (!activeTag.skipElement && newSubject && parentTag.incompleteTriples.length > 0) {
        incompleteTriplesCompleted = true;

        var _subject3 = this.util.getResourceOrBaseIri(parentTag.subject, activeTag);

        var _object3 = this.util.getResourceOrBaseIri(newSubject, activeTag);

        var _iterator16 = _createForOfIteratorHelper(parentTag.incompleteTriples),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var incompleteTriple = _step16.value;

            if (!incompleteTriple.reverse) {
              if (incompleteTriple.list) {
                // Find the active tag that defined the list by going up the stack
                var firstInListTag = null;

                for (var i = this.activeTagStack.length - 1; i >= 0; i--) {
                  if (this.activeTagStack[i].inlist) {
                    firstInListTag = this.activeTagStack[i];
                    break;
                  }
                } // firstInListTag is guaranteed to be non-null


                this.addListMapping(firstInListTag, newSubject, incompleteTriple.predicate, _object3);
              } else {
                this.emitTriple(_subject3, incompleteTriple.predicate, _object3);
              }
            } else {
              this.emitTriple(_object3, incompleteTriple.predicate, _subject3);
            }
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
      }

      if (!incompleteTriplesCompleted && parentTag.incompleteTriples.length > 0) {
        activeTag.incompleteTriples = activeTag.incompleteTriples.concat(parentTag.incompleteTriples);
      } // 13: Save evaluation context into active tag


      activeTag.subject = newSubject || parentTag.subject;
      activeTag.object = currentObjectResource || newSubject;
    }
  }, {
    key: "onText",
    value: function onText(data) {
      var activeTag = this.activeTagStack[this.activeTagStack.length - 1]; // Collect text in pattern tag if needed

      if (this.features.copyRdfaPatterns && activeTag.collectedPatternTag) {
        activeTag.collectedPatternTag.text.push(data);
        return;
      } // Save the text inside the active tag


      if (!activeTag.text) {
        activeTag.text = [];
      }

      activeTag.text.push(data);
    }
  }, {
    key: "onTagClose",
    value: function onTagClose() {
      var _this2 = this;

      // Get the active tag
      var activeTag = this.activeTagStack[this.activeTagStack.length - 1];
      var parentTag = this.activeTagStack[this.activeTagStack.length - 2];

      if (!(activeTag.collectChildTags && parentTag.collectChildTags && this.features.skipHandlingXmlLiteralChildren)) {
        // If we detect a finalized rdfa:Pattern tag, store it
        if (this.features.copyRdfaPatterns && activeTag.collectedPatternTag && activeTag.collectedPatternTag.rootPattern) {
          var patternId = activeTag.collectedPatternTag.attributes.resource; // Remove resource and typeof attributes to avoid it being seen as a new pattern

          delete activeTag.collectedPatternTag.attributes.resource;
          delete activeTag.collectedPatternTag.attributes["typeof"]; // Store the pattern

          this.rdfaPatterns[patternId] = activeTag.collectedPatternTag; // Apply all pending copies for this pattern

          if (this.pendingRdfaPatternCopies[patternId]) {
            var _iterator17 = _createForOfIteratorHelper(this.pendingRdfaPatternCopies[patternId]),
                _step17;

            try {
              for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                var tag = _step17.value;
                this.emitPatternCopy(tag, activeTag.collectedPatternTag, patternId);
              }
            } catch (err) {
              _iterator17.e(err);
            } finally {
              _iterator17.f();
            }

            delete this.pendingRdfaPatternCopies[patternId];
          } // Remove the active tag from the stack


          this.activeTagStack.pop();
          return;
        } // Emit all triples that were determined in the active tag


        if (activeTag.predicates) {
          var subject = this.util.getResourceOrBaseIri(activeTag.subject, activeTag);
          var textSegments = activeTag.text || [];

          if (activeTag.collectChildTags && parentTag.collectChildTags) {
            // If we are inside an XMLLiteral child that also has RDFa content, ignore the tag name that was collected.
            textSegments = textSegments.slice(1);
          }

          var object = this.util.createLiteral(textSegments.join(''), activeTag);

          if (activeTag.inlist) {
            var _iterator18 = _createForOfIteratorHelper(activeTag.predicates),
                _step18;

            try {
              for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                var predicate = _step18.value;
                this.addListMapping(activeTag, subject, predicate, object);
              }
            } catch (err) {
              _iterator18.e(err);
            } finally {
              _iterator18.f();
            }
          } else {
            var _iterator19 = _createForOfIteratorHelper(activeTag.predicates),
                _step19;

            try {
              for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                var _predicate12 = _step19.value;
                this.emitTriple(subject, _predicate12, object);
              }
            } catch (err) {
              _iterator19.e(err);
            } finally {
              _iterator19.f();
            }
          } // Reset text, unless the parent is also collecting text


          if (!parentTag.predicates) {
            activeTag.text = null;
          }
        } // 14: Handle local list mapping


        if (activeTag.object && Object.keys(activeTag.listMapping).length > 0) {
          var _subject4 = this.util.getResourceOrBaseIri(activeTag.object, activeTag);

          for (var predicateValue in activeTag.listMapping) {
            var _predicate13 = this.util.dataFactory.namedNode(predicateValue);

            var values = activeTag.listMapping[predicateValue];

            if (values.length > 0) {
              // Non-empty list, emit linked list of rdf:first and rdf:rest chains
              var bnodes = values.map(function () {
                return _this2.util.createBlankNode();
              });

              for (var i = 0; i < values.length; i++) {
                var _object4 = this.util.getResourceOrBaseIri(values[i], activeTag);

                this.emitTriple(bnodes[i], this.util.dataFactory.namedNode(Util_1.Util.RDF + 'first'), _object4);
                this.emitTriple(bnodes[i], this.util.dataFactory.namedNode(Util_1.Util.RDF + 'rest'), i < values.length - 1 ? bnodes[i + 1] : this.util.dataFactory.namedNode(Util_1.Util.RDF + 'nil'));
              } // Emit triple for the first linked list chain


              this.emitTriple(_subject4, _predicate13, bnodes[0]);
            } else {
              // Empty list, just emit rdf:nil
              this.emitTriple(_subject4, _predicate13, this.util.dataFactory.namedNode(Util_1.Util.RDF + 'nil'));
            }
          }
        }
      } // Remove the active tag from the stack


      this.activeTagStack.pop(); // Save the tag contents if needed

      if (activeTag.collectChildTags && activeTag.text) {
        activeTag.text.push("</".concat(activeTag.name, ">"));
      } // If we still have text contents, try to append it to the parent tag


      if (activeTag.text && parentTag) {
        if (!parentTag.text) {
          parentTag.text = activeTag.text;
        } else {
          parentTag.text = parentTag.text.concat(activeTag.text);
        }
      }
    }
  }, {
    key: "onEnd",
    value: function onEnd() {
      if (this.features.copyRdfaPatterns) {
        this.features.copyRdfaPatterns = false; // Emit all unreferenced patterns

        for (var patternId in this.rdfaPatterns) {
          var pattern = this.rdfaPatterns[patternId];

          if (!pattern.referenced) {
            pattern.attributes["typeof"] = 'rdfa:Pattern';
            pattern.attributes.resource = patternId;
            this.emitPatternCopy(pattern.parentTag, pattern, patternId);
            pattern.referenced = false;
            delete pattern.attributes["typeof"];
            delete pattern.attributes.resource;
          }
        } // Emit all unreferenced copy links


        for (var _patternId in this.pendingRdfaPatternCopies) {
          var _iterator20 = _createForOfIteratorHelper(this.pendingRdfaPatternCopies[_patternId]),
              _step20;

          try {
            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
              var parentTag = _step20.value;
              this.activeTagStack.push(parentTag);
              this.onTagOpen('link', {
                property: 'rdfa:copy',
                href: _patternId
              });
              this.onTagClose();
              this.activeTagStack.pop();
            }
          } catch (err) {
            _iterator20.e(err);
          } finally {
            _iterator20.f();
          }
        }

        this.features.copyRdfaPatterns = true;
      }
    }
    /**
     * If the new subject can be inherited from the parent object
     * if the resource defines no new subject.
     * @param {string} name The current tag name.
     * @returns {boolean} If the subject can be inherited.
     */

  }, {
    key: "isInheritSubjectInHeadBody",
    value: function isInheritSubjectInHeadBody(name) {
      return this.features.inheritSubjectInHeadBody && (name === 'head' || name === 'body');
    }
    /**
     * Add a list mapping for the given predicate and object in the active tag.
     * @param {IActiveTag} activeTag The active tag.
     * @param {Term | boolean} subject A subject term, this will only be used to create a separate list
     *                                 if activeTag.explicitNewSubject is true.
     * @param {Term} predicate A predicate term.
     * @param {Term | boolean} currentObjectResource The current object resource.
     */

  }, {
    key: "addListMapping",
    value: function addListMapping(activeTag, subject, predicate, currentObjectResource) {
      if (activeTag.explicitNewSubject) {
        var bNode = this.util.createBlankNode();
        this.emitTriple(this.util.getResourceOrBaseIri(subject, activeTag), predicate, bNode);
        this.emitTriple(bNode, this.util.dataFactory.namedNode(Util_1.Util.RDF + 'first'), this.util.getResourceOrBaseIri(currentObjectResource, activeTag));
        this.emitTriple(bNode, this.util.dataFactory.namedNode(Util_1.Util.RDF + 'rest'), this.util.dataFactory.namedNode(Util_1.Util.RDF + 'nil'));
      } else {
        var predicateList = activeTag.listMappingLocal[predicate.value];

        if (!predicateList) {
          activeTag.listMappingLocal[predicate.value] = predicateList = [];
        }

        if (currentObjectResource) {
          predicateList.push(currentObjectResource);
        }
      }
    }
    /**
     * Emit the given triple to the stream.
     * @param {Term} subject A subject term.
     * @param {Term} predicate A predicate term.
     * @param {Term} object An object term.
     */

  }, {
    key: "emitTriple",
    value: function emitTriple(subject, predicate, object) {
      // Validate IRIs
      if (subject.termType === 'NamedNode' && subject.value.indexOf(':') < 0 || predicate.termType === 'NamedNode' && predicate.value.indexOf(':') < 0 || object.termType === 'NamedNode' && object.value.indexOf(':') < 0) {
        return;
      }

      this.push(this.util.dataFactory.quad(subject, predicate, object, this.defaultGraph));
    }
    /**
     * Emit an instantiation of the given pattern with the given parent tag.
     * @param {IActiveTag} parentTag The parent tag to instantiate in.
     * @param {IRdfaPattern} pattern The pattern to instantiate.
     * @param {string} rootPatternId The pattern id.
     */

  }, {
    key: "emitPatternCopy",
    value: function emitPatternCopy(parentTag, pattern, rootPatternId) {
      var _this3 = this;

      this.activeTagStack.push(parentTag);
      pattern.referenced = true; // Ensure that blank nodes within patterns are instantiated only once.
      // All next pattern copies will reuse the instantiated blank nodes from the first pattern.

      if (!pattern.constructedBlankNodes) {
        pattern.constructedBlankNodes = [];

        this.util.blankNodeFactory = function () {
          var bNode = _this3.util.dataFactory.blankNode();

          pattern.constructedBlankNodes.push(bNode);
          return bNode;
        };
      } else {
        var blankNodeIndex = 0;

        this.util.blankNodeFactory = function () {
          return pattern.constructedBlankNodes[blankNodeIndex++];
        };
      } // Apply everything within the pattern


      this.emitPatternCopyAbsolute(pattern, true, rootPatternId);
      this.util.blankNodeFactory = null;
      this.activeTagStack.pop();
    }
    /**
     * Emit an instantiation of the given pattern with the given parent tag.
     *
     * This should probably not be called directly,
     * call {@link emitPatternCopy} instead.
     *
     * @param {IRdfaPattern} pattern The pattern to instantiate.
     * @param {boolean} root If this is the root call for the given pattern.
     * @param {string} rootPatternId The pattern id.
     */

  }, {
    key: "emitPatternCopyAbsolute",
    value: function emitPatternCopyAbsolute(pattern, root, rootPatternId) {
      // Stop on detection of cyclic patterns
      if (!root && pattern.attributes.property === 'rdfa:copy' && pattern.attributes.href === rootPatternId) {
        return;
      }

      this.onTagOpen(pattern.name, pattern.attributes);

      var _iterator21 = _createForOfIteratorHelper(pattern.text),
          _step21;

      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var text = _step21.value;
          this.onText(text);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }

      var _iterator22 = _createForOfIteratorHelper(pattern.children),
          _step22;

      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var child = _step22.value;
          this.emitPatternCopyAbsolute(child, false, rootPatternId);
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }

      this.onTagClose();
    }
  }, {
    key: "initializeParser",
    value: function initializeParser(xmlMode) {
      var _this4 = this;

      return new htmlparser2_1.Parser({
        onclosetag: function onclosetag() {
          try {
            _this4.onTagClose();

            if (_this4.htmlParseListener) {
              _this4.htmlParseListener.onTagClose();
            }
          } catch (e) {
            _this4.emit('error', e);
          }
        },
        onend: function onend() {
          try {
            _this4.onEnd();

            if (_this4.htmlParseListener) {
              _this4.htmlParseListener.onEnd();
            }
          } catch (e) {
            _this4.emit('error', e);
          }
        },
        onopentag: function onopentag(name, attributes) {
          try {
            _this4.onTagOpen(name, attributes);

            if (_this4.htmlParseListener) {
              _this4.htmlParseListener.onTagOpen(name, attributes);
            }
          } catch (e) {
            _this4.emit('error', e);
          }
        },
        ontext: function ontext(data) {
          try {
            _this4.onText(data);

            if (_this4.htmlParseListener) {
              _this4.htmlParseListener.onText(data);
            }
          } catch (e) {
            _this4.emit('error', e);
          }
        }
      }, {
        decodeEntities: true,
        recognizeSelfClosing: true,
        xmlMode: xmlMode
      });
    }
  }]);

  return RdfaParser;
}(stream_1.Transform);

exports.RdfaParser = RdfaParser;

/***/ }),

/***/ 78352:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RDFA_CONTENTTYPES = exports.RDFA_FEATURES = void 0;
/**
 * A mapping of RDFa profile to a features object.
 */
// tslint:disable:object-literal-sort-keys

exports.RDFA_FEATURES = {
  '': {
    baseTag: true,
    xmlBase: true,
    langAttribute: true,
    onlyAllowUriRelRevIfProperty: true,
    inheritSubjectInHeadBody: true,
    datetimeAttribute: true,
    timeTag: true,
    htmlDatatype: true,
    copyRdfaPatterns: true,
    xmlnsPrefixMappings: true,
    xhtmlInitialContext: true,
    roleAttribute: true
  },
  'core': {
    baseTag: false,
    xmlBase: false,
    langAttribute: true,
    onlyAllowUriRelRevIfProperty: true,
    inheritSubjectInHeadBody: false,
    datetimeAttribute: false,
    timeTag: false,
    htmlDatatype: false,
    copyRdfaPatterns: true,
    xmlnsPrefixMappings: true,
    xhtmlInitialContext: false,
    roleAttribute: false
  },
  'html': {
    baseTag: true,
    xmlBase: false,
    langAttribute: true,
    onlyAllowUriRelRevIfProperty: true,
    inheritSubjectInHeadBody: true,
    datetimeAttribute: true,
    timeTag: true,
    htmlDatatype: true,
    copyRdfaPatterns: true,
    xmlnsPrefixMappings: true,
    xhtmlInitialContext: false,
    roleAttribute: true
  },
  'xhtml': {
    baseTag: true,
    xmlBase: false,
    langAttribute: true,
    onlyAllowUriRelRevIfProperty: true,
    inheritSubjectInHeadBody: true,
    datetimeAttribute: true,
    timeTag: true,
    htmlDatatype: true,
    copyRdfaPatterns: true,
    xmlnsPrefixMappings: true,
    xhtmlInitialContext: true,
    roleAttribute: true
  },
  'xml': {
    baseTag: false,
    xmlBase: true,
    langAttribute: true,
    onlyAllowUriRelRevIfProperty: false,
    inheritSubjectInHeadBody: false,
    datetimeAttribute: true,
    timeTag: true,
    htmlDatatype: false,
    copyRdfaPatterns: false,
    xmlnsPrefixMappings: true,
    xhtmlInitialContext: false,
    roleAttribute: true
  }
}; // tslint:enable:object-literal-sort-keys
// tslint:disable:object-literal-sort-keys

exports.RDFA_CONTENTTYPES = {
  // HTML
  'text/html': 'html',
  // XHTML
  'application/xhtml+xml': 'xhtml',
  // XML
  'application/xml': 'xml',
  'text/xml': 'xml',
  'image/svg+xml': 'xml'
}; // tslint:enable:object-literal-sort-keys

/***/ }),

/***/ 80481:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Util = void 0;

var relative_to_absolute_iri_1 = __webpack_require__(87723);

var RdfaProfile_1 = __webpack_require__(78352);

var rdf_data_factory_1 = __webpack_require__(4826);
/**
 * A collection of utility functions.
 */


var Util = /*#__PURE__*/function () {
  function Util(dataFactory, baseIRI) {
    _classCallCheck(this, Util);

    this.dataFactory = dataFactory || new rdf_data_factory_1.DataFactory();
    this.baseIRI = this.dataFactory.namedNode(baseIRI || '');
    this.baseIRIDocument = this.baseIRI;
  }
  /**
   * Retrieve the prefixes of the current tag's attributes.
   * @param {{[p: string]: string}} attributes A tag's attributes.
   * @param {{[p: string]: string}} parentPrefixes The prefixes from the parent tag.
   * @param {boolean} xmlnsPrefixMappings If prefixes should be extracted from xmlnsPrefixMappings.
   * @return {{[p: string]: string}} The new prefixes.
   */


  _createClass(Util, [{
    key: "getBaseIRI",

    /**
     * Get the base IRI.
     * @param {string} baseIriValue A base IRI value.
     * @return A base IRI named node.
     */
    value: function getBaseIRI(baseIriValue) {
      var href = baseIriValue;
      var fragmentIndex = href.indexOf('#');

      if (fragmentIndex >= 0) {
        href = href.substr(0, fragmentIndex);
      }

      return this.dataFactory.namedNode(relative_to_absolute_iri_1.resolve(href, this.baseIRI.value));
    }
    /**
     * If the term is a boolean, return the baseIRI, otherwise return the term as-is.
     * @param {Term | boolean} term A term or boolean, where the boolean indicates the baseIRI.
     * @param {IActiveTag} activeTag An active tag.
     * @returns {Term} A term.
     */

  }, {
    key: "getResourceOrBaseIri",
    value: function getResourceOrBaseIri(term, activeTag) {
      return term === true ? this.getBaseIriTerm(activeTag) : term;
    }
    /**
     * Get the active base IRI as an RDF term.
     * @param {IActiveTag} activeTag The active tag.
     * @return {NamedNode} The base IRI term.
     */

  }, {
    key: "getBaseIriTerm",
    value: function getBaseIriTerm(activeTag) {
      return activeTag.localBaseIRI || this.baseIRI;
    }
  }, {
    key: "createVocabIris",
    value: function createVocabIris(terms, activeTag, allowTerms, allowBlankNode) {
      var _this = this;

      return terms.split(/\s+/).filter(function (term) {
        return term && (allowTerms || term.indexOf(':') >= 0);
      }).map(function (property) {
        return _this.createIri(property, activeTag, true, true, allowBlankNode);
      }).filter(function (term) {
        return term != null;
      });
    }
    /**
     * Create a new literal node.
     * @param {string} literal The literal value.
     * @param {IActiveTag} activeTag The current active tag.
     * @return {Literal} A new literal node.
     */

  }, {
    key: "createLiteral",
    value: function createLiteral(literal, activeTag) {
      if (activeTag.interpretObjectAsTime && !activeTag.datatype) {
        var _iterator = _createForOfIteratorHelper(Util.TIME_REGEXES),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;

            if (literal.match(entry.regex)) {
              activeTag.datatype = this.dataFactory.namedNode(Util.XSD + entry.type);
              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return this.dataFactory.literal(literal, activeTag.datatype || activeTag.language);
    }
    /**
     * Create a blank node.
     * @returns {BlankNode} A new blank node.
     */

  }, {
    key: "createBlankNode",
    value: function createBlankNode() {
      if (this.blankNodeFactory) {
        return this.blankNodeFactory();
      }

      return this.dataFactory.blankNode();
    }
  }, {
    key: "createIri",
    value: function createIri(term, activeTag, vocab, allowSafeCurie, allowBlankNode) {
      term = term || '';

      if (!allowSafeCurie) {
        if (!vocab) {
          term = relative_to_absolute_iri_1.resolve(term, this.getBaseIriTerm(activeTag).value);
        }

        if (!Util.isValidIri(term)) {
          return null;
        }

        return this.dataFactory.namedNode(term);
      } // Handle strict CURIEs


      if (term.length > 0 && term[0] === '[' && term[term.length - 1] === ']') {
        term = term.substr(1, term.length - 2); // Strict CURIEs MUST have a prefix separator

        if (term.indexOf(':') < 0) {
          return null;
        }
      } // Handle blank nodes


      if (term.startsWith('_:')) {
        return allowBlankNode ? this.dataFactory.blankNode(term.substr(2) || 'b_identity') : null;
      } // Handle vocab IRIs


      if (vocab) {
        if (activeTag.vocab && term.indexOf(':') < 0) {
          return this.dataFactory.namedNode(activeTag.vocab + term);
        }
      } // Handle prefixed IRIs


      var iri = Util.expandPrefixedTerm(term, activeTag); // Resolve against baseIRI if in base-mode, or if the term was a prefixed relative IRI

      if (!vocab) {
        iri = relative_to_absolute_iri_1.resolve(iri, this.getBaseIriTerm(activeTag).value);
      } else if (term !== iri) {
        iri = relative_to_absolute_iri_1.resolve(iri, this.baseIRIDocument.value);
      }

      if (!Util.isValidIri(iri)) {
        return null;
      }

      return this.dataFactory.namedNode(iri);
    }
  }], [{
    key: "parsePrefixes",
    value: function parsePrefixes(attributes, parentPrefixes, xmlnsPrefixMappings) {
      var additionalPrefixes = {};

      if (xmlnsPrefixMappings) {
        for (var attribute in attributes) {
          if (attribute.startsWith('xmlns')) {
            additionalPrefixes[attribute.substr(6)] = attributes[attribute];
          }
        }
      }

      if (attributes.prefix || Object.keys(additionalPrefixes).length > 0) {
        var prefixes = Object.assign(Object.assign({}, parentPrefixes), additionalPrefixes);

        if (attributes.prefix) {
          var prefixMatch; // tslint:disable-next-line:no-conditional-assignment

          while (prefixMatch = Util.PREFIX_REGEX.exec(attributes.prefix)) {
            prefixes[prefixMatch[1]] = prefixMatch[2];
          }
        }

        return prefixes;
      } else {
        return parentPrefixes;
      }
    }
    /**
     * Expand the given term value based on the given prefixes.
     * @param {string} term A term value.
     * @param {{[p: string]: string}[]} prefixes The available prefixes.
     * @return {string} An expanded URL, or the term as-is.
     */

  }, {
    key: "expandPrefixedTerm",
    value: function expandPrefixedTerm(term, activeTag) {
      // Check if the term is prefixed
      var colonIndex = term.indexOf(':');
      var prefix;
      var local;

      if (colonIndex >= 0) {
        prefix = term.substr(0, colonIndex);
        local = term.substr(colonIndex + 1);
      } // Expand default namespace


      if (prefix === '') {
        return 'http://www.w3.org/1999/xhtml/vocab#' + local;
      } // Try to expand the prefix


      if (prefix) {
        var prefixElement = activeTag.prefixesAll[prefix];

        if (prefixElement) {
          return prefixElement + local;
        }
      } // Try to expand the term


      if (term) {
        var expandedTerm = activeTag.prefixesAll[term.toLocaleLowerCase()];

        if (expandedTerm) {
          return expandedTerm;
        }
      }

      return term;
    }
    /**
     * Check if the given IRI is valid.
     * @param {string} iri A potential IRI.
     * @return {boolean} If the given IRI is valid.
     */

  }, {
    key: "isValidIri",
    value: function isValidIri(iri) {
      return Util.IRI_REGEX.test(iri);
    }
    /**
     * Determine the RDFa profile from the given content type.
     * Defaults to the default RDFa profile (all features enabled) for unknown content types.
     * @param {string} contentType A content type.
     * @returns {RdfaProfile} An RDFa profile.
     */

  }, {
    key: "contentTypeToProfile",
    value: function contentTypeToProfile(contentType) {
      return RdfaProfile_1.RDFA_CONTENTTYPES[contentType] || '';
    }
  }]);

  return Util;
}();

exports.Util = Util;
Util.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
Util.XSD = 'http://www.w3.org/2001/XMLSchema#';
Util.RDFA = 'http://www.w3.org/ns/rdfa#';
Util.PREFIX_REGEX = /\s*([^:\s]*)*:\s*([^\s]*)*\s*/g;
Util.TIME_REGEXES = [{
  regex: /^-?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9])?S)?)?$/,
  type: 'duration'
}, {
  regex: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,
  type: 'dateTime'
}, {
  regex: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/,
  type: 'date'
}, {
  regex: /^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,
  type: 'time'
}, {
  regex: /^[0-9]+-[0-9][0-9]$/,
  type: 'gYearMonth'
}, {
  regex: /^[0-9]+$/,
  type: 'gYear'
}];
Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`]*$/;

/***/ }),

/***/ 79024:
/***/ ((module) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError = /*#__PURE__*/function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.q = codes;

/***/ }),

/***/ 76884:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(6297);

var Writable = __webpack_require__(71471);

__webpack_require__(41736)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

/***/ }),

/***/ 53582:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(99154);

__webpack_require__(41736)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ 6297:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = (__webpack_require__(38291).EventEmitter);

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(37144);
/*</replacement>*/


var Buffer = (__webpack_require__(29033).Buffer);

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(94616);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(25392);

var destroyImpl = __webpack_require__(57572);

var _require = __webpack_require__(6756),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = (__webpack_require__(79024)/* .codes */ .q),
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(41736)(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(76884);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = (__webpack_require__(23462)/* .StringDecoder */ .s);
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(76884);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = (__webpack_require__(23462)/* .StringDecoder */ .s);
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(32317);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(16218);
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}

/***/ }),

/***/ 99154:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = (__webpack_require__(79024)/* .codes */ .q),
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(76884);

__webpack_require__(41736)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),

/***/ 71471:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(96219)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(37144);
/*</replacement>*/


var Buffer = (__webpack_require__(29033).Buffer);

var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(57572);

var _require = __webpack_require__(6756),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = (__webpack_require__(79024)/* .codes */ .q),
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(41736)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(76884);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(76884); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options["final"] === 'function') this._final = options["final"];
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};

/***/ }),

/***/ 32317:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);


var _Object$setPrototypeO;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var finished = __webpack_require__(5831);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this; // if we have detected an error in the meanwhile
    // reject straight away


    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this; // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to


  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;

/***/ }),

/***/ 25392:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var _require = __webpack_require__(29033),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(52361),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),

/***/ 57572:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(19142);
 // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};

/***/ }),

/***/ 5831:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = (__webpack_require__(79024)/* .codes.ERR_STREAM_PREMATURE_CLOSE */ .q.ERR_STREAM_PREMATURE_CLOSE);

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),

/***/ 16218:
/***/ ((module) => {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser');
};

/***/ }),

/***/ 60384:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = (__webpack_require__(79024)/* .codes */ .q),
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(5831);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),

/***/ 6756:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ERR_INVALID_OPT_VALUE = (__webpack_require__(79024)/* .codes.ERR_INVALID_OPT_VALUE */ .q.ERR_INVALID_OPT_VALUE);

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),

/***/ 37144:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(38291).EventEmitter;

/***/ }),

/***/ 86505:
/***/ ((module, exports, __webpack_require__) => {

exports = module.exports = __webpack_require__(6297);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(71471);
exports.Duplex = __webpack_require__(76884);
exports.Transform = __webpack_require__(99154);
exports.PassThrough = __webpack_require__(53582);
exports.finished = __webpack_require__(5831);
exports.pipeline = __webpack_require__(60384);

/***/ }),

/***/ 24037:
/***/ ((module) => {

"use strict";


module.exports = {
  // Output
  ABSOLUTE: "absolute",
  PATH_RELATIVE: "pathRelative",
  ROOT_RELATIVE: "rootRelative",
  SHORTEST: "shortest"
};

/***/ }),

/***/ 80276:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var constants = __webpack_require__(24037);

function formatAuth(urlObj, options) {
  if (urlObj.auth && !options.removeAuth && (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE)) {
    return urlObj.auth + "@";
  }

  return "";
}

function formatHash(urlObj, options) {
  return urlObj.hash ? urlObj.hash : "";
}

function formatHost(urlObj, options) {
  if (urlObj.host.full && (urlObj.extra.relation.maximumAuth || options.output === constants.ABSOLUTE)) {
    return urlObj.host.full;
  }

  return "";
}

function formatPath(urlObj, options) {
  var str = "";
  var absolutePath = urlObj.path.absolute.string;
  var relativePath = urlObj.path.relative.string;
  var resource = showResource(urlObj, options);

  if (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE || options.output === constants.ROOT_RELATIVE) {
    str = absolutePath;
  } else if (relativePath.length <= absolutePath.length && options.output === constants.SHORTEST || options.output === constants.PATH_RELATIVE) {
    str = relativePath;

    if (str === "") {
      var query = showQuery(urlObj, options) && !!getQuery(urlObj, options);

      if (urlObj.extra.relation.maximumPath && !resource) {
        str = "./";
      } else if (urlObj.extra.relation.overridesQuery && !resource && !query) {
        str = "./";
      }
    }
  } else {
    str = absolutePath;
  }

  if (str === "/" && !resource && options.removeRootTrailingSlash && (!urlObj.extra.relation.minimumPort || options.output === constants.ABSOLUTE)) {
    str = "";
  }

  return str;
}

function formatPort(urlObj, options) {
  if (urlObj.port && !urlObj.extra.portIsDefault && urlObj.extra.relation.maximumHost) {
    return ":" + urlObj.port;
  }

  return "";
}

function formatQuery(urlObj, options) {
  return showQuery(urlObj, options) ? getQuery(urlObj, options) : "";
}

function formatResource(urlObj, options) {
  return showResource(urlObj, options) ? urlObj.resource : "";
}

function formatScheme(urlObj, options) {
  var str = "";

  if (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE) {
    if (!urlObj.extra.relation.minimumScheme || !options.schemeRelative || options.output === constants.ABSOLUTE) {
      str += urlObj.scheme + "://";
    } else {
      str += "//";
    }
  }

  return str;
}

function formatUrl(urlObj, options) {
  var url = "";
  url += formatScheme(urlObj, options);
  url += formatAuth(urlObj, options);
  url += formatHost(urlObj, options);
  url += formatPort(urlObj, options);
  url += formatPath(urlObj, options);
  url += formatResource(urlObj, options);
  url += formatQuery(urlObj, options);
  url += formatHash(urlObj, options);
  return url;
}

function getQuery(urlObj, options) {
  var stripQuery = options.removeEmptyQueries && urlObj.extra.relation.minimumPort;
  return urlObj.query.string[stripQuery ? "stripped" : "full"];
}

function showQuery(urlObj, options) {
  return !urlObj.extra.relation.minimumQuery || options.output === constants.ABSOLUTE || options.output === constants.ROOT_RELATIVE;
}

function showResource(urlObj, options) {
  var removeIndex = options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex;
  var removeMatchingResource = urlObj.extra.relation.minimumResource && options.output !== constants.ABSOLUTE && options.output !== constants.ROOT_RELATIVE;
  return !!urlObj.resource && !removeMatchingResource && !removeIndex;
}

module.exports = formatUrl;

/***/ }),

/***/ 49355:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var constants = __webpack_require__(24037);

var formatUrl = __webpack_require__(80276);

var getOptions = __webpack_require__(32057);

var objUtils = __webpack_require__(20879);

var parseUrl = __webpack_require__(83923);

var relateUrl = __webpack_require__(85063);

function RelateUrl(from, options) {
  this.options = getOptions(options, {
    defaultPorts: {
      ftp: 21,
      http: 80,
      https: 443
    },
    directoryIndexes: ["index.html"],
    ignore_www: false,
    output: RelateUrl.SHORTEST,
    rejectedSchemes: ["data", "javascript", "mailto"],
    removeAuth: false,
    removeDirectoryIndexes: true,
    removeEmptyQueries: false,
    removeRootTrailingSlash: true,
    schemeRelative: true,
    site: undefined,
    slashesDenoteHost: true
  });
  this.from = parseUrl.from(from, this.options, null);
}
/*
	Usage: instance=new RelateUrl(); instance.relate();
*/


RelateUrl.prototype.relate = function (from, to, options) {
  // relate(to,options)
  if (objUtils.isPlainObject(to)) {
    options = to;
    to = from;
    from = null;
  } // relate(to)
  else if (!to) {
      to = from;
      from = null;
    }

  options = getOptions(options, this.options);
  from = from || options.site;
  from = parseUrl.from(from, options, this.from);

  if (!from || !from.href) {
    throw new Error("from value not defined.");
  } else if (from.extra.hrefInfo.minimumPathOnly) {
    throw new Error("from value supplied is not absolute: " + from.href);
  }

  to = parseUrl.to(to, options);
  if (to.valid === false) return to.href;
  to = relateUrl(from, to, options);
  to = formatUrl(to, options);
  return to;
};
/*
	Usage: RelateUrl.relate();
*/


RelateUrl.relate = function (from, to, options) {
  return new RelateUrl().relate(from, to, options);
}; // Make constants accessible from API


objUtils.shallowMerge(RelateUrl, constants);
module.exports = RelateUrl;

/***/ }),

/***/ 32057:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var objUtils = __webpack_require__(20879);

function getOptions(options, defaults) {
  if (objUtils.isPlainObject(options)) {
    var newOptions = {};

    for (var i in defaults) {
      if (defaults.hasOwnProperty(i)) {
        if (options[i] !== undefined) {
          newOptions[i] = mergeOption(options[i], defaults[i]);
        } else {
          newOptions[i] = defaults[i];
        }
      }
    }

    return newOptions;
  } else {
    return defaults;
  }
}

function mergeOption(newValues, defaultValues) {
  if (defaultValues instanceof Object && newValues instanceof Object) {
    if (defaultValues instanceof Array && newValues instanceof Array) {
      return defaultValues.concat(newValues);
    } else {
      return objUtils.shallowMerge(newValues, defaultValues);
    }
  }

  return newValues;
}

module.exports = getOptions;

/***/ }),

/***/ 20105:
/***/ ((module) => {

"use strict";


function parseHost(urlObj, options) {
  // TWEAK :: condition only for speed optimization
  if (options.ignore_www) {
    var host = urlObj.host.full;

    if (host) {
      var stripped = host;

      if (host.indexOf("www.") === 0) {
        stripped = host.substr(4);
      }

      urlObj.host.stripped = stripped;
    }
  }
}

module.exports = parseHost;

/***/ }),

/***/ 29057:
/***/ ((module) => {

"use strict";


function hrefInfo(urlObj) {
  var minimumPathOnly = !urlObj.scheme && !urlObj.auth && !urlObj.host.full && !urlObj.port;
  var minimumResourceOnly = minimumPathOnly && !urlObj.path.absolute.string;
  var minimumQueryOnly = minimumResourceOnly && !urlObj.resource;
  var minimumHashOnly = minimumQueryOnly && !urlObj.query.string.full.length;
  var empty = minimumHashOnly && !urlObj.hash;
  urlObj.extra.hrefInfo.minimumPathOnly = minimumPathOnly;
  urlObj.extra.hrefInfo.minimumResourceOnly = minimumResourceOnly;
  urlObj.extra.hrefInfo.minimumQueryOnly = minimumQueryOnly;
  urlObj.extra.hrefInfo.minimumHashOnly = minimumHashOnly;
  urlObj.extra.hrefInfo.empty = empty;
}

module.exports = hrefInfo;

/***/ }),

/***/ 83923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hrefInfo = __webpack_require__(29057);

var parseHost = __webpack_require__(20105);

var parsePath = __webpack_require__(72656);

var parsePort = __webpack_require__(19601);

var parseQuery = __webpack_require__(41788);

var parseUrlString = __webpack_require__(77159);

var pathUtils = __webpack_require__(67049);

function parseFromUrl(url, options, fallback) {
  if (url) {
    var urlObj = parseUrl(url, options); // Because the following occurs in the relate stage for "to" URLs,
    // such had to be mostly duplicated here

    var pathArray = pathUtils.resolveDotSegments(urlObj.path.absolute.array);
    urlObj.path.absolute.array = pathArray;
    urlObj.path.absolute.string = "/" + pathUtils.join(pathArray);
    return urlObj;
  } else {
    return fallback;
  }
}

function parseUrl(url, options) {
  var urlObj = parseUrlString(url, options);
  if (urlObj.valid === false) return urlObj;
  parseHost(urlObj, options);
  parsePort(urlObj, options);
  parsePath(urlObj, options);
  parseQuery(urlObj, options);
  hrefInfo(urlObj);
  return urlObj;
}

module.exports = {
  from: parseFromUrl,
  to: parseUrl
};

/***/ }),

/***/ 72656:
/***/ ((module) => {

"use strict";


function isDirectoryIndex(resource, options) {
  var verdict = false;
  options.directoryIndexes.every(function (index) {
    if (index === resource) {
      verdict = true;
      return false;
    }

    return true;
  });
  return verdict;
}

function parsePath(urlObj, options) {
  var path = urlObj.path.absolute.string;

  if (path) {
    var lastSlash = path.lastIndexOf("/");

    if (lastSlash > -1) {
      if (++lastSlash < path.length) {
        var resource = path.substr(lastSlash);

        if (resource !== "." && resource !== "..") {
          urlObj.resource = resource;
          path = path.substr(0, lastSlash);
        } else {
          path += "/";
        }
      }

      urlObj.path.absolute.string = path;
      urlObj.path.absolute.array = splitPath(path);
    } else if (path === "." || path === "..") {
      // "..?var", "..#anchor", etc ... not "..index.html"
      path += "/";
      urlObj.path.absolute.string = path;
      urlObj.path.absolute.array = splitPath(path);
    } else {
      // Resource-only
      urlObj.resource = path;
      urlObj.path.absolute.string = null;
    }

    urlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);
  } // Else: query/hash-only or empty

}

function splitPath(path) {
  // TWEAK :: condition only for speed optimization
  if (path !== "/") {
    var cleaned = [];
    path.split("/").forEach(function (dir) {
      // Cleanup -- splitting "/dir/" becomes ["","dir",""]
      if (dir !== "") {
        cleaned.push(dir);
      }
    });
    return cleaned;
  } else {
    // Faster to skip the above block and just create an array
    return [];
  }
}

module.exports = parsePath;

/***/ }),

/***/ 19601:
/***/ ((module) => {

"use strict";


function parsePort(urlObj, options) {
  var defaultPort = -1;

  for (var i in options.defaultPorts) {
    if (i === urlObj.scheme && options.defaultPorts.hasOwnProperty(i)) {
      defaultPort = options.defaultPorts[i];
      break;
    }
  }

  if (defaultPort > -1) {
    // Force same type as urlObj.port
    defaultPort = defaultPort.toString();

    if (urlObj.port === null) {
      urlObj.port = defaultPort;
    }

    urlObj.extra.portIsDefault = urlObj.port === defaultPort;
  }
}

module.exports = parsePort;

/***/ }),

/***/ 41788:
/***/ ((module) => {

"use strict";


var hasOwnProperty = Object.prototype.hasOwnProperty;

function parseQuery(urlObj, options) {
  urlObj.query.string.full = stringify(urlObj.query.object, false); // TWEAK :: condition only for speed optimization

  if (options.removeEmptyQueries) {
    urlObj.query.string.stripped = stringify(urlObj.query.object, true);
  }
}

function stringify(queryObj, removeEmptyQueries) {
  var count = 0;
  var str = "";

  for (var i in queryObj) {
    if (i !== "" && hasOwnProperty.call(queryObj, i) === true) {
      var value = queryObj[i];

      if (value !== "" || !removeEmptyQueries) {
        str += ++count === 1 ? "?" : "&";
        i = encodeURIComponent(i);

        if (value !== "") {
          str += i + "=" + encodeURIComponent(value).replace(/%20/g, "+");
        } else {
          str += i;
        }
      }
    }
  }

  return str;
}

module.exports = parseQuery;

/***/ }),

/***/ 77159:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _parseUrl = (__webpack_require__(51143)/* .parse */ .Qc);
/*
	Customize the URL object that Node generates
	because:
	
	* necessary data for later
	* urlObj.host is useless
	* urlObj.hostname is too long
	* urlObj.path is useless
	* urlObj.pathname is too long
	* urlObj.protocol is inaccurate; should be called "scheme"
	* urlObj.search is mostly useless
*/


function clean(urlObj) {
  var scheme = urlObj.protocol;

  if (scheme) {
    // Remove ":" suffix
    if (scheme.indexOf(":") === scheme.length - 1) {
      scheme = scheme.substr(0, scheme.length - 1);
    }
  }

  urlObj.host = {
    // TODO :: unescape(encodeURIComponent(s)) ? ... http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html
    full: urlObj.hostname,
    stripped: null
  };
  urlObj.path = {
    absolute: {
      array: null,
      string: urlObj.pathname
    },
    relative: {
      array: null,
      string: null
    }
  };
  urlObj.query = {
    object: urlObj.query,
    string: {
      full: null,
      stripped: null
    }
  };
  urlObj.extra = {
    hrefInfo: {
      minimumPathOnly: null,
      minimumResourceOnly: null,
      minimumQueryOnly: null,
      minimumHashOnly: null,
      empty: null,
      separatorOnlyQuery: urlObj.search === "?"
    },
    portIsDefault: null,
    relation: {
      maximumScheme: null,
      maximumAuth: null,
      maximumHost: null,
      maximumPort: null,
      maximumPath: null,
      maximumResource: null,
      maximumQuery: null,
      maximumHash: null,
      minimumScheme: null,
      minimumAuth: null,
      minimumHost: null,
      minimumPort: null,
      minimumPath: null,
      minimumResource: null,
      minimumQuery: null,
      minimumHash: null,
      overridesQuery: null
    },
    resourceIsIndex: null,
    slashes: urlObj.slashes
  };
  urlObj.resource = null;
  urlObj.scheme = scheme;
  delete urlObj.hostname;
  delete urlObj.pathname;
  delete urlObj.protocol;
  delete urlObj.search;
  delete urlObj.slashes;
  return urlObj;
}

function validScheme(url, options) {
  var valid = true;
  options.rejectedSchemes.every(function (rejectedScheme) {
    valid = !(url.indexOf(rejectedScheme + ":") === 0); // Break loop

    return valid;
  });
  return valid;
}

function parseUrlString(url, options) {
  if (validScheme(url, options)) {
    return clean(_parseUrl(url, true, options.slashesDenoteHost));
  } else {
    return {
      href: url,
      valid: false
    };
  }
}

module.exports = parseUrlString;

/***/ }),

/***/ 59011:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var findRelation = __webpack_require__(43015);

var objUtils = __webpack_require__(20879);

var pathUtils = __webpack_require__(67049);

function absolutize(urlObj, siteUrlObj, options) {
  findRelation.upToPath(urlObj, siteUrlObj, options); // Fill in relative URLs

  if (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;
  if (urlObj.extra.relation.minimumAuth) urlObj.auth = siteUrlObj.auth;
  if (urlObj.extra.relation.minimumHost) urlObj.host = objUtils.clone(siteUrlObj.host);
  if (urlObj.extra.relation.minimumPort) copyPort(urlObj, siteUrlObj);
  if (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj); // Check remaining relativeness now that path has been copied and/or resolved

  findRelation.pathOn(urlObj, siteUrlObj, options); // Fill in relative URLs

  if (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);
  if (urlObj.extra.relation.minimumQuery) urlObj.query = objUtils.clone(siteUrlObj.query);
  if (urlObj.extra.relation.minimumHash) urlObj.hash = siteUrlObj.hash;
}
/*
	Get an absolute path that's relative to site url.
*/


function copyPath(urlObj, siteUrlObj) {
  if (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly) {
    var pathArray = urlObj.path.absolute.array;
    var pathString = "/"; // If not erroneous URL

    if (pathArray) {
      // If is relative path
      if (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf("/") !== 0) {
        // Append path to site path
        pathArray = siteUrlObj.path.absolute.array.concat(pathArray);
      }

      pathArray = pathUtils.resolveDotSegments(pathArray);
      pathString += pathUtils.join(pathArray);
    } else {
      pathArray = [];
    }

    urlObj.path.absolute.array = pathArray;
    urlObj.path.absolute.string = pathString;
  } else {
    // Resource-, query- or hash-only or empty
    urlObj.path = objUtils.clone(siteUrlObj.path);
  }
}

function copyPort(urlObj, siteUrlObj) {
  urlObj.port = siteUrlObj.port;
  urlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;
}

function copyResource(urlObj, siteUrlObj) {
  urlObj.resource = siteUrlObj.resource;
  urlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;
}

module.exports = absolutize;

/***/ }),

/***/ 43015:
/***/ ((module) => {

"use strict";


function findRelation_upToPath(urlObj, siteUrlObj, options) {
  // Path- or root-relative URL
  var pathOnly = urlObj.extra.hrefInfo.minimumPathOnly; // Matching scheme, scheme-relative or path-only

  var minimumScheme = urlObj.scheme === siteUrlObj.scheme || !urlObj.scheme; // Matching auth, ignoring auth or path-only

  var minimumAuth = minimumScheme && (urlObj.auth === siteUrlObj.auth || options.removeAuth || pathOnly); // Matching host or path-only

  var www = options.ignore_www ? "stripped" : "full";
  var minimumHost = minimumAuth && (urlObj.host[www] === siteUrlObj.host[www] || pathOnly); // Matching port or path-only

  var minimumPort = minimumHost && (urlObj.port === siteUrlObj.port || pathOnly);
  urlObj.extra.relation.minimumScheme = minimumScheme;
  urlObj.extra.relation.minimumAuth = minimumAuth;
  urlObj.extra.relation.minimumHost = minimumHost;
  urlObj.extra.relation.minimumPort = minimumPort;
  urlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;
  urlObj.extra.relation.maximumAuth = !minimumScheme || minimumScheme && !minimumHost;
  urlObj.extra.relation.maximumHost = !minimumScheme || minimumScheme && !minimumPort;
}

function findRelation_pathOn(urlObj, siteUrlObj, options) {
  var queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;
  var hashOnly = urlObj.extra.hrefInfo.minimumHashOnly;
  var empty = urlObj.extra.hrefInfo.empty; // not required, but self-documenting
  // From upToPath()

  var minimumPort = urlObj.extra.relation.minimumPort;
  var minimumScheme = urlObj.extra.relation.minimumScheme; // Matching port and path

  var minimumPath = minimumPort && urlObj.path.absolute.string === siteUrlObj.path.absolute.string; // Matching resource or query/hash-only or empty

  var matchingResource = urlObj.resource === siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex || options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource;
  var minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty); // Matching query or hash-only/empty

  var query = options.removeEmptyQueries ? "stripped" : "full";
  var urlQuery = urlObj.query.string[query];
  var siteUrlQuery = siteUrlObj.query.string[query];
  var minimumQuery = minimumResource && !!urlQuery && urlQuery === siteUrlQuery || (hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery;
  var minimumHash = minimumQuery && urlObj.hash === siteUrlObj.hash;
  urlObj.extra.relation.minimumPath = minimumPath;
  urlObj.extra.relation.minimumResource = minimumResource;
  urlObj.extra.relation.minimumQuery = minimumQuery;
  urlObj.extra.relation.minimumHash = minimumHash;
  urlObj.extra.relation.maximumPort = !minimumScheme || minimumScheme && !minimumPath;
  urlObj.extra.relation.maximumPath = !minimumScheme || minimumScheme && !minimumResource;
  urlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;
  urlObj.extra.relation.maximumQuery = !minimumScheme || minimumScheme && !minimumHash;
  urlObj.extra.relation.maximumHash = !minimumScheme || minimumScheme && !minimumHash; // there's nothing after hash, so it's the same as maximumQuery
  // Matching path and/or resource with existing but non-matching site query

  urlObj.extra.relation.overridesQuery = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;
}

module.exports = {
  pathOn: findRelation_pathOn,
  upToPath: findRelation_upToPath
};

/***/ }),

/***/ 85063:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var absolutize = __webpack_require__(59011);

var relativize = __webpack_require__(40028);

function relateUrl(siteUrlObj, urlObj, options) {
  absolutize(urlObj, siteUrlObj, options);
  relativize(urlObj, siteUrlObj, options);
  return urlObj;
}

module.exports = relateUrl;

/***/ }),

/***/ 40028:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var pathUtils = __webpack_require__(67049);
/*
	Get a path relative to the site path.
*/


function relatePath(absolutePath, siteAbsolutePath) {
  var relativePath = []; // At this point, it's related to the host/port

  var related = true;
  var parentIndex = -1; // Find parents

  siteAbsolutePath.forEach(function (siteAbsoluteDir, i) {
    if (related) {
      if (absolutePath[i] !== siteAbsoluteDir) {
        related = false;
      } else {
        parentIndex = i;
      }
    }

    if (!related) {
      // Up one level
      relativePath.push("..");
    }
  }); // Form path

  absolutePath.forEach(function (dir, i) {
    if (i > parentIndex) {
      relativePath.push(dir);
    }
  });
  return relativePath;
}

function relativize(urlObj, siteUrlObj, options) {
  if (urlObj.extra.relation.minimumScheme) {
    var pathArray = relatePath(urlObj.path.absolute.array, siteUrlObj.path.absolute.array);
    urlObj.path.relative.array = pathArray;
    urlObj.path.relative.string = pathUtils.join(pathArray);
  }
}

module.exports = relativize;

/***/ }),

/***/ 20879:
/***/ ((module) => {

"use strict";

/*
	Deep-clone an object.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function clone(obj) {
  if (obj instanceof Object) {
    var clonedObj = obj instanceof Array ? [] : {};

    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        clonedObj[i] = clone(obj[i]);
      }
    }

    return clonedObj;
  }

  return obj;
}
/*
	https://github.com/jonschlinkert/is-plain-object
*/


function isPlainObject(obj) {
  return !!obj && _typeof(obj) === "object" && obj.constructor === Object;
}
/*
	Shallow-merge two objects.
*/


function shallowMerge(target, source) {
  if (target instanceof Object && source instanceof Object) {
    for (var i in source) {
      if (source.hasOwnProperty(i)) {
        target[i] = source[i];
      }
    }
  }

  return target;
}

module.exports = {
  clone: clone,
  isPlainObject: isPlainObject,
  shallowMerge: shallowMerge
};

/***/ }),

/***/ 67049:
/***/ ((module) => {

"use strict";


function joinPath(pathArray) {
  if (pathArray.length > 0) {
    return pathArray.join("/") + "/";
  } else {
    return "";
  }
}

function resolveDotSegments(pathArray) {
  var pathAbsolute = [];
  pathArray.forEach(function (dir) {
    if (dir !== "..") {
      if (dir !== ".") {
        pathAbsolute.push(dir);
      }
    } else {
      // Remove parent
      if (pathAbsolute.length > 0) {
        pathAbsolute.splice(pathAbsolute.length - 1, 1);
      }
    }
  });
  return pathAbsolute;
}

module.exports = {
  join: joinPath,
  resolveDotSegments: resolveDotSegments
};

/***/ }),

/***/ 87723:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


function __export(m) {
  for (var p in m) {
    if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
}

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

__export(__webpack_require__(15585));

/***/ }),

/***/ 15585:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/**
 * Convert the given relative IRI to an absolute IRI
 * by taking into account the given optional baseIRI.
 *
 * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.
 * @param {string} baseIRI The optional base IRI.
 * @return {string} an absolute IRI.
 */

function resolve(relativeIRI, baseIRI) {
  baseIRI = baseIRI || '';
  var baseFragmentPos = baseIRI.indexOf('#'); // Ignore any fragments in the base IRI

  if (baseFragmentPos > 0) {
    baseIRI = baseIRI.substr(0, baseFragmentPos);
  } // Convert empty value directly to base IRI


  if (!relativeIRI.length) {
    // At this point, the baseIRI MUST be absolute, otherwise we error
    if (baseIRI.indexOf(':') < 0) {
      throw new Error("Found invalid baseIRI '".concat(baseIRI, "' for value '").concat(relativeIRI, "'"));
    }

    return baseIRI;
  } // If the value starts with a query character, concat directly (but strip the existing query)


  if (relativeIRI.startsWith('?')) {
    var baseQueryPos = baseIRI.indexOf('?');

    if (baseQueryPos > 0) {
      baseIRI = baseIRI.substr(0, baseQueryPos);
    }

    return baseIRI + relativeIRI;
  } // If the value starts with a fragment character, concat directly


  if (relativeIRI.startsWith('#')) {
    return baseIRI + relativeIRI;
  } // Ignore baseIRI if it is empty


  if (!baseIRI.length) {
    var relativeColonPos = relativeIRI.indexOf(':');

    if (relativeColonPos < 0) {
      throw new Error("Found invalid relative IRI '".concat(relativeIRI, "' for a missing baseIRI"));
    }

    return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);
  } // Ignore baseIRI if the value is absolute


  var valueColonPos = relativeIRI.indexOf(':');

  if (valueColonPos >= 0) {
    return removeDotSegmentsOfPath(relativeIRI, valueColonPos);
  } // At this point, the baseIRI MUST be absolute, otherwise we error


  var baseColonPos = baseIRI.indexOf(':');

  if (baseColonPos < 0) {
    throw new Error("Found invalid baseIRI '".concat(baseIRI, "' for value '").concat(relativeIRI, "'"));
  }

  var baseIRIScheme = baseIRI.substr(0, baseColonPos + 1); // Inherit the baseIRI scheme if the value starts with '//'

  if (relativeIRI.indexOf('//') === 0) {
    return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
  } // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.


  var baseSlashAfterColonPos;

  if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {
    // If there is no additional '/' after the '//'.
    baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);

    if (baseSlashAfterColonPos < 0) {
      // If something other than a '/' follows the '://', append the value after a '/',
      // otherwise, prefix the value with only the baseIRI scheme.
      if (baseIRI.length > baseColonPos + 3) {
        return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
      } else {
        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
      }
    }
  } else {
    // If there is not even a single '/' after the ':'
    baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);

    if (baseSlashAfterColonPos < 0) {
      // If we don't have a '/' after the ':',
      // prefix the value with only the baseIRI scheme.
      return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
    }
  } // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.


  if (relativeIRI.indexOf('/') === 0) {
    return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);
  }

  var baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);
  var baseIRILastSlashPos = baseIRIPath.lastIndexOf('/'); // Ignore everything after the last '/' in the baseIRI path

  if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {
    baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1); // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')
    // This change is only allowed if there is something else following the path

    if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {
      relativeIRI = relativeIRI.substr(1);
    }
  } // Prefix the value with the baseIRI path where


  relativeIRI = baseIRIPath + relativeIRI; // Remove dot segment from the IRI

  relativeIRI = removeDotSegments(relativeIRI); // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.

  return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;
}

exports.resolve = resolve;
/**
 * Remove dot segments from the given path,
 * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).
 * @param {string} path An IRI path.
 * @return {string} A path, will always start with a '/'.
 */

function removeDotSegments(path) {
  // Prepare a buffer with segments between each '/.
  // Each segment represents an array of characters.
  var segmentBuffers = [];
  var i = 0;

  while (i < path.length) {
    // Remove '/.' or '/..'
    switch (path[i]) {
      case '/':
        if (path[i + 1] === '.') {
          if (path[i + 2] === '.') {
            // Start a new segment if we find an invalid character after the '.'
            if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {
              segmentBuffers.push([]);
              i++;
              break;
            } // Go to parent directory,
            // so we remove a parent segment


            segmentBuffers.pop(); // Ensure that we end with a slash if there is a trailing '/..'

            if (!path[i + 3]) {
              segmentBuffers.push([]);
            }

            i += 3;
          } else {
            // Start a new segment if we find an invalid character after the '.'
            if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {
              segmentBuffers.push([]);
              i++;
              break;
            } // Ensure that we end with a slash if there is a trailing '/.'


            if (!path[i + 2]) {
              segmentBuffers.push([]);
            } // Go to the current directory,
            // so we do nothing


            i += 2;
          }
        } else {
          // Start a new segment
          segmentBuffers.push([]);
          i++;
        }

        break;

      case '#':
      case '?':
        // Query and fragment string should be appended unchanged
        if (!segmentBuffers.length) {
          segmentBuffers.push([]);
        }

        segmentBuffers[segmentBuffers.length - 1].push(path.substr(i)); // Break the while loop

        i = path.length;
        break;

      default:
        // Not a special character, just append it to our buffer
        if (!segmentBuffers.length) {
          segmentBuffers.push([]);
        }

        segmentBuffers[segmentBuffers.length - 1].push(path[i]);
        i++;
        break;
    }
  }

  return '/' + segmentBuffers.map(function (buffer) {
    return buffer.join('');
  }).join('/');
}

exports.removeDotSegments = removeDotSegments;
/**
 * Removes dot segments of the given IRI.
 * @param {string} iri An IRI (or part of IRI).
 * @param {number} colonPosition The position of the first ':' in the IRI.
 * @return {string} The IRI where dot segments were removed.
 */

function removeDotSegmentsOfPath(iri, colonPosition) {
  // Determine where we should start looking for the first '/' that indicates the start of the path
  var searchOffset = colonPosition + 1;

  if (colonPosition >= 0) {
    if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {
      searchOffset = colonPosition + 3;
    }
  } else {
    if (iri[0] === '/' && iri[1] === '/') {
      searchOffset = 2;
    }
  } // Determine the path


  var pathSeparator = iri.indexOf('/', searchOffset);

  if (pathSeparator < 0) {
    return iri;
  }

  var base = iri.substr(0, pathSeparator);
  var path = iri.substr(pathSeparator); // Remove dot segments from the path

  return base + removeDotSegments(path);
}

exports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;

function isCharacterAllowedAfterRelativePathSegment(character) {
  return !character || character === '#' || character === '?' || character === '/';
}

/***/ }),

/***/ 48850:
/***/ ((module, exports, __webpack_require__) => {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(29033);

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),

/***/ 46599:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* provided dependency */ var process = __webpack_require__(19142);
(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof __webpack_require__.g === "undefined" ? this : __webpack_require__.g : self);

/***/ }),

/***/ 57245:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;

var EE = (__webpack_require__(38291).EventEmitter);

var inherits = __webpack_require__(41736);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(6297);
Stream.Writable = __webpack_require__(71471);
Stream.Duplex = __webpack_require__(76884);
Stream.Transform = __webpack_require__(99154);
Stream.PassThrough = __webpack_require__(53582);
Stream.finished = __webpack_require__(5831);
Stream.pipeline = __webpack_require__(60384); // Backwards-compat with node 0.4.x

Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.

  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;

  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  } // don't leave dangling pipes when there are errors.


  function onerror(er) {
    cleanup();

    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror); // remove all the event listeners that were added.

  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

  return dest;
};

/***/ }),

/***/ 23462:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var Buffer = (__webpack_require__(48850).Buffer);
/*</replacement>*/


var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;

  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;

  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';

      case 'latin1':
      case 'binary':
        return 'latin1';

      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;

      default:
        if (retried) return; // undefined

        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}

; // Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings

function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);

  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.


exports.s = StringDecoder;

function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;

  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;

    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;

    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;

    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }

  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;

  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }

  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.


function utf8CheckByte(_byte) {
  if (_byte <= 0x7F) return 0;else if (_byte >> 5 === 0x06) return 2;else if (_byte >> 4 === 0x0E) return 3;else if (_byte >> 3 === 0x1E) return 4;
  return _byte >> 6 === 0x02 ? -1 : -2;
} // Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.


function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }

    return nb;
  }

  return 0;
} // Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.


function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return "\uFFFD";
  }

  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return "\uFFFD";
    }

    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return "\uFFFD";
      }
    }
  }
} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;

  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.


function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
} // For UTF-8, a replacement character is added when ending on a partial
// character.


function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + "\uFFFD";
  return r;
} // UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.


function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);

    if (r) {
      var c = r.charCodeAt(r.length - 1);

      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }

    return r;
  }

  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
} // For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.


function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';

  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }

  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;

  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }

  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ 78677:
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! https://mths.be/punycode v1.3.2 by @mathias */
;

(function (root) {
  /** Detect free variables */
  var freeExports = ( false ? 0 : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
  var freeModule = ( false ? 0 : _typeof(module)) == 'object' && module && !module.nodeType && module;
  var freeGlobal = (typeof __webpack_require__.g === "undefined" ? "undefined" : _typeof(__webpack_require__.g)) == 'object' && __webpack_require__.g;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }
  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */


  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647,
      // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
      tMin = 1,
      tMax = 26,
      skew = 38,
      damp = 700,
      initialBias = 72,
      initialN = 128,
      // 0x80
  delimiter = '-',
      // '\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
      regexNonASCII = /[^\x20-\x7E]/,
      // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
      // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
      floor = Math.floor,
      stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
      return output;
    }).join('');
  }
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }

    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }

    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }

    return base;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * http://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,

    /** Cached calculation results */
    baseMinusT; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;
      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output

      output.splice(i++, 0, n);
    }

    return ucs2encode(output);
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.3.2',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if ( true && _typeof(__webpack_require__.amdO) == 'object' && __webpack_require__.amdO) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (freeExports && freeModule) {
    if (module.exports == freeExports) {
      // in Node.js or RingoJS v0.8.0+
      freeModule.exports = punycode;
    } else {
      // in Narwhal or RingoJS v0.7.0-
      for (key in punycode) {
        punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
      }
    }
  } else {
    // in Rhino or a web browser
    root.punycode = punycode;
  }
})(this);

/***/ }),

/***/ 51143:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var punycode = __webpack_require__(78677);

var util = __webpack_require__(95751);

exports.Qc = urlParse;
__webpack_unused_export__ = urlResolve;
__webpack_unused_export__ = urlResolveObject;
__webpack_unused_export__ = urlFormat;
__webpack_unused_export__ = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.


var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__(28320);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + _typeof(url));
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];

      if (simplePath[2]) {
        this.search = simplePath[2];

        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }

      return this;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    this.parseHost(); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);

      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);

    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }

  if (rest) this.pathname = rest;

  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  } //to support http.request


  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  this.href = this.format();
  return this;
}; // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift())) {
        ;
      }

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      this.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) this.hostname = host;
};

/***/ }),

/***/ 95751:
/***/ ((module) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = {
  isString: function isString(arg) {
    return typeof arg === 'string';
  },
  isObject: function isObject(arg) {
    return _typeof(arg) === 'object' && arg !== null;
  },
  isNull: function isNull(arg) {
    return arg === null;
  },
  isNullOrUndefined: function isNullOrUndefined(arg) {
    return arg == null;
  }
};

/***/ }),

/***/ 96219:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(85271);
/**
 * Module exports.
 */
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */


function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!__webpack_require__.g.localStorage) return false;
  } catch (_) {
    return false;
  }

  var val = __webpack_require__.g.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/***/ }),

/***/ 16248:
/***/ ((module) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function isBuffer(arg) {
  return arg && _typeof(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

/***/ }),

/***/ 17092:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isArgumentsObject = __webpack_require__(69446);

var isGeneratorFunction = __webpack_require__(14477);

var whichTypedArray = __webpack_require__(72337);

var isTypedArray = __webpack_require__(28915);

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (_typeof(value) !== 'object') {
    return false;
  }

  try {
    prototypeValueOf(value);
    return true;
  } catch (e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray; // Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js

function isPromise(input) {
  return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && _typeof(input) === 'object' && typeof input.then === 'function' && typeof input["catch"] === 'function';
}

exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return isTypedArray(value) || isDataView(value);
}

exports.isArrayBufferView = isArrayBufferView;

function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}

exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}

exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}

exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}

exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}

exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}

exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}

exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}

exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}

exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}

exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}

exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}

isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working ? isMapToString(value) : value instanceof Map;
}

exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}

isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());

function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working ? isSetToString(value) : value instanceof Set;
}

exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}

isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());

function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
}

exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}

isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());

function isWeakSet(value) {
  return isWeakSetToString(value);
}

exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}

isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());

function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
}

exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}

isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));

function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
}

exports.isDataView = isDataView; // Store a copy of SharedArrayBuffer in case it's deleted elsewhere

var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;

function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}

function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
}

exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}

exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}

exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}

exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}

exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}

exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}

exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}

exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}

exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}

exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}

exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
}

exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
}

exports.isAnyArrayBuffer = isAnyArrayBuffer;
['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function (method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function value() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});

/***/ }),

/***/ 45058:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(19142);
/* provided dependency */ var console = __webpack_require__(85271);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};

  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }

  return descriptors;
};

var formatRegExp = /%[sdj%]/g;

exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];

    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }

    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;

    switch (x) {
      case '%s':
        return String(args[i++]);

      case '%d':
        return Number(args[i++]);

      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }

      default:
        return x;
    }
  });

  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
}; // Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.


exports.deprecate = function (fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  } // Allow for deprecating things in the process of starting up.


  if (typeof process === 'undefined') {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}

exports.debuglog = function (set) {
  set = set.toUpperCase();

  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;

      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }

  return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/


function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = JSON.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
} // NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.


exports.types = __webpack_require__(17092);

function isArray(ar) {
  return Array.isArray(ar);
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return _typeof(arg) === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(16248);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
} // log is just a thin wrapper to console.log that prepends a timestamp


exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


exports.inherits = __webpack_require__(41736);

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];

    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }

    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }

  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  } // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.


  function callbackified() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();

    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }

    var self = this;

    var cb = function cb() {
      return maybeCb.apply(self, arguments);
    }; // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)


    original.apply(this, args).then(function (ret) {
      process.nextTick(cb.bind(null, null, ret));
    }, function (rej) {
      process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
    });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

exports.callbackify = callbackify;

/***/ }),

/***/ 72337:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(95696);

var availableTypedArrays = __webpack_require__(43604);

var callBound = __webpack_require__(80593);

var $toString = callBound('Object.prototype.toString');

var hasToStringTag = __webpack_require__(11191)();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();
var $slice = callBound('String.prototype.slice');
var toStrTags = {};

var gOPD = __webpack_require__(72681);

var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

if (hasToStringTag && gOPD && getPrototypeOf) {
  forEach(typedArrays, function (typedArray) {
    if (typeof g[typedArray] === 'function') {
      var arr = new g[typedArray]();

      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);

        if (!descriptor) {
          var superProto = getPrototypeOf(proto);
          descriptor = gOPD(superProto, Symbol.toStringTag);
        }

        toStrTags[typedArray] = descriptor.get;
      }
    }
  });
}

var tryTypedArrays = function tryAllTypedArrays(value) {
  var foundName = false;
  forEach(toStrTags, function (getter, typedArray) {
    if (!foundName) {
      try {
        var name = getter.call(value);

        if (name === typedArray) {
          foundName = name;
        }
      } catch (e) {}
    }
  });
  return foundName;
};

var isTypedArray = __webpack_require__(28915);

module.exports = function whichTypedArray(value) {
  if (!isTypedArray(value)) {
    return false;
  }

  if (!hasToStringTag || !(Symbol.toStringTag in value)) {
    return $slice($toString(value), 8, -1);
  }

  return tryTypedArrays(value);
};

/***/ }),

/***/ 68518:
/***/ ((module) => {

"use strict";


module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var walker;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            walker = this.head;

          case 1:
            if (!walker) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return walker.value;

          case 4:
            walker = walker.next;
            _context.next = 1;
            break;

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  });
};

/***/ }),

/***/ 48692:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = Yallist;
Yallist.Node = Node;
Yallist.create = Yallist;

function Yallist(list) {
  var self = this;

  if (!(self instanceof Yallist)) {
    self = new Yallist();
  }

  self.tail = null;
  self.head = null;
  self.length = 0;

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item);
    });
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i]);
    }
  }

  return self;
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list');
  }

  var next = node.next;
  var prev = node.prev;

  if (next) {
    next.prev = prev;
  }

  if (prev) {
    prev.next = next;
  }

  if (node === this.head) {
    this.head = next;
  }

  if (node === this.tail) {
    this.tail = prev;
  }

  node.list.length--;
  node.next = null;
  node.prev = null;
  node.list = null;
  return next;
};

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return;
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var head = this.head;
  node.list = this;
  node.next = head;

  if (head) {
    head.prev = node;
  }

  this.head = node;

  if (!this.tail) {
    this.tail = node;
  }

  this.length++;
};

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return;
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var tail = this.tail;
  node.list = this;
  node.prev = tail;

  if (tail) {
    tail.next = node;
  }

  this.tail = node;

  if (!this.head) {
    this.head = node;
  }

  this.length++;
};

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i]);
  }

  return this.length;
};

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i]);
  }

  return this.length;
};

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined;
  }

  var res = this.tail.value;
  this.tail = this.tail.prev;

  if (this.tail) {
    this.tail.next = null;
  } else {
    this.head = null;
  }

  this.length--;
  return res;
};

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined;
  }

  var res = this.head.value;
  this.head = this.head.next;

  if (this.head) {
    this.head.prev = null;
  } else {
    this.tail = null;
  }

  this.length--;
  return res;
};

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this;

  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.next;
  }
};

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this;

  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.prev;
  }
};

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next;
  }

  if (i === n && walker !== null) {
    return walker.value;
  }
};

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev;
  }

  if (i === n && walker !== null) {
    return walker.value;
  }
};

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist();

  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.next;
  }

  return res;
};

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist();

  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.prev;
  }

  return res;
};

Yallist.prototype.reduce = function (fn, initial) {
  var acc;
  var walker = this.head;

  if (arguments.length > 1) {
    acc = initial;
  } else if (this.head) {
    walker = this.head.next;
    acc = this.head.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value');
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i);
    walker = walker.next;
  }

  return acc;
};

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc;
  var walker = this.tail;

  if (arguments.length > 1) {
    acc = initial;
  } else if (this.tail) {
    walker = this.tail.prev;
    acc = this.tail.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value');
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i);
    walker = walker.prev;
  }

  return acc;
};

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length);

  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.next;
  }

  return arr;
};

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length);

  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.prev;
  }

  return arr;
};

Yallist.prototype.slice = function (from, to) {
  to = to || this.length;

  if (to < 0) {
    to += this.length;
  }

  from = from || 0;

  if (from < 0) {
    from += this.length;
  }

  var ret = new Yallist();

  if (to < from || to < 0) {
    return ret;
  }

  if (from < 0) {
    from = 0;
  }

  if (to > this.length) {
    to = this.length;
  }

  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next;
  }

  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value);
  }

  return ret;
};

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length;

  if (to < 0) {
    to += this.length;
  }

  from = from || 0;

  if (from < 0) {
    from += this.length;
  }

  var ret = new Yallist();

  if (to < from || to < 0) {
    return ret;
  }

  if (from < 0) {
    from = 0;
  }

  if (to > this.length) {
    to = this.length;
  }

  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev;
  }

  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value);
  }

  return ret;
};

Yallist.prototype.splice = function (start, deleteCount) {
  if (start > this.length) {
    start = this.length - 1;
  }

  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next;
  }

  var ret = [];

  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value);
    walker = this.removeNode(walker);
  }

  if (walker === null) {
    walker = this.tail;
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev;
  }

  for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
    walker = insert(this, walker, i + 2 < 2 || arguments.length <= i + 2 ? undefined : arguments[i + 2]);
  }

  return ret;
};

Yallist.prototype.reverse = function () {
  var head = this.head;
  var tail = this.tail;

  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev;
    walker.prev = walker.next;
    walker.next = p;
  }

  this.head = tail;
  this.tail = head;
  return this;
};

function insert(self, node, value) {
  var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);

  if (inserted.next === null) {
    self.tail = inserted;
  }

  if (inserted.prev === null) {
    self.head = inserted;
  }

  self.length++;
  return inserted;
}

function push(self, item) {
  self.tail = new Node(item, self.tail, null, self);

  if (!self.head) {
    self.head = self.tail;
  }

  self.length++;
}

function unshift(self, item) {
  self.head = new Node(item, null, self.head, self);

  if (!self.tail) {
    self.tail = self.head;
  }

  self.length++;
}

function Node(value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list);
  }

  this.list = list;
  this.value = value;

  if (prev) {
    prev.next = this;
    this.prev = prev;
  } else {
    this.prev = null;
  }

  if (next) {
    next.prev = this;
    this.next = next;
  } else {
    this.next = null;
  }
}

try {
  // add if support for Symbol.iterator is present
  __webpack_require__(68518)(Yallist);
} catch (er) {}

/***/ }),

/***/ 25258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Store = (__webpack_require__(20629).Store);

var Parser = (__webpack_require__(20629).Parser);

var jsonld = __webpack_require__(64706);

var Readable = (__webpack_require__(57245).Readable);

var RdfaParser = (__webpack_require__(6251).RdfaParser);

var MicrodataParser = (__webpack_require__(34986).MicrodataRdfParser);

var errors = __webpack_require__(84007);
/**
 * Parses json-ld to quads into the n3.Store
 * @param {string} text - input data
 * @param {string} baseUrl - main shape URL
 * @return {Promise<Store>}
 */


function parseJsonLd(_x, _x2) {
  return _parseJsonLd.apply(this, arguments);
}
/**
 * Parse RDFa to quads into the n3.Store
 * @param {string} text - input data
 * @param {string} baseUrl - main shape URL
 * @return {Promise<Store>}
 */


function _parseJsonLd() {
  _parseJsonLd = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(text, baseUrl) {
    var data, nquads;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = JSON.parse(text);
            _context.next = 3;
            return jsonld.toRDF(data, {
              format: 'application/n-quads',
              base: baseUrl
            });

          case 3:
            nquads = _context.sent;
            return _context.abrupt("return", parseNQuads(nquads, baseUrl));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseJsonLd.apply(this, arguments);
}

function parseRdfa(_x3, _x4) {
  return _parseRdfa.apply(this, arguments);
}
/**
 * Parses microdata to quads into the n3.Store
 * @param {string} text - input data
 * @param {string} baseUrl - main shape URL
 * @return {Promise<Store>}
 */


function _parseRdfa() {
  _parseRdfa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(text, baseUrl) {
    var textStream;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            textStream = new Readable();
            textStream.push(text);
            textStream.push(null);
            return _context2.abrupt("return", new Promise(function (res, rej) {
              var store = new Store();
              var rdfaParser = new RdfaParser({
                baseIRI: baseUrl,
                contentType: 'text/html'
              });
              textStream.pipe(rdfaParser).on('data', function (quad) {
                store.addQuad(quad);
              }).on('error', function (err) {
                return rej(err);
              }).on('end', function () {
                if (store.getQuads().length === 0) res(undefined);
                res(store);
              });
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseRdfa.apply(this, arguments);
}

function parseMicrodata(_x5, _x6) {
  return _parseMicrodata.apply(this, arguments);
}
/**
 * @param {string} text - input data
 * @param {string} baseUrl - main shape URL
 * @return {Store}
 */


function _parseMicrodata() {
  _parseMicrodata = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(text, baseUrl) {
    var textStream;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            textStream = new Readable();
            textStream.push(text);
            textStream.push(null);
            return _context3.abrupt("return", new Promise(function (res, rej) {
              var store = new Store();
              var rdfaParser = new MicrodataParser({
                baseIRI: baseUrl
              });
              textStream.pipe(rdfaParser).on('data', function (quad) {
                store.addQuad(quad);
              }).on('error', function (err) {
                return rej(err);
              }).on('end', function () {
                if (store.getQuads().length === 0) res(undefined);
                res(store);
              });
            }));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _parseMicrodata.apply(this, arguments);
}

function parseNQuads(text, baseUrl) {
  var turtleParser = new Parser({
    format: 'application/n-quads',
    baseIRI: baseUrl
  });
  var store = new Store();
  turtleParser.parse(text).forEach(function (quad) {
    store.addQuad(quad);
  });
  return store;
}
/**
 * @param {string} text - input data
 * @param {string} baseUrl - main shape URL
 * @return {Store}
 */


function parseTurtle(text, baseUrl) {
  var turtleParser = new Parser({
    format: 'text/turtle',
    baseIRI: baseUrl
  });
  var store = new Store();
  turtleParser.parse(text).forEach(function (quad) {
    store.addQuad(quad);
  });
  return store;
}
/**
 * Helper for trying to parse input text into a certain format
 * @param {*} parser parser function
 * @returns {Promise<undefined|Store>}
 */


function tryParse(_x7) {
  return _tryParse.apply(this, arguments);
}
/**
 * Transforms input to quads
 * @param {string} text - input data
 * @param {string} url - main shape URL
 * @returns {Promise<Store>}
 */


function _tryParse() {
  _tryParse = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(parser) {
    var quads;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return parser();

          case 3:
            quads = _context4.sent;
            _context4.next = 8;
            break;

          case 6:
            _context4.prev = 6;
            _context4.t0 = _context4["catch"](0);

          case 8:
            return _context4.abrupt("return", quads);

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 6]]);
  }));
  return _tryParse.apply(this, arguments);
}

function stringToQuads(_x8, _x9) {
  return _stringToQuads.apply(this, arguments);
}

function _stringToQuads() {
  _stringToQuads = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(text, url) {
    var jsonParser, microdataParser, rdfaParser, res;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            jsonParser = /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        _context5.next = 2;
                        return parseJsonLd(text, url);

                      case 2:
                        return _context5.abrupt("return", _context5.sent);

                      case 3:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              }));

              return function jsonParser() {
                return _ref.apply(this, arguments);
              };
            }();

            microdataParser = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return parseMicrodata(text, url);

                      case 2:
                        return _context6.abrupt("return", _context6.sent);

                      case 3:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6);
              }));

              return function microdataParser() {
                return _ref2.apply(this, arguments);
              };
            }();

            rdfaParser = /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        _context7.next = 2;
                        return parseRdfa(text, url);

                      case 2:
                        return _context7.abrupt("return", _context7.sent);

                      case 3:
                      case "end":
                        return _context7.stop();
                    }
                  }
                }, _callee7);
              }));

              return function rdfaParser() {
                return _ref3.apply(this, arguments);
              };
            }();

            _context8.next = 5;
            return tryParse(jsonParser);

          case 5:
            _context8.t1 = _context8.sent;

            if (_context8.t1) {
              _context8.next = 10;
              break;
            }

            _context8.next = 9;
            return tryParse(microdataParser);

          case 9:
            _context8.t1 = _context8.sent;

          case 10:
            _context8.t0 = _context8.t1;

            if (_context8.t0) {
              _context8.next = 15;
              break;
            }

            _context8.next = 14;
            return tryParse(rdfaParser);

          case 14:
            _context8.t0 = _context8.sent;

          case 15:
            res = _context8.t0;

            if (!(res === undefined || res.getQuads().length === 0)) {
              _context8.next = 18;
              break;
            }

            throw new errors.InvalidDataError('Error while parsing the data. ' + 'This could be caused by incorrect data or incorrect data format. ' + 'Possible formats: json-ld, microdata, rdfa');

          case 18:
            return _context8.abrupt("return", res);

          case 19:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _stringToQuads.apply(this, arguments);
}

module.exports = {
  parseJsonLd: parseJsonLd,
  parseMicrodata: parseMicrodata,
  parseRdfa: parseRdfa,
  parseNQuads: parseNQuads,
  parseTurtle: parseTurtle,
  stringToQuads: stringToQuads
};

/***/ }),

/***/ 80396:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SHACLValidator = __webpack_require__(31428);

var namedNode = (__webpack_require__(20629).DataFactory.namedNode);

var parser = __webpack_require__(25258);

var utils = __webpack_require__(87709);
/**
 * Adds shacl base prefix to value
 * @param {string} value
 * @return {string}
 */


function SHACL(value) {
  return 'http://www.w3.org/ns/shacl#' + value;
}

var ShaclValidator = /*#__PURE__*/function () {
  /**
   * @param {string} shaclSchema - shacl shapes in string format
   * @param {{
   *     annotations: object|undefined,
   *     subclasses: string
   * }} options
   */
  function ShaclValidator(shaclSchema, options) {
    _classCallCheck(this, ShaclValidator);

    if (options.subclasses) {
      this.subclasses = parser.parseTurtle(options.subclasses);
    }

    this.shapes = parser.parseTurtle(shaclSchema);
    this.annotations = options.annotations || {};
    this.validator = new SHACLValidator(this.shapes.getQuads());
  }
  /**
   * Transforms SHACL severity to string
   * @param {string} val
   * @returns {string}
   */


  _createClass(ShaclValidator, [{
    key: "getSeverity",
    value: function getSeverity(val) {
      switch (val) {
        case SHACL('Info'):
          return 'info';

        case SHACL('Warning'):
          return 'warning';

        default:
          return 'error';
      }
    }
    /**
     * Gets schema: annotations for some predicate
     * @param {namedNode} property - property, which should have an annotation
     * @param {namedNode} annotation - annotation predicate
     * @returns {string|undefined}
     */

  }, {
    key: "getAnnotation",
    value: function getAnnotation(property, annotation) {
      var quads = this.shapes.getQuads(property, annotation, undefined);
      if (quads.length > 0) return quads[0].object.value;
    }
    /**
     * Transform standard shacl failure to structured data failure
     * @param {object} shaclFailure
     * @returns {StructuredDataFailure}
     */

  }, {
    key: "toStructuredDataFailure",
    value: function toStructuredDataFailure(shaclFailure) {
      // finds a source shape if property is failing
      var sourceShape = this.shapes.getQuads(undefined, SHACL('property'), shaclFailure.sourceShape)[0]; // if the whole shape is failing then leave sourceShape

      if (!sourceShape) sourceShape = shaclFailure.sourceShape;else sourceShape = sourceShape.subject;
      var failure = {
        property: shaclFailure.path ? shaclFailure.path.value : undefined,
        message: shaclFailure.message.length > 0 ? shaclFailure.message.map(function (x) {
          return x.value;
        }).join(". ") : undefined,
        shape: sourceShape.id,
        severity: this.getSeverity(shaclFailure.severity.value)
      };

      for (var _i = 0, _Object$entries = Object.entries(this.annotations); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            key = _Object$entries$_i[0],
            value = _Object$entries$_i[1];

        var annotation = this.getAnnotation(shaclFailure.sourceShape, namedNode(value));
        if (annotation) failure[key] = annotation;
      }

      return failure;
    }
    /**
     * @param {string|Store} data
     * @param {{baseUrl: string|undefined}} options
     * @returns {Promise<{baseUrl: string, store: Store, failures: [StructuredDataFailure]}>}
     */

  }, {
    key: "validate",
    value: function () {
      var _validate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
        var _this = this;

        var options,
            baseUrl,
            report,
            quadsWithSubclasses,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                baseUrl = options.baseUrl || utils.randomUrl();

                if (!(typeof data === 'string')) {
                  _context.next = 6;
                  break;
                }

                _context.next = 5;
                return parser.stringToQuads(data, baseUrl);

              case 5:
                data = _context.sent;

              case 6:
                if (this.subclasses) {
                  quadsWithSubclasses = data.getQuads();
                  quadsWithSubclasses.push.apply(quadsWithSubclasses, _toConsumableArray(this.subclasses.getQuads()));
                  report = this.validator.validate(quadsWithSubclasses).results.map(function (x) {
                    return _this.toStructuredDataFailure(x);
                  });
                } else {
                  report = this.validator.validate(data.getQuads()).results.map(function (x) {
                    return _this.toStructuredDataFailure(x);
                  });
                }

                return _context.abrupt("return", {
                  baseUrl: baseUrl,
                  store: data,
                  failures: report
                });

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function validate(_x) {
        return _validate.apply(this, arguments);
      }

      return validate;
    }()
  }]);

  return ShaclValidator;
}();
/**
 * @typedef {{
 *     property: string,
 *     message: string,
 *     severity: 'error'|'warning'|'info',
 *     shape: string
 * }} StructuredDataFailure
 */


module.exports = {
  Validator: ShaclValidator
};

/***/ }),

/***/ 53081:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var shexParser = __webpack_require__(30787);

var shexUtil = __webpack_require__(68779);

var shexValidator = __webpack_require__(6748);

var utils = __webpack_require__(87709);

var parser = __webpack_require__(25258);

var errors = __webpack_require__(84007);

var TYPE = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';

var ValidationReport = /*#__PURE__*/function () {
  /**
   * @param {object} jsonReport - report from shex.js, which needs to be simplified
   * @param {object} schema - parsed shapes in ShExJ format
   * @param {object} annotations
   */
  function ValidationReport(jsonReport, schema, annotations) {
    var _this = this;

    _classCallCheck(this, ValidationReport);

    this.failures = [];
    this.shapes = new Map();
    schema.shapes.forEach(function (shape) {
      _this.shapes.set(shape.id, _this.getShapeCore(shape));
    });
    this.simplify(jsonReport, undefined, undefined);
    this.removeMissingIfTypeMismatch();
    this.annotations = annotations;
  }
  /**
   * Simplifies shex.js nested report into a linear structure
   * @param {object} jsonReport
   * @param {string|undefined} parentNode
   * @param {string|undefined} parentShape
   */


  _createClass(ValidationReport, [{
    key: "simplify",
    value: function simplify(jsonReport, parentNode, parentShape) {
      var _this2 = this;

      if (Array.isArray(jsonReport)) {
        jsonReport.forEach(function (err) {
          return _this2.simplify(err, parentNode, parentShape);
        });
        return;
      } // STEP 1: if report doesn't contain errors, MissingProperty @type or failures
      // that doesn't need to be added, return


      if (!jsonReport.type || jsonReport.type === 'ShapeAndResults' || jsonReport.type === 'ShapeOrResults' || jsonReport.property === TYPE || jsonReport.constraint && jsonReport.constraint.predicate === TYPE || jsonReport.type === 'NodeConstraintViolation' || jsonReport.type === 'ShapeOrFailure' || jsonReport.type === 'ShapeTest') {
        return;
      } // STEP 2: if array or intermediate nested structure, simplify nested values


      if (jsonReport.type === 'ShapeAndFailure' || jsonReport.type === 'Failure' || jsonReport.type === 'SemActFailure' || jsonReport.type === 'FailureList' || jsonReport.type === 'ExtendedResults' || jsonReport.type === 'ExtensionFailure' || !jsonReport.type && jsonReport.errors) {
        var node = jsonReport.node;
        this.simplify(jsonReport.errors, node || parentNode, jsonReport.shape || parentShape);
        return;
      } // STEP 3: handle closed shape errors


      if (jsonReport.type === 'ClosedShapeViolation') {
        jsonReport.unexpectedTriples.forEach(function (trpl) {
          var failure = {
            type: jsonReport.type,
            property: trpl.predicate,
            message: "Unexpected property ".concat(trpl.predicate),
            node: parentNode,
            shape: parentShape
          };

          _this2.failures.push(failure);
        });
        return;
      } // STEP 4: fill out the failure


      var failure = {
        type: jsonReport.type,
        property: jsonReport.property || jsonReport.constraint && jsonReport.constraint.predicate,
        message: '',
        node: jsonReport.triple && jsonReport.triple.subject || parentNode,
        shape: parentShape
      };

      switch (jsonReport.type) {
        case 'TypeMismatch':
          failure.message = "Value provided for property ".concat(failure.property, " has an unexpected type");
          this.simplify(jsonReport.errors, undefined, undefined);
          break;

        case 'MissingProperty':
          failure.message = "Property ".concat(failure.property, " not found");
          break;

        case 'ExcessTripleViolation':
          failure.message = "Property ".concat(failure.property, " has a cardinality issue");
          break;

        case 'BooleanSemActFailure':
          if (!jsonReport.ctx.predicate) return;
          failure.message = "Property ".concat(failure.property, " failed semantic action with code js:'").concat(jsonReport.code, "'");
          break;

        case 'NegatedProperty':
          failure.message = "Negated property ".concat(failure.property);
          break;

        default:
          throw new errors.ShexValidationError("Unknown failure type ".concat(jsonReport.type));
      }

      this.failures.push(failure);
    }
    /**
     * Recursively parses ShExJ Shape structure to get the core Shape with properties
     * @param {object} node
     * @returns {object}
     */

  }, {
    key: "getShapeCore",
    value: function getShapeCore(node) {
      var _this3 = this;

      if (node.type === 'Shape') {
        return node;
      }

      if (node.shapeExprs) {
        var nodes = node.shapeExprs.map(
        /** @param {*} nestedStruct */
        function (nestedStruct) {
          return _this3.getShapeCore(nestedStruct);
        }).filter(
        /** @param {*} nestedStruct */
        function (nestedStruct) {
          return nestedStruct !== undefined;
        });
        if (nodes.length > 0) return nodes[0];
      }
    }
    /**
     * Gets annotations for specific property in shape from the ShExJ shape
     * @param {string} shape
     * @param {string} property
     * @returns {Map<string, string>}
     */

  }, {
    key: "getAnnotations",
    value: function getAnnotations(shape, property) {
      var mapper = new Map();
      var shapeObj = this.shapes.get(shape);
      if (!shapeObj || !shapeObj.expression) return mapper;
      var propStructure;

      if (shapeObj.expression.expressions !== undefined) {
        propStructure = shapeObj.expression.expressions.filter(function (x) {
          return x.predicate === property;
        })[0];
      } else if (shapeObj.expression.predicate === property) {
        propStructure = shapeObj.expression;
      }

      if (!propStructure || !propStructure.annotations) return mapper;
      propStructure.annotations.forEach(function (x) {
        mapper.set(x.predicate, x.object.value);
      });
      return mapper;
    }
    /**
     * Hack for removing MissingProperty violations if the same property has TypeMismatch violation
     */

  }, {
    key: "removeMissingIfTypeMismatch",
    value: function removeMissingIfTypeMismatch() {
      var _this4 = this;

      var typeMismatches = this.failures.filter(function (x) {
        return x.type === 'TypeMismatch';
      });
      var missings = [];

      var _iterator = _createForOfIteratorHelper(typeMismatches),
          _step;

      try {
        var _loop = function _loop() {
          var typeMismatch = _step.value;
          missings.push(_this4.failures.filter(function (x) {
            return x.property === typeMismatch.property && x.type === 'MissingProperty';
          })[0]);
          _this4.failures = _this4.failures.filter(function (x) {
            return !missings.includes(x);
          });
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Transforms a temporary report failures to structured data report failures
     * @returns {[StructuredDataFailure]}
     */

  }, {
    key: "toStructuredDataReport",
    value: function toStructuredDataReport() {
      var _this5 = this;

      return this.failures.map(function (err) {
        /** @type StructuredDataFailure */
        var failure = {
          property: err.property,
          message: err.message,
          shape: err.shape,
          severity: 'error'
        };

        if (err.shape && err.property && _this5.annotations) {
          var shapeAnnotations = _this5.getAnnotations(err.shape, err.property);

          for (var _i = 0, _Object$entries = Object.entries(_this5.annotations); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                key = _Object$entries$_i[0],
                value = _Object$entries$_i[1];

            var annotation = shapeAnnotations.get(value) || failure[key];
            if (annotation) failure[key] = annotation;
          }
        }

        return failure;
      });
    }
  }]);

  return ValidationReport;
}();

var ShexValidator = /*#__PURE__*/function () {
  /**
   * @param {object|string} shapes - ShExJ shapes
   * @param {{annotations:object|undefined}} options
   */
  function ShexValidator(shapes) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ShexValidator);

    if (typeof shapes === 'string') {
      this.shapes = shexParser.construct('', {}, {}).parse(shapes);
    } else {
      this.shapes = shapes;
    }

    this.annotations = options.annotations;
  }
  /**
   * Validates data against ShEx shapes
   * @param {string|Store} data
   * @param {string} shape -  identifier of the target shape
   * @param {{ baseUrl: string|undefined }} options
   * @returns {Promise<{baseUrl: string, store: Store, failures: [StructuredDataFailure]}>}
   */


  _createClass(ShexValidator, [{
    key: "validate",
    value: function () {
      var _validate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data, shape) {
        var options,
            baseUrl,
            db,
            validator,
            errors,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
                baseUrl = options.baseUrl || utils.randomUrl();

                if (!(typeof data === 'string')) {
                  _context.next = 6;
                  break;
                }

                _context.next = 5;
                return parser.stringToQuads(data, baseUrl);

              case 5:
                data = _context.sent;

              case 6:
                db = new shexUtil.rdfjsDB(data);
                validator = shexValidator.construct(this.shapes, db);
                errors = new ValidationReport(validator.validate([{
                  node: baseUrl,
                  shape: shape
                }]), this.shapes, this.annotations);
                return _context.abrupt("return", {
                  baseUrl: baseUrl,
                  store: data,
                  failures: errors.toStructuredDataReport()
                });

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function validate(_x, _x2) {
        return _validate.apply(this, arguments);
      }

      return validate;
    }()
  }]);

  return ShexValidator;
}();
/**
 * @typedef {{
 *     property: string,
 *     message: string,
 *     severity: 'error'|'warning'|'info',
 *     shape: string
 * }} StructuredDataFailure
 */


module.exports = {
  Validator: ShexValidator
};

/***/ }),

/***/ 87709:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var fs = __webpack_require__(75174);

var axios = __webpack_require__(31806);

var jsonld = __webpack_require__(64706);

var n3 = __webpack_require__(20629);

var Store = n3.Store;

var RdfaParser = (__webpack_require__(6251).RdfaParser);

var errors = __webpack_require__(84007);
/**
 * Loads related data (shapes, context, etc.) from remote or local source
 * @param {string} link url to the remote source or local path
 * @return {*}
 */


function loadData(_x) {
  return _loadData.apply(this, arguments);
}
/**
 * Removes duplicates from objects array
 * @param {[object]} items
 * @param {[string]} keys
 * @returns {[object]}
 */


function _loadData() {
  _loadData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(link) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!link.match("^https?://")) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return axios.get(link);

          case 3:
            return _context.abrupt("return", _context.sent.data);

          case 4:
            return _context.abrupt("return", fs.readFileSync(link).toString());

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadData.apply(this, arguments);
}

function uniqueBy(items, keys) {
  var seen = {};
  return items.filter(function (item) {
    var val = '';
    keys.forEach(function (key) {
      return val += item[key];
    });
    return seen.hasOwnProperty(val) ? false : seen[val] = true;
  });
}
/**
 *  Generates random URL as base
 *  @param {number} length
 *  @return {string}
 */


function randomUrl() {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;
  var result = 'https://example.org/';
  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }

  return result;
}
/**
 * Finds strongly connected components in the data graph
 * @param {Store} store
 * @return {Map<string, number>} - map from subject uris to
 * component ids
 */


function stronglyConnectedComponents(store) {
  var nodes = _toConsumableArray(new Set(store.getSubjects().map(function (x) {
    return x.id;
  })));

  var order = [];
  var component = [];
  var componentIdx = 0;
  var components = new Map();
  var used = new Map();

  var forwardDfs = function forwardDfs(v) {
    used.set(v, true);

    var _iterator = _createForOfIteratorHelper(store.getQuads(v, undefined, undefined)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var quad = _step.value;
        if (nodes.includes(quad.object.id) && !used.get(quad.object.id)) forwardDfs(quad.object.id);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    order.push(v);
  };

  var backwardDfs = function backwardDfs(v) {
    used.set(v, true);
    component.push(v);

    var _iterator2 = _createForOfIteratorHelper(store.getQuads(undefined, undefined, v)),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var quad = _step2.value;
        if (!used.get(quad.subject.id)) backwardDfs(quad.subject.id);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };

  var _iterator3 = _createForOfIteratorHelper(nodes),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _node = _step3.value;
      used.set(_node, false);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  var _iterator4 = _createForOfIteratorHelper(nodes),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var _node2 = _step4.value;
      if (!used.get(_node2)) forwardDfs(_node2);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  var _iterator5 = _createForOfIteratorHelper(nodes),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _node3 = _step5.value;
      used.set(_node3, false);
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  for (var i = 0; i < nodes.length; i++) {
    var node = order[nodes.length - 1 - i];

    if (!used.get(node)) {
      backwardDfs(node);
      component.forEach(function (x) {
        return components.set(x, componentIdx);
      });
      componentIdx++;
      component = [];
    }
  }

  return components;
}
/**
 * Parses quads to multiple stores which represent root nodes
 * in the data graph
 * @param {Store} store
 */


function quadsToShapes(store) {
  var components = stronglyConnectedComponents(store);
  var notRoot = new Set();

  var _iterator6 = _createForOfIteratorHelper(store.getQuads()),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var quad = _step6.value;

      if (components.has(quad.subject.id) && components.has(quad.object.id) && components.get(quad.subject.id) !== components.get(quad.object.id)) {
        notRoot.add(components.get(quad.object.id));
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  var shapes = new Map();

  var _iterator7 = _createForOfIteratorHelper(components.entries()),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var _step7$value = _slicedToArray(_step7.value, 2),
          node = _step7$value[0],
          component = _step7$value[1];

      if (!notRoot.has(component)) {
        shapes.set(node, getShape(node, store, shapes, []));
        notRoot.add(component);
      }
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  return shapes;
}
/**
 * Recursively gets all triples, related to the shape
 * @param {any} id - id of the constructed shape
 * @param {Store} store - store, containing all the triples
 * @param {Map<any, Store>} shapes - map [id -> shape Store]
 * @param {Array<any>} parsed - array for tracking recursive loops
 */


function getShape(id, store, shapes, parsed) {
  var shapeQuads = store.getQuads(id, undefined, undefined);
  if (shapeQuads.length === 0) return;
  parsed.push(id);

  var _iterator8 = _createForOfIteratorHelper(store.getQuads(id, undefined, undefined)),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var quad = _step8.value;

      if (parsed.includes(quad.object.id)) {
        shapeQuads.push(quad);
        continue;
      }

      var nestedStore = void 0;

      if (shapes.get(quad.object)) {
        nestedStore = shapes.get(quad.object.id);
      } else {
        nestedStore = getShape(quad.object.id, store, shapes, parsed);
      }

      if (nestedStore && nestedStore.getQuads().length > 0) {
        shapeQuads.push.apply(shapeQuads, _toConsumableArray(nestedStore.getQuads()));
      }
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  var shapeStore = new Store();

  var _iterator9 = _createForOfIteratorHelper(shapeQuads),
      _step9;

  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var _quad = _step9.value;
      shapeStore.addQuad(_quad);
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }

  return shapeStore;
}

module.exports = {
  randomUrl: randomUrl,
  loadData: loadData,
  uniqueBy: uniqueBy,
  quadsToShapes: quadsToShapes
};

/***/ }),

/***/ 97670:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 52361:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 94616:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 75174:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 43604:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = ['BigInt64Array', 'BigUint64Array', 'Float32Array', 'Float64Array', 'Int16Array', 'Int32Array', 'Int8Array', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray'];
var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
  var out = [];

  for (var i = 0; i < possibleNames.length; i++) {
    if (typeof g[possibleNames[i]] === 'function') {
      out[out.length] = possibleNames[i];
    }
  }

  return out;
};

/***/ }),

/***/ 72681:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(57701);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
  try {
    $gOPD([], 'length');
  } catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
  }
}

module.exports = $gOPD;

/***/ }),

/***/ 33600:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}');

/***/ }),

/***/ 59323:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}');

/***/ }),

/***/ 29591:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}');

/***/ }),

/***/ 2586:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}');

/***/ }),

/***/ 1084:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"http://schema.org/":{"properties":{"additionalType":{"subPropertyOf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}}},"http://microformats.org/profile/hcard":{}}');

/***/ }),

/***/ 99653:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"@context":{"alternate":"http://www.w3.org/1999/xhtml/vocab#alternate","appendix":"http://www.w3.org/1999/xhtml/vocab#appendix","cite":"http://www.w3.org/1999/xhtml/vocab#cite","bookmark":"http://www.w3.org/1999/xhtml/vocab#bookmark","contents":"http://www.w3.org/1999/xhtml/vocab#contents","chapter":"http://www.w3.org/1999/xhtml/vocab#chapter","copyright":"http://www.w3.org/1999/xhtml/vocab#copyright","first":"http://www.w3.org/1999/xhtml/vocab#first","glossary":"http://www.w3.org/1999/xhtml/vocab#glossary","help":"http://www.w3.org/1999/xhtml/vocab#help","icon":"http://www.w3.org/1999/xhtml/vocab#icon","index":"http://www.w3.org/1999/xhtml/vocab#index","last":"http://www.w3.org/1999/xhtml/vocab#last","license":"http://www.w3.org/1999/xhtml/vocab#license","meta":"http://www.w3.org/1999/xhtml/vocab#meta","next":"http://www.w3.org/1999/xhtml/vocab#next","prev":"http://www.w3.org/1999/xhtml/vocab#prev","previous":"http://www.w3.org/1999/xhtml/vocab#previous","section":"http://www.w3.org/1999/xhtml/vocab#section","start":"http://www.w3.org/1999/xhtml/vocab#start","stylesheet":"http://www.w3.org/1999/xhtml/vocab#stylesheet","subsection":"http://www.w3.org/1999/xhtml/vocab#subsection","top":"http://www.w3.org/1999/xhtml/vocab#top","up":"http://www.w3.org/1999/xhtml/vocab#up","p3pv1":"http://www.w3.org/1999/xhtml/vocab#p3pv1"}}');

/***/ }),

/***/ 43104:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"@context":{"as":"https://www.w3.org/ns/activitystreams#","cat":"http://www.w3.org/ns/dcat#","cc":"http://creativecommons.org/ns#","cnt":"http://www.w3.org/2008/content#","csvw":"http://www.w3.org/ns/csvw#","ctag":"http://commontag.org/ns#","dc":"http://purl.org/dc/terms/","dc11":"http://purl.org/dc/elements/1.1/","dcat":"http://www.w3.org/ns/dcat#","dcterms":"http://purl.org/dc/terms/","dqv":"http://www.w3.org/ns/dqv#","duv":"https://www.w3.org/TR/vocab-duv#","earl":"http://www.w3.org/ns/earl#","foaf":"http://xmlns.com/foaf/0.1/","gldp":"http://www.w3.org/ns/people#","gr":"http://purl.org/goodrelations/v1#","grddl":"http://www.w3.org/2003/g/data-view#","ht":"http://www.w3.org/2006/http#","ical":"http://www.w3.org/2002/12/cal/icaltzd#","ldp":"http://www.w3.org/ns/ldp#","ma":"http://www.w3.org/ns/ma-ont#","oa":"http://www.w3.org/ns/oa#","odrl":"http://www.w3.org/ns/odrl/2/","og":"http://ogp.me/ns#","org":"http://www.w3.org/ns/org#","owl":"http://www.w3.org/2002/07/owl#","prov":"http://www.w3.org/ns/prov#","ptr":"http://www.w3.org/2009/pointers#","qb":"http://purl.org/linked-data/cube#","rev":"http://purl.org/stuff/rev#","rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","rdfa":"http://www.w3.org/ns/rdfa#","rdfs":"http://www.w3.org/2000/01/rdf-schema#","rif":"http://www.w3.org/2007/rif#","rr":"http://www.w3.org/ns/r2rml#","schema":"http://schema.org/","sd":"http://www.w3.org/ns/sparql-service-description#","sioc":"http://rdfs.org/sioc/ns#","skos":"http://www.w3.org/2004/02/skos/core#","skosxl":"http://www.w3.org/2008/05/skos-xl#","ssn":"http://www.w3.org/ns/ssn/","sosa":"http://www.w3.org/ns/sosa/","time":"http://www.w3.org/2006/time#","v":"http://rdf.data-vocabulary.org/#","vcard":"http://www.w3.org/2006/vcard/ns#","void":"http://rdfs.org/ns/void#","wdr":"http://www.w3.org/2007/05/powder#","wdrs":"http://www.w3.org/2007/05/powder-s#","xhv":"http://www.w3.org/1999/xhtml/vocab#","xml":"http://www.w3.org/XML/1998/namespace","xsd":"http://www.w3.org/2001/XMLSchema#","describedby":"http://www.w3.org/2007/05/powder-s#describedby","license":"http://www.w3.org/1999/xhtml/vocab#license","role":"http://www.w3.org/1999/xhtml/vocab#role"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__(47703);
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(93497);
/******/ 	schemarama = __webpack_exports__;
/******/ 	
/******/ })()
;